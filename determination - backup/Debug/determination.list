
determination.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015528  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  08015728  08015728  00025728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c70  08017c70  0003089c  2**0
                  CONTENTS
  4 .ARM          00000008  08017c70  08017c70  00027c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c78  08017c78  0003089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c78  08017c78  00027c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c7c  08017c7c  00027c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000089c  20000000  08017c80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  200008a0  0801851c  000308a0  2**3
                  ALLOC
 10 ._user_heap_stack 00002804  20000e64  0801851c  00030e64  2**0
                  ALLOC
 11 .ARM.attributes 00000032  00000000  00000000  0003089c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4fd  00000000  00000000  000308ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c14  00000000  00000000  0004ddcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  000519e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  00052e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cf73  00000000  00000000  00054128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011893  00000000  00000000  0008109b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010bd33  00000000  00000000  0009292e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00008cad  00000000  00000000  0019e661  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033e  00000000  00000000  001a730e  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000034  00000000  00000000  001a764c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000bab8  00000000  00000000  001a7680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200008a0 	.word	0x200008a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08015710 	.word	0x08015710

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200008a4 	.word	0x200008a4
 800023c:	08015710 	.word	0x08015710

08000240 <ai_inspector_default_config>:
 8000240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000244:	b084      	sub	sp, #16
 8000246:	2600      	movs	r6, #0
 8000248:	4669      	mov	r1, sp
 800024a:	2200      	movs	r2, #0
 800024c:	2300      	movs	r3, #0
 800024e:	2400      	movs	r4, #0
 8000250:	2500      	movs	r5, #0
 8000252:	f046 0601 	orr.w	r6, r6, #1
 8000256:	e881 003c 	stmia.w	r1, {r2, r3, r4, r5}
 800025a:	f88d 6000 	strb.w	r6, [sp]
 800025e:	e891 4380 	ldmia.w	r1, {r7, r8, r9, lr}
 8000262:	e880 4380 	stmia.w	r0, {r7, r8, r9, lr}
 8000266:	b004      	add	sp, #16
 8000268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800026c <ai_inspector_create>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	0004      	movs	r4, r0
 8000270:	b081      	sub	sp, #4
 8000272:	bf08      	it	eq
 8000274:	2000      	moveq	r0, #0
 8000276:	d026      	beq.n	80002c6 <ai_inspector_create+0x5a>
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <.text_6>)
 800027a:	2200      	movs	r2, #0
 800027c:	2300      	movs	r3, #0
 800027e:	2500      	movs	r5, #0
 8000280:	c02c      	stmia	r0!, {r2, r3, r5}
 8000282:	c02c      	stmia	r0!, {r2, r3, r5}
 8000284:	c02c      	stmia	r0!, {r2, r3, r5}
 8000286:	3824      	subs	r0, #36	; 0x24
 8000288:	2601      	movs	r6, #1
 800028a:	f100 0c18 	add.w	ip, r0, #24
 800028e:	f100 0218 	add.w	r2, r0, #24
 8000292:	7286      	strb	r6, [r0, #10]
 8000294:	8406      	strh	r6, [r0, #32]
 8000296:	f8c0 c018 	str.w	ip, [r0, #24]
 800029a:	61c2      	str	r2, [r0, #28]
 800029c:	b131      	cbz	r1, 80002ac <ai_inspector_create+0x40>
 800029e:	780a      	ldrb	r2, [r1, #0]
 80002a0:	784b      	ldrb	r3, [r1, #1]
 80002a2:	788d      	ldrb	r5, [r1, #2]
 80002a4:	684e      	ldr	r6, [r1, #4]
 80002a6:	688f      	ldr	r7, [r1, #8]
 80002a8:	68c9      	ldr	r1, [r1, #12]
 80002aa:	e002      	b.n	80002b2 <ai_inspector_create+0x46>
 80002ac:	2201      	movs	r2, #1
 80002ae:	2600      	movs	r6, #0
 80002b0:	2700      	movs	r7, #0
 80002b2:	7202      	strb	r2, [r0, #8]
 80002b4:	7243      	strb	r3, [r0, #9]
 80002b6:	7285      	strb	r5, [r0, #10]
 80002b8:	60c6      	str	r6, [r0, #12]
 80002ba:	6107      	str	r7, [r0, #16]
 80002bc:	6141      	str	r1, [r0, #20]
 80002be:	f000 fb85 	bl	80009cc <ai_platform_context_release>
 80002c2:	6020      	str	r0, [r4, #0]
 80002c4:	2001      	movs	r0, #1
 80002c6:	b001      	add	sp, #4
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002cc <.text_6>:
 80002cc:	200008bc 	.word	0x200008bc

080002d0 <ai_inspector_destroy>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f000 fb26 	bl	8000922 <ai_platform_context_acquire>
 80002d6:	0004      	movs	r4, r0
 80002d8:	d101      	bne.n	80002de <ai_inspector_destroy+0xe>
 80002da:	2000      	movs	r0, #0
 80002dc:	bd70      	pop	{r4, r5, r6, pc}
 80002de:	69a0      	ldr	r0, [r4, #24]
 80002e0:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
 80002e4:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80002e8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80002ea:	f104 0018 	add.w	r0, r4, #24
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f1a1 063c 	sub.w	r6, r1, #60	; 0x3c
 80002f4:	d015      	beq.n	8000322 <ai_inspector_destroy+0x52>
 80002f6:	6828      	ldr	r0, [r5, #0]
 80002f8:	f001 fd24 	bl	8001d44 <ai_network_inspect_destroy>
 80002fc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80002fe:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000300:	6048      	str	r0, [r1, #4]
 8000302:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000304:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000306:	6002      	str	r2, [r0, #0]
 8000308:	4628      	mov	r0, r5
 800030a:	f000 fff4 	bl	80012f6 <core_mem_free>
 800030e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8000310:	4635      	mov	r5, r6
 8000312:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8000316:	f104 0218 	add.w	r2, r4, #24
 800031a:	4290      	cmp	r0, r2
 800031c:	f1a1 063c 	sub.w	r6, r1, #60	; 0x3c
 8000320:	d1e9      	bne.n	80002f6 <ai_inspector_destroy+0x26>
 8000322:	2001      	movs	r0, #1
 8000324:	bd70      	pop	{r4, r5, r6, pc}

08000326 <ai_inspector_bind_network>:
 8000326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800032a:	460c      	mov	r4, r1
 800032c:	f000 faf9 	bl	8000922 <ai_platform_context_acquire>
 8000330:	0005      	movs	r5, r0
 8000332:	bf18      	it	ne
 8000334:	2c00      	cmpne	r4, #0
 8000336:	d033      	beq.n	80003a0 <ai_inspector_bind_network+0x7a>
 8000338:	6820      	ldr	r0, [r4, #0]
 800033a:	b388      	cbz	r0, 80003a0 <ai_inspector_bind_network+0x7a>
 800033c:	2044      	movs	r0, #68	; 0x44
 800033e:	f000 ffcd 	bl	80012dc <core_mem_alloc>
 8000342:	0006      	movs	r6, r0
 8000344:	d02c      	beq.n	80003a0 <ai_inspector_bind_network+0x7a>
 8000346:	8c28      	ldrh	r0, [r5, #32]
 8000348:	1c41      	adds	r1, r0, #1
 800034a:	8429      	strh	r1, [r5, #32]
 800034c:	f105 0118 	add.w	r1, r5, #24
 8000350:	8730      	strh	r0, [r6, #56]	; 0x38
 8000352:	e8b4 518d 	ldmia.w	r4!, {r0, r2, r3, r7, r8, ip, lr}
 8000356:	e8a6 518d 	stmia.w	r6!, {r0, r2, r3, r7, r8, ip, lr}
 800035a:	e8b4 518d 	ldmia.w	r4!, {r0, r2, r3, r7, r8, ip, lr}
 800035e:	e8a6 518d 	stmia.w	r6!, {r0, r2, r3, r7, r8, ip, lr}
 8000362:	3e38      	subs	r6, #56	; 0x38
 8000364:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 8000368:	6024      	str	r4, [r4, #0]
 800036a:	6434      	str	r4, [r6, #64]	; 0x40
 800036c:	69a8      	ldr	r0, [r5, #24]
 800036e:	6020      	str	r0, [r4, #0]
 8000370:	6061      	str	r1, [r4, #4]
 8000372:	f105 0108 	add.w	r1, r5, #8
 8000376:	6044      	str	r4, [r0, #4]
 8000378:	61ac      	str	r4, [r5, #24]
 800037a:	6830      	ldr	r0, [r6, #0]
 800037c:	f001 fc0a 	bl	8001b94 <ai_network_inspect_init>
 8000380:	b110      	cbz	r0, 8000388 <ai_inspector_bind_network+0x62>
 8000382:	8f30      	ldrh	r0, [r6, #56]	; 0x38
 8000384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000388:	6821      	ldr	r1, [r4, #0]
 800038a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800038c:	6048      	str	r0, [r1, #4]
 800038e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000390:	6822      	ldr	r2, [r4, #0]
 8000392:	4630      	mov	r0, r6
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	f000 ffae 	bl	80012f6 <core_mem_free>
 800039a:	8c28      	ldrh	r0, [r5, #32]
 800039c:	1e41      	subs	r1, r0, #1
 800039e:	8429      	strh	r1, [r5, #32]
 80003a0:	2000      	movs	r0, #0
 80003a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080003a6 <ai_inspector_unbind_network>:
 80003a6:	b570      	push	{r4, r5, r6, lr}
 80003a8:	460d      	mov	r5, r1
 80003aa:	f000 faba 	bl	8000922 <ai_platform_context_acquire>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	d03e      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003b2:	0029      	movs	r1, r5
 80003b4:	d03c      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003b6:	f850 1f18 	ldr.w	r1, [r0, #24]!
 80003ba:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 80003be:	e002      	b.n	80003c6 <ai_inspector_unbind_network+0x20>
 80003c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80003c2:	f1a2 043c 	sub.w	r4, r2, #60	; 0x3c
 80003c6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80003ca:	4281      	cmp	r1, r0
 80003cc:	d030      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003ce:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80003d0:	42aa      	cmp	r2, r5
 80003d2:	d01d      	beq.n	8000410 <ai_inspector_unbind_network+0x6a>
 80003d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003d6:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 80003da:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80003de:	4286      	cmp	r6, r0
 80003e0:	d026      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003e2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80003e4:	42aa      	cmp	r2, r5
 80003e6:	d013      	beq.n	8000410 <ai_inspector_unbind_network+0x6a>
 80003e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003ea:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 80003ee:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80003f2:	4286      	cmp	r6, r0
 80003f4:	d01c      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003f6:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80003f8:	42aa      	cmp	r2, r5
 80003fa:	d009      	beq.n	8000410 <ai_inspector_unbind_network+0x6a>
 80003fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003fe:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 8000402:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8000406:	4286      	cmp	r6, r0
 8000408:	d012      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 800040a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800040c:	42aa      	cmp	r2, r5
 800040e:	d1d7      	bne.n	80003c0 <ai_inspector_unbind_network+0x1a>
 8000410:	b174      	cbz	r4, 8000430 <ai_inspector_unbind_network+0x8a>
 8000412:	6820      	ldr	r0, [r4, #0]
 8000414:	f001 fc96 	bl	8001d44 <ai_network_inspect_destroy>
 8000418:	b158      	cbz	r0, 8000432 <ai_inspector_unbind_network+0x8c>
 800041a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800041c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800041e:	6048      	str	r0, [r1, #4]
 8000420:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000422:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000424:	6002      	str	r2, [r0, #0]
 8000426:	4620      	mov	r0, r4
 8000428:	f000 ff65 	bl	80012f6 <core_mem_free>
 800042c:	2001      	movs	r0, #1
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	2000      	movs	r0, #0
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <ai_inspector_get_report>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	b081      	sub	sp, #4
 8000438:	460d      	mov	r5, r1
 800043a:	4614      	mov	r4, r2
 800043c:	f000 fa71 	bl	8000922 <ai_platform_context_acquire>
 8000440:	2800      	cmp	r0, #0
 8000442:	bf18      	it	ne
 8000444:	2c00      	cmpne	r4, #0
 8000446:	d031      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000448:	f100 0118 	add.w	r1, r0, #24
 800044c:	6808      	ldr	r0, [r1, #0]
 800044e:	383c      	subs	r0, #60	; 0x3c
 8000450:	e002      	b.n	8000458 <ai_inspector_get_report+0x24>
 8000452:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000454:	f1a2 003c 	sub.w	r0, r2, #60	; 0x3c
 8000458:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800045c:	428b      	cmp	r3, r1
 800045e:	d025      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000460:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000462:	42aa      	cmp	r2, r5
 8000464:	d01a      	beq.n	800049c <ai_inspector_get_report+0x68>
 8000466:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000468:	383c      	subs	r0, #60	; 0x3c
 800046a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800046e:	428b      	cmp	r3, r1
 8000470:	d01c      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000472:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000474:	42aa      	cmp	r2, r5
 8000476:	d011      	beq.n	800049c <ai_inspector_get_report+0x68>
 8000478:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800047a:	383c      	subs	r0, #60	; 0x3c
 800047c:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8000480:	428b      	cmp	r3, r1
 8000482:	d013      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000484:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000486:	42aa      	cmp	r2, r5
 8000488:	d008      	beq.n	800049c <ai_inspector_get_report+0x68>
 800048a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800048c:	383c      	subs	r0, #60	; 0x3c
 800048e:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8000492:	428b      	cmp	r3, r1
 8000494:	d00a      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000496:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000498:	42aa      	cmp	r2, r5
 800049a:	d1da      	bne.n	8000452 <ai_inspector_get_report+0x1e>
 800049c:	b130      	cbz	r0, 80004ac <ai_inspector_get_report+0x78>
 800049e:	6800      	ldr	r0, [r0, #0]
 80004a0:	4621      	mov	r1, r4
 80004a2:	b001      	add	sp, #4
 80004a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80004a8:	f001 bc34 	b.w	8001d14 <ai_network_inspect_get_report>
 80004ac:	2000      	movs	r0, #0
 80004ae:	b001      	add	sp, #4
 80004b0:	bd30      	pop	{r4, r5, pc}

080004b2 <ai_inspector_run>:
 80004b2:	b570      	push	{r4, r5, r6, lr}
 80004b4:	460e      	mov	r6, r1
 80004b6:	4614      	mov	r4, r2
 80004b8:	461d      	mov	r5, r3
 80004ba:	f000 fa32 	bl	8000922 <ai_platform_context_acquire>
 80004be:	2800      	cmp	r0, #0
 80004c0:	bf18      	it	ne
 80004c2:	2c00      	cmpne	r4, #0
 80004c4:	d031      	beq.n	800052a <ai_inspector_run+0x78>
 80004c6:	f100 0118 	add.w	r1, r0, #24
 80004ca:	6808      	ldr	r0, [r1, #0]
 80004cc:	383c      	subs	r0, #60	; 0x3c
 80004ce:	e002      	b.n	80004d6 <ai_inspector_run+0x24>
 80004d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80004d2:	f1a2 003c 	sub.w	r0, r2, #60	; 0x3c
 80004d6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80004da:	428b      	cmp	r3, r1
 80004dc:	d025      	beq.n	800052a <ai_inspector_run+0x78>
 80004de:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80004e0:	42b2      	cmp	r2, r6
 80004e2:	d01a      	beq.n	800051a <ai_inspector_run+0x68>
 80004e4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80004e6:	383c      	subs	r0, #60	; 0x3c
 80004e8:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d01c      	beq.n	800052a <ai_inspector_run+0x78>
 80004f0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80004f2:	42b2      	cmp	r2, r6
 80004f4:	d011      	beq.n	800051a <ai_inspector_run+0x68>
 80004f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80004f8:	383c      	subs	r0, #60	; 0x3c
 80004fa:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80004fe:	428b      	cmp	r3, r1
 8000500:	d013      	beq.n	800052a <ai_inspector_run+0x78>
 8000502:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000504:	42b2      	cmp	r2, r6
 8000506:	d008      	beq.n	800051a <ai_inspector_run+0x68>
 8000508:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800050a:	383c      	subs	r0, #60	; 0x3c
 800050c:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8000510:	428b      	cmp	r3, r1
 8000512:	d00a      	beq.n	800052a <ai_inspector_run+0x78>
 8000514:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000516:	42b2      	cmp	r2, r6
 8000518:	d1da      	bne.n	80004d0 <ai_inspector_run+0x1e>
 800051a:	b130      	cbz	r0, 800052a <ai_inspector_run+0x78>
 800051c:	462a      	mov	r2, r5
 800051e:	4621      	mov	r1, r4
 8000520:	6800      	ldr	r0, [r0, #0]
 8000522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000526:	f000 bc95 	b.w	8000e54 <ai_platform_network_process>
 800052a:	2000      	movs	r0, #0
 800052c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000530 <CRC_Lock>:
 8000530:	f8df 0904 	ldr.w	r0, [pc, #2308]	; 8000e38 <.text_19>
 8000534:	f240 4249 	movw	r2, #1097	; 0x449
 8000538:	6801      	ldr	r1, [r0, #0]
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	0049      	lsls	r1, r1, #1
 800053e:	6001      	str	r1, [r0, #0]
 8000540:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8000e3c <.text_20>
 8000544:	6801      	ldr	r1, [r0, #0]
 8000546:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800054a:	4291      	cmp	r1, r2
 800054c:	d115      	bne.n	800057a <CRC_Lock+0x4a>
 800054e:	2001      	movs	r0, #1
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	4310      	orrs	r0, r2
 8000556:	4308      	orrs	r0, r1
 8000558:	d01d      	beq.n	8000596 <CRC_Lock+0x66>
 800055a:	f8df 18e4 	ldr.w	r1, [pc, #2276]	; 8000e40 <.text_21>
 800055e:	2201      	movs	r2, #1
 8000560:	608a      	str	r2, [r1, #8]
 8000562:	6888      	ldr	r0, [r1, #8]
 8000564:	2800      	cmp	r0, #0
 8000566:	d1fc      	bne.n	8000562 <CRC_Lock+0x32>
 8000568:	f8df 28d8 	ldr.w	r2, [pc, #2264]	; 8000e44 <.text_22>
 800056c:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 8000e48 <.text_23>
 8000570:	600a      	str	r2, [r1, #0]
 8000572:	6809      	ldr	r1, [r1, #0]
 8000574:	4299      	cmp	r1, r3
 8000576:	d026      	beq.n	80005c6 <CRC_Lock+0x96>
 8000578:	e7fe      	b.n	8000578 <CRC_Lock+0x48>
 800057a:	2000      	movs	r0, #0
 800057c:	f240 4c51 	movw	ip, #1105	; 0x451
 8000580:	4561      	cmp	r1, ip
 8000582:	bf08      	it	eq
 8000584:	2201      	moveq	r2, #1
 8000586:	d0e4      	beq.n	8000552 <CRC_Lock+0x22>
 8000588:	2200      	movs	r2, #0
 800058a:	f240 4352 	movw	r3, #1106	; 0x452
 800058e:	4299      	cmp	r1, r3
 8000590:	d1df      	bne.n	8000552 <CRC_Lock+0x22>
 8000592:	2101      	movs	r1, #1
 8000594:	e7de      	b.n	8000554 <CRC_Lock+0x24>
 8000596:	f8df 08b4 	ldr.w	r0, [pc, #2228]	; 8000e4c <.text_24>
 800059a:	6801      	ldr	r1, [r0, #0]
 800059c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005a0:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80005a4:	d10f      	bne.n	80005c6 <CRC_Lock+0x96>
 80005a6:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8000e50 <.text_25>
 80005aa:	2201      	movs	r2, #1
 80005ac:	608a      	str	r2, [r1, #8]
 80005ae:	6888      	ldr	r0, [r1, #8]
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d1fc      	bne.n	80005ae <CRC_Lock+0x7e>
 80005b4:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000e44 <.text_22>
 80005b8:	f8df 388c 	ldr.w	r3, [pc, #2188]	; 8000e48 <.text_23>
 80005bc:	600a      	str	r2, [r1, #0]
 80005be:	6809      	ldr	r1, [r1, #0]
 80005c0:	4299      	cmp	r1, r3
 80005c2:	d000      	beq.n	80005c6 <CRC_Lock+0x96>
 80005c4:	e7fe      	b.n	80005c4 <CRC_Lock+0x94>
 80005c6:	4770      	bx	lr

080005c8 <_ai_platform_get_io_buffers_info>:
 80005c8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005cc:	2500      	movs	r5, #0
 80005ce:	46aa      	mov	sl, r5
 80005d0:	b082      	sub	sp, #8
 80005d2:	4607      	mov	r7, r0
 80005d4:	46ab      	mov	fp, r5
 80005d6:	46d0      	mov	r8, sl
 80005d8:	46d1      	mov	r9, sl
 80005da:	e028      	b.n	800062e <_ai_platform_get_io_buffers_info+0x66>
 80005dc:	2000      	movs	r0, #0
 80005de:	e01c      	b.n	800061a <_ai_platform_get_io_buffers_info+0x52>
 80005e0:	f850 400a 	ldr.w	r4, [r0, sl]
 80005e4:	b364      	cbz	r4, 8000640 <_ai_platform_get_io_buffers_info+0x78>
 80005e6:	68b8      	ldr	r0, [r7, #8]
 80005e8:	6882      	ldr	r2, [r0, #8]
 80005ea:	4442      	add	r2, r8
 80005ec:	6841      	ldr	r1, [r0, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	69a3      	ldr	r3, [r4, #24]
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	eb01 0609 	add.w	r6, r1, r9
 80005f8:	f006 f8d2 	bl	80067a0 <ai_array_to_buffer_fmt>
 80005fc:	2101      	movs	r1, #1
 80005fe:	6030      	str	r0, [r6, #0]
 8000600:	80b1      	strh	r1, [r6, #4]
 8000602:	68e0      	ldr	r0, [r4, #12]
 8000604:	68c2      	ldr	r2, [r0, #12]
 8000606:	80f2      	strh	r2, [r6, #6]
 8000608:	6881      	ldr	r1, [r0, #8]
 800060a:	8131      	strh	r1, [r6, #8]
 800060c:	6840      	ldr	r0, [r0, #4]
 800060e:	60f0      	str	r0, [r6, #12]
 8000610:	69a1      	ldr	r1, [r4, #24]
 8000612:	688a      	ldr	r2, [r1, #8]
 8000614:	6132      	str	r2, [r6, #16]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	b9e0      	cbnz	r0, 8000654 <_ai_platform_get_io_buffers_info+0x8c>
 800061a:	6170      	str	r0, [r6, #20]
 800061c:	1c6d      	adds	r5, r5, #1
 800061e:	f10b 0b01 	add.w	fp, fp, #1
 8000622:	f109 0918 	add.w	r9, r9, #24
 8000626:	f108 0808 	add.w	r8, r8, #8
 800062a:	f10a 0a04 	add.w	sl, sl, #4
 800062e:	2f00      	cmp	r7, #0
 8000630:	bf14      	ite	ne
 8000632:	8838      	ldrhne	r0, [r7, #0]
 8000634:	2000      	moveq	r0, #0
 8000636:	4583      	cmp	fp, r0
 8000638:	d202      	bcs.n	8000640 <_ai_platform_get_io_buffers_info+0x78>
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	2800      	cmp	r0, #0
 800063e:	d1cf      	bne.n	80005e0 <_ai_platform_get_io_buffers_info+0x18>
 8000640:	b2a8      	uxth	r0, r5
 8000642:	b118      	cbz	r0, 800064c <_ai_platform_get_io_buffers_info+0x84>
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	9802      	ldr	r0, [sp, #8]
 8000648:	684a      	ldr	r2, [r1, #4]
 800064a:	6002      	str	r2, [r0, #0]
 800064c:	b2a8      	uxth	r0, r5
 800064e:	b003      	add	sp, #12
 8000650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000654:	9900      	ldr	r1, [sp, #0]
 8000656:	2000      	movs	r0, #0
 8000658:	6008      	str	r0, [r1, #0]
 800065a:	9a00      	ldr	r2, [sp, #0]
 800065c:	6820      	ldr	r0, [r4, #0]
 800065e:	2800      	cmp	r0, #0
 8000660:	6050      	str	r0, [r2, #4]
 8000662:	bf1c      	itt	ne
 8000664:	8840      	ldrhne	r0, [r0, #2]
 8000666:	2800      	cmpne	r0, #0
 8000668:	d0b8      	beq.n	80005dc <_ai_platform_get_io_buffers_info+0x14>
 800066a:	9a00      	ldr	r2, [sp, #0]
 800066c:	2101      	movs	r1, #1
 800066e:	6011      	str	r1, [r2, #0]
 8000670:	9800      	ldr	r0, [sp, #0]
 8000672:	e7d2      	b.n	800061a <_ai_platform_get_io_buffers_info+0x52>

08000674 <_platform_network_state_setup>:
 8000674:	b470      	push	{r4, r5, r6}
 8000676:	68d3      	ldr	r3, [r2, #12]
 8000678:	6955      	ldr	r5, [r2, #20]
 800067a:	68dc      	ldr	r4, [r3, #12]
 800067c:	68eb      	ldr	r3, [r5, #12]
 800067e:	435c      	muls	r4, r3
 8000680:	6084      	str	r4, [r0, #8]
 8000682:	888e      	ldrh	r6, [r1, #4]
 8000684:	4374      	muls	r4, r6
 8000686:	60c4      	str	r4, [r0, #12]
 8000688:	6909      	ldr	r1, [r1, #16]
 800068a:	68c3      	ldr	r3, [r0, #12]
 800068c:	6041      	str	r1, [r0, #4]
 800068e:	4419      	add	r1, r3
 8000690:	6001      	str	r1, [r0, #0]
 8000692:	6992      	ldr	r2, [r2, #24]
 8000694:	6814      	ldr	r4, [r2, #0]
 8000696:	00a5      	lsls	r5, r4, #2
 8000698:	d407      	bmi.n	80006aa <_platform_network_state_setup+0x36>
 800069a:	6894      	ldr	r4, [r2, #8]
 800069c:	68d1      	ldr	r1, [r2, #12]
 800069e:	6843      	ldr	r3, [r0, #4]
 80006a0:	1a64      	subs	r4, r4, r1
 80006a2:	1919      	adds	r1, r3, r4
 80006a4:	6091      	str	r1, [r2, #8]
 80006a6:	6840      	ldr	r0, [r0, #4]
 80006a8:	60d0      	str	r0, [r2, #12]
 80006aa:	bc70      	pop	{r4, r5, r6}
 80006ac:	4770      	bx	lr

080006ae <ai_platform_runtime_get_revision>:
 80006ae:	f8df 0788 	ldr.w	r0, [pc, #1928]	; 8000e38 <.text_19>
 80006b2:	f240 4249 	movw	r2, #1097	; 0x449
 80006b6:	6801      	ldr	r1, [r0, #0]
 80006b8:	0849      	lsrs	r1, r1, #1
 80006ba:	0049      	lsls	r1, r1, #1
 80006bc:	6001      	str	r1, [r0, #0]
 80006be:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000e3c <.text_20>
 80006c2:	6801      	ldr	r1, [r0, #0]
 80006c4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80006c8:	4291      	cmp	r1, r2
 80006ca:	d115      	bne.n	80006f8 <ai_platform_runtime_get_revision+0x4a>
 80006cc:	2001      	movs	r0, #1
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	4310      	orrs	r0, r2
 80006d4:	4308      	orrs	r0, r1
 80006d6:	d01d      	beq.n	8000714 <ai_platform_runtime_get_revision+0x66>
 80006d8:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000e40 <.text_21>
 80006dc:	2201      	movs	r2, #1
 80006de:	608a      	str	r2, [r1, #8]
 80006e0:	6888      	ldr	r0, [r1, #8]
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d1fc      	bne.n	80006e0 <ai_platform_runtime_get_revision+0x32>
 80006e6:	f8df 275c 	ldr.w	r2, [pc, #1884]	; 8000e44 <.text_22>
 80006ea:	f8df 375c 	ldr.w	r3, [pc, #1884]	; 8000e48 <.text_23>
 80006ee:	600a      	str	r2, [r1, #0]
 80006f0:	6809      	ldr	r1, [r1, #0]
 80006f2:	4299      	cmp	r1, r3
 80006f4:	d026      	beq.n	8000744 <ai_platform_runtime_get_revision+0x96>
 80006f6:	e7fe      	b.n	80006f6 <ai_platform_runtime_get_revision+0x48>
 80006f8:	2000      	movs	r0, #0
 80006fa:	f240 4c51 	movw	ip, #1105	; 0x451
 80006fe:	4561      	cmp	r1, ip
 8000700:	bf08      	it	eq
 8000702:	2201      	moveq	r2, #1
 8000704:	d0e4      	beq.n	80006d0 <ai_platform_runtime_get_revision+0x22>
 8000706:	2200      	movs	r2, #0
 8000708:	f240 4352 	movw	r3, #1106	; 0x452
 800070c:	4299      	cmp	r1, r3
 800070e:	d1df      	bne.n	80006d0 <ai_platform_runtime_get_revision+0x22>
 8000710:	2101      	movs	r1, #1
 8000712:	e7de      	b.n	80006d2 <ai_platform_runtime_get_revision+0x24>
 8000714:	f8df 0734 	ldr.w	r0, [pc, #1844]	; 8000e4c <.text_24>
 8000718:	6801      	ldr	r1, [r0, #0]
 800071a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800071e:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000722:	d10f      	bne.n	8000744 <ai_platform_runtime_get_revision+0x96>
 8000724:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 8000e50 <.text_25>
 8000728:	2201      	movs	r2, #1
 800072a:	608a      	str	r2, [r1, #8]
 800072c:	6888      	ldr	r0, [r1, #8]
 800072e:	2800      	cmp	r0, #0
 8000730:	d1fc      	bne.n	800072c <ai_platform_runtime_get_revision+0x7e>
 8000732:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000e44 <.text_22>
 8000736:	f8df 3710 	ldr.w	r3, [pc, #1808]	; 8000e48 <.text_23>
 800073a:	600a      	str	r2, [r1, #0]
 800073c:	6809      	ldr	r1, [r1, #0]
 800073e:	4299      	cmp	r1, r3
 8000740:	d000      	beq.n	8000744 <ai_platform_runtime_get_revision+0x96>
 8000742:	e7fe      	b.n	8000742 <ai_platform_runtime_get_revision+0x94>
 8000744:	a0a3      	add	r0, pc, #652	; (adr r0, 80009d4 <.text_11>)
 8000746:	4770      	bx	lr

08000748 <ai_platform_runtime_get_version>:
 8000748:	f8df 06ec 	ldr.w	r0, [pc, #1772]	; 8000e38 <.text_19>
 800074c:	f240 4249 	movw	r2, #1097	; 0x449
 8000750:	6801      	ldr	r1, [r0, #0]
 8000752:	0849      	lsrs	r1, r1, #1
 8000754:	0049      	lsls	r1, r1, #1
 8000756:	6001      	str	r1, [r0, #0]
 8000758:	f8df 06e0 	ldr.w	r0, [pc, #1760]	; 8000e3c <.text_20>
 800075c:	6801      	ldr	r1, [r0, #0]
 800075e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000762:	4291      	cmp	r1, r2
 8000764:	d115      	bne.n	8000792 <ai_platform_runtime_get_version+0x4a>
 8000766:	2001      	movs	r0, #1
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	4310      	orrs	r0, r2
 800076e:	4308      	orrs	r0, r1
 8000770:	d01d      	beq.n	80007ae <ai_platform_runtime_get_version+0x66>
 8000772:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000e40 <.text_21>
 8000776:	2201      	movs	r2, #1
 8000778:	608a      	str	r2, [r1, #8]
 800077a:	6888      	ldr	r0, [r1, #8]
 800077c:	2800      	cmp	r0, #0
 800077e:	d1fc      	bne.n	800077a <ai_platform_runtime_get_version+0x32>
 8000780:	f8df 26c0 	ldr.w	r2, [pc, #1728]	; 8000e44 <.text_22>
 8000784:	f8df 36c0 	ldr.w	r3, [pc, #1728]	; 8000e48 <.text_23>
 8000788:	600a      	str	r2, [r1, #0]
 800078a:	6809      	ldr	r1, [r1, #0]
 800078c:	4299      	cmp	r1, r3
 800078e:	d026      	beq.n	80007de <ai_platform_runtime_get_version+0x96>
 8000790:	e7fe      	b.n	8000790 <ai_platform_runtime_get_version+0x48>
 8000792:	2000      	movs	r0, #0
 8000794:	f240 4c51 	movw	ip, #1105	; 0x451
 8000798:	4561      	cmp	r1, ip
 800079a:	bf08      	it	eq
 800079c:	2201      	moveq	r2, #1
 800079e:	d0e4      	beq.n	800076a <ai_platform_runtime_get_version+0x22>
 80007a0:	2200      	movs	r2, #0
 80007a2:	f240 4352 	movw	r3, #1106	; 0x452
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d1df      	bne.n	800076a <ai_platform_runtime_get_version+0x22>
 80007aa:	2101      	movs	r1, #1
 80007ac:	e7de      	b.n	800076c <ai_platform_runtime_get_version+0x24>
 80007ae:	f8df 069c 	ldr.w	r0, [pc, #1692]	; 8000e4c <.text_24>
 80007b2:	6801      	ldr	r1, [r0, #0]
 80007b4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007b8:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80007bc:	d10f      	bne.n	80007de <ai_platform_runtime_get_version+0x96>
 80007be:	f8df 1690 	ldr.w	r1, [pc, #1680]	; 8000e50 <.text_25>
 80007c2:	2201      	movs	r2, #1
 80007c4:	608a      	str	r2, [r1, #8]
 80007c6:	6888      	ldr	r0, [r1, #8]
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d1fc      	bne.n	80007c6 <ai_platform_runtime_get_version+0x7e>
 80007cc:	f8df 2674 	ldr.w	r2, [pc, #1652]	; 8000e44 <.text_22>
 80007d0:	f8df 3674 	ldr.w	r3, [pc, #1652]	; 8000e48 <.text_23>
 80007d4:	600a      	str	r2, [r1, #0]
 80007d6:	6809      	ldr	r1, [r1, #0]
 80007d8:	4299      	cmp	r1, r3
 80007da:	d000      	beq.n	80007de <ai_platform_runtime_get_version+0x96>
 80007dc:	e7fe      	b.n	80007dc <ai_platform_runtime_get_version+0x94>
 80007de:	f60f 20b0 	addw	r0, pc, #2736	; 0xab0
 80007e2:	6800      	ldr	r0, [r0, #0]
 80007e4:	4770      	bx	lr

080007e6 <ai_platform_api_get_version>:
 80007e6:	f8df 0650 	ldr.w	r0, [pc, #1616]	; 8000e38 <.text_19>
 80007ea:	f240 4249 	movw	r2, #1097	; 0x449
 80007ee:	6801      	ldr	r1, [r0, #0]
 80007f0:	0849      	lsrs	r1, r1, #1
 80007f2:	0049      	lsls	r1, r1, #1
 80007f4:	6001      	str	r1, [r0, #0]
 80007f6:	f8df 0644 	ldr.w	r0, [pc, #1604]	; 8000e3c <.text_20>
 80007fa:	6801      	ldr	r1, [r0, #0]
 80007fc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000800:	4291      	cmp	r1, r2
 8000802:	d115      	bne.n	8000830 <ai_platform_api_get_version+0x4a>
 8000804:	2001      	movs	r0, #1
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	4310      	orrs	r0, r2
 800080c:	4308      	orrs	r0, r1
 800080e:	d01d      	beq.n	800084c <ai_platform_api_get_version+0x66>
 8000810:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000e40 <.text_21>
 8000814:	2201      	movs	r2, #1
 8000816:	608a      	str	r2, [r1, #8]
 8000818:	6888      	ldr	r0, [r1, #8]
 800081a:	2800      	cmp	r0, #0
 800081c:	d1fc      	bne.n	8000818 <ai_platform_api_get_version+0x32>
 800081e:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 8000e44 <.text_22>
 8000822:	f8df 3624 	ldr.w	r3, [pc, #1572]	; 8000e48 <.text_23>
 8000826:	600a      	str	r2, [r1, #0]
 8000828:	6809      	ldr	r1, [r1, #0]
 800082a:	4299      	cmp	r1, r3
 800082c:	d026      	beq.n	800087c <ai_platform_api_get_version+0x96>
 800082e:	e7fe      	b.n	800082e <ai_platform_api_get_version+0x48>
 8000830:	2000      	movs	r0, #0
 8000832:	f240 4c51 	movw	ip, #1105	; 0x451
 8000836:	4561      	cmp	r1, ip
 8000838:	bf08      	it	eq
 800083a:	2201      	moveq	r2, #1
 800083c:	d0e4      	beq.n	8000808 <ai_platform_api_get_version+0x22>
 800083e:	2200      	movs	r2, #0
 8000840:	f240 4352 	movw	r3, #1106	; 0x452
 8000844:	4299      	cmp	r1, r3
 8000846:	d1df      	bne.n	8000808 <ai_platform_api_get_version+0x22>
 8000848:	2101      	movs	r1, #1
 800084a:	e7de      	b.n	800080a <ai_platform_api_get_version+0x24>
 800084c:	f8df 05fc 	ldr.w	r0, [pc, #1532]	; 8000e4c <.text_24>
 8000850:	6801      	ldr	r1, [r0, #0]
 8000852:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000856:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800085a:	d10f      	bne.n	800087c <ai_platform_api_get_version+0x96>
 800085c:	f8df 15f0 	ldr.w	r1, [pc, #1520]	; 8000e50 <.text_25>
 8000860:	2201      	movs	r2, #1
 8000862:	608a      	str	r2, [r1, #8]
 8000864:	6888      	ldr	r0, [r1, #8]
 8000866:	2800      	cmp	r0, #0
 8000868:	d1fc      	bne.n	8000864 <ai_platform_api_get_version+0x7e>
 800086a:	f8df 25d8 	ldr.w	r2, [pc, #1496]	; 8000e44 <.text_22>
 800086e:	f8df 35d8 	ldr.w	r3, [pc, #1496]	; 8000e48 <.text_23>
 8000872:	600a      	str	r2, [r1, #0]
 8000874:	6809      	ldr	r1, [r1, #0]
 8000876:	4299      	cmp	r1, r3
 8000878:	d000      	beq.n	800087c <ai_platform_api_get_version+0x96>
 800087a:	e7fe      	b.n	800087a <ai_platform_api_get_version+0x94>
 800087c:	f60f 2014 	addw	r0, pc, #2580	; 0xa14
 8000880:	6800      	ldr	r0, [r0, #0]
 8000882:	4770      	bx	lr

08000884 <ai_platform_interface_api_get_version>:
 8000884:	f8df 05b0 	ldr.w	r0, [pc, #1456]	; 8000e38 <.text_19>
 8000888:	f240 4249 	movw	r2, #1097	; 0x449
 800088c:	6801      	ldr	r1, [r0, #0]
 800088e:	0849      	lsrs	r1, r1, #1
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	6001      	str	r1, [r0, #0]
 8000894:	f8df 05a4 	ldr.w	r0, [pc, #1444]	; 8000e3c <.text_20>
 8000898:	6801      	ldr	r1, [r0, #0]
 800089a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800089e:	4291      	cmp	r1, r2
 80008a0:	d115      	bne.n	80008ce <ai_platform_interface_api_get_version+0x4a>
 80008a2:	2001      	movs	r0, #1
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	4310      	orrs	r0, r2
 80008aa:	4308      	orrs	r0, r1
 80008ac:	d01d      	beq.n	80008ea <ai_platform_interface_api_get_version+0x66>
 80008ae:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000e40 <.text_21>
 80008b2:	2201      	movs	r2, #1
 80008b4:	608a      	str	r2, [r1, #8]
 80008b6:	6888      	ldr	r0, [r1, #8]
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d1fc      	bne.n	80008b6 <ai_platform_interface_api_get_version+0x32>
 80008bc:	f8df 2584 	ldr.w	r2, [pc, #1412]	; 8000e44 <.text_22>
 80008c0:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 8000e48 <.text_23>
 80008c4:	600a      	str	r2, [r1, #0]
 80008c6:	6809      	ldr	r1, [r1, #0]
 80008c8:	4299      	cmp	r1, r3
 80008ca:	d026      	beq.n	800091a <ai_platform_interface_api_get_version+0x96>
 80008cc:	e7fe      	b.n	80008cc <ai_platform_interface_api_get_version+0x48>
 80008ce:	2000      	movs	r0, #0
 80008d0:	f240 4c51 	movw	ip, #1105	; 0x451
 80008d4:	4561      	cmp	r1, ip
 80008d6:	bf08      	it	eq
 80008d8:	2201      	moveq	r2, #1
 80008da:	d0e4      	beq.n	80008a6 <ai_platform_interface_api_get_version+0x22>
 80008dc:	2200      	movs	r2, #0
 80008de:	f240 4352 	movw	r3, #1106	; 0x452
 80008e2:	4299      	cmp	r1, r3
 80008e4:	d1df      	bne.n	80008a6 <ai_platform_interface_api_get_version+0x22>
 80008e6:	2101      	movs	r1, #1
 80008e8:	e7de      	b.n	80008a8 <ai_platform_interface_api_get_version+0x24>
 80008ea:	f8df 0560 	ldr.w	r0, [pc, #1376]	; 8000e4c <.text_24>
 80008ee:	6801      	ldr	r1, [r0, #0]
 80008f0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80008f4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80008f8:	d10f      	bne.n	800091a <ai_platform_interface_api_get_version+0x96>
 80008fa:	f8df 1554 	ldr.w	r1, [pc, #1364]	; 8000e50 <.text_25>
 80008fe:	2201      	movs	r2, #1
 8000900:	608a      	str	r2, [r1, #8]
 8000902:	6888      	ldr	r0, [r1, #8]
 8000904:	2800      	cmp	r0, #0
 8000906:	d1fc      	bne.n	8000902 <ai_platform_interface_api_get_version+0x7e>
 8000908:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 8000e44 <.text_22>
 800090c:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000e48 <.text_23>
 8000910:	600a      	str	r2, [r1, #0]
 8000912:	6809      	ldr	r1, [r1, #0]
 8000914:	4299      	cmp	r1, r3
 8000916:	d000      	beq.n	800091a <ai_platform_interface_api_get_version+0x96>
 8000918:	e7fe      	b.n	8000918 <ai_platform_interface_api_get_version+0x94>
 800091a:	f60f 107c 	addw	r0, pc, #2428	; 0x97c
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	4770      	bx	lr

08000922 <ai_platform_context_acquire>:
 8000922:	b430      	push	{r4, r5}
 8000924:	b120      	cbz	r0, 8000930 <ai_platform_context_acquire+0xe>
 8000926:	6801      	ldr	r1, [r0, #0]
 8000928:	f8df 2940 	ldr.w	r2, [pc, #2368]	; 800126c <.text_27>
 800092c:	4291      	cmp	r1, r2
 800092e:	d000      	beq.n	8000932 <ai_platform_context_acquire+0x10>
 8000930:	2000      	movs	r0, #0
 8000932:	f8df 1504 	ldr.w	r1, [pc, #1284]	; 8000e38 <.text_19>
 8000936:	f240 4449 	movw	r4, #1097	; 0x449
 800093a:	680b      	ldr	r3, [r1, #0]
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	600b      	str	r3, [r1, #0]
 8000942:	f8df 14f8 	ldr.w	r1, [pc, #1272]	; 8000e3c <.text_20>
 8000946:	680a      	ldr	r2, [r1, #0]
 8000948:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800094c:	42a2      	cmp	r2, r4
 800094e:	d115      	bne.n	800097c <ai_platform_context_acquire+0x5a>
 8000950:	2101      	movs	r1, #1
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	4319      	orrs	r1, r3
 8000958:	4311      	orrs	r1, r2
 800095a:	d01d      	beq.n	8000998 <ai_platform_context_acquire+0x76>
 800095c:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000e40 <.text_21>
 8000960:	2301      	movs	r3, #1
 8000962:	6093      	str	r3, [r2, #8]
 8000964:	6891      	ldr	r1, [r2, #8]
 8000966:	2900      	cmp	r1, #0
 8000968:	d1fc      	bne.n	8000964 <ai_platform_context_acquire+0x42>
 800096a:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 8000e44 <.text_22>
 800096e:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 8000e48 <.text_23>
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	42a2      	cmp	r2, r4
 8000978:	d026      	beq.n	80009c8 <ai_platform_context_acquire+0xa6>
 800097a:	e7fe      	b.n	800097a <ai_platform_context_acquire+0x58>
 800097c:	2100      	movs	r1, #0
 800097e:	f240 4551 	movw	r5, #1105	; 0x451
 8000982:	42aa      	cmp	r2, r5
 8000984:	bf08      	it	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	d0e4      	beq.n	8000954 <ai_platform_context_acquire+0x32>
 800098a:	2300      	movs	r3, #0
 800098c:	f240 4452 	movw	r4, #1106	; 0x452
 8000990:	42a2      	cmp	r2, r4
 8000992:	d1df      	bne.n	8000954 <ai_platform_context_acquire+0x32>
 8000994:	2201      	movs	r2, #1
 8000996:	e7de      	b.n	8000956 <ai_platform_context_acquire+0x34>
 8000998:	f8df 14b0 	ldr.w	r1, [pc, #1200]	; 8000e4c <.text_24>
 800099c:	680a      	ldr	r2, [r1, #0]
 800099e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80009a2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80009a6:	d10f      	bne.n	80009c8 <ai_platform_context_acquire+0xa6>
 80009a8:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 8000e50 <.text_25>
 80009ac:	2301      	movs	r3, #1
 80009ae:	6093      	str	r3, [r2, #8]
 80009b0:	6891      	ldr	r1, [r2, #8]
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d1fc      	bne.n	80009b0 <ai_platform_context_acquire+0x8e>
 80009b6:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 8000e44 <.text_22>
 80009ba:	f8df 448c 	ldr.w	r4, [pc, #1164]	; 8000e48 <.text_23>
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	42a2      	cmp	r2, r4
 80009c4:	d000      	beq.n	80009c8 <ai_platform_context_acquire+0xa6>
 80009c6:	e7fe      	b.n	80009c6 <ai_platform_context_acquire+0xa4>
 80009c8:	bc30      	pop	{r4, r5}
 80009ca:	4770      	bx	lr

080009cc <ai_platform_context_release>:
 80009cc:	f8df 189c 	ldr.w	r1, [pc, #2204]	; 800126c <.text_27>
 80009d0:	6001      	str	r1, [r0, #0]
 80009d2:	4770      	bx	lr

080009d4 <.text_11>:
 80009d4:	00000000 	.word	0x00000000

080009d8 <ai_platform_network_get_error>:
 80009d8:	b430      	push	{r4, r5}
 80009da:	b120      	cbz	r0, 80009e6 <ai_platform_network_get_error+0xe>
 80009dc:	6801      	ldr	r1, [r0, #0]
 80009de:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 800126c <.text_27>
 80009e2:	4291      	cmp	r1, r2
 80009e4:	d000      	beq.n	80009e8 <ai_platform_network_get_error+0x10>
 80009e6:	2000      	movs	r0, #0
 80009e8:	f8df 144c 	ldr.w	r1, [pc, #1100]	; 8000e38 <.text_19>
 80009ec:	f240 4449 	movw	r4, #1097	; 0x449
 80009f0:	680b      	ldr	r3, [r1, #0]
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	600b      	str	r3, [r1, #0]
 80009f8:	f8df 1440 	ldr.w	r1, [pc, #1088]	; 8000e3c <.text_20>
 80009fc:	680a      	ldr	r2, [r1, #0]
 80009fe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a02:	42a2      	cmp	r2, r4
 8000a04:	d115      	bne.n	8000a32 <ai_platform_network_get_error+0x5a>
 8000a06:	2101      	movs	r1, #1
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	4311      	orrs	r1, r2
 8000a10:	d01d      	beq.n	8000a4e <ai_platform_network_get_error+0x76>
 8000a12:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8000e40 <.text_21>
 8000a16:	2301      	movs	r3, #1
 8000a18:	6093      	str	r3, [r2, #8]
 8000a1a:	6891      	ldr	r1, [r2, #8]
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d1fc      	bne.n	8000a1a <ai_platform_network_get_error+0x42>
 8000a20:	f8df 3420 	ldr.w	r3, [pc, #1056]	; 8000e44 <.text_22>
 8000a24:	f8df 4420 	ldr.w	r4, [pc, #1056]	; 8000e48 <.text_23>
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	42a2      	cmp	r2, r4
 8000a2e:	d026      	beq.n	8000a7e <ai_platform_network_get_error+0xa6>
 8000a30:	e7fe      	b.n	8000a30 <ai_platform_network_get_error+0x58>
 8000a32:	2100      	movs	r1, #0
 8000a34:	f240 4551 	movw	r5, #1105	; 0x451
 8000a38:	42aa      	cmp	r2, r5
 8000a3a:	bf08      	it	eq
 8000a3c:	2301      	moveq	r3, #1
 8000a3e:	d0e4      	beq.n	8000a0a <ai_platform_network_get_error+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	f240 4452 	movw	r4, #1106	; 0x452
 8000a46:	42a2      	cmp	r2, r4
 8000a48:	d1df      	bne.n	8000a0a <ai_platform_network_get_error+0x32>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	e7de      	b.n	8000a0c <ai_platform_network_get_error+0x34>
 8000a4e:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000e4c <.text_24>
 8000a52:	680a      	ldr	r2, [r1, #0]
 8000a54:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a58:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000a5c:	d10f      	bne.n	8000a7e <ai_platform_network_get_error+0xa6>
 8000a5e:	f8df 23f0 	ldr.w	r2, [pc, #1008]	; 8000e50 <.text_25>
 8000a62:	2301      	movs	r3, #1
 8000a64:	6093      	str	r3, [r2, #8]
 8000a66:	6891      	ldr	r1, [r2, #8]
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d1fc      	bne.n	8000a66 <ai_platform_network_get_error+0x8e>
 8000a6c:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8000e44 <.text_22>
 8000a70:	f8df 43d4 	ldr.w	r4, [pc, #980]	; 8000e48 <.text_23>
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	42a2      	cmp	r2, r4
 8000a7a:	d000      	beq.n	8000a7e <ai_platform_network_get_error+0xa6>
 8000a7c:	e7fe      	b.n	8000a7c <ai_platform_network_get_error+0xa4>
 8000a7e:	b920      	cbnz	r0, 8000a8a <ai_platform_network_get_error+0xb2>
 8000a80:	f60f 0028 	addw	r0, pc, #2088	; 0x828
 8000a84:	6800      	ldr	r0, [r0, #0]
 8000a86:	bc30      	pop	{r4, r5}
 8000a88:	4770      	bx	lr
 8000a8a:	3010      	adds	r0, #16
 8000a8c:	bc30      	pop	{r4, r5}
 8000a8e:	f000 bc15 	b.w	80012bc <core_get_error>

08000a92 <ai_platform_network_set_error>:
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf1c      	itt	ne
 8000a96:	3010      	addne	r0, #16
 8000a98:	f000 bc15 	bne.w	80012c6 <core_set_error>
 8000a9c:	4770      	bx	lr

08000a9e <ai_platform_api_get_network_report>:
 8000a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa2:	0004      	movs	r4, r0
 8000aa4:	b081      	sub	sp, #4
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	d004      	beq.n	8000ab4 <ai_platform_api_get_network_report+0x16>
 8000aaa:	6820      	ldr	r0, [r4, #0]
 8000aac:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 800126c <.text_27>
 8000ab0:	4288      	cmp	r0, r1
 8000ab2:	d000      	beq.n	8000ab6 <ai_platform_api_get_network_report+0x18>
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	f8df 0380 	ldr.w	r0, [pc, #896]	; 8000e38 <.text_19>
 8000aba:	f240 4349 	movw	r3, #1097	; 0x449
 8000abe:	6802      	ldr	r2, [r0, #0]
 8000ac0:	0852      	lsrs	r2, r2, #1
 8000ac2:	0052      	lsls	r2, r2, #1
 8000ac4:	6002      	str	r2, [r0, #0]
 8000ac6:	f8df 0374 	ldr.w	r0, [pc, #884]	; 8000e3c <.text_20>
 8000aca:	6801      	ldr	r1, [r0, #0]
 8000acc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000ad0:	4299      	cmp	r1, r3
 8000ad2:	d115      	bne.n	8000b00 <ai_platform_api_get_network_report+0x62>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4310      	orrs	r0, r2
 8000adc:	4308      	orrs	r0, r1
 8000ade:	d01d      	beq.n	8000b1c <ai_platform_api_get_network_report+0x7e>
 8000ae0:	f8df 135c 	ldr.w	r1, [pc, #860]	; 8000e40 <.text_21>
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	608a      	str	r2, [r1, #8]
 8000ae8:	6888      	ldr	r0, [r1, #8]
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d1fc      	bne.n	8000ae8 <ai_platform_api_get_network_report+0x4a>
 8000aee:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000e44 <.text_22>
 8000af2:	f8df 3354 	ldr.w	r3, [pc, #852]	; 8000e48 <.text_23>
 8000af6:	600a      	str	r2, [r1, #0]
 8000af8:	6809      	ldr	r1, [r1, #0]
 8000afa:	4299      	cmp	r1, r3
 8000afc:	d026      	beq.n	8000b4c <ai_platform_api_get_network_report+0xae>
 8000afe:	e7fe      	b.n	8000afe <ai_platform_api_get_network_report+0x60>
 8000b00:	2000      	movs	r0, #0
 8000b02:	f240 4651 	movw	r6, #1105	; 0x451
 8000b06:	42b1      	cmp	r1, r6
 8000b08:	bf08      	it	eq
 8000b0a:	2201      	moveq	r2, #1
 8000b0c:	d0e4      	beq.n	8000ad8 <ai_platform_api_get_network_report+0x3a>
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f240 4352 	movw	r3, #1106	; 0x452
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d1df      	bne.n	8000ad8 <ai_platform_api_get_network_report+0x3a>
 8000b18:	2101      	movs	r1, #1
 8000b1a:	e7de      	b.n	8000ada <ai_platform_api_get_network_report+0x3c>
 8000b1c:	f8df 032c 	ldr.w	r0, [pc, #812]	; 8000e4c <.text_24>
 8000b20:	6801      	ldr	r1, [r0, #0]
 8000b22:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000b26:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000b2a:	d10f      	bne.n	8000b4c <ai_platform_api_get_network_report+0xae>
 8000b2c:	f8df 1320 	ldr.w	r1, [pc, #800]	; 8000e50 <.text_25>
 8000b30:	2201      	movs	r2, #1
 8000b32:	608a      	str	r2, [r1, #8]
 8000b34:	6888      	ldr	r0, [r1, #8]
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d1fc      	bne.n	8000b34 <ai_platform_api_get_network_report+0x96>
 8000b3a:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000e44 <.text_22>
 8000b3e:	f8df 3308 	ldr.w	r3, [pc, #776]	; 8000e48 <.text_23>
 8000b42:	600a      	str	r2, [r1, #0]
 8000b44:	6809      	ldr	r1, [r1, #0]
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d000      	beq.n	8000b4c <ai_platform_api_get_network_report+0xae>
 8000b4a:	e7fe      	b.n	8000b4a <ai_platform_api_get_network_report+0xac>
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	bf18      	it	ne
 8000b50:	2d00      	cmpne	r5, #0
 8000b52:	d032      	beq.n	8000bba <ai_platform_api_get_network_report+0x11c>
 8000b54:	2000      	movs	r0, #0
 8000b56:	66e8      	str	r0, [r5, #108]	; 0x6c
 8000b58:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b5a:	b152      	cbz	r2, 8000b72 <ai_platform_api_get_network_report+0xd4>
 8000b5c:	e000      	b.n	8000b60 <ai_platform_api_get_network_report+0xc2>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8000b62:	1c49      	adds	r1, r1, #1
 8000b64:	66e9      	str	r1, [r5, #108]	; 0x6c
 8000b66:	68d0      	ldr	r0, [r2, #12]
 8000b68:	4282      	cmp	r2, r0
 8000b6a:	bf18      	it	ne
 8000b6c:	2800      	cmpne	r0, #0
 8000b6e:	d1f6      	bne.n	8000b5e <ai_platform_api_get_network_report+0xc0>
 8000b70:	b911      	cbnz	r1, 8000b78 <ai_platform_api_get_network_report+0xda>
 8000b72:	2218      	movs	r2, #24
 8000b74:	2111      	movs	r1, #17
 8000b76:	e01c      	b.n	8000bb2 <ai_platform_api_get_network_report+0x114>
 8000b78:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000b7c:	b100      	cbz	r0, 8000b80 <ai_platform_api_get_network_report+0xe2>
 8000b7e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b80:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000b84:	f7ff fd20 	bl	80005c8 <_ai_platform_get_io_buffers_info>
 8000b88:	8628      	strh	r0, [r5, #48]	; 0x30
 8000b8a:	b910      	cbnz	r0, 8000b92 <ai_platform_api_get_network_report+0xf4>
 8000b8c:	2218      	movs	r2, #24
 8000b8e:	2112      	movs	r1, #18
 8000b90:	e00f      	b.n	8000bb2 <ai_platform_api_get_network_report+0x114>
 8000b92:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000b96:	2802      	cmp	r0, #2
 8000b98:	bfa6      	itte	ge
 8000b9a:	6ce1      	ldrge	r1, [r4, #76]	; 0x4c
 8000b9c:	f101 000c 	addge.w	r0, r1, #12
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000ba6:	f7ff fd0f 	bl	80005c8 <_ai_platform_get_io_buffers_info>
 8000baa:	8668      	strh	r0, [r5, #50]	; 0x32
 8000bac:	b948      	cbnz	r0, 8000bc2 <ai_platform_api_get_network_report+0x124>
 8000bae:	2218      	movs	r2, #24
 8000bb0:	2113      	movs	r1, #19
 8000bb2:	f104 0010 	add.w	r0, r4, #16
 8000bb6:	f000 fb86 	bl	80012c6 <core_set_error>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	b001      	add	sp, #4
 8000bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bc2:	6860      	ldr	r0, [r4, #4]
 8000bc4:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8000bc8:	6728      	str	r0, [r5, #112]	; 0x70
 8000bca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 8000bce:	e892 51c8 	ldmia.w	r2, {r3, r6, r7, r8, ip, lr}
 8000bd2:	e881 51c8 	stmia.w	r1, {r3, r6, r7, r8, ip, lr}
 8000bd6:	3418      	adds	r4, #24
 8000bd8:	f105 0954 	add.w	r9, r5, #84	; 0x54
 8000bdc:	e894 0c0f 	ldmia.w	r4, {r0, r1, r2, r3, sl, fp}
 8000be0:	e889 0c0f 	stmia.w	r9, {r0, r1, r2, r3, sl, fp}
 8000be4:	f7ff fca4 	bl	8000530 <CRC_Lock>
 8000be8:	a092      	add	r0, pc, #584	; (adr r0, 8000e34 <.text_18>)
 8000bea:	6128      	str	r0, [r5, #16]
 8000bec:	f7ff fca0 	bl	8000530 <CRC_Lock>
 8000bf0:	f20f 619c 	addw	r1, pc, #1692	; 0x69c
 8000bf4:	680a      	ldr	r2, [r1, #0]
 8000bf6:	616a      	str	r2, [r5, #20]
 8000bf8:	f7ff fc9a 	bl	8000530 <CRC_Lock>
 8000bfc:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8000c00:	6801      	ldr	r1, [r0, #0]
 8000c02:	6269      	str	r1, [r5, #36]	; 0x24
 8000c04:	f7ff fc94 	bl	8000530 <CRC_Lock>
 8000c08:	f20f 628c 	addw	r2, pc, #1676	; 0x68c
 8000c0c:	6810      	ldr	r0, [r2, #0]
 8000c0e:	62a8      	str	r0, [r5, #40]	; 0x28
 8000c10:	2001      	movs	r0, #1
 8000c12:	b001      	add	sp, #4
 8000c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c18 <ai_platform_network_create>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b081      	sub	sp, #4
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	9d06      	ldr	r5, [sp, #24]
 8000c20:	4604      	mov	r4, r0
 8000c22:	9807      	ldr	r0, [sp, #28]
 8000c24:	4616      	mov	r6, r2
 8000c26:	042d      	lsls	r5, r5, #16
 8000c28:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000c2c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000c30:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8000c34:	6807      	ldr	r7, [r0, #0]
 8000c36:	f7ff fc7b 	bl	8000530 <CRC_Lock>
 8000c3a:	b924      	cbnz	r4, 8000c46 <ai_platform_network_create+0x2e>
 8000c3c:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8000c40:	b001      	add	sp, #4
 8000c42:	6800      	ldr	r0, [r0, #0]
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 800126c <.text_27>
 8000c4a:	6031      	str	r1, [r6, #0]
 8000c4c:	6026      	str	r6, [r4, #0]
 8000c4e:	f000 fb33 	bl	80012b8 <core_init>
 8000c52:	b910      	cbnz	r0, 8000c5a <ai_platform_network_create+0x42>
 8000c54:	f20f 6044 	addw	r0, pc, #1604	; 0x644
 8000c58:	e00e      	b.n	8000c78 <ai_platform_network_create+0x60>
 8000c5a:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 8001270 <.text_28>
 8000c5e:	428d      	cmp	r5, r1
 8000c60:	d303      	bcc.n	8000c6a <ai_platform_network_create+0x52>
 8000c62:	f20f 623c 	addw	r2, pc, #1596	; 0x63c
 8000c66:	6817      	ldr	r7, [r2, #0]
 8000c68:	e007      	b.n	8000c7a <ai_platform_network_create+0x62>
 8000c6a:	f20f 6038 	addw	r0, pc, #1592	; 0x638
 8000c6e:	f001 fa9b 	bl	80021a8 <ai_check_custom_types>
 8000c72:	b920      	cbnz	r0, 8000c7e <ai_platform_network_create+0x66>
 8000c74:	f20f 6030 	addw	r0, pc, #1584	; 0x630
 8000c78:	6807      	ldr	r7, [r0, #0]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	6021      	str	r1, [r4, #0]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	b001      	add	sp, #4
 8000c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c84 <ai_platform_network_destroy>:
 8000c84:	b470      	push	{r4, r5, r6}
 8000c86:	b130      	cbz	r0, 8000c96 <ai_platform_network_destroy+0x12>
 8000c88:	6801      	ldr	r1, [r0, #0]
 8000c8a:	f8df 25e0 	ldr.w	r2, [pc, #1504]	; 800126c <.text_27>
 8000c8e:	4291      	cmp	r1, r2
 8000c90:	bf08      	it	eq
 8000c92:	4602      	moveq	r2, r0
 8000c94:	d000      	beq.n	8000c98 <ai_platform_network_destroy+0x14>
 8000c96:	2200      	movs	r2, #0
 8000c98:	4967      	ldr	r1, [pc, #412]	; (8000e38 <.text_19>)
 8000c9a:	f240 4449 	movw	r4, #1097	; 0x449
 8000c9e:	680b      	ldr	r3, [r1, #0]
 8000ca0:	085b      	lsrs	r3, r3, #1
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	4965      	ldr	r1, [pc, #404]	; (8000e3c <.text_20>)
 8000ca8:	680b      	ldr	r3, [r1, #0]
 8000caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d112      	bne.n	8000cd8 <ai_platform_network_destroy+0x54>
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2400      	movs	r4, #0
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	4321      	orrs	r1, r4
 8000cba:	4319      	orrs	r1, r3
 8000cbc:	d01a      	beq.n	8000cf4 <ai_platform_network_destroy+0x70>
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <.text_21>)
 8000cc0:	2401      	movs	r4, #1
 8000cc2:	609c      	str	r4, [r3, #8]
 8000cc4:	6899      	ldr	r1, [r3, #8]
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d1fc      	bne.n	8000cc4 <ai_platform_network_destroy+0x40>
 8000cca:	4c5e      	ldr	r4, [pc, #376]	; (8000e44 <.text_22>)
 8000ccc:	4d5e      	ldr	r5, [pc, #376]	; (8000e48 <.text_23>)
 8000cce:	601c      	str	r4, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d022      	beq.n	8000d1c <ai_platform_network_destroy+0x98>
 8000cd6:	e7fe      	b.n	8000cd6 <ai_platform_network_destroy+0x52>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f240 4651 	movw	r6, #1105	; 0x451
 8000cde:	42b3      	cmp	r3, r6
 8000ce0:	bf08      	it	eq
 8000ce2:	2401      	moveq	r4, #1
 8000ce4:	d0e7      	beq.n	8000cb6 <ai_platform_network_destroy+0x32>
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	f240 4552 	movw	r5, #1106	; 0x452
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d1e2      	bne.n	8000cb6 <ai_platform_network_destroy+0x32>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e7e1      	b.n	8000cb8 <ai_platform_network_destroy+0x34>
 8000cf4:	4955      	ldr	r1, [pc, #340]	; (8000e4c <.text_24>)
 8000cf6:	680b      	ldr	r3, [r1, #0]
 8000cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cfc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000d00:	d10c      	bne.n	8000d1c <ai_platform_network_destroy+0x98>
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <.text_25>)
 8000d04:	2401      	movs	r4, #1
 8000d06:	609c      	str	r4, [r3, #8]
 8000d08:	6899      	ldr	r1, [r3, #8]
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d1fc      	bne.n	8000d08 <ai_platform_network_destroy+0x84>
 8000d0e:	4c4d      	ldr	r4, [pc, #308]	; (8000e44 <.text_22>)
 8000d10:	4d4d      	ldr	r5, [pc, #308]	; (8000e48 <.text_23>)
 8000d12:	601c      	str	r4, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d000      	beq.n	8000d1c <ai_platform_network_destroy+0x98>
 8000d1a:	e7fe      	b.n	8000d1a <ai_platform_network_destroy+0x96>
 8000d1c:	b102      	cbz	r2, 8000d20 <ai_platform_network_destroy+0x9c>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	bc70      	pop	{r4, r5, r6}
 8000d22:	4770      	bx	lr

08000d24 <ai_platform_network_init>:
 8000d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d28:	b081      	sub	sp, #4
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	b120      	cbz	r0, 8000d38 <ai_platform_network_init+0x14>
 8000d2e:	6801      	ldr	r1, [r0, #0]
 8000d30:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 800126c <.text_27>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d000      	beq.n	8000d3a <ai_platform_network_init+0x16>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	493f      	ldr	r1, [pc, #252]	; (8000e38 <.text_19>)
 8000d3c:	f240 4549 	movw	r5, #1097	; 0x449
 8000d40:	680c      	ldr	r4, [r1, #0]
 8000d42:	0864      	lsrs	r4, r4, #1
 8000d44:	0064      	lsls	r4, r4, #1
 8000d46:	600c      	str	r4, [r1, #0]
 8000d48:	493c      	ldr	r1, [pc, #240]	; (8000e3c <.text_20>)
 8000d4a:	680b      	ldr	r3, [r1, #0]
 8000d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d112      	bne.n	8000d7a <ai_platform_network_init+0x56>
 8000d54:	2101      	movs	r1, #1
 8000d56:	2400      	movs	r4, #0
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4321      	orrs	r1, r4
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	d01a      	beq.n	8000d96 <ai_platform_network_init+0x72>
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <.text_21>)
 8000d62:	2401      	movs	r4, #1
 8000d64:	609c      	str	r4, [r3, #8]
 8000d66:	6899      	ldr	r1, [r3, #8]
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d1fc      	bne.n	8000d66 <ai_platform_network_init+0x42>
 8000d6c:	4c35      	ldr	r4, [pc, #212]	; (8000e44 <.text_22>)
 8000d6e:	4d36      	ldr	r5, [pc, #216]	; (8000e48 <.text_23>)
 8000d70:	601c      	str	r4, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	42ab      	cmp	r3, r5
 8000d76:	d022      	beq.n	8000dbe <ai_platform_network_init+0x9a>
 8000d78:	e7fe      	b.n	8000d78 <ai_platform_network_init+0x54>
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f240 4651 	movw	r6, #1105	; 0x451
 8000d80:	42b3      	cmp	r3, r6
 8000d82:	bf08      	it	eq
 8000d84:	2401      	moveq	r4, #1
 8000d86:	d0e7      	beq.n	8000d58 <ai_platform_network_init+0x34>
 8000d88:	2400      	movs	r4, #0
 8000d8a:	f240 4552 	movw	r5, #1106	; 0x452
 8000d8e:	42ab      	cmp	r3, r5
 8000d90:	d1e2      	bne.n	8000d58 <ai_platform_network_init+0x34>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e7e1      	b.n	8000d5a <ai_platform_network_init+0x36>
 8000d96:	492d      	ldr	r1, [pc, #180]	; (8000e4c <.text_24>)
 8000d98:	680b      	ldr	r3, [r1, #0]
 8000d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d9e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000da2:	d10c      	bne.n	8000dbe <ai_platform_network_init+0x9a>
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <.text_25>)
 8000da6:	2401      	movs	r4, #1
 8000da8:	609c      	str	r4, [r3, #8]
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d1fc      	bne.n	8000daa <ai_platform_network_init+0x86>
 8000db0:	4c24      	ldr	r4, [pc, #144]	; (8000e44 <.text_22>)
 8000db2:	4d25      	ldr	r5, [pc, #148]	; (8000e48 <.text_23>)
 8000db4:	601c      	str	r4, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d000      	beq.n	8000dbe <ai_platform_network_init+0x9a>
 8000dbc:	e7fe      	b.n	8000dbc <ai_platform_network_init+0x98>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d035      	beq.n	8000e2e <ai_platform_network_init+0x10a>
 8000dc2:	b90a      	cbnz	r2, 8000dc8 <ai_platform_network_init+0xa4>
 8000dc4:	2211      	movs	r2, #17
 8000dc6:	e012      	b.n	8000dee <ai_platform_network_init+0xca>
 8000dc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000dca:	6913      	ldr	r3, [r2, #16]
 8000dcc:	b939      	cbnz	r1, 8000dde <ai_platform_network_init+0xba>
 8000dce:	8c14      	ldrh	r4, [r2, #32]
 8000dd0:	8bd5      	ldrh	r5, [r2, #30]
 8000dd2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000dd4:	436c      	muls	r4, r5
 8000dd6:	434c      	muls	r4, r1
 8000dd8:	bf18      	it	ne
 8000dda:	2213      	movne	r2, #19
 8000ddc:	d107      	bne.n	8000dee <ai_platform_network_init+0xca>
 8000dde:	b973      	cbnz	r3, 8000dfe <ai_platform_network_init+0xda>
 8000de0:	8911      	ldrh	r1, [r2, #8]
 8000de2:	88d4      	ldrh	r4, [r2, #6]
 8000de4:	68d3      	ldr	r3, [r2, #12]
 8000de6:	4361      	muls	r1, r4
 8000de8:	4359      	muls	r1, r3
 8000dea:	d008      	beq.n	8000dfe <ai_platform_network_init+0xda>
 8000dec:	2212      	movs	r2, #18
 8000dee:	2110      	movs	r1, #16
 8000df0:	3010      	adds	r0, #16
 8000df2:	f000 fa68 	bl	80012c6 <core_set_error>
 8000df6:	2000      	movs	r0, #0
 8000df8:	b001      	add	sp, #4
 8000dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dfe:	f100 0118 	add.w	r1, r0, #24
 8000e02:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8000e06:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000e0a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 8000e0e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000e12:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000e16:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000e18:	2103      	movs	r1, #3
 8000e1a:	60c1      	str	r1, [r0, #12]
 8000e1c:	b13a      	cbz	r2, 8000e2e <ai_platform_network_init+0x10a>
 8000e1e:	e000      	b.n	8000e22 <ai_platform_network_init+0xfe>
 8000e20:	460a      	mov	r2, r1
 8000e22:	68d1      	ldr	r1, [r2, #12]
 8000e24:	6090      	str	r0, [r2, #8]
 8000e26:	428a      	cmp	r2, r1
 8000e28:	bf18      	it	ne
 8000e2a:	2900      	cmpne	r1, #0
 8000e2c:	d1f8      	bne.n	8000e20 <ai_platform_network_init+0xfc>
 8000e2e:	b001      	add	sp, #4
 8000e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e34 <.text_18>:
 8000e34:	00000000 	.word	0x00000000

08000e38 <.text_19>:
 8000e38:	e0002000 	.word	0xe0002000

08000e3c <.text_20>:
 8000e3c:	e0042000 	.word	0xe0042000

08000e40 <.text_21>:
 8000e40:	40023000 	.word	0x40023000

08000e44 <.text_22>:
 8000e44:	f407a5c2 	.word	0xf407a5c2

08000e48 <.text_23>:
 8000e48:	b5e8b5cd 	.word	0xb5e8b5cd

08000e4c <.text_24>:
 8000e4c:	5c001000 	.word	0x5c001000

08000e50 <.text_25>:
 8000e50:	58024c00 	.word	0x58024c00

08000e54 <ai_platform_network_process>:
 8000e54:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	b120      	cbz	r0, 8000e68 <ai_platform_network_process+0x14>
 8000e5e:	6801      	ldr	r1, [r0, #0]
 8000e60:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 800126c <.text_27>
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d000      	beq.n	8000e6a <ai_platform_network_process+0x16>
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8001274 <.text_29>
 8000e6e:	f240 4549 	movw	r5, #1097	; 0x449
 8000e72:	680c      	ldr	r4, [r1, #0]
 8000e74:	0864      	lsrs	r4, r4, #1
 8000e76:	0064      	lsls	r4, r4, #1
 8000e78:	600c      	str	r4, [r1, #0]
 8000e7a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8001278 <.text_30>
 8000e7e:	680b      	ldr	r3, [r1, #0]
 8000e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e84:	42ab      	cmp	r3, r5
 8000e86:	d115      	bne.n	8000eb4 <ai_platform_network_process+0x60>
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2400      	movs	r4, #0
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4321      	orrs	r1, r4
 8000e90:	4319      	orrs	r1, r3
 8000e92:	d01d      	beq.n	8000ed0 <ai_platform_network_process+0x7c>
 8000e94:	f8df 33e4 	ldr.w	r3, [pc, #996]	; 800127c <.text_31>
 8000e98:	2401      	movs	r4, #1
 8000e9a:	609c      	str	r4, [r3, #8]
 8000e9c:	6899      	ldr	r1, [r3, #8]
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d1fc      	bne.n	8000e9c <ai_platform_network_process+0x48>
 8000ea2:	f8df 43dc 	ldr.w	r4, [pc, #988]	; 8001280 <.text_32>
 8000ea6:	f8df 53dc 	ldr.w	r5, [pc, #988]	; 8001284 <.text_33>
 8000eaa:	601c      	str	r4, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d026      	beq.n	8000f00 <ai_platform_network_process+0xac>
 8000eb2:	e7fe      	b.n	8000eb2 <ai_platform_network_process+0x5e>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f240 4a51 	movw	sl, #1105	; 0x451
 8000eba:	4553      	cmp	r3, sl
 8000ebc:	bf08      	it	eq
 8000ebe:	2401      	moveq	r4, #1
 8000ec0:	d0e4      	beq.n	8000e8c <ai_platform_network_process+0x38>
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	f240 4552 	movw	r5, #1106	; 0x452
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d1df      	bne.n	8000e8c <ai_platform_network_process+0x38>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e7de      	b.n	8000e8e <ai_platform_network_process+0x3a>
 8000ed0:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8001288 <.text_34>
 8000ed4:	680b      	ldr	r3, [r1, #0]
 8000ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eda:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000ede:	d10f      	bne.n	8000f00 <ai_platform_network_process+0xac>
 8000ee0:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 800128c <.text_35>
 8000ee4:	2401      	movs	r4, #1
 8000ee6:	609c      	str	r4, [r3, #8]
 8000ee8:	6899      	ldr	r1, [r3, #8]
 8000eea:	2900      	cmp	r1, #0
 8000eec:	d1fc      	bne.n	8000ee8 <ai_platform_network_process+0x94>
 8000eee:	f8df 4390 	ldr.w	r4, [pc, #912]	; 8001280 <.text_32>
 8000ef2:	f8df 5390 	ldr.w	r5, [pc, #912]	; 8001284 <.text_33>
 8000ef6:	601c      	str	r4, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	42ab      	cmp	r3, r5
 8000efc:	d000      	beq.n	8000f00 <ai_platform_network_process+0xac>
 8000efe:	e7fe      	b.n	8000efe <ai_platform_network_process+0xaa>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	f000 8114 	beq.w	800112e <ai_platform_network_process+0x2da>
 8000f06:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000f0a:	b101      	cbz	r1, 8000f0e <ai_platform_network_process+0xba>
 8000f0c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000f0e:	7b05      	ldrb	r5, [r0, #12]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2400      	movs	r4, #0
 8000f14:	82c3      	strh	r3, [r0, #22]
 8000f16:	8284      	strh	r4, [r0, #20]
 8000f18:	f005 0503 	and.w	r5, r5, #3
 8000f1c:	2d03      	cmp	r5, #3
 8000f1e:	d002      	beq.n	8000f26 <ai_platform_network_process+0xd2>
 8000f20:	2230      	movs	r2, #48	; 0x30
 8000f22:	2111      	movs	r1, #17
 8000f24:	e100      	b.n	8001128 <ai_platform_network_process+0x2d4>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	bf1e      	ittt	ne
 8000f2a:	2900      	cmpne	r1, #0
 8000f2c:	880b      	ldrhne	r3, [r1, #0]
 8000f2e:	2b00      	cmpne	r3, #0
 8000f30:	f000 80f8 	beq.w	8001124 <ai_platform_network_process+0x2d0>
 8000f34:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000f38:	46a0      	mov	r8, r4
 8000f3a:	46a1      	mov	r9, r4
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	1d17      	adds	r7, r2, #4
 8000f40:	4682      	mov	sl, r0
 8000f42:	9100      	str	r1, [sp, #0]
 8000f44:	e014      	b.n	8000f70 <ai_platform_network_process+0x11c>
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	f000 80ea 	beq.w	8001122 <ai_platform_network_process+0x2ce>
 8000f4e:	8838      	ldrh	r0, [r7, #0]
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d052      	beq.n	8000ffa <ai_platform_network_process+0x1a6>
 8000f54:	4558      	cmp	r0, fp
 8000f56:	4622      	mov	r2, r4
 8000f58:	f108 0801 	add.w	r8, r8, #1
 8000f5c:	f109 0904 	add.w	r9, r9, #4
 8000f60:	bf28      	it	cs
 8000f62:	4683      	movcs	fp, r0
 8000f64:	1f39      	subs	r1, r7, #4
 8000f66:	4628      	mov	r0, r5
 8000f68:	f7ff fb84 	bl	8000674 <_platform_network_state_setup>
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	3610      	adds	r6, #16
 8000f70:	9800      	ldr	r0, [sp, #0]
 8000f72:	8801      	ldrh	r1, [r0, #0]
 8000f74:	4588      	cmp	r8, r1
 8000f76:	d24a      	bcs.n	800100e <ai_platform_network_process+0x1ba>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	6850      	ldr	r0, [r2, #4]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	bf1c      	itt	ne
 8000f80:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000f84:	2c00      	cmpne	r4, #0
 8000f86:	d042      	beq.n	800100e <ai_platform_network_process+0x1ba>
 8000f88:	6891      	ldr	r1, [r2, #8]
 8000f8a:	680a      	ldr	r2, [r1, #0]
 8000f8c:	1995      	adds	r5, r2, r6
 8000f8e:	f000 80c8 	beq.w	8001122 <ai_platform_network_process+0x2ce>
 8000f92:	69a0      	ldr	r0, [r4, #24]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	88ba      	ldrh	r2, [r7, #4]
 8000f98:	6841      	ldr	r1, [r0, #4]
 8000f9a:	68b8      	ldr	r0, [r7, #8]
 8000f9c:	fb03 fc02 	mul.w	ip, r3, r2
 8000fa0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa4:	4561      	cmp	r1, ip
 8000fa6:	d32d      	bcc.n	8001004 <ai_platform_network_process+0x1b0>
 8000fa8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000fac:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000fb0:	459e      	cmp	lr, r3
 8000fb2:	bf01      	itttt	eq
 8000fb4:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000fb8:	4293      	cmpeq	r3, r2
 8000fba:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000fbe:	4282      	cmpeq	r2, r0
 8000fc0:	d120      	bne.n	8001004 <ai_platform_network_process+0x1b0>
 8000fc2:	69a0      	ldr	r0, [r4, #24]
 8000fc4:	6800      	ldr	r0, [r0, #0]
 8000fc6:	f005 fcc3 	bl	8006950 <ai_array_get_byte_size>
 8000fca:	68e1      	ldr	r1, [r4, #12]
 8000fcc:	6963      	ldr	r3, [r4, #20]
 8000fce:	68ca      	ldr	r2, [r1, #12]
 8000fd0:	68d9      	ldr	r1, [r3, #12]
 8000fd2:	434a      	muls	r2, r1
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	d315      	bcc.n	8001004 <ai_platform_network_process+0x1b0>
 8000fd8:	69a0      	ldr	r0, [r4, #24]
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	f005 fbe0 	bl	80067a0 <ai_array_to_buffer_fmt>
 8000fe0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000fe4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000fe8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000fec:	4288      	cmp	r0, r1
 8000fee:	d0aa      	beq.n	8000f46 <ai_platform_network_process+0xf2>
 8000ff0:	2219      	movs	r2, #25
 8000ff2:	2112      	movs	r1, #18
 8000ff4:	f10a 0010 	add.w	r0, sl, #16
 8000ff8:	e097      	b.n	800112a <ai_platform_network_process+0x2d6>
 8000ffa:	2221      	movs	r2, #33	; 0x21
 8000ffc:	2112      	movs	r1, #18
 8000ffe:	f10a 0010 	add.w	r0, sl, #16
 8001002:	e092      	b.n	800112a <ai_platform_network_process+0x2d6>
 8001004:	2218      	movs	r2, #24
 8001006:	2112      	movs	r1, #18
 8001008:	f10a 0010 	add.w	r0, sl, #16
 800100c:	e08d      	b.n	800112a <ai_platform_network_process+0x2d6>
 800100e:	9902      	ldr	r1, [sp, #8]
 8001010:	4655      	mov	r5, sl
 8001012:	2900      	cmp	r1, #0
 8001014:	d076      	beq.n	8001104 <ai_platform_network_process+0x2b0>
 8001016:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800101a:	2802      	cmp	r0, #2
 800101c:	db7c      	blt.n	8001118 <ai_platform_network_process+0x2c4>
 800101e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001020:	f113 000c 	adds.w	r0, r3, #12
 8001024:	bf1c      	itt	ne
 8001026:	8802      	ldrhne	r2, [r0, #0]
 8001028:	2a00      	cmpne	r2, #0
 800102a:	d075      	beq.n	8001118 <ai_platform_network_process+0x2c4>
 800102c:	f04f 0800 	mov.w	r8, #0
 8001030:	46c1      	mov	r9, r8
 8001032:	2600      	movs	r6, #0
 8001034:	1d0f      	adds	r7, r1, #4
 8001036:	9000      	str	r0, [sp, #0]
 8001038:	e013      	b.n	8001062 <ai_platform_network_process+0x20e>
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	2800      	cmp	r0, #0
 800103e:	d059      	beq.n	80010f4 <ai_platform_network_process+0x2a0>
 8001040:	8838      	ldrh	r0, [r7, #0]
 8001042:	2800      	cmp	r0, #0
 8001044:	d051      	beq.n	80010ea <ai_platform_network_process+0x296>
 8001046:	4558      	cmp	r0, fp
 8001048:	4622      	mov	r2, r4
 800104a:	f108 0801 	add.w	r8, r8, #1
 800104e:	f109 0904 	add.w	r9, r9, #4
 8001052:	bf28      	it	cs
 8001054:	4683      	movcs	fp, r0
 8001056:	1f39      	subs	r1, r7, #4
 8001058:	4628      	mov	r0, r5
 800105a:	f7ff fb0b 	bl	8000674 <_platform_network_state_setup>
 800105e:	3718      	adds	r7, #24
 8001060:	3610      	adds	r6, #16
 8001062:	9800      	ldr	r0, [sp, #0]
 8001064:	8801      	ldrh	r1, [r0, #0]
 8001066:	4588      	cmp	r8, r1
 8001068:	d249      	bcs.n	80010fe <ai_platform_network_process+0x2aa>
 800106a:	4602      	mov	r2, r0
 800106c:	6850      	ldr	r0, [r2, #4]
 800106e:	2800      	cmp	r0, #0
 8001070:	bf1c      	itt	ne
 8001072:	f850 4009 	ldrne.w	r4, [r0, r9]
 8001076:	2c00      	cmpne	r4, #0
 8001078:	d041      	beq.n	80010fe <ai_platform_network_process+0x2aa>
 800107a:	6891      	ldr	r1, [r2, #8]
 800107c:	680a      	ldr	r2, [r1, #0]
 800107e:	1995      	adds	r5, r2, r6
 8001080:	d038      	beq.n	80010f4 <ai_platform_network_process+0x2a0>
 8001082:	69a0      	ldr	r0, [r4, #24]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	6841      	ldr	r1, [r0, #4]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	fb03 fc02 	mul.w	ip, r3, r2
 8001090:	fb00 fc0c 	mul.w	ip, r0, ip
 8001094:	4561      	cmp	r1, ip
 8001096:	d33e      	bcc.n	8001116 <ai_platform_network_process+0x2c2>
 8001098:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800109c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80010a0:	459e      	cmp	lr, r3
 80010a2:	bf01      	itttt	eq
 80010a4:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 80010a8:	4293      	cmpeq	r3, r2
 80010aa:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 80010ae:	4282      	cmpeq	r2, r0
 80010b0:	d131      	bne.n	8001116 <ai_platform_network_process+0x2c2>
 80010b2:	69a0      	ldr	r0, [r4, #24]
 80010b4:	6800      	ldr	r0, [r0, #0]
 80010b6:	f005 fc4b 	bl	8006950 <ai_array_get_byte_size>
 80010ba:	68e1      	ldr	r1, [r4, #12]
 80010bc:	6963      	ldr	r3, [r4, #20]
 80010be:	68ca      	ldr	r2, [r1, #12]
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	434a      	muls	r2, r1
 80010c4:	4290      	cmp	r0, r2
 80010c6:	d326      	bcc.n	8001116 <ai_platform_network_process+0x2c2>
 80010c8:	69a0      	ldr	r0, [r4, #24]
 80010ca:	6800      	ldr	r0, [r0, #0]
 80010cc:	f005 fb68 	bl	80067a0 <ai_array_to_buffer_fmt>
 80010d0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80010d4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80010d8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80010dc:	4288      	cmp	r0, r1
 80010de:	d0ac      	beq.n	800103a <ai_platform_network_process+0x1e6>
 80010e0:	2219      	movs	r2, #25
 80010e2:	2113      	movs	r1, #19
 80010e4:	f10a 0010 	add.w	r0, sl, #16
 80010e8:	e01f      	b.n	800112a <ai_platform_network_process+0x2d6>
 80010ea:	2221      	movs	r2, #33	; 0x21
 80010ec:	2113      	movs	r1, #19
 80010ee:	f10a 0010 	add.w	r0, sl, #16
 80010f2:	e01a      	b.n	800112a <ai_platform_network_process+0x2d6>
 80010f4:	2217      	movs	r2, #23
 80010f6:	2113      	movs	r1, #19
 80010f8:	f10a 0010 	add.w	r0, sl, #16
 80010fc:	e015      	b.n	800112a <ai_platform_network_process+0x2d6>
 80010fe:	4655      	mov	r5, sl
 8001100:	f8a5 b014 	strh.w	fp, [r5, #20]
 8001104:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8001108:	2800      	cmp	r0, #0
 800110a:	bf14      	ite	ne
 800110c:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8001110:	f04f 0a00 	moveq.w	sl, #0
 8001114:	e00f      	b.n	8001136 <ai_platform_network_process+0x2e2>
 8001116:	4655      	mov	r5, sl
 8001118:	2218      	movs	r2, #24
 800111a:	2113      	movs	r1, #19
 800111c:	f105 0010 	add.w	r0, r5, #16
 8001120:	e003      	b.n	800112a <ai_platform_network_process+0x2d6>
 8001122:	4650      	mov	r0, sl
 8001124:	2217      	movs	r2, #23
 8001126:	2112      	movs	r1, #18
 8001128:	3010      	adds	r0, #16
 800112a:	f000 f8cc 	bl	80012c6 <core_set_error>
 800112e:	2000      	movs	r0, #0
 8001130:	b003      	add	sp, #12
 8001132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001136:	2802      	cmp	r0, #2
 8001138:	8aa9      	ldrh	r1, [r5, #20]
 800113a:	bfa6      	itte	ge
 800113c:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 800113e:	f100 0b0c 	addge.w	fp, r0, #12
 8001142:	f04f 0b00 	movlt.w	fp, #0
 8001146:	8ae8      	ldrh	r0, [r5, #22]
 8001148:	ebb0 0f01 	cmp.w	r0, r1
 800114c:	f080 8089 	bcs.w	8001262 <ai_platform_network_process+0x40e>
 8001150:	f04f 0800 	mov.w	r8, #0
 8001154:	4654      	mov	r4, sl
 8001156:	46c1      	mov	r9, r8
 8001158:	46c2      	mov	sl, r8
 800115a:	e018      	b.n	800118e <ai_platform_network_process+0x33a>
 800115c:	6882      	ldr	r2, [r0, #8]
 800115e:	68c3      	ldr	r3, [r0, #12]
 8001160:	6871      	ldr	r1, [r6, #4]
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	188b      	adds	r3, r1, r2
 8001166:	6083      	str	r3, [r0, #8]
 8001168:	6871      	ldr	r1, [r6, #4]
 800116a:	60c1      	str	r1, [r0, #12]
 800116c:	6870      	ldr	r0, [r6, #4]
 800116e:	68b1      	ldr	r1, [r6, #8]
 8001170:	4408      	add	r0, r1
 8001172:	6070      	str	r0, [r6, #4]
 8001174:	6831      	ldr	r1, [r6, #0]
 8001176:	4288      	cmp	r0, r1
 8001178:	d302      	bcc.n	8001180 <ai_platform_network_process+0x32c>
 800117a:	68f0      	ldr	r0, [r6, #12]
 800117c:	4240      	negs	r0, r0
 800117e:	4408      	add	r0, r1
 8001180:	6070      	str	r0, [r6, #4]
 8001182:	f10a 0a01 	add.w	sl, sl, #1
 8001186:	f109 0910 	add.w	r9, r9, #16
 800118a:	f108 0804 	add.w	r8, r8, #4
 800118e:	2c00      	cmp	r4, #0
 8001190:	bf14      	ite	ne
 8001192:	8820      	ldrhne	r0, [r4, #0]
 8001194:	2000      	moveq	r0, #0
 8001196:	4582      	cmp	sl, r0
 8001198:	d212      	bcs.n	80011c0 <ai_platform_network_process+0x36c>
 800119a:	6860      	ldr	r0, [r4, #4]
 800119c:	b180      	cbz	r0, 80011c0 <ai_platform_network_process+0x36c>
 800119e:	f850 0008 	ldr.w	r0, [r0, r8]
 80011a2:	b168      	cbz	r0, 80011c0 <ai_platform_network_process+0x36c>
 80011a4:	6980      	ldr	r0, [r0, #24]
 80011a6:	68a1      	ldr	r1, [r4, #8]
 80011a8:	6803      	ldr	r3, [r0, #0]
 80011aa:	680a      	ldr	r2, [r1, #0]
 80011ac:	0099      	lsls	r1, r3, #2
 80011ae:	eb02 0609 	add.w	r6, r2, r9
 80011b2:	d5d3      	bpl.n	800115c <ai_platform_network_process+0x308>
 80011b4:	68b2      	ldr	r2, [r6, #8]
 80011b6:	6871      	ldr	r1, [r6, #4]
 80011b8:	6880      	ldr	r0, [r0, #8]
 80011ba:	f00f f980 	bl	80104be <__aeabi_memcpy>
 80011be:	e7d5      	b.n	800116c <ai_platform_network_process+0x318>
 80011c0:	46a2      	mov	sl, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f04f 0800 	mov.w	r8, #0
 80011c8:	465c      	mov	r4, fp
 80011ca:	f001 f897 	bl	80022fc <ai_layers_forward_all>
 80011ce:	46c1      	mov	r9, r8
 80011d0:	46c3      	mov	fp, r8
 80011d2:	e019      	b.n	8001208 <ai_platform_network_process+0x3b4>
 80011d4:	6871      	ldr	r1, [r6, #4]
 80011d6:	68b2      	ldr	r2, [r6, #8]
 80011d8:	4411      	add	r1, r2
 80011da:	6071      	str	r1, [r6, #4]
 80011dc:	6832      	ldr	r2, [r6, #0]
 80011de:	4291      	cmp	r1, r2
 80011e0:	d302      	bcc.n	80011e8 <ai_platform_network_process+0x394>
 80011e2:	68f1      	ldr	r1, [r6, #12]
 80011e4:	4249      	negs	r1, r1
 80011e6:	4411      	add	r1, r2
 80011e8:	6071      	str	r1, [r6, #4]
 80011ea:	460a      	mov	r2, r1
 80011ec:	6881      	ldr	r1, [r0, #8]
 80011ee:	68c3      	ldr	r3, [r0, #12]
 80011f0:	1ac9      	subs	r1, r1, r3
 80011f2:	1853      	adds	r3, r2, r1
 80011f4:	6083      	str	r3, [r0, #8]
 80011f6:	6872      	ldr	r2, [r6, #4]
 80011f8:	f8c0 200c 	str.w	r2, [r0, #12]
 80011fc:	f10b 0b01 	add.w	fp, fp, #1
 8001200:	f109 0910 	add.w	r9, r9, #16
 8001204:	f108 0804 	add.w	r8, r8, #4
 8001208:	2c00      	cmp	r4, #0
 800120a:	bf14      	ite	ne
 800120c:	8820      	ldrhne	r0, [r4, #0]
 800120e:	2000      	moveq	r0, #0
 8001210:	4583      	cmp	fp, r0
 8001212:	d21d      	bcs.n	8001250 <ai_platform_network_process+0x3fc>
 8001214:	6860      	ldr	r0, [r4, #4]
 8001216:	b1d8      	cbz	r0, 8001250 <ai_platform_network_process+0x3fc>
 8001218:	f850 0008 	ldr.w	r0, [r0, r8]
 800121c:	b1c0      	cbz	r0, 8001250 <ai_platform_network_process+0x3fc>
 800121e:	6980      	ldr	r0, [r0, #24]
 8001220:	68a1      	ldr	r1, [r4, #8]
 8001222:	6803      	ldr	r3, [r0, #0]
 8001224:	680a      	ldr	r2, [r1, #0]
 8001226:	0099      	lsls	r1, r3, #2
 8001228:	eb02 0609 	add.w	r6, r2, r9
 800122c:	d5d2      	bpl.n	80011d4 <ai_platform_network_process+0x380>
 800122e:	6881      	ldr	r1, [r0, #8]
 8001230:	68b2      	ldr	r2, [r6, #8]
 8001232:	6870      	ldr	r0, [r6, #4]
 8001234:	f00f f943 	bl	80104be <__aeabi_memcpy>
 8001238:	6870      	ldr	r0, [r6, #4]
 800123a:	68b1      	ldr	r1, [r6, #8]
 800123c:	4408      	add	r0, r1
 800123e:	6070      	str	r0, [r6, #4]
 8001240:	6831      	ldr	r1, [r6, #0]
 8001242:	4288      	cmp	r0, r1
 8001244:	d302      	bcc.n	800124c <ai_platform_network_process+0x3f8>
 8001246:	68f0      	ldr	r0, [r6, #12]
 8001248:	4240      	negs	r0, r0
 800124a:	4408      	add	r0, r1
 800124c:	6070      	str	r0, [r6, #4]
 800124e:	e7d5      	b.n	80011fc <ai_platform_network_process+0x3a8>
 8001250:	8ae8      	ldrh	r0, [r5, #22]
 8001252:	8aa9      	ldrh	r1, [r5, #20]
 8001254:	46a3      	mov	fp, r4
 8001256:	1c40      	adds	r0, r0, #1
 8001258:	82e8      	strh	r0, [r5, #22]
 800125a:	b280      	uxth	r0, r0
 800125c:	4288      	cmp	r0, r1
 800125e:	f4ff af77 	bcc.w	8001150 <ai_platform_network_process+0x2fc>
 8001262:	8ae8      	ldrh	r0, [r5, #22]
 8001264:	b003      	add	sp, #12
 8001266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800126c <.text_27>:
 800126c:	a1c00100 	.word	0xa1c00100

08001270 <.text_28>:
 8001270:	01030001 	.word	0x01030001

08001274 <.text_29>:
 8001274:	e0002000 	.word	0xe0002000

08001278 <.text_30>:
 8001278:	e0042000 	.word	0xe0042000

0800127c <.text_31>:
 800127c:	40023000 	.word	0x40023000

08001280 <.text_32>:
 8001280:	f407a5c2 	.word	0xf407a5c2

08001284 <.text_33>:
 8001284:	b5e8b5cd 	.word	0xb5e8b5cd

08001288 <.text_34>:
 8001288:	5c001000 	.word	0x5c001000

0800128c <.text_35>:
 800128c:	58024c00 	.word	0x58024c00

08001290 <.text_36>:
 8001290:	00000104 	.word	0x00000104

08001294 <.text_37>:
 8001294:	00000101 	.word	0x00000101

08001298 <.text_38>:
 8001298:	00000301 	.word	0x00000301

0800129c <.text_39>:
 800129c:	00001030 	.word	0x00001030

080012a0 <.text_40>:
 80012a0:	00001001 	.word	0x00001001

080012a4 <_platform_network_sanity_check{5}::signatures>:
 80012a4:	84048403                                ....

080012a8 <.text_42>:
 80012a8:	00001002 	.word	0x00001002

080012ac <.text_43>:
 80012ac:	00001010 	.word	0x00001010

080012b0 <.text_44>:
 80012b0:	00000000 	.word	0x00000000

080012b4 <.text_45>:
 80012b4:	00001010 	.word	0x00001010

080012b8 <core_init>:
 80012b8:	2001      	movs	r0, #1
 80012ba:	4770      	bx	lr

080012bc <core_get_error>:
 80012bc:	4601      	mov	r1, r0
 80012be:	2200      	movs	r2, #0
 80012c0:	6808      	ldr	r0, [r1, #0]
 80012c2:	600a      	str	r2, [r1, #0]
 80012c4:	4770      	bx	lr

080012c6 <core_set_error>:
 80012c6:	7803      	ldrb	r3, [r0, #0]
 80012c8:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 80012cc:	d104      	bne.n	80012d8 <core_set_error+0x12>
 80012ce:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80012d2:	6001      	str	r1, [r0, #0]
 80012d4:	2001      	movs	r0, #1
 80012d6:	4770      	bx	lr
 80012d8:	2000      	movs	r0, #0
 80012da:	4770      	bx	lr

080012dc <core_mem_alloc>:
 80012dc:	2800      	cmp	r0, #0
 80012de:	d100      	bne.n	80012e2 <core_mem_alloc+0x6>
 80012e0:	4770      	bx	lr
 80012e2:	b500      	push	{lr}
 80012e4:	b081      	sub	sp, #4
 80012e6:	1d00      	adds	r0, r0, #4
 80012e8:	f00f f916 	bl	8010518 <malloc>
 80012ec:	b108      	cbz	r0, 80012f2 <core_mem_alloc+0x16>
 80012ee:	6000      	str	r0, [r0, #0]
 80012f0:	1d00      	adds	r0, r0, #4
 80012f2:	b001      	add	sp, #4
 80012f4:	bd00      	pop	{pc}

080012f6 <core_mem_free>:
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d100      	bne.n	80012fc <core_mem_free+0x6>
 80012fa:	4770      	bx	lr
 80012fc:	b500      	push	{lr}
 80012fe:	b081      	sub	sp, #4
 8001300:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001304:	1f01      	subs	r1, r0, #4
 8001306:	428a      	cmp	r2, r1
 8001308:	d106      	bne.n	8001318 <core_mem_free+0x22>
 800130a:	b129      	cbz	r1, 8001318 <core_mem_free+0x22>
 800130c:	2000      	movs	r0, #0
 800130e:	6008      	str	r0, [r1, #0]
 8001310:	4608      	mov	r0, r1
 8001312:	f00f f909 	bl	8010528 <free>
 8001316:	2000      	movs	r0, #0
 8001318:	b001      	add	sp, #4
 800131a:	bd00      	pop	{pc}

0800131c <core_mem_realloc>:
 800131c:	b500      	push	{lr}
 800131e:	b081      	sub	sp, #4
 8001320:	b920      	cbnz	r0, 800132c <core_mem_realloc+0x10>
 8001322:	b1c1      	cbz	r1, 8001356 <core_mem_realloc+0x3a>
 8001324:	1d08      	adds	r0, r1, #4
 8001326:	f00f f8f7 	bl	8010518 <malloc>
 800132a:	e00e      	b.n	800134a <core_mem_realloc+0x2e>
 800132c:	b919      	cbnz	r1, 8001336 <core_mem_realloc+0x1a>
 800132e:	b001      	add	sp, #4
 8001330:	f85d eb04 	ldr.w	lr, [sp], #4
 8001334:	e7df      	b.n	80012f6 <core_mem_free>
 8001336:	1f02      	subs	r2, r0, #4
 8001338:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800133c:	4290      	cmp	r0, r2
 800133e:	d109      	bne.n	8001354 <core_mem_realloc+0x38>
 8001340:	b142      	cbz	r2, 8001354 <core_mem_realloc+0x38>
 8001342:	1d09      	adds	r1, r1, #4
 8001344:	4610      	mov	r0, r2
 8001346:	f00f fe77 	bl	8011038 <realloc>
 800134a:	b120      	cbz	r0, 8001356 <core_mem_realloc+0x3a>
 800134c:	6000      	str	r0, [r0, #0]
 800134e:	1d00      	adds	r0, r0, #4
 8001350:	b001      	add	sp, #4
 8001352:	bd00      	pop	{pc}
 8001354:	2000      	movs	r0, #0
 8001356:	b001      	add	sp, #4
 8001358:	bd00      	pop	{pc}
	...

0800135c <_core_inspect_tensor_list>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	0004      	movs	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	b081      	sub	sp, #4
 8001364:	bf14      	ite	ne
 8001366:	2d00      	cmpne	r5, #0
 8001368:	2000      	moveq	r0, #0
 800136a:	d025      	beq.n	80013b8 <_core_inspect_tensor_list+0x5c>
 800136c:	2000      	movs	r0, #0
 800136e:	2600      	movs	r6, #0
 8001370:	6028      	str	r0, [r5, #0]
 8001372:	2700      	movs	r7, #0
 8001374:	60a8      	str	r0, [r5, #8]
 8001376:	60e8      	str	r0, [r5, #12]
 8001378:	e017      	b.n	80013aa <_core_inspect_tensor_list+0x4e>
 800137a:	6841      	ldr	r1, [r0, #4]
 800137c:	4610      	mov	r0, r2
 800137e:	f005 fae7 	bl	8006950 <ai_array_get_byte_size>
 8001382:	e00a      	b.n	800139a <_core_inspect_tensor_list+0x3e>
 8001384:	59c0      	ldr	r0, [r0, r7]
 8001386:	2800      	cmp	r0, #0
 8001388:	d015      	beq.n	80013b6 <_core_inspect_tensor_list+0x5a>
 800138a:	bf1c      	itt	ne
 800138c:	6980      	ldrne	r0, [r0, #24]
 800138e:	2800      	cmpne	r0, #0
 8001390:	d006      	beq.n	80013a0 <_core_inspect_tensor_list+0x44>
 8001392:	6802      	ldr	r2, [r0, #0]
 8001394:	0051      	lsls	r1, r2, #1
 8001396:	d5f0      	bpl.n	800137a <_core_inspect_tensor_list+0x1e>
 8001398:	2000      	movs	r0, #0
 800139a:	68aa      	ldr	r2, [r5, #8]
 800139c:	1880      	adds	r0, r0, r2
 800139e:	60a8      	str	r0, [r5, #8]
 80013a0:	6828      	ldr	r0, [r5, #0]
 80013a2:	1c76      	adds	r6, r6, #1
 80013a4:	1d3f      	adds	r7, r7, #4
 80013a6:	1c40      	adds	r0, r0, #1
 80013a8:	6028      	str	r0, [r5, #0]
 80013aa:	8821      	ldrh	r1, [r4, #0]
 80013ac:	428e      	cmp	r6, r1
 80013ae:	d202      	bcs.n	80013b6 <_core_inspect_tensor_list+0x5a>
 80013b0:	6860      	ldr	r0, [r4, #4]
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1e6      	bne.n	8001384 <_core_inspect_tensor_list+0x28>
 80013b6:	6828      	ldr	r0, [r5, #0]
 80013b8:	b001      	add	sp, #4
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013bc <_core_inspect_forward_validate>:
 80013bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c0:	b090      	sub	sp, #64	; 0x40
 80013c2:	6882      	ldr	r2, [r0, #8]
 80013c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80013c6:	6891      	ldr	r1, [r2, #8]
 80013c8:	9100      	str	r1, [sp, #0]
 80013ca:	688e      	ldr	r6, [r1, #8]
 80013cc:	09f6      	lsrs	r6, r6, #7
 80013ce:	f006 0601 	and.w	r6, r6, #1
 80013d2:	f88d 6004 	strb.w	r6, [sp, #4]
 80013d6:	6943      	ldr	r3, [r0, #20]
 80013d8:	8818      	ldrh	r0, [r3, #0]
 80013da:	2800      	cmp	r0, #0
 80013dc:	bf19      	ittee	ne
 80013de:	685c      	ldrne	r4, [r3, #4]
 80013e0:	9408      	strne	r4, [sp, #32]
 80013e2:	2500      	moveq	r5, #0
 80013e4:	9508      	streq	r5, [sp, #32]
 80013e6:	2802      	cmp	r0, #2
 80013e8:	db04      	blt.n	80013f4 <_core_inspect_forward_validate+0x38>
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	f101 030c 	add.w	r3, r1, #12
 80013f0:	9307      	str	r3, [sp, #28]
 80013f2:	e001      	b.n	80013f8 <_core_inspect_forward_validate+0x3c>
 80013f4:	2400      	movs	r4, #0
 80013f6:	9407      	str	r4, [sp, #28]
 80013f8:	8ad3      	ldrh	r3, [r2, #22]
 80013fa:	2500      	movs	r5, #0
 80013fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80013fe:	9306      	str	r3, [sp, #24]
 8001400:	8a94      	ldrh	r4, [r2, #20]
 8001402:	950d      	str	r5, [sp, #52]	; 0x34
 8001404:	940b      	str	r4, [sp, #44]	; 0x2c
 8001406:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8001408:	4281      	cmp	r1, r0
 800140a:	f040 80f8 	bne.w	80015fe <_core_inspect_forward_validate+0x242>
 800140e:	9900      	ldr	r1, [sp, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	614a      	str	r2, [r1, #20]
 8001414:	9b00      	ldr	r3, [sp, #0]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	2800      	cmp	r0, #0
 800141a:	f040 80f0 	bne.w	80015fe <_core_inspect_forward_validate+0x242>
 800141e:	4618      	mov	r0, r3
 8001420:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001422:	6983      	ldr	r3, [r0, #24]
 8001424:	2700      	movs	r7, #0
 8001426:	4690      	mov	r8, r2
 8001428:	2400      	movs	r4, #0
 800142a:	b333      	cbz	r3, 800147a <_core_inspect_forward_validate+0xbe>
 800142c:	07d9      	lsls	r1, r3, #31
 800142e:	d504      	bpl.n	800143a <_core_inspect_forward_validate+0x7e>
 8001430:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001432:	2401      	movs	r4, #1
 8001434:	68cf      	ldr	r7, [r1, #12]
 8001436:	f8d1 801c 	ldr.w	r8, [r1, #28]
 800143a:	0858      	lsrs	r0, r3, #1
 800143c:	d01d      	beq.n	800147a <_core_inspect_forward_validate+0xbe>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001442:	fa1f fc84 	uxth.w	ip, r4
 8001446:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 800144a:	1c64      	adds	r4, r4, #1
 800144c:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 8001450:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8001454:	444f      	add	r7, r9
 8001456:	f8dc a01c 	ldr.w	sl, [ip, #28]
 800145a:	fa1f fc84 	uxth.w	ip, r4
 800145e:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 8001462:	1c64      	adds	r4, r4, #1
 8001464:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8001468:	1e40      	subs	r0, r0, #1
 800146a:	44d0      	add	r8, sl
 800146c:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8001470:	69d2      	ldr	r2, [r2, #28]
 8001472:	444f      	add	r7, r9
 8001474:	4490      	add	r8, r2
 8001476:	d1e3      	bne.n	8001440 <_core_inspect_forward_validate+0x84>
 8001478:	9100      	str	r1, [sp, #0]
 800147a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800147e:	9a00      	ldr	r2, [sp, #0]
 8001480:	017f      	lsls	r7, r7, #5
 8001482:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001486:	00c9      	lsls	r1, r1, #3
 8001488:	9102      	str	r1, [sp, #8]
 800148a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800148c:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8001490:	eb01 1940 	add.w	r9, r1, r0, lsl #5
 8001494:	0030      	movs	r0, r6
 8001496:	fb0a 7a05 	mla	sl, sl, r5, r7
 800149a:	f109 093b 	add.w	r9, r9, #59	; 0x3b
 800149e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80014a2:	f10a 0a03 	add.w	sl, sl, #3
 80014a6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 80014aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80014ae:	d00a      	beq.n	80014c6 <_core_inspect_forward_validate+0x10a>
 80014b0:	9900      	ldr	r1, [sp, #0]
 80014b2:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
 80014b6:	6b88      	ldr	r0, [r1, #56]	; 0x38
 80014b8:	fb00 8005 	mla	r0, r0, r5, r8
 80014bc:	1cc0      	adds	r0, r0, #3
 80014be:	0880      	lsrs	r0, r0, #2
 80014c0:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 80014c4:	e001      	b.n	80014ca <_core_inspect_forward_validate+0x10e>
 80014c6:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80014ca:	9900      	ldr	r1, [sp, #0]
 80014cc:	6a0c      	ldr	r4, [r1, #32]
 80014ce:	b15c      	cbz	r4, 80014e8 <_core_inspect_forward_validate+0x12c>
 80014d0:	4608      	mov	r0, r1
 80014d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80014d4:	b112      	cbz	r2, 80014dc <_core_inspect_forward_validate+0x120>
 80014d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80014d8:	4621      	mov	r1, r4
 80014da:	4790      	blx	r2
 80014dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014de:	4559      	cmp	r1, fp
 80014e0:	d20a      	bcs.n	80014f8 <_core_inspect_forward_validate+0x13c>
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff07 	bl	80012f6 <core_mem_free>
 80014e8:	4658      	mov	r0, fp
 80014ea:	f7ff fef7 	bl	80012dc <core_mem_alloc>
 80014ee:	0004      	movs	r4, r0
 80014f0:	f000 8085 	beq.w	80015fe <_core_inspect_forward_validate+0x242>
 80014f4:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 80014f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80014fc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001500:	61a0      	str	r0, [r4, #24]
 8001502:	9a02      	ldr	r2, [sp, #8]
 8001504:	1888      	adds	r0, r1, r2
 8001506:	61e0      	str	r0, [r4, #28]
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800150c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001510:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8001514:	6220      	str	r0, [r4, #32]
 8001516:	b13e      	cbz	r6, 8001528 <_core_inspect_forward_validate+0x16c>
 8001518:	eb04 0089 	add.w	r0, r4, r9, lsl #2
 800151c:	eb00 010a 	add.w	r1, r0, sl
 8001520:	eb01 0308 	add.w	r3, r1, r8
 8001524:	19c2      	adds	r2, r0, r7
 8001526:	e003      	b.n	8001530 <_core_inspect_forward_validate+0x174>
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	6323      	str	r3, [r4, #48]	; 0x30
 8001532:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001534:	f8df 2880 	ldr.w	r2, [pc, #2176]	; 8001db8 <.text_9>
 8001538:	62a1      	str	r1, [r4, #40]	; 0x28
 800153a:	6260      	str	r0, [r4, #36]	; 0x24
 800153c:	9800      	ldr	r0, [sp, #0]
 800153e:	6204      	str	r4, [r0, #32]
 8001540:	9900      	ldr	r1, [sp, #0]
 8001542:	61cd      	str	r5, [r1, #28]
 8001544:	9800      	ldr	r0, [sp, #0]
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	6901      	ldr	r1, [r0, #16]
 800154a:	6023      	str	r3, [r4, #0]
 800154c:	2000      	movs	r0, #0
 800154e:	1c5b      	adds	r3, r3, #1
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	6060      	str	r0, [r4, #4]
 8001554:	9b00      	ldr	r3, [sp, #0]
 8001556:	68dd      	ldr	r5, [r3, #12]
 8001558:	60a5      	str	r5, [r4, #8]
 800155a:	9a00      	ldr	r2, [sp, #0]
 800155c:	6993      	ldr	r3, [r2, #24]
 800155e:	69a2      	ldr	r2, [r4, #24]
 8001560:	60e3      	str	r3, [r4, #12]
 8001562:	6120      	str	r0, [r4, #16]
 8001564:	6162      	str	r2, [r4, #20]
 8001566:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001568:	2a00      	cmp	r2, #0
 800156a:	d048      	beq.n	80015fe <_core_inspect_forward_validate+0x242>
 800156c:	900a      	str	r0, [sp, #40]	; 0x28
 800156e:	9203      	str	r2, [sp, #12]
 8001570:	e000      	b.n	8001574 <_core_inspect_forward_validate+0x1b8>
 8001572:	9003      	str	r0, [sp, #12]
 8001574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001576:	9a00      	ldr	r2, [sp, #0]
 8001578:	9800      	ldr	r0, [sp, #0]
 800157a:	1c59      	adds	r1, r3, #1
 800157c:	910a      	str	r1, [sp, #40]	; 0x28
 800157e:	6a11      	ldr	r1, [r2, #32]
 8001580:	9104      	str	r1, [sp, #16]
 8001582:	9903      	ldr	r1, [sp, #12]
 8001584:	69c5      	ldr	r5, [r0, #28]
 8001586:	694a      	ldr	r2, [r1, #20]
 8001588:	8810      	ldrh	r0, [r2, #0]
 800158a:	2800      	cmp	r0, #0
 800158c:	bf14      	ite	ne
 800158e:	6851      	ldrne	r1, [r2, #4]
 8001590:	2100      	moveq	r1, #0
 8001592:	2802      	cmp	r0, #2
 8001594:	db04      	blt.n	80015a0 <_core_inspect_forward_validate+0x1e4>
 8001596:	6852      	ldr	r2, [r2, #4]
 8001598:	f102 040c 	add.w	r4, r2, #12
 800159c:	940c      	str	r4, [sp, #48]	; 0x30
 800159e:	e001      	b.n	80015a4 <_core_inspect_forward_validate+0x1e8>
 80015a0:	2600      	movs	r6, #0
 80015a2:	960c      	str	r6, [sp, #48]	; 0x30
 80015a4:	9a04      	ldr	r2, [sp, #16]
 80015a6:	9f00      	ldr	r7, [sp, #0]
 80015a8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80015ac:	9800      	ldr	r0, [sp, #0]
 80015ae:	6954      	ldr	r4, [r2, #20]
 80015b0:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 80015b4:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80015b8:	9e03      	ldr	r6, [sp, #12]
 80015ba:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 80015be:	6880      	ldr	r0, [r0, #8]
 80015c0:	eb0e 03c4 	add.w	r3, lr, r4, lsl #3
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	8837      	ldrh	r7, [r6, #0]
 80015c8:	2600      	movs	r6, #0
 80015ca:	09c0      	lsrs	r0, r0, #7
 80015cc:	8017      	strh	r7, [r2, #0]
 80015ce:	f000 0001 	and.w	r0, r0, #1
 80015d2:	9b03      	ldr	r3, [sp, #12]
 80015d4:	2800      	cmp	r0, #0
 80015d6:	885c      	ldrh	r4, [r3, #2]
 80015d8:	6096      	str	r6, [r2, #8]
 80015da:	8054      	strh	r4, [r2, #2]
 80015dc:	9b02      	ldr	r3, [sp, #8]
 80015de:	68dc      	ldr	r4, [r3, #12]
 80015e0:	8194      	strh	r4, [r2, #12]
 80015e2:	9e02      	ldr	r6, [sp, #8]
 80015e4:	69f3      	ldr	r3, [r6, #28]
 80015e6:	81d3      	strh	r3, [r2, #14]
 80015e8:	d147      	bne.n	800167a <_core_inspect_forward_validate+0x2be>
 80015ea:	2100      	movs	r1, #0
 80015ec:	6150      	str	r0, [r2, #20]
 80015ee:	6111      	str	r1, [r2, #16]
 80015f0:	9803      	ldr	r0, [sp, #12]
 80015f2:	9903      	ldr	r1, [sp, #12]
 80015f4:	68c0      	ldr	r0, [r0, #12]
 80015f6:	4281      	cmp	r1, r0
 80015f8:	bf18      	it	ne
 80015fa:	2800      	cmpne	r0, #0
 80015fc:	d1b9      	bne.n	8001572 <_core_inspect_forward_validate+0x1b6>
 80015fe:	9800      	ldr	r0, [sp, #0]
 8001600:	6a02      	ldr	r2, [r0, #32]
 8001602:	6941      	ldr	r1, [r0, #20]
 8001604:	9800      	ldr	r0, [sp, #0]
 8001606:	6953      	ldr	r3, [r2, #20]
 8001608:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800160c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001610:	9403      	str	r4, [sp, #12]
 8001612:	69d5      	ldr	r5, [r2, #28]
 8001614:	9504      	str	r5, [sp, #16]
 8001616:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800161a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800161c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001620:	9806      	ldr	r0, [sp, #24]
 8001622:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001626:	9102      	str	r1, [sp, #8]
 8001628:	9903      	ldr	r1, [sp, #12]
 800162a:	1c40      	adds	r0, r0, #1
 800162c:	8088      	strh	r0, [r1, #4]
 800162e:	9a03      	ldr	r2, [sp, #12]
 8001630:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001632:	80d0      	strh	r0, [r2, #6]
 8001634:	9900      	ldr	r1, [sp, #0]
 8001636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001638:	69c8      	ldr	r0, [r1, #28]
 800163a:	4290      	cmp	r0, r2
 800163c:	d104      	bne.n	8001648 <_core_inspect_forward_validate+0x28c>
 800163e:	9902      	ldr	r1, [sp, #8]
 8001640:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 8001644:	f005 fb67 	bl	8006d16 <core_timer_reset>
 8001648:	9800      	ldr	r0, [sp, #0]
 800164a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800164c:	6841      	ldr	r1, [r0, #4]
 800164e:	6890      	ldr	r0, [r2, #8]
 8001650:	6081      	str	r1, [r0, #8]
 8001652:	9902      	ldr	r1, [sp, #8]
 8001654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001656:	684a      	ldr	r2, [r1, #4]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001662:	2800      	cmp	r0, #0
 8001664:	f000 8105 	beq.w	8001872 <_core_inspect_forward_validate+0x4b6>
 8001668:	f04f 0900 	mov.w	r9, #0
 800166c:	46ca      	mov	sl, r9
 800166e:	9c08      	ldr	r4, [sp, #32]
 8001670:	9e06      	ldr	r6, [sp, #24]
 8001672:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001674:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001678:	e0ea      	b.n	8001850 <_core_inspect_forward_validate+0x494>
 800167a:	9804      	ldr	r0, [sp, #16]
 800167c:	9c02      	ldr	r4, [sp, #8]
 800167e:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
 8001682:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001684:	6920      	ldr	r0, [r4, #16]
 8001686:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800168a:	6110      	str	r0, [r2, #16]
 800168c:	9b04      	ldr	r3, [sp, #16]
 800168e:	9e02      	ldr	r6, [sp, #8]
 8001690:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001692:	6a33      	ldr	r3, [r6, #32]
 8001694:	eb04 1743 	add.w	r7, r4, r3, lsl #5
 8001698:	6157      	str	r7, [r2, #20]
 800169a:	9c04      	ldr	r4, [sp, #16]
 800169c:	9e02      	ldr	r6, [sp, #8]
 800169e:	2700      	movs	r7, #0
 80016a0:	46b8      	mov	r8, r7
 80016a2:	46ba      	mov	sl, r7
 80016a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016a6:	69b4      	ldr	r4, [r6, #24]
 80016a8:	9109      	str	r1, [sp, #36]	; 0x24
 80016aa:	9205      	str	r2, [sp, #20]
 80016ac:	436c      	muls	r4, r5
 80016ae:	191e      	adds	r6, r3, r4
 80016b0:	1d03      	adds	r3, r0, #4
 80016b2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80016b6:	eb03 09c4 	add.w	r9, r3, r4, lsl #3
 80016ba:	e021      	b.n	8001700 <_core_inspect_forward_validate+0x344>
 80016bc:	2000      	movs	r0, #0
 80016be:	f849 0c04 	str.w	r0, [r9, #-4]
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	f8c9 0000 	str.w	r0, [r9]
 80016c8:	2800      	cmp	r0, #0
 80016ca:	bf1c      	itt	ne
 80016cc:	8840      	ldrhne	r0, [r0, #2]
 80016ce:	2800      	cmpne	r0, #0
 80016d0:	bf07      	ittee	eq
 80016d2:	2100      	moveq	r1, #0
 80016d4:	f849 1c04 	streq.w	r1, [r9, #-4]
 80016d8:	2201      	movne	r2, #1
 80016da:	f849 2c04 	strne.w	r2, [r9, #-4]
 80016de:	bf00      	nop
 80016e0:	f8cb 1014 	str.w	r1, [fp, #20]
 80016e4:	69a0      	ldr	r0, [r4, #24]
 80016e6:	1c7f      	adds	r7, r7, #1
 80016e8:	f10a 0a18 	add.w	sl, sl, #24
 80016ec:	f109 0908 	add.w	r9, r9, #8
 80016f0:	f108 0804 	add.w	r8, r8, #4
 80016f4:	6841      	ldr	r1, [r0, #4]
 80016f6:	6800      	ldr	r0, [r0, #0]
 80016f8:	f005 f92a 	bl	8006950 <ai_array_get_byte_size>
 80016fc:	4368      	muls	r0, r5
 80016fe:	4406      	add	r6, r0
 8001700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001702:	b100      	cbz	r0, 8001706 <_core_inspect_forward_validate+0x34a>
 8001704:	8800      	ldrh	r0, [r0, #0]
 8001706:	4287      	cmp	r7, r0
 8001708:	d221      	bcs.n	800174e <_core_inspect_forward_validate+0x392>
 800170a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800170c:	6840      	ldr	r0, [r0, #4]
 800170e:	b1f0      	cbz	r0, 800174e <_core_inspect_forward_validate+0x392>
 8001710:	f850 4008 	ldr.w	r4, [r0, r8]
 8001714:	b1dc      	cbz	r4, 800174e <_core_inspect_forward_validate+0x392>
 8001716:	9805      	ldr	r0, [sp, #20]
 8001718:	69a2      	ldr	r2, [r4, #24]
 800171a:	6901      	ldr	r1, [r0, #16]
 800171c:	6810      	ldr	r0, [r2, #0]
 800171e:	eb01 0b0a 	add.w	fp, r1, sl
 8001722:	f005 f83d 	bl	80067a0 <ai_array_to_buffer_fmt>
 8001726:	f8cb 0000 	str.w	r0, [fp]
 800172a:	f8ab 5004 	strh.w	r5, [fp, #4]
 800172e:	68e0      	ldr	r0, [r4, #12]
 8001730:	68c1      	ldr	r1, [r0, #12]
 8001732:	f8ab 1006 	strh.w	r1, [fp, #6]
 8001736:	6882      	ldr	r2, [r0, #8]
 8001738:	f8ab 2008 	strh.w	r2, [fp, #8]
 800173c:	6840      	ldr	r0, [r0, #4]
 800173e:	f1b9 0104 	subs.w	r1, r9, #4
 8001742:	f8cb 000c 	str.w	r0, [fp, #12]
 8001746:	f8cb 6010 	str.w	r6, [fp, #16]
 800174a:	d1b7      	bne.n	80016bc <_core_inspect_forward_validate+0x300>
 800174c:	e7c8      	b.n	80016e0 <_core_inspect_forward_validate+0x324>
 800174e:	9804      	ldr	r0, [sp, #16]
 8001750:	9b02      	ldr	r3, [sp, #8]
 8001752:	9905      	ldr	r1, [sp, #20]
 8001754:	2700      	movs	r7, #0
 8001756:	46b8      	mov	r8, r7
 8001758:	46ba      	mov	sl, r7
 800175a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800175c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800175e:	89cc      	ldrh	r4, [r1, #14]
 8001760:	4368      	muls	r0, r5
 8001762:	1816      	adds	r6, r2, r0
 8001764:	694a      	ldr	r2, [r1, #20]
 8001766:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800176a:	9502      	str	r5, [sp, #8]
 800176c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800176e:	9105      	str	r1, [sp, #20]
 8001770:	1d13      	adds	r3, r2, #4
 8001772:	eb03 09ce 	add.w	r9, r3, lr, lsl #3
 8001776:	e022      	b.n	80017be <_core_inspect_forward_validate+0x402>
 8001778:	2000      	movs	r0, #0
 800177a:	f849 0c04 	str.w	r0, [r9, #-4]
 800177e:	6828      	ldr	r0, [r5, #0]
 8001780:	f8c9 0000 	str.w	r0, [r9]
 8001784:	2800      	cmp	r0, #0
 8001786:	bf1c      	itt	ne
 8001788:	8840      	ldrhne	r0, [r0, #2]
 800178a:	2800      	cmpne	r0, #0
 800178c:	bf07      	ittee	eq
 800178e:	2100      	moveq	r1, #0
 8001790:	f849 1c04 	streq.w	r1, [r9, #-4]
 8001794:	2201      	movne	r2, #1
 8001796:	f849 2c04 	strne.w	r2, [r9, #-4]
 800179a:	bf00      	nop
 800179c:	f8cb 1014 	str.w	r1, [fp, #20]
 80017a0:	69a8      	ldr	r0, [r5, #24]
 80017a2:	9d02      	ldr	r5, [sp, #8]
 80017a4:	1c7f      	adds	r7, r7, #1
 80017a6:	f10a 0a18 	add.w	sl, sl, #24
 80017aa:	f109 0908 	add.w	r9, r9, #8
 80017ae:	6841      	ldr	r1, [r0, #4]
 80017b0:	6800      	ldr	r0, [r0, #0]
 80017b2:	f108 0804 	add.w	r8, r8, #4
 80017b6:	f005 f8cb 	bl	8006950 <ai_array_get_byte_size>
 80017ba:	4345      	muls	r5, r0
 80017bc:	442e      	add	r6, r5
 80017be:	2c00      	cmp	r4, #0
 80017c0:	bf14      	ite	ne
 80017c2:	8820      	ldrhne	r0, [r4, #0]
 80017c4:	2000      	moveq	r0, #0
 80017c6:	4287      	cmp	r7, r0
 80017c8:	f4bf af12 	bcs.w	80015f0 <_core_inspect_forward_validate+0x234>
 80017cc:	6860      	ldr	r0, [r4, #4]
 80017ce:	2800      	cmp	r0, #0
 80017d0:	bf1c      	itt	ne
 80017d2:	f850 5008 	ldrne.w	r5, [r0, r8]
 80017d6:	2d00      	cmpne	r5, #0
 80017d8:	f43f af0a 	beq.w	80015f0 <_core_inspect_forward_validate+0x234>
 80017dc:	9805      	ldr	r0, [sp, #20]
 80017de:	69aa      	ldr	r2, [r5, #24]
 80017e0:	6941      	ldr	r1, [r0, #20]
 80017e2:	6810      	ldr	r0, [r2, #0]
 80017e4:	eb01 0b0a 	add.w	fp, r1, sl
 80017e8:	f004 ffda 	bl	80067a0 <ai_array_to_buffer_fmt>
 80017ec:	f8cb 0000 	str.w	r0, [fp]
 80017f0:	9802      	ldr	r0, [sp, #8]
 80017f2:	f8ab 0004 	strh.w	r0, [fp, #4]
 80017f6:	68e8      	ldr	r0, [r5, #12]
 80017f8:	68c1      	ldr	r1, [r0, #12]
 80017fa:	f8ab 1006 	strh.w	r1, [fp, #6]
 80017fe:	6882      	ldr	r2, [r0, #8]
 8001800:	f8ab 2008 	strh.w	r2, [fp, #8]
 8001804:	6840      	ldr	r0, [r0, #4]
 8001806:	f1b9 0104 	subs.w	r1, r9, #4
 800180a:	f8cb 000c 	str.w	r0, [fp, #12]
 800180e:	f8cb 6010 	str.w	r6, [fp, #16]
 8001812:	d1b1      	bne.n	8001778 <_core_inspect_forward_validate+0x3bc>
 8001814:	e7c2      	b.n	800179c <_core_inspect_forward_validate+0x3e0>
 8001816:	69a9      	ldr	r1, [r5, #24]
 8001818:	6808      	ldr	r0, [r1, #0]
 800181a:	0042      	lsls	r2, r0, #1
 800181c:	d414      	bmi.n	8001848 <_core_inspect_forward_validate+0x48c>
 800181e:	6849      	ldr	r1, [r1, #4]
 8001820:	f005 f896 	bl	8006950 <ai_array_get_byte_size>
 8001824:	69ab      	ldr	r3, [r5, #24]
 8001826:	4602      	mov	r2, r0
 8001828:	f8d8 5010 	ldr.w	r5, [r8, #16]
 800182c:	4370      	muls	r0, r6
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8001834:	f105 0c10 	add.w	ip, r5, #16
 8001838:	1c7f      	adds	r7, r7, #1
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	f85c e003 	ldr.w	lr, [ip, r3]
 8001840:	eb0e 0000 	add.w	r0, lr, r0
 8001844:	f00e fe3b 	bl	80104be <__aeabi_memcpy>
 8001848:	f109 0901 	add.w	r9, r9, #1
 800184c:	f10a 0a04 	add.w	sl, sl, #4
 8001850:	2c00      	cmp	r4, #0
 8001852:	bf14      	ite	ne
 8001854:	8820      	ldrhne	r0, [r4, #0]
 8001856:	2000      	moveq	r0, #0
 8001858:	4581      	cmp	r9, r0
 800185a:	d206      	bcs.n	800186a <_core_inspect_forward_validate+0x4ae>
 800185c:	6860      	ldr	r0, [r4, #4]
 800185e:	2800      	cmp	r0, #0
 8001860:	bf1c      	itt	ne
 8001862:	f850 500a 	ldrne.w	r5, [r0, sl]
 8001866:	2d00      	cmpne	r5, #0
 8001868:	d1d5      	bne.n	8001816 <_core_inspect_forward_validate+0x45a>
 800186a:	9408      	str	r4, [sp, #32]
 800186c:	9606      	str	r6, [sp, #24]
 800186e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001872:	9a00      	ldr	r2, [sp, #0]
 8001874:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001876:	2800      	cmp	r0, #0
 8001878:	d06c      	beq.n	8001954 <_core_inspect_forward_validate+0x598>
 800187a:	9a03      	ldr	r2, [sp, #12]
 800187c:	a909      	add	r1, sp, #36	; 0x24
 800187e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001882:	e892 40f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, lr}
 8001886:	e881 40f8 	stmia.w	r1, {r3, r4, r5, r6, r7, lr}
 800188a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800188e:	2100      	movs	r1, #0
 8001890:	910e      	str	r1, [sp, #56]	; 0x38
 8001892:	2600      	movs	r6, #0
 8001894:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8001898:	2700      	movs	r7, #0
 800189a:	4688      	mov	r8, r1
 800189c:	9c08      	ldr	r4, [sp, #32]
 800189e:	e00b      	b.n	80018b8 <_core_inspect_forward_validate+0x4fc>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e003      	b.n	80018ac <_core_inspect_forward_validate+0x4f0>
 80018a4:	000a      	movs	r2, r1
 80018a6:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 80018aa:	d0f9      	beq.n	80018a0 <_core_inspect_forward_validate+0x4e4>
 80018ac:	f8c9 0014 	str.w	r0, [r9, #20]
 80018b0:	1c76      	adds	r6, r6, #1
 80018b2:	1c7f      	adds	r7, r7, #1
 80018b4:	f108 0804 	add.w	r8, r8, #4
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	bf14      	ite	ne
 80018bc:	8820      	ldrhne	r0, [r4, #0]
 80018be:	2000      	moveq	r0, #0
 80018c0:	4287      	cmp	r7, r0
 80018c2:	d235      	bcs.n	8001930 <_core_inspect_forward_validate+0x574>
 80018c4:	6860      	ldr	r0, [r4, #4]
 80018c6:	b398      	cbz	r0, 8001930 <_core_inspect_forward_validate+0x574>
 80018c8:	f850 5008 	ldr.w	r5, [r0, r8]
 80018cc:	b385      	cbz	r5, 8001930 <_core_inspect_forward_validate+0x574>
 80018ce:	69a9      	ldr	r1, [r5, #24]
 80018d0:	6808      	ldr	r0, [r1, #0]
 80018d2:	0042      	lsls	r2, r0, #1
 80018d4:	d4ed      	bmi.n	80018b2 <_core_inspect_forward_validate+0x4f6>
 80018d6:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80018da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80018dc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80018e0:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80018e4:	f004 ff5c 	bl	80067a0 <ai_array_to_buffer_fmt>
 80018e8:	f8c9 0000 	str.w	r0, [r9]
 80018ec:	2001      	movs	r0, #1
 80018ee:	f8a9 0004 	strh.w	r0, [r9, #4]
 80018f2:	68e8      	ldr	r0, [r5, #12]
 80018f4:	68c1      	ldr	r1, [r0, #12]
 80018f6:	f8a9 1006 	strh.w	r1, [r9, #6]
 80018fa:	6882      	ldr	r2, [r0, #8]
 80018fc:	f8a9 2008 	strh.w	r2, [r9, #8]
 8001900:	6840      	ldr	r0, [r0, #4]
 8001902:	f8c9 000c 	str.w	r0, [r9, #12]
 8001906:	eb1b 00c6 	adds.w	r0, fp, r6, lsl #3
 800190a:	f8c9 a010 	str.w	sl, [r9, #16]
 800190e:	d0cd      	beq.n	80018ac <_core_inspect_forward_validate+0x4f0>
 8001910:	2100      	movs	r1, #0
 8001912:	f10b 0204 	add.w	r2, fp, #4
 8001916:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 800191a:	6829      	ldr	r1, [r5, #0]
 800191c:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
 8001920:	2900      	cmp	r1, #0
 8001922:	d0bf      	beq.n	80018a4 <_core_inspect_forward_validate+0x4e8>
 8001924:	8849      	ldrh	r1, [r1, #2]
 8001926:	1e49      	subs	r1, r1, #1
 8001928:	4189      	sbcs	r1, r1
 800192a:	43c9      	mvns	r1, r1
 800192c:	0fc9      	lsrs	r1, r1, #31
 800192e:	e7b9      	b.n	80018a4 <_core_inspect_forward_validate+0x4e8>
 8001930:	9802      	ldr	r0, [sp, #8]
 8001932:	eddf 0a97 	vldr	s1, [pc, #604]	; 8001b90 <.text_5>
 8001936:	9b00      	ldr	r3, [sp, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	a909      	add	r1, sp, #36	; 0x24
 800193c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001946:	ee60 0a20 	vmul.f32	s1, s0, s1
 800194a:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
 800194e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001950:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001952:	47a0      	blx	r4
 8001954:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001956:	f9b0 0000 	ldrsh.w	r0, [r0]
 800195a:	f000 fcc1 	bl	80022e0 <ai_layer_type_is_valid>
 800195e:	b148      	cbz	r0, 8001974 <_core_inspect_forward_validate+0x5b8>
 8001960:	9802      	ldr	r0, [sp, #8]
 8001962:	302c      	adds	r0, #44	; 0x2c
 8001964:	f005 f9dd 	bl	8006d22 <core_timer_start>
 8001968:	9810      	ldr	r0, [sp, #64]	; 0x40
 800196a:	6902      	ldr	r2, [r0, #16]
 800196c:	4790      	blx	r2
 800196e:	9802      	ldr	r0, [sp, #8]
 8001970:	302c      	adds	r0, #44	; 0x2c
 8001972:	e007      	b.n	8001984 <_core_inspect_forward_validate+0x5c8>
 8001974:	9902      	ldr	r1, [sp, #8]
 8001976:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 800197a:	f005 f9d2 	bl	8006d22 <core_timer_start>
 800197e:	9a02      	ldr	r2, [sp, #8]
 8001980:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8001984:	f005 f9d7 	bl	8006d36 <core_timer_stop>
 8001988:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800198c:	b3a0      	cbz	r0, 80019f8 <_core_inspect_forward_validate+0x63c>
 800198e:	2700      	movs	r7, #0
 8001990:	46b9      	mov	r9, r7
 8001992:	46ba      	mov	sl, r7
 8001994:	9c07      	ldr	r4, [sp, #28]
 8001996:	9e06      	ldr	r6, [sp, #24]
 8001998:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800199c:	e01c      	b.n	80019d8 <_core_inspect_forward_validate+0x61c>
 800199e:	69a9      	ldr	r1, [r5, #24]
 80019a0:	6808      	ldr	r0, [r1, #0]
 80019a2:	0042      	lsls	r2, r0, #1
 80019a4:	d414      	bmi.n	80019d0 <_core_inspect_forward_validate+0x614>
 80019a6:	6849      	ldr	r1, [r1, #4]
 80019a8:	f004 ffd2 	bl	8006950 <ai_array_get_byte_size>
 80019ac:	69ab      	ldr	r3, [r5, #24]
 80019ae:	4602      	mov	r2, r0
 80019b0:	f8d8 5014 	ldr.w	r5, [r8, #20]
 80019b4:	4370      	muls	r0, r6
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80019bc:	f105 0c10 	add.w	ip, r5, #16
 80019c0:	1c7f      	adds	r7, r7, #1
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	f85c e003 	ldr.w	lr, [ip, r3]
 80019c8:	eb0e 0000 	add.w	r0, lr, r0
 80019cc:	f00e fd77 	bl	80104be <__aeabi_memcpy>
 80019d0:	f109 0901 	add.w	r9, r9, #1
 80019d4:	f10a 0a04 	add.w	sl, sl, #4
 80019d8:	2c00      	cmp	r4, #0
 80019da:	bf14      	ite	ne
 80019dc:	8820      	ldrhne	r0, [r4, #0]
 80019de:	2000      	moveq	r0, #0
 80019e0:	4581      	cmp	r9, r0
 80019e2:	d206      	bcs.n	80019f2 <_core_inspect_forward_validate+0x636>
 80019e4:	6860      	ldr	r0, [r4, #4]
 80019e6:	2800      	cmp	r0, #0
 80019e8:	bf1c      	itt	ne
 80019ea:	f850 500a 	ldrne.w	r5, [r0, sl]
 80019ee:	2d00      	cmpne	r5, #0
 80019f0:	d1d5      	bne.n	800199e <_core_inspect_forward_validate+0x5e2>
 80019f2:	9407      	str	r4, [sp, #28]
 80019f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80019f8:	9a00      	ldr	r2, [sp, #0]
 80019fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019fc:	2900      	cmp	r1, #0
 80019fe:	d06b      	beq.n	8001ad8 <_core_inspect_forward_validate+0x71c>
 8001a00:	9a03      	ldr	r2, [sp, #12]
 8001a02:	a808      	add	r0, sp, #32
 8001a04:	2100      	movs	r1, #0
 8001a06:	4688      	mov	r8, r1
 8001a08:	e892 40f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, lr}
 8001a0c:	e880 40f8 	stmia.w	r0, {r3, r4, r5, r6, r7, lr}
 8001a10:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8001a14:	9904      	ldr	r1, [sp, #16]
 8001a16:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8001a1a:	2600      	movs	r6, #0
 8001a1c:	910d      	str	r1, [sp, #52]	; 0x34
 8001a1e:	2700      	movs	r7, #0
 8001a20:	9c07      	ldr	r4, [sp, #28]
 8001a22:	e00b      	b.n	8001a3c <_core_inspect_forward_validate+0x680>
 8001a24:	2000      	movs	r0, #0
 8001a26:	e003      	b.n	8001a30 <_core_inspect_forward_validate+0x674>
 8001a28:	000a      	movs	r2, r1
 8001a2a:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 8001a2e:	d0f9      	beq.n	8001a24 <_core_inspect_forward_validate+0x668>
 8001a30:	f8c9 0014 	str.w	r0, [r9, #20]
 8001a34:	1c76      	adds	r6, r6, #1
 8001a36:	1c7f      	adds	r7, r7, #1
 8001a38:	f108 0804 	add.w	r8, r8, #4
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	8820      	ldrhne	r0, [r4, #0]
 8001a42:	2000      	moveq	r0, #0
 8001a44:	4287      	cmp	r7, r0
 8001a46:	d235      	bcs.n	8001ab4 <_core_inspect_forward_validate+0x6f8>
 8001a48:	6860      	ldr	r0, [r4, #4]
 8001a4a:	b398      	cbz	r0, 8001ab4 <_core_inspect_forward_validate+0x6f8>
 8001a4c:	f850 5008 	ldr.w	r5, [r0, r8]
 8001a50:	b385      	cbz	r5, 8001ab4 <_core_inspect_forward_validate+0x6f8>
 8001a52:	69a9      	ldr	r1, [r5, #24]
 8001a54:	6808      	ldr	r0, [r1, #0]
 8001a56:	0042      	lsls	r2, r0, #1
 8001a58:	d4ed      	bmi.n	8001a36 <_core_inspect_forward_validate+0x67a>
 8001a5a:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8001a5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001a60:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001a64:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 8001a68:	f004 fe9a 	bl	80067a0 <ai_array_to_buffer_fmt>
 8001a6c:	f8c9 0000 	str.w	r0, [r9]
 8001a70:	2001      	movs	r0, #1
 8001a72:	f8a9 0004 	strh.w	r0, [r9, #4]
 8001a76:	68e8      	ldr	r0, [r5, #12]
 8001a78:	68c1      	ldr	r1, [r0, #12]
 8001a7a:	f8a9 1006 	strh.w	r1, [r9, #6]
 8001a7e:	6882      	ldr	r2, [r0, #8]
 8001a80:	f8a9 2008 	strh.w	r2, [r9, #8]
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	f8c9 000c 	str.w	r0, [r9, #12]
 8001a8a:	eb1b 00c6 	adds.w	r0, fp, r6, lsl #3
 8001a8e:	f8c9 a010 	str.w	sl, [r9, #16]
 8001a92:	d0cd      	beq.n	8001a30 <_core_inspect_forward_validate+0x674>
 8001a94:	2100      	movs	r1, #0
 8001a96:	f10b 0204 	add.w	r2, fp, #4
 8001a9a:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 8001a9e:	6829      	ldr	r1, [r5, #0]
 8001aa0:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	d0bf      	beq.n	8001a28 <_core_inspect_forward_validate+0x66c>
 8001aa8:	8849      	ldrh	r1, [r1, #2]
 8001aaa:	1e49      	subs	r1, r1, #1
 8001aac:	4189      	sbcs	r1, r1
 8001aae:	43c9      	mvns	r1, r1
 8001ab0:	0fc9      	lsrs	r1, r1, #31
 8001ab2:	e7b9      	b.n	8001a28 <_core_inspect_forward_validate+0x66c>
 8001ab4:	9802      	ldr	r0, [sp, #8]
 8001ab6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8001b90 <.text_5>
 8001aba:	9b00      	ldr	r3, [sp, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	a908      	add	r1, sp, #32
 8001ac0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001ac4:	9800      	ldr	r0, [sp, #0]
 8001ac6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001aca:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001ace:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8001ad2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001ad4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001ad6:	47a0      	blx	r4
 8001ad8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001ada:	9800      	ldr	r0, [sp, #0]
 8001adc:	688a      	ldr	r2, [r1, #8]
 8001ade:	6090      	str	r0, [r2, #8]
 8001ae0:	9802      	ldr	r0, [sp, #8]
 8001ae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001ae4:	6881      	ldr	r1, [r0, #8]
 8001ae6:	f041 0101 	orr.w	r1, r1, #1
 8001aea:	6111      	str	r1, [r2, #16]
 8001aec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001aee:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001af0:	68c0      	ldr	r0, [r0, #12]
 8001af2:	4281      	cmp	r1, r0
 8001af4:	bf18      	it	ne
 8001af6:	2800      	cmpne	r0, #0
 8001af8:	d142      	bne.n	8001b80 <_core_inspect_forward_validate+0x7c4>
 8001afa:	9800      	ldr	r0, [sp, #0]
 8001afc:	68c2      	ldr	r2, [r0, #12]
 8001afe:	1c52      	adds	r2, r2, #1
 8001b00:	60c2      	str	r2, [r0, #12]
 8001b02:	9800      	ldr	r0, [sp, #0]
 8001b04:	9900      	ldr	r1, [sp, #0]
 8001b06:	69c0      	ldr	r0, [r0, #28]
 8001b08:	1e40      	subs	r0, r0, #1
 8001b0a:	61c8      	str	r0, [r1, #28]
 8001b0c:	d138      	bne.n	8001b80 <_core_inspect_forward_validate+0x7c4>
 8001b0e:	9800      	ldr	r0, [sp, #0]
 8001b10:	2400      	movs	r4, #0
 8001b12:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001b90 <.text_5>
 8001b16:	6a03      	ldr	r3, [r0, #32]
 8001b18:	6880      	ldr	r0, [r0, #8]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	1a52      	subs	r2, r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	09c0      	lsrs	r0, r0, #7
 8001b26:	9900      	ldr	r1, [sp, #0]
 8001b28:	f000 0001 	and.w	r0, r0, #1
 8001b2c:	698a      	ldr	r2, [r1, #24]
 8001b2e:	b33a      	cbz	r2, 8001b80 <_core_inspect_forward_validate+0x7c4>
 8001b30:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8001b32:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
 8001b36:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8001b3a:	3534      	adds	r5, #52	; 0x34
 8001b3c:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8001b40:	695d      	ldr	r5, [r3, #20]
 8001b42:	edd6 0a00 	vldr	s1, [r6]
 8001b46:	00fe      	lsls	r6, r7, #3
 8001b48:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001b4c:	f105 0c08 	add.w	ip, r5, #8
 8001b50:	44b4      	add	ip, r6
 8001b52:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001b56:	edcc 0a00 	vstr	s1, [ip]
 8001b5a:	ed93 1a04 	vldr	s2, [r3, #16]
 8001b5e:	ee71 0a20 	vadd.f32	s1, s2, s1
 8001b62:	edc3 0a04 	vstr	s1, [r3, #16]
 8001b66:	b930      	cbnz	r0, 8001b76 <_core_inspect_forward_validate+0x7ba>
 8001b68:	2700      	movs	r7, #0
 8001b6a:	f105 0c14 	add.w	ip, r5, #20
 8001b6e:	f84c 7006 	str.w	r7, [ip, r6]
 8001b72:	3510      	adds	r5, #16
 8001b74:	51af      	str	r7, [r5, r6]
 8001b76:	1c64      	adds	r4, r4, #1
 8001b78:	b2a4      	uxth	r4, r4
 8001b7a:	4294      	cmp	r4, r2
 8001b7c:	d3d8      	bcc.n	8001b30 <_core_inspect_forward_validate+0x774>
 8001b7e:	9100      	str	r1, [sp, #0]
 8001b80:	9800      	ldr	r0, [sp, #0]
 8001b82:	6941      	ldr	r1, [r0, #20]
 8001b84:	1c49      	adds	r1, r1, #1
 8001b86:	6141      	str	r1, [r0, #20]
 8001b88:	b011      	add	sp, #68	; 0x44
 8001b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001b90 <.text_5>:
 8001b90:	3a83126f 	.word	0x3a83126f

08001b94 <ai_network_inspect_init>:
 8001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	2600      	movs	r6, #0
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	f7fe fec0 	bl	8000922 <ai_platform_context_acquire>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	bf1c      	itt	ne
 8001ba8:	6d01      	ldrne	r1, [r0, #80]	; 0x50
 8001baa:	2900      	cmpne	r1, #0
 8001bac:	d010      	beq.n	8001bd0 <ai_network_inspect_init+0x3c>
 8001bae:	e000      	b.n	8001bb2 <ai_network_inspect_init+0x1e>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	68c8      	ldr	r0, [r1, #12]
 8001bb4:	1c76      	adds	r6, r6, #1
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	bf18      	it	ne
 8001bba:	2800      	cmpne	r0, #0
 8001bbc:	d1f8      	bne.n	8001bb0 <ai_network_inspect_init+0x1c>
 8001bbe:	b13e      	cbz	r6, 8001bd0 <ai_network_inspect_init+0x3c>
 8001bc0:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	3040      	adds	r0, #64	; 0x40
 8001bc8:	f7ff fb88 	bl	80012dc <core_mem_alloc>
 8001bcc:	0005      	movs	r5, r0
 8001bce:	d103      	bne.n	8001bd8 <ai_network_inspect_init+0x44>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	b003      	add	sp, #12
 8001bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	4978      	ldr	r1, [pc, #480]	; (8001dbc <.text_10>)
 8001bdc:	6001      	str	r1, [r0, #0]
 8001bde:	bf14      	ite	ne
 8001be0:	6861      	ldrne	r1, [r4, #4]
 8001be2:	2100      	moveq	r1, #0
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	6281      	str	r1, [r0, #40]	; 0x28
 8001be8:	bf14      	ite	ne
 8001bea:	68a1      	ldrne	r1, [r4, #8]
 8001bec:	2100      	moveq	r1, #0
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001bf2:	bf14      	ite	ne
 8001bf4:	68e1      	ldrne	r1, [r4, #12]
 8001bf6:	2100      	moveq	r1, #0
 8001bf8:	2c00      	cmp	r4, #0
 8001bfa:	6301      	str	r1, [r0, #48]	; 0x30
 8001bfc:	bf14      	ite	ne
 8001bfe:	7821      	ldrbne	r1, [r4, #0]
 8001c00:	2101      	moveq	r1, #1
 8001c02:	6081      	str	r1, [r0, #8]
 8001c04:	9900      	ldr	r1, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	688a      	ldr	r2, [r1, #8]
 8001c0a:	60c3      	str	r3, [r0, #12]
 8001c0c:	6042      	str	r2, [r0, #4]
 8001c0e:	9900      	ldr	r1, [sp, #0]
 8001c10:	6101      	str	r1, [r0, #16]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8001c18:	6186      	str	r6, [r0, #24]
 8001c1a:	6142      	str	r2, [r0, #20]
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	61c3      	str	r3, [r0, #28]
 8001c20:	4691      	mov	r9, r2
 8001c22:	6241      	str	r1, [r0, #36]	; 0x24
 8001c24:	4966      	ldr	r1, [pc, #408]	; (8001dc0 <.text_11>)
 8001c26:	6202      	str	r2, [r0, #32]
 8001c28:	9b00      	ldr	r3, [sp, #0]
 8001c2a:	f041 0101 	orr.w	r1, r1, #1
 8001c2e:	4690      	mov	r8, r2
 8001c30:	2600      	movs	r6, #0
 8001c32:	6098      	str	r0, [r3, #8]
 8001c34:	9102      	str	r1, [sp, #8]
 8001c36:	9a02      	ldr	r2, [sp, #8]
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	636e      	str	r6, [r5, #52]	; 0x34
 8001c3c:	63ae      	str	r6, [r5, #56]	; 0x38
 8001c3e:	9a00      	ldr	r2, [sp, #0]
 8001c40:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d054      	beq.n	8001cf0 <ai_network_inspect_init+0x15c>
 8001c46:	4607      	mov	r7, r0
 8001c48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001c4a:	ebca 01ca 	rsb	r1, sl, sl, lsl #3
 8001c4e:	9a01      	ldr	r2, [sp, #4]
 8001c50:	eb10 04c1 	adds.w	r4, r0, r1, lsl #3
 8001c54:	f10a 0a01 	add.w	sl, sl, #1
 8001c58:	60a2      	str	r2, [r4, #8]
 8001c5a:	bf08      	it	eq
 8001c5c:	f04f 0b00 	moveq.w	fp, #0
 8001c60:	d021      	beq.n	8001ca6 <ai_network_inspect_init+0x112>
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	6020      	str	r0, [r4, #0]
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	f041 0101 	orr.w	r1, r1, #1
 8001c6c:	6061      	str	r1, [r4, #4]
 8001c6e:	9a02      	ldr	r2, [sp, #8]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	613a      	str	r2, [r7, #16]
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	8808      	ldrh	r0, [r1, #0]
 8001c7a:	b108      	cbz	r0, 8001c80 <ai_network_inspect_init+0xec>
 8001c7c:	f8d1 0004 	ldr.w	r0, [r1, #4]
 8001c80:	f104 010c 	add.w	r1, r4, #12
 8001c84:	f7ff fb6a 	bl	800135c <_core_inspect_tensor_list>
 8001c88:	4683      	mov	fp, r0
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	8801      	ldrh	r1, [r0, #0]
 8001c8e:	2902      	cmp	r1, #2
 8001c90:	f104 011c 	add.w	r1, r4, #28
 8001c94:	bfa6      	itte	ge
 8001c96:	6840      	ldrge	r0, [r0, #4]
 8001c98:	300c      	addge	r0, #12
 8001c9a:	2000      	movlt	r0, #0
 8001c9c:	f7ff fb5e 	bl	800135c <_core_inspect_tensor_list>
 8001ca0:	4583      	cmp	fp, r0
 8001ca2:	bf38      	it	cc
 8001ca4:	4683      	movcc	fp, r0
 8001ca6:	68e0      	ldr	r0, [r4, #12]
 8001ca8:	f8c4 9010 	str.w	r9, [r4, #16]
 8001cac:	69e1      	ldr	r1, [r4, #28]
 8001cae:	f8c4 8020 	str.w	r8, [r4, #32]
 8001cb2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001cb4:	45b3      	cmp	fp, r6
 8001cb6:	4481      	add	r9, r0
 8001cb8:	61a2      	str	r2, [r4, #24]
 8001cba:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001cbc:	4488      	add	r8, r1
 8001cbe:	62a0      	str	r0, [r4, #40]	; 0x28
 8001cc0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001cc2:	6962      	ldr	r2, [r4, #20]
 8001cc4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001cc6:	bf28      	it	cs
 8001cc8:	465e      	movcs	r6, fp
 8001cca:	1851      	adds	r1, r2, r1
 8001ccc:	6369      	str	r1, [r5, #52]	; 0x34
 8001cce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cd0:	1808      	adds	r0, r1, r0
 8001cd2:	63a8      	str	r0, [r5, #56]	; 0x38
 8001cd4:	f9b7 0000 	ldrsh.w	r0, [r7]
 8001cd8:	f000 fa7a 	bl	80021d0 <ai_layer_type_name>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001ce2:	f005 f803 	bl	8006cec <core_timer_init>
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	4287      	cmp	r7, r0
 8001cea:	bf18      	it	ne
 8001cec:	2800      	cmpne	r0, #0
 8001cee:	d1aa      	bne.n	8001c46 <ai_network_inspect_init+0xb2>
 8001cf0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001cf2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001cf4:	1cc0      	adds	r0, r0, #3
 8001cf6:	0880      	lsrs	r0, r0, #2
 8001cf8:	0080      	lsls	r0, r0, #2
 8001cfa:	63ee      	str	r6, [r5, #60]	; 0x3c
 8001cfc:	1cc9      	adds	r1, r1, #3
 8001cfe:	0889      	lsrs	r1, r1, #2
 8001d00:	0089      	lsls	r1, r1, #2
 8001d02:	6368      	str	r0, [r5, #52]	; 0x34
 8001d04:	63a9      	str	r1, [r5, #56]	; 0x38
 8001d06:	9800      	ldr	r0, [sp, #0]
 8001d08:	b003      	add	sp, #12
 8001d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d0e:	1d01      	adds	r1, r0, #4
 8001d10:	f000 b90a 	b.w	8001f28 <core_utils_generate_network_signature>

08001d14 <ai_network_inspect_get_report>:
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	b081      	sub	sp, #4
 8001d18:	460c      	mov	r4, r1
 8001d1a:	f7fe fe02 	bl	8000922 <ai_platform_context_acquire>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	bf18      	it	ne
 8001d22:	2c00      	cmpne	r4, #0
 8001d24:	d002      	beq.n	8001d2c <ai_network_inspect_get_report+0x18>
 8001d26:	6881      	ldr	r1, [r0, #8]
 8001d28:	6a09      	ldr	r1, [r1, #32]
 8001d2a:	b911      	cbnz	r1, 8001d32 <ai_network_inspect_get_report+0x1e>
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	b001      	add	sp, #4
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	e891 10ec 	ldmia.w	r1, {r2, r3, r5, r6, r7, ip}
 8001d36:	e884 10ec 	stmia.w	r4, {r2, r3, r5, r6, r7, ip}
 8001d3a:	6840      	ldr	r0, [r0, #4]
 8001d3c:	6060      	str	r0, [r4, #4]
 8001d3e:	2001      	movs	r0, #1
 8001d40:	b001      	add	sp, #4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d44 <ai_network_inspect_destroy>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	f7fe fdec 	bl	8000922 <ai_platform_context_acquire>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2900      	cmp	r1, #0
 8001d50:	bf1c      	itt	ne
 8001d52:	688c      	ldrne	r4, [r1, #8]
 8001d54:	2c00      	cmpne	r4, #0
 8001d56:	d003      	beq.n	8001d60 <ai_network_inspect_destroy+0x1c>
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <.text_10>)
 8001d5c:	4290      	cmp	r0, r2
 8001d5e:	d001      	beq.n	8001d64 <ai_network_inspect_destroy+0x20>
 8001d60:	2000      	movs	r0, #0
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001d66:	b19a      	cbz	r2, 8001d90 <ai_network_inspect_destroy+0x4c>
 8001d68:	e000      	b.n	8001d6c <ai_network_inspect_destroy+0x28>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d6e:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8001d72:	1c5b      	adds	r3, r3, #1
 8001d74:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001d78:	b128      	cbz	r0, 8001d86 <ai_network_inspect_destroy+0x42>
 8001d7a:	6806      	ldr	r6, [r0, #0]
 8001d7c:	6056      	str	r6, [r2, #4]
 8001d7e:	6840      	ldr	r0, [r0, #4]
 8001d80:	f040 0001 	orr.w	r0, r0, #1
 8001d84:	6110      	str	r0, [r2, #16]
 8001d86:	68d0      	ldr	r0, [r2, #12]
 8001d88:	4282      	cmp	r2, r0
 8001d8a:	bf18      	it	ne
 8001d8c:	2800      	cmpne	r0, #0
 8001d8e:	d1ec      	bne.n	8001d6a <ai_network_inspect_destroy+0x26>
 8001d90:	6860      	ldr	r0, [r4, #4]
 8001d92:	6088      	str	r0, [r1, #8]
 8001d94:	6a21      	ldr	r1, [r4, #32]
 8001d96:	b921      	cbnz	r1, 8001da2 <ai_network_inspect_destroy+0x5e>
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff faac 	bl	80012f6 <core_mem_free>
 8001d9e:	2001      	movs	r0, #1
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001da4:	b10a      	cbz	r2, 8001daa <ai_network_inspect_destroy+0x66>
 8001da6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001da8:	4790      	blx	r2
 8001daa:	6a20      	ldr	r0, [r4, #32]
 8001dac:	f7ff faa3 	bl	80012f6 <core_mem_free>
 8001db0:	2000      	movs	r0, #0
 8001db2:	6220      	str	r0, [r4, #32]
 8001db4:	e7f0      	b.n	8001d98 <ai_network_inspect_destroy+0x54>
	...

08001db8 <.text_9>:
 8001db8:	20000000 	.word	0x20000000

08001dbc <.text_10>:
 8001dbc:	a1c00101 	.word	0xa1c00101

08001dc0 <.text_11>:
 8001dc0:	080013bd 	.word	0x080013bd

08001dc4 <serialize_signature_buffer_>:
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	b081      	sub	sp, #4
 8001dca:	2100      	movs	r1, #0
 8001dcc:	9100      	str	r1, [sp, #0]
 8001dce:	b10c      	cbz	r4, 8001dd4 <serialize_signature_buffer_+0x10>
 8001dd0:	6801      	ldr	r1, [r0, #0]
 8001dd2:	6021      	str	r1, [r4, #0]
 8001dd4:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8001dd6:	1d27      	adds	r7, r4, #4
 8001dd8:	2e00      	cmp	r6, #0
 8001dda:	d048      	beq.n	8001e6e <serialize_signature_buffer_+0xaa>
 8001ddc:	e000      	b.n	8001de0 <serialize_signature_buffer_+0x1c>
 8001dde:	4606      	mov	r6, r0
 8001de0:	6970      	ldr	r0, [r6, #20]
 8001de2:	8801      	ldrh	r1, [r0, #0]
 8001de4:	2902      	cmp	r1, #2
 8001de6:	bfa6      	itte	ge
 8001de8:	6840      	ldrge	r0, [r0, #4]
 8001dea:	3010      	addge	r0, #16
 8001dec:	2004      	movlt	r0, #4
 8001dee:	6800      	ldr	r0, [r0, #0]
 8001df0:	2800      	cmp	r0, #0
 8001df2:	bf14      	ite	ne
 8001df4:	6805      	ldrne	r5, [r0, #0]
 8001df6:	2500      	moveq	r5, #0
 8001df8:	9800      	ldr	r0, [sp, #0]
 8001dfa:	1c40      	adds	r0, r0, #1
 8001dfc:	9000      	str	r0, [sp, #0]
 8001dfe:	b90c      	cbnz	r4, 8001e04 <serialize_signature_buffer_+0x40>
 8001e00:	1cb8      	adds	r0, r7, #2
 8001e02:	e009      	b.n	8001e18 <serialize_signature_buffer_+0x54>
 8001e04:	7830      	ldrb	r0, [r6, #0]
 8001e06:	1cb1      	adds	r1, r6, #2
 8001e08:	7038      	strb	r0, [r7, #0]
 8001e0a:	7870      	ldrb	r0, [r6, #1]
 8001e0c:	7078      	strb	r0, [r7, #1]
 8001e0e:	780a      	ldrb	r2, [r1, #0]
 8001e10:	1cb8      	adds	r0, r7, #2
 8001e12:	7002      	strb	r2, [r0, #0]
 8001e14:	784a      	ldrb	r2, [r1, #1]
 8001e16:	7042      	strb	r2, [r0, #1]
 8001e18:	1c87      	adds	r7, r0, #2
 8001e1a:	b31d      	cbz	r5, 8001e64 <serialize_signature_buffer_+0xa0>
 8001e1c:	b194      	cbz	r4, 8001e44 <serialize_signature_buffer_+0x80>
 8001e1e:	69a8      	ldr	r0, [r5, #24]
 8001e20:	f105 0208 	add.w	r2, r5, #8
 8001e24:	6801      	ldr	r1, [r0, #0]
 8001e26:	1d38      	adds	r0, r7, #4
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	68e9      	ldr	r1, [r5, #12]
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	6003      	str	r3, [r0, #0]
 8001e30:	6853      	ldr	r3, [r2, #4]
 8001e32:	6043      	str	r3, [r0, #4]
 8001e34:	68aa      	ldr	r2, [r5, #8]
 8001e36:	f107 000c 	add.w	r0, r7, #12
 8001e3a:	0a12      	lsrs	r2, r2, #8
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	f00e fb3e 	bl	80104be <__aeabi_memcpy>
 8001e42:	bf00      	nop
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	68af      	ldr	r7, [r5, #8]
 8001e4a:	0a3f      	lsrs	r7, r7, #8
 8001e4c:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 8001e50:	b134      	cbz	r4, 8001e60 <serialize_signature_buffer_+0x9c>
 8001e52:	f105 0110 	add.w	r1, r5, #16
 8001e56:	680a      	ldr	r2, [r1, #0]
 8001e58:	6002      	str	r2, [r0, #0]
 8001e5a:	684a      	ldr	r2, [r1, #4]
 8001e5c:	6042      	str	r2, [r0, #4]
 8001e5e:	bf00      	nop
 8001e60:	f100 0708 	add.w	r7, r0, #8
 8001e64:	68f0      	ldr	r0, [r6, #12]
 8001e66:	4286      	cmp	r6, r0
 8001e68:	bf18      	it	ne
 8001e6a:	2800      	cmpne	r0, #0
 8001e6c:	d1b7      	bne.n	8001dde <serialize_signature_buffer_+0x1a>
 8001e6e:	b10c      	cbz	r4, 8001e74 <serialize_signature_buffer_+0xb0>
 8001e70:	9900      	ldr	r1, [sp, #0]
 8001e72:	6039      	str	r1, [r7, #0]
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	1b08      	subs	r0, r1, r4
 8001e78:	b001      	add	sp, #4
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e7c <core_utils_compute_crc32>:
 8001e7c:	b470      	push	{r4, r5, r6}
 8001e7e:	0849      	lsrs	r1, r1, #1
 8001e80:	2400      	movs	r4, #0
 8001e82:	2300      	movs	r3, #0
 8001e84:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001e88:	4602      	mov	r2, r0
 8001e8a:	d32a      	bcc.n	8001ee2 <core_utils_compute_crc32+0x66>
 8001e8c:	f05f 002d 	movs.w	r0, #45	; 0x2d
 8001e90:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001e94:	1964      	adds	r4, r4, r5
 8001e96:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	1964      	adds	r4, r4, r5
 8001e9e:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001ea2:	18e3      	adds	r3, r4, r3
 8001ea4:	1964      	adds	r4, r4, r5
 8001ea6:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001eaa:	18e3      	adds	r3, r4, r3
 8001eac:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001eb0:	1964      	adds	r4, r4, r5
 8001eb2:	18e3      	adds	r3, r4, r3
 8001eb4:	19a4      	adds	r4, r4, r6
 8001eb6:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001eba:	18e3      	adds	r3, r4, r3
 8001ebc:	19a4      	adds	r4, r4, r6
 8001ebe:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001ec2:	18e3      	adds	r3, r4, r3
 8001ec4:	19a4      	adds	r4, r4, r6
 8001ec6:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001eca:	18e3      	adds	r3, r4, r3
 8001ecc:	19a4      	adds	r4, r4, r6
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	1e40      	subs	r0, r0, #1
 8001ed2:	d1dd      	bne.n	8001e90 <core_utils_compute_crc32+0x14>
 8001ed4:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 8001ed8:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001edc:	b2a4      	uxth	r4, r4
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	d2d4      	bcs.n	8001e8c <core_utils_compute_crc32+0x10>
 8001ee2:	b1e9      	cbz	r1, 8001f20 <core_utils_compute_crc32+0xa4>
 8001ee4:	f011 0003 	ands.w	r0, r1, #3
 8001ee8:	f000 8006 	beq.w	8001ef8 <core_utils_compute_crc32+0x7c>
 8001eec:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001ef0:	1964      	adds	r4, r4, r5
 8001ef2:	18e3      	adds	r3, r4, r3
 8001ef4:	1e40      	subs	r0, r0, #1
 8001ef6:	d1f9      	bne.n	8001eec <core_utils_compute_crc32+0x70>
 8001ef8:	0889      	lsrs	r1, r1, #2
 8001efa:	d011      	beq.n	8001f20 <core_utils_compute_crc32+0xa4>
 8001efc:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001f00:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001f04:	1820      	adds	r0, r4, r0
 8001f06:	18c3      	adds	r3, r0, r3
 8001f08:	f832 4b02 	ldrh.w	r4, [r2], #2
 8001f0c:	1940      	adds	r0, r0, r5
 8001f0e:	18c3      	adds	r3, r0, r3
 8001f10:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001f14:	1900      	adds	r0, r0, r4
 8001f16:	18c3      	adds	r3, r0, r3
 8001f18:	1944      	adds	r4, r0, r5
 8001f1a:	18e3      	adds	r3, r4, r3
 8001f1c:	1e49      	subs	r1, r1, #1
 8001f1e:	d1ed      	bne.n	8001efc <core_utils_compute_crc32+0x80>
 8001f20:	eac4 4003 	pkhbt	r0, r4, r3, lsl #16
 8001f24:	bc70      	pop	{r4, r5, r6}
 8001f26:	4770      	bx	lr

08001f28 <core_utils_generate_network_signature>:
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	0006      	movs	r6, r0
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	b081      	sub	sp, #4
 8001f30:	bf18      	it	ne
 8001f32:	2d00      	cmpne	r5, #0
 8001f34:	d00a      	beq.n	8001f4c <core_utils_generate_network_signature+0x24>
 8001f36:	2100      	movs	r1, #0
 8001f38:	f7ff ff44 	bl	8001dc4 <serialize_signature_buffer_>
 8001f3c:	4607      	mov	r7, r0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	6028      	str	r0, [r5, #0]
 8001f42:	4638      	mov	r0, r7
 8001f44:	f7ff f9ca 	bl	80012dc <core_mem_alloc>
 8001f48:	0004      	movs	r4, r0
 8001f4a:	d102      	bne.n	8001f52 <core_utils_generate_network_signature+0x2a>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	b001      	add	sp, #4
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f52:	4621      	mov	r1, r4
 8001f54:	4630      	mov	r0, r6
 8001f56:	f7ff ff35 	bl	8001dc4 <serialize_signature_buffer_>
 8001f5a:	4639      	mov	r1, r7
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff ff8d 	bl	8001e7c <core_utils_compute_crc32>
 8001f62:	6028      	str	r0, [r5, #0]
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff f9c6 	bl	80012f6 <core_mem_free>
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	b001      	add	sp, #4
 8001f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f70 <core_get_broadcasted_shape>:
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	4603      	mov	r3, r0
 8001f76:	6808      	ldr	r0, [r1, #0]
 8001f78:	681c      	ldr	r4, [r3, #0]
 8001f7a:	0a00      	lsrs	r0, r0, #8
 8001f7c:	f360 241f 	bfi	r4, r0, #8, #24
 8001f80:	601c      	str	r4, [r3, #0]
 8001f82:	0004      	movs	r4, r0
 8001f84:	d048      	beq.n	8002018 <core_get_broadcasted_shape+0xa8>
 8001f86:	6852      	ldr	r2, [r2, #4]
 8001f88:	684e      	ldr	r6, [r1, #4]
 8001f8a:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8001f94:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 8001f98:	1f2d      	subs	r5, r5, #4
 8001f9a:	1f0f      	subs	r7, r1, #4
 8001f9c:	f010 0103 	ands.w	r1, r0, #3
 8001fa0:	f1ac 0c04 	sub.w	ip, ip, #4
 8001fa4:	f000 800f 	beq.w	8001fc6 <core_get_broadcasted_shape+0x56>
 8001fa8:	f8d7 e000 	ldr.w	lr, [r7]
 8001fac:	f8d5 8000 	ldr.w	r8, [r5]
 8001fb0:	1e64      	subs	r4, r4, #1
 8001fb2:	45f0      	cmp	r8, lr
 8001fb4:	bf28      	it	cs
 8001fb6:	46c6      	movcs	lr, r8
 8001fb8:	1e49      	subs	r1, r1, #1
 8001fba:	1f3f      	subs	r7, r7, #4
 8001fbc:	1f2d      	subs	r5, r5, #4
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	f84c e904 	str.w	lr, [ip], #-4
 8001fc4:	d1f0      	bne.n	8001fa8 <core_get_broadcasted_shape+0x38>
 8001fc6:	0880      	lsrs	r0, r0, #2
 8001fc8:	d026      	beq.n	8002018 <core_get_broadcasted_shape+0xa8>
 8001fca:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8001fce:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8001fd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001fd6:	3910      	subs	r1, #16
 8001fd8:	3a10      	subs	r2, #16
 8001fda:	3b10      	subs	r3, #16
 8001fdc:	68d4      	ldr	r4, [r2, #12]
 8001fde:	68cd      	ldr	r5, [r1, #12]
 8001fe0:	42ac      	cmp	r4, r5
 8001fe2:	bf38      	it	cc
 8001fe4:	462c      	movcc	r4, r5
 8001fe6:	60dc      	str	r4, [r3, #12]
 8001fe8:	6894      	ldr	r4, [r2, #8]
 8001fea:	688d      	ldr	r5, [r1, #8]
 8001fec:	42ac      	cmp	r4, r5
 8001fee:	bf38      	it	cc
 8001ff0:	462c      	movcc	r4, r5
 8001ff2:	609c      	str	r4, [r3, #8]
 8001ff4:	6854      	ldr	r4, [r2, #4]
 8001ff6:	684d      	ldr	r5, [r1, #4]
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	bf38      	it	cc
 8001ffc:	462c      	movcc	r4, r5
 8001ffe:	605c      	str	r4, [r3, #4]
 8002000:	6814      	ldr	r4, [r2, #0]
 8002002:	680d      	ldr	r5, [r1, #0]
 8002004:	42a5      	cmp	r5, r4
 8002006:	bf28      	it	cs
 8002008:	462c      	movcs	r4, r5
 800200a:	1e40      	subs	r0, r0, #1
 800200c:	3a10      	subs	r2, #16
 800200e:	3910      	subs	r1, #16
 8002010:	2800      	cmp	r0, #0
 8002012:	f843 4910 	str.w	r4, [r3], #-16
 8002016:	d1e1      	bne.n	8001fdc <core_get_broadcasted_shape+0x6c>
 8002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800201c <core_compute_offsets>:
 800201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002020:	680b      	ldr	r3, [r1, #0]
 8002022:	6804      	ldr	r4, [r0, #0]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f363 241f 	bfi	r4, r3, #8, #24
 800202a:	6004      	str	r4, [r0, #0]
 800202c:	684f      	ldr	r7, [r1, #4]
 800202e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8002032:	6840      	ldr	r0, [r0, #4]
 8002034:	6839      	ldr	r1, [r7, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800203c:	f8dc 2000 	ldr.w	r2, [ip]
 8002040:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002044:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8002048:	68ff      	ldr	r7, [r7, #12]
 800204a:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800204e:	4291      	cmp	r1, r2
 8002050:	bf14      	ite	ne
 8002052:	2201      	movne	r2, #1
 8002054:	2200      	moveq	r2, #0
 8002056:	42a3      	cmp	r3, r4
 8002058:	bf14      	ite	ne
 800205a:	2401      	movne	r4, #1
 800205c:	2400      	moveq	r4, #0
 800205e:	45b0      	cmp	r8, r6
 8002060:	f084 0e01 	eor.w	lr, r4, #1
 8002064:	ea02 0e0e 	and.w	lr, r2, lr
 8002068:	bf14      	ite	ne
 800206a:	2601      	movne	r6, #1
 800206c:	2600      	moveq	r6, #0
 800206e:	4567      	cmp	r7, ip
 8002070:	f082 0c01 	eor.w	ip, r2, #1
 8002074:	f086 0501 	eor.w	r5, r6, #1
 8002078:	f8c0 c000 	str.w	ip, [r0]
 800207c:	bf14      	ite	ne
 800207e:	2701      	movne	r7, #1
 8002080:	2700      	moveq	r7, #0
 8002082:	434b      	muls	r3, r1
 8002084:	4025      	ands	r5, r4
 8002086:	4015      	ands	r5, r2
 8002088:	4361      	muls	r1, r4
 800208a:	fb08 f803 	mul.w	r8, r8, r3
 800208e:	4373      	muls	r3, r6
 8002090:	ebae 0e01 	sub.w	lr, lr, r1
 8002094:	f8c0 e004 	str.w	lr, [r0, #4]
 8002098:	1aed      	subs	r5, r5, r3
 800209a:	1949      	adds	r1, r1, r5
 800209c:	6081      	str	r1, [r0, #8]
 800209e:	f087 0101 	eor.w	r1, r7, #1
 80020a2:	400e      	ands	r6, r1
 80020a4:	4034      	ands	r4, r6
 80020a6:	4022      	ands	r2, r4
 80020a8:	fb08 2217 	mls	r2, r8, r7, r2
 80020ac:	189a      	adds	r2, r3, r2
 80020ae:	60c2      	str	r2, [r0, #12]
 80020b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020b4 <core_tensor_clone>:
 80020b4:	b470      	push	{r4, r5, r6}
 80020b6:	680a      	ldr	r2, [r1, #0]
 80020b8:	6002      	str	r2, [r0, #0]
 80020ba:	684b      	ldr	r3, [r1, #4]
 80020bc:	6043      	str	r3, [r0, #4]
 80020be:	698c      	ldr	r4, [r1, #24]
 80020c0:	6184      	str	r4, [r0, #24]
 80020c2:	688a      	ldr	r2, [r1, #8]
 80020c4:	6883      	ldr	r3, [r0, #8]
 80020c6:	0a12      	lsrs	r2, r2, #8
 80020c8:	f362 231f 	bfi	r3, r2, #8, #24
 80020cc:	6083      	str	r3, [r0, #8]
 80020ce:	6882      	ldr	r2, [r0, #8]
 80020d0:	2300      	movs	r3, #0
 80020d2:	0a12      	lsrs	r2, r2, #8
 80020d4:	d025      	beq.n	8002122 <core_tensor_clone+0x6e>
 80020d6:	68cc      	ldr	r4, [r1, #12]
 80020d8:	68c2      	ldr	r2, [r0, #12]
 80020da:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80020de:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80020e2:	1c5b      	adds	r3, r3, #1
 80020e4:	6886      	ldr	r6, [r0, #8]
 80020e6:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 80020ea:	d21a      	bcs.n	8002122 <core_tensor_clone+0x6e>
 80020ec:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80020f0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80020f4:	1c5b      	adds	r3, r3, #1
 80020f6:	6886      	ldr	r6, [r0, #8]
 80020f8:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 80020fc:	d211      	bcs.n	8002122 <core_tensor_clone+0x6e>
 80020fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002102:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002106:	1c5b      	adds	r3, r3, #1
 8002108:	6886      	ldr	r6, [r0, #8]
 800210a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800210e:	d208      	bcs.n	8002122 <core_tensor_clone+0x6e>
 8002110:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8002114:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8002118:	1c5b      	adds	r3, r3, #1
 800211a:	6882      	ldr	r2, [r0, #8]
 800211c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8002120:	d3d9      	bcc.n	80020d6 <core_tensor_clone+0x22>
 8002122:	690a      	ldr	r2, [r1, #16]
 8002124:	6903      	ldr	r3, [r0, #16]
 8002126:	0a12      	lsrs	r2, r2, #8
 8002128:	f362 231f 	bfi	r3, r2, #8, #24
 800212c:	6103      	str	r3, [r0, #16]
 800212e:	6902      	ldr	r2, [r0, #16]
 8002130:	2300      	movs	r3, #0
 8002132:	0a12      	lsrs	r2, r2, #8
 8002134:	d025      	beq.n	8002182 <core_tensor_clone+0xce>
 8002136:	694c      	ldr	r4, [r1, #20]
 8002138:	6942      	ldr	r2, [r0, #20]
 800213a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800213e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002142:	1c5b      	adds	r3, r3, #1
 8002144:	6906      	ldr	r6, [r0, #16]
 8002146:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800214a:	d21a      	bcs.n	8002182 <core_tensor_clone+0xce>
 800214c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002150:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002154:	1c5b      	adds	r3, r3, #1
 8002156:	6906      	ldr	r6, [r0, #16]
 8002158:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800215c:	d211      	bcs.n	8002182 <core_tensor_clone+0xce>
 800215e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002162:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002166:	1c5b      	adds	r3, r3, #1
 8002168:	6906      	ldr	r6, [r0, #16]
 800216a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800216e:	d208      	bcs.n	8002182 <core_tensor_clone+0xce>
 8002170:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8002174:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8002178:	1c5b      	adds	r3, r3, #1
 800217a:	6902      	ldr	r2, [r0, #16]
 800217c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8002180:	d3d9      	bcc.n	8002136 <core_tensor_clone+0x82>
 8002182:	bc70      	pop	{r4, r5, r6}
 8002184:	4770      	bx	lr

08002186 <core_array_clone>:
 8002186:	b430      	push	{r4, r5}
 8002188:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 800218c:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
 8002190:	bc30      	pop	{r4, r5}
 8002192:	4770      	bx	lr

08002194 <ai_layers_forward_layer>:
 8002194:	b510      	push	{r4, lr}
 8002196:	4604      	mov	r4, r0
 8002198:	6921      	ldr	r1, [r4, #16]
 800219a:	4788      	blx	r1
 800219c:	68e0      	ldr	r0, [r4, #12]
 800219e:	42a0      	cmp	r0, r4
 80021a0:	bf08      	it	eq
 80021a2:	2000      	moveq	r0, #0
 80021a4:	bd10      	pop	{r4, pc}
	...

080021a8 <ai_check_custom_types>:
 80021a8:	b500      	push	{lr}
 80021aa:	b081      	sub	sp, #4
 80021ac:	b160      	cbz	r0, 80021c8 <ai_check_custom_types+0x20>
 80021ae:	7801      	ldrb	r1, [r0, #0]
 80021b0:	2903      	cmp	r1, #3
 80021b2:	d109      	bne.n	80021c8 <ai_check_custom_types+0x20>
 80021b4:	f05f 0204 	movs.w	r2, #4
 80021b8:	a18d      	add	r1, pc, #564	; (adr r1, 80023f0 <ai_check_custom_types::ref_signatures>)
 80021ba:	f00e f9bd 	bl	8010538 <memcmp>
 80021be:	1e40      	subs	r0, r0, #1
 80021c0:	4180      	sbcs	r0, r0
 80021c2:	0fc0      	lsrs	r0, r0, #31
 80021c4:	b001      	add	sp, #4
 80021c6:	bd00      	pop	{pc}
 80021c8:	2000      	movs	r0, #0
 80021ca:	b001      	add	sp, #4
 80021cc:	bd00      	pop	{pc}
	...

080021d0 <ai_layer_type_name>:
 80021d0:	f242 7211 	movw	r2, #10001	; 0x2711
 80021d4:	1a81      	subs	r1, r0, r2
 80021d6:	2901      	cmp	r1, #1
 80021d8:	bf81      	itttt	hi
 80021da:	1ec9      	subhi	r1, r1, #3
 80021dc:	290d      	cmphi	r1, #13
 80021de:	390f      	subhi	r1, #15
 80021e0:	2909      	cmphi	r1, #9
 80021e2:	f200 806b 	bhi.w	80022bc <ai_layer_type_name+0xec>
 80021e6:	1a80      	subs	r0, r0, r2
 80021e8:	d033      	beq.n	8002252 <ai_layer_type_name+0x82>
 80021ea:	1e40      	subs	r0, r0, #1
 80021ec:	d033      	beq.n	8002256 <ai_layer_type_name+0x86>
 80021ee:	1e80      	subs	r0, r0, #2
 80021f0:	d033      	beq.n	800225a <ai_layer_type_name+0x8a>
 80021f2:	1e40      	subs	r0, r0, #1
 80021f4:	d034      	beq.n	8002260 <ai_layer_type_name+0x90>
 80021f6:	1e40      	subs	r0, r0, #1
 80021f8:	d034      	beq.n	8002264 <ai_layer_type_name+0x94>
 80021fa:	1e40      	subs	r0, r0, #1
 80021fc:	d034      	beq.n	8002268 <ai_layer_type_name+0x98>
 80021fe:	1e40      	subs	r0, r0, #1
 8002200:	d034      	beq.n	800226c <ai_layer_type_name+0x9c>
 8002202:	1e40      	subs	r0, r0, #1
 8002204:	d034      	beq.n	8002270 <ai_layer_type_name+0xa0>
 8002206:	1e40      	subs	r0, r0, #1
 8002208:	d034      	beq.n	8002274 <ai_layer_type_name+0xa4>
 800220a:	1e40      	subs	r0, r0, #1
 800220c:	d034      	beq.n	8002278 <ai_layer_type_name+0xa8>
 800220e:	1e40      	subs	r0, r0, #1
 8002210:	d034      	beq.n	800227c <ai_layer_type_name+0xac>
 8002212:	1e40      	subs	r0, r0, #1
 8002214:	d034      	beq.n	8002280 <ai_layer_type_name+0xb0>
 8002216:	1e40      	subs	r0, r0, #1
 8002218:	d034      	beq.n	8002284 <ai_layer_type_name+0xb4>
 800221a:	1e40      	subs	r0, r0, #1
 800221c:	d034      	beq.n	8002288 <ai_layer_type_name+0xb8>
 800221e:	1e40      	subs	r0, r0, #1
 8002220:	d034      	beq.n	800228c <ai_layer_type_name+0xbc>
 8002222:	1e40      	subs	r0, r0, #1
 8002224:	d034      	beq.n	8002290 <ai_layer_type_name+0xc0>
 8002226:	1e80      	subs	r0, r0, #2
 8002228:	d034      	beq.n	8002294 <ai_layer_type_name+0xc4>
 800222a:	1e40      	subs	r0, r0, #1
 800222c:	d034      	beq.n	8002298 <ai_layer_type_name+0xc8>
 800222e:	1e40      	subs	r0, r0, #1
 8002230:	d034      	beq.n	800229c <ai_layer_type_name+0xcc>
 8002232:	1e40      	subs	r0, r0, #1
 8002234:	d034      	beq.n	80022a0 <ai_layer_type_name+0xd0>
 8002236:	1e40      	subs	r0, r0, #1
 8002238:	d034      	beq.n	80022a4 <ai_layer_type_name+0xd4>
 800223a:	1e40      	subs	r0, r0, #1
 800223c:	d034      	beq.n	80022a8 <ai_layer_type_name+0xd8>
 800223e:	1e40      	subs	r0, r0, #1
 8002240:	d034      	beq.n	80022ac <ai_layer_type_name+0xdc>
 8002242:	1e40      	subs	r0, r0, #1
 8002244:	d034      	beq.n	80022b0 <ai_layer_type_name+0xe0>
 8002246:	1e40      	subs	r0, r0, #1
 8002248:	d034      	beq.n	80022b4 <ai_layer_type_name+0xe4>
 800224a:	1e40      	subs	r0, r0, #1
 800224c:	d034      	beq.n	80022b8 <ai_layer_type_name+0xe8>
 800224e:	a01c      	add	r0, pc, #112	; (adr r0, 80022c0 <.text_5>)
 8002250:	4770      	bx	lr
 8002252:	a01c      	add	r0, pc, #112	; (adr r0, 80022c4 <.text_6>)
 8002254:	4770      	bx	lr
 8002256:	a01c      	add	r0, pc, #112	; (adr r0, 80022c8 <.text_7>)
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	a031      	add	r0, pc, #196	; (adr r0, 8002324 <.text_15>)
 800225e:	4770      	bx	lr
 8002260:	a032      	add	r0, pc, #200	; (adr r0, 800232c <.text_16>)
 8002262:	4770      	bx	lr
 8002264:	a019      	add	r0, pc, #100	; (adr r0, 80022cc <.text_8>)
 8002266:	4770      	bx	lr
 8002268:	a019      	add	r0, pc, #100	; (adr r0, 80022d0 <.text_9>)
 800226a:	4770      	bx	lr
 800226c:	a031      	add	r0, pc, #196	; (adr r0, 8002334 <.text_17>)
 800226e:	4770      	bx	lr
 8002270:	a018      	add	r0, pc, #96	; (adr r0, 80022d4 <.text_10>)
 8002272:	4770      	bx	lr
 8002274:	a031      	add	r0, pc, #196	; (adr r0, 800233c <.text_18>)
 8002276:	4770      	bx	lr
 8002278:	a032      	add	r0, pc, #200	; (adr r0, 8002344 <.text_19>)
 800227a:	4770      	bx	lr
 800227c:	a036      	add	r0, pc, #216	; (adr r0, 8002358 <.text_20>)
 800227e:	4770      	bx	lr
 8002280:	a038      	add	r0, pc, #224	; (adr r0, 8002364 <.text_21>)
 8002282:	4770      	bx	lr
 8002284:	a014      	add	r0, pc, #80	; (adr r0, 80022d8 <.text_11>)
 8002286:	4770      	bx	lr
 8002288:	a038      	add	r0, pc, #224	; (adr r0, 800236c <.text_22>)
 800228a:	4770      	bx	lr
 800228c:	a039      	add	r0, pc, #228	; (adr r0, 8002374 <.text_23>)
 800228e:	4770      	bx	lr
 8002290:	a03b      	add	r0, pc, #236	; (adr r0, 8002380 <.text_24>)
 8002292:	4770      	bx	lr
 8002294:	a03f      	add	r0, pc, #252	; (adr r0, 8002394 <.text_25>)
 8002296:	4770      	bx	lr
 8002298:	a040      	add	r0, pc, #256	; (adr r0, 800239c <.text_26>)
 800229a:	4770      	bx	lr
 800229c:	a041      	add	r0, pc, #260	; (adr r0, 80023a4 <.text_27>)
 800229e:	4770      	bx	lr
 80022a0:	a043      	add	r0, pc, #268	; (adr r0, 80023b0 <.text_28>)
 80022a2:	4770      	bx	lr
 80022a4:	a044      	add	r0, pc, #272	; (adr r0, 80023b8 <.text_29>)
 80022a6:	4770      	bx	lr
 80022a8:	a045      	add	r0, pc, #276	; (adr r0, 80023c0 <.text_30>)
 80022aa:	4770      	bx	lr
 80022ac:	a00b      	add	r0, pc, #44	; (adr r0, 80022dc <.text_12>)
 80022ae:	4770      	bx	lr
 80022b0:	a049      	add	r0, pc, #292	; (adr r0, 80023d8 <.text_31>)
 80022b2:	4770      	bx	lr
 80022b4:	a04a      	add	r0, pc, #296	; (adr r0, 80023e0 <.text_32>)
 80022b6:	4770      	bx	lr
 80022b8:	a04b      	add	r0, pc, #300	; (adr r0, 80023e8 <.text_33>)
 80022ba:	4770      	bx	lr
 80022bc:	a000      	add	r0, pc, #0	; (adr r0, 80022c0 <.text_5>)
 80022be:	4770      	bx	lr

080022c0 <.text_5>:
 80022c0:	00000000 	.word	0x00000000

080022c4 <.text_6>:
 80022c4:	00444441 	.word	0x00444441

080022c8 <.text_7>:
 80022c8:	00004e42 	.word	0x00004e42

080022cc <.text_8>:
 80022cc:	00555247 	.word	0x00555247

080022d0 <.text_9>:
 80022d0:	004e524c 	.word	0x004e524c

080022d4 <.text_10>:
 80022d4:	00004c4e 	.word	0x00004c4e

080022d8 <.text_11>:
 80022d8:	00004d53 	.word	0x00004d53

080022dc <.text_12>:
 80022dc:	00444150 	.word	0x00444150

080022e0 <ai_layer_type_is_valid>:
 80022e0:	f242 7111 	movw	r1, #10001	; 0x2711
 80022e4:	1a40      	subs	r0, r0, r1
 80022e6:	2801      	cmp	r0, #1
 80022e8:	bf81      	itttt	hi
 80022ea:	1ec0      	subhi	r0, r0, #3
 80022ec:	280d      	cmphi	r0, #13
 80022ee:	380f      	subhi	r0, #15
 80022f0:	2809      	cmphi	r0, #9
 80022f2:	d801      	bhi.n	80022f8 <ai_layer_type_is_valid+0x18>
 80022f4:	2001      	movs	r0, #1
 80022f6:	4770      	bx	lr
 80022f8:	2000      	movs	r0, #0
 80022fa:	4770      	bx	lr

080022fc <ai_layers_forward_all>:
 80022fc:	b530      	push	{r4, r5, lr}
 80022fe:	b081      	sub	sp, #4
 8002300:	4604      	mov	r4, r0
 8002302:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002304:	b158      	cbz	r0, 800231e <ai_layers_forward_all+0x22>
 8002306:	6560      	str	r0, [r4, #84]	; 0x54
 8002308:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800230a:	6929      	ldr	r1, [r5, #16]
 800230c:	4628      	mov	r0, r5
 800230e:	4788      	blx	r1
 8002310:	68e8      	ldr	r0, [r5, #12]
 8002312:	42a8      	cmp	r0, r5
 8002314:	bf08      	it	eq
 8002316:	2000      	moveq	r0, #0
 8002318:	2800      	cmp	r0, #0
 800231a:	6560      	str	r0, [r4, #84]	; 0x54
 800231c:	d1f4      	bne.n	8002308 <ai_layers_forward_all+0xc>
 800231e:	b001      	add	sp, #4
 8002320:	bd30      	pop	{r4, r5, pc}
	...

08002324 <.text_15>:
 8002324:	564e4f43 	.word	0x564e4f43
 8002328:	00004432 	.word	0x00004432

0800232c <.text_16>:
 800232c:	534e4544 	.word	0x534e4544
 8002330:	0045      	.short	0x0045
	...

08002334 <.text_17>:
 8002334:	4d54534c 	.word	0x4d54534c
 8002338:	00          	.byte	0x00
 8002339:	00          	.byte	0x00
	...

0800233c <.text_18>:
 800233c:	4d524f4e 	.word	0x4d524f4e
 8002340:	00          	.byte	0x00
 8002341:	00          	.byte	0x00
	...

08002344 <.text_19>:
 8002344:	4954504f 	.word	0x4954504f
 8002348:	455a494d 	.word	0x455a494d
 800234c:	4f435f44 	.word	0x4f435f44
 8002350:	4432564e 	.word	0x4432564e
 8002354:	00          	.byte	0x00
 8002355:	00          	.byte	0x00
	...

08002358 <.text_20>:
 8002358:	4e415254 	.word	0x4e415254
 800235c:	534f5053 	.word	0x534f5053
 8002360:	0045      	.short	0x0045
	...

08002364 <.text_21>:
 8002364:	4c4f4f50 	.word	0x4c4f4f50
 8002368:	00          	.byte	0x00
 8002369:	00          	.byte	0x00
	...

0800236c <.text_22>:
 800236c:	494c5053 	.word	0x494c5053
 8002370:	0054      	.short	0x0054
	...

08002374 <.text_23>:
 8002374:	454d4954 	.word	0x454d4954
 8002378:	4c45445f 	.word	0x4c45445f
 800237c:	00005941 	.word	0x00005941

08002380 <.text_24>:
 8002380:	454d4954 	.word	0x454d4954
 8002384:	5349445f 	.word	0x5349445f
 8002388:	42495254 	.word	0x42495254
 800238c:	44455455 	.word	0x44455455
 8002390:	00          	.byte	0x00
 8002391:	00          	.byte	0x00
	...

08002394 <.text_25>:
 8002394:	434e4f43 	.word	0x434e4f43
 8002398:	00005441 	.word	0x00005441

0800239c <.text_26>:
 800239c:	4d4d4547 	.word	0x4d4d4547
 80023a0:	00          	.byte	0x00
 80023a1:	00          	.byte	0x00
	...

080023a4 <.text_27>:
 80023a4:	41535055 	.word	0x41535055
 80023a8:	454c504d 	.word	0x454c504d
 80023ac:	00          	.byte	0x00
 80023ad:	00          	.byte	0x00
	...

080023b0 <.text_28>:
 80023b0:	57544c45 	.word	0x57544c45
 80023b4:	00455349 	.word	0x00455349

080023b8 <.text_29>:
 80023b8:	454e4547 	.word	0x454e4547
 80023bc:	00434952 	.word	0x00434952

080023c0 <.text_30>:
 80023c0:	54534e49 	.word	0x54534e49
 80023c4:	45434e41 	.word	0x45434e41
 80023c8:	4d524f4e 	.word	0x4d524f4e
 80023cc:	5a494c41 	.word	0x5a494c41
 80023d0:	4f495441 	.word	0x4f495441
 80023d4:	004e      	.short	0x004e
	...

080023d8 <.text_31>:
 80023d8:	43494c53 	.word	0x43494c53
 80023dc:	0045      	.short	0x0045
	...

080023e0 <.text_32>:
 80023e0:	454c4954 	.word	0x454c4954
 80023e4:	00          	.byte	0x00
 80023e5:	00          	.byte	0x00
	...

080023e8 <.text_33>:
 80023e8:	55444552 	.word	0x55444552
 80023ec:	00004543 	.word	0x00004543

080023f0 <ai_check_custom_types::ref_signatures>:
 80023f0:	84048403                                ....

080023f4 <ai_conv2d_stripe_f32>:
 80023f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f8:	b098      	sub	sp, #96	; 0x60
 80023fa:	9825      	ldr	r0, [sp, #148]	; 0x94
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f000 82e3 	beq.w	80029c8 <ai_conv2d_stripe_f32+0x5d4>
 8002402:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8002404:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8002408:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800240a:	9004      	str	r0, [sp, #16]
 800240c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800240e:	f9bd a0c0 	ldrsh.w	sl, [sp, #192]	; 0xc0
 8002412:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8002414:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002418:	fb0e 6707 	mla	r7, lr, r7, r6
 800241c:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8002420:	9705      	str	r7, [sp, #20]
 8002422:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8002424:	9100      	str	r1, [sp, #0]
 8002426:	9217      	str	r2, [sp, #92]	; 0x5c
 8002428:	fb0e f707 	mul.w	r7, lr, r7
 800242c:	1986      	adds	r6, r0, r6
 800242e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002430:	1e76      	subs	r6, r6, #1
 8002432:	fb96 fafa 	sdiv	sl, r6, sl
 8002436:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8002438:	f9bd e0c0 	ldrsh.w	lr, [sp, #192]	; 0xc0
 800243c:	fb0a fa00 	mul.w	sl, sl, r0
 8002440:	9306      	str	r3, [sp, #24]
 8002442:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 8002446:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 800244a:	4377      	muls	r7, r6
 800244c:	970b      	str	r7, [sp, #44]	; 0x2c
 800244e:	f9bd 70bc 	ldrsh.w	r7, [sp, #188]	; 0xbc
 8002452:	4377      	muls	r7, r6
 8002454:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8002456:	9715      	str	r7, [sp, #84]	; 0x54
 8002458:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 800245c:	eba7 070a 	sub.w	r7, r7, sl
 8002460:	9713      	str	r7, [sp, #76]	; 0x4c
 8002462:	4657      	mov	r7, sl
 8002464:	4347      	muls	r7, r0
 8002466:	9711      	str	r7, [sp, #68]	; 0x44
 8002468:	fb06 fe0e 	mul.w	lr, r6, lr
 800246c:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 8002470:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8002474:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8002478:	fb00 fe0a 	mul.w	lr, r0, sl
 800247c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8002480:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8002484:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8002488:	fb16 f707 	smulbb	r7, r6, r7
 800248c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800248e:	970a      	str	r7, [sp, #40]	; 0x28
 8002490:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8002492:	fb00 fe0e 	mul.w	lr, r0, lr
 8002496:	fbba f6f6 	udiv	r6, sl, r6
 800249a:	9610      	str	r6, [sp, #64]	; 0x40
 800249c:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 80024a0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80024a2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80024a6:	fbb7 fafa 	udiv	sl, r7, sl
 80024aa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80024ae:	fbb6 f7f7 	udiv	r7, r6, r7
 80024b2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80024b4:	970e      	str	r7, [sp, #56]	; 0x38
 80024b6:	1bad      	subs	r5, r5, r6
 80024b8:	950c      	str	r5, [sp, #48]	; 0x30
 80024ba:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80024bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80024be:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80024c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80024c2:	4264      	negs	r4, r4
 80024c4:	bfd8      	it	le
 80024c6:	2400      	movle	r4, #0
 80024c8:	1a09      	subs	r1, r1, r0
 80024ca:	4291      	cmp	r1, r2
 80024cc:	bf3a      	itte	cc
 80024ce:	9924      	ldrcc	r1, [sp, #144]	; 0x90
 80024d0:	1a0e      	subcc	r6, r1, r0
 80024d2:	4616      	movcs	r6, r2
 80024d4:	9a05      	ldr	r2, [sp, #20]
 80024d6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80024d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80024da:	18a2      	adds	r2, r4, r2
 80024dc:	434a      	muls	r2, r1
 80024de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80024e2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80024e4:	b900      	cbnz	r0, 80024e8 <ai_conv2d_stripe_f32+0xf4>
 80024e6:	9800      	ldr	r0, [sp, #0]
 80024e8:	9001      	str	r0, [sp, #4]
 80024ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80024ec:	1b36      	subs	r6, r6, r4
 80024ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024f0:	2801      	cmp	r0, #1
 80024f2:	bf04      	itt	eq
 80024f4:	990a      	ldreq	r1, [sp, #40]	; 0x28
 80024f6:	2901      	cmpeq	r1, #1
 80024f8:	f040 80ad 	bne.w	8002656 <ai_conv2d_stripe_f32+0x262>
 80024fc:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8002500:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002502:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002504:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002508:	ebaa 0a06 	sub.w	sl, sl, r6
 800250c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800250e:	1b9b      	subs	r3, r3, r6
 8002510:	f8dd e000 	ldr.w	lr, [sp]
 8002514:	fb0a fa00 	mul.w	sl, sl, r0
 8002518:	fb03 f100 	mul.w	r1, r3, r0
 800251c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800251e:	9b06      	ldr	r3, [sp, #24]
 8002520:	19e4      	adds	r4, r4, r7
 8002522:	1b40      	subs	r0, r0, r5
 8002524:	fb00 fc0c 	mul.w	ip, r0, ip
 8002528:	9822      	ldr	r0, [sp, #136]	; 0x88
 800252a:	4344      	muls	r4, r0
 800252c:	4370      	muls	r0, r6
 800252e:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 8002532:	9e01      	ldr	r6, [sp, #4]
 8002534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002536:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800253a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800253c:	4576      	cmp	r6, lr
 800253e:	bf0c      	ite	eq
 8002540:	eddf 0ab0 	vldreq	s1, [pc, #704]	; 8002804 <ai_conv2d_stripe_f32+0x410>
 8002544:	eef0 0a40 	vmovne.f32	s1, s0
 8002548:	2a00      	cmp	r2, #0
 800254a:	f000 8229 	beq.w	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 800254e:	46b0      	mov	r8, r6
 8002550:	4613      	mov	r3, r2
 8002552:	462e      	mov	r6, r5
 8002554:	463a      	mov	r2, r7
 8002556:	f8cd c008 	str.w	ip, [sp, #8]
 800255a:	461d      	mov	r5, r3
 800255c:	4607      	mov	r7, r0
 800255e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002562:	46c4      	mov	ip, r8
 8002564:	9b00      	ldr	r3, [sp, #0]
 8002566:	f027 0403 	bic.w	r4, r7, #3
 800256a:	2e00      	cmp	r6, #0
 800256c:	ed9c 1a00 	vldr	s2, [ip]
 8002570:	ee21 1a20 	vmul.f32	s2, s2, s1
 8002574:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002578:	dd60      	ble.n	800263c <ai_conv2d_stripe_f32+0x248>
 800257a:	4630      	mov	r0, r6
 800257c:	2c00      	cmp	r4, #0
 800257e:	f04f 0900 	mov.w	r9, #0
 8002582:	dd1e      	ble.n	80025c2 <ai_conv2d_stripe_f32+0x1ce>
 8002584:	edd2 4a00 	vldr	s9, [r2]
 8002588:	f109 0904 	add.w	r9, r9, #4
 800258c:	ed98 5a00 	vldr	s10, [r8]
 8002590:	edd2 3a01 	vldr	s7, [r2, #4]
 8002594:	ed98 4a01 	vldr	s8, [r8, #4]
 8002598:	ee04 1a85 	vmla.f32	s2, s9, s10
 800259c:	edd2 2a02 	vldr	s5, [r2, #8]
 80025a0:	ed98 3a02 	vldr	s6, [r8, #8]
 80025a4:	ee03 1a84 	vmla.f32	s2, s7, s8
 80025a8:	edd2 1a03 	vldr	s3, [r2, #12]
 80025ac:	3210      	adds	r2, #16
 80025ae:	45a1      	cmp	r9, r4
 80025b0:	ed98 2a03 	vldr	s4, [r8, #12]
 80025b4:	ee02 1a83 	vmla.f32	s2, s5, s6
 80025b8:	f108 0810 	add.w	r8, r8, #16
 80025bc:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025c0:	dbe0      	blt.n	8002584 <ai_conv2d_stripe_f32+0x190>
 80025c2:	45b9      	cmp	r9, r7
 80025c4:	f280 8034 	bge.w	8002630 <ai_conv2d_stripe_f32+0x23c>
 80025c8:	f109 0901 	add.w	r9, r9, #1
 80025cc:	edd2 2a00 	vldr	s5, [r2]
 80025d0:	1d12      	adds	r2, r2, #4
 80025d2:	edd8 1a00 	vldr	s3, [r8]
 80025d6:	45b9      	cmp	r9, r7
 80025d8:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80025dc:	f108 0804 	add.w	r8, r8, #4
 80025e0:	da26      	bge.n	8002630 <ai_conv2d_stripe_f32+0x23c>
 80025e2:	f109 0901 	add.w	r9, r9, #1
 80025e6:	ed92 3a00 	vldr	s6, [r2]
 80025ea:	1d12      	adds	r2, r2, #4
 80025ec:	ed98 2a00 	vldr	s4, [r8]
 80025f0:	45b9      	cmp	r9, r7
 80025f2:	ee03 1a02 	vmla.f32	s2, s6, s4
 80025f6:	f108 0804 	add.w	r8, r8, #4
 80025fa:	da19      	bge.n	8002630 <ai_conv2d_stripe_f32+0x23c>
 80025fc:	f109 0901 	add.w	r9, r9, #1
 8002600:	edd2 2a00 	vldr	s5, [r2]
 8002604:	1d12      	adds	r2, r2, #4
 8002606:	edd8 1a00 	vldr	s3, [r8]
 800260a:	45b9      	cmp	r9, r7
 800260c:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8002610:	f108 0804 	add.w	r8, r8, #4
 8002614:	da0c      	bge.n	8002630 <ai_conv2d_stripe_f32+0x23c>
 8002616:	f109 0901 	add.w	r9, r9, #1
 800261a:	ed92 2a00 	vldr	s4, [r2]
 800261e:	1d12      	adds	r2, r2, #4
 8002620:	ed98 3a00 	vldr	s6, [r8]
 8002624:	45b9      	cmp	r9, r7
 8002626:	ee02 1a03 	vmla.f32	s2, s4, s6
 800262a:	f108 0804 	add.w	r8, r8, #4
 800262e:	dbcb      	blt.n	80025c8 <ai_conv2d_stripe_f32+0x1d4>
 8002630:	1e40      	subs	r0, r0, #1
 8002632:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8002636:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800263a:	d19f      	bne.n	800257c <ai_conv2d_stripe_f32+0x188>
 800263c:	1e6d      	subs	r5, r5, #1
 800263e:	9802      	ldr	r0, [sp, #8]
 8002640:	ed8e 1a00 	vstr	s2, [lr]
 8002644:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8002648:	f10e 0e04 	add.w	lr, lr, #4
 800264c:	f10c 0c04 	add.w	ip, ip, #4
 8002650:	d18b      	bne.n	800256a <ai_conv2d_stripe_f32+0x176>
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	e1a4      	b.n	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 8002656:	9922      	ldr	r1, [sp, #136]	; 0x88
 8002658:	4288      	cmp	r0, r1
 800265a:	bf04      	itt	eq
 800265c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 800265e:	2b01      	cmpeq	r3, #1
 8002660:	f040 80d2 	bne.w	8002808 <ai_conv2d_stripe_f32+0x414>
 8002664:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8002666:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002668:	990e      	ldr	r1, [sp, #56]	; 0x38
 800266a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800266e:	9102      	str	r1, [sp, #8]
 8002670:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002672:	1bbf      	subs	r7, r7, r6
 8002674:	9b06      	ldr	r3, [sp, #24]
 8002676:	4347      	muls	r7, r0
 8002678:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800267a:	4454      	add	r4, sl
 800267c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002680:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 8002684:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8002688:	1b40      	subs	r0, r0, r5
 800268a:	4341      	muls	r1, r0
 800268c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8002690:	9b00      	ldr	r3, [sp, #0]
 8002692:	ebac 0c06 	sub.w	ip, ip, r6
 8002696:	459e      	cmp	lr, r3
 8002698:	eb02 0e8a 	add.w	lr, r2, sl, lsl #2
 800269c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800269e:	f04f 0a00 	mov.w	sl, #0
 80026a2:	eb0e 0883 	add.w	r8, lr, r3, lsl #2
 80026a6:	bf0c      	ite	eq
 80026a8:	eddf 0a56 	vldreq	s1, [pc, #344]	; 8002804 <ai_conv2d_stripe_f32+0x410>
 80026ac:	eef0 0a40 	vmovne.f32	s1, s0
 80026b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80026b4:	45c6      	cmp	lr, r8
 80026b6:	f080 8173 	bcs.w	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 80026ba:	9b00      	ldr	r3, [sp, #0]
 80026bc:	9a02      	ldr	r2, [sp, #8]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	f000 8099 	beq.w	80027f6 <ai_conv2d_stripe_f32+0x402>
 80026c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80026c8:	9500      	str	r5, [sp, #0]
 80026ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80026ce:	f8dd b008 	ldr.w	fp, [sp, #8]
 80026d2:	9108      	str	r1, [sp, #32]
 80026d4:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 80026d8:	f8cd e01c 	str.w	lr, [sp, #28]
 80026dc:	4615      	mov	r5, r2
 80026de:	9a00      	ldr	r2, [sp, #0]
 80026e0:	ed94 1a00 	vldr	s2, [r4]
 80026e4:	ee21 1a20 	vmul.f32	s2, s2, s1
 80026e8:	9907      	ldr	r1, [sp, #28]
 80026ea:	2a00      	cmp	r2, #0
 80026ec:	f340 8072 	ble.w	80027d4 <ai_conv2d_stripe_f32+0x3e0>
 80026f0:	f026 0e03 	bic.w	lr, r6, #3
 80026f4:	f1be 0f00 	cmp.w	lr, #0
 80026f8:	f04f 0900 	mov.w	r9, #0
 80026fc:	f340 8029 	ble.w	8002752 <ai_conv2d_stripe_f32+0x35e>
 8002700:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8002704:	edd0 1a00 	vldr	s3, [r0]
 8002708:	f109 0904 	add.w	r9, r9, #4
 800270c:	ed91 2a00 	vldr	s4, [r1]
 8002710:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002714:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002718:	edd0 2a01 	vldr	s5, [r0, #4]
 800271c:	edd0 1a02 	vldr	s3, [r0, #8]
 8002720:	ed91 3a00 	vldr	s6, [r1]
 8002724:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002728:	ee02 1a83 	vmla.f32	s2, s5, s6
 800272c:	edd0 2a03 	vldr	s5, [r0, #12]
 8002730:	3010      	adds	r0, #16
 8002732:	45f1      	cmp	r9, lr
 8002734:	ed91 2a00 	vldr	s4, [r1]
 8002738:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800273c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002740:	ed91 3a00 	vldr	s6, [r1]
 8002744:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002748:	ee02 1a83 	vmla.f32	s2, s5, s6
 800274c:	dbda      	blt.n	8002704 <ai_conv2d_stripe_f32+0x310>
 800274e:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8002752:	45b1      	cmp	r9, r6
 8002754:	f280 8038 	bge.w	80027c8 <ai_conv2d_stripe_f32+0x3d4>
 8002758:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 800275c:	f109 0901 	add.w	r9, r9, #1
 8002760:	edd0 1a00 	vldr	s3, [r0]
 8002764:	1d00      	adds	r0, r0, #4
 8002766:	ed91 2a00 	vldr	s4, [r1]
 800276a:	45b1      	cmp	r9, r6
 800276c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002770:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8002774:	da26      	bge.n	80027c4 <ai_conv2d_stripe_f32+0x3d0>
 8002776:	f109 0901 	add.w	r9, r9, #1
 800277a:	ed90 2a00 	vldr	s4, [r0]
 800277e:	1d00      	adds	r0, r0, #4
 8002780:	edd1 1a00 	vldr	s3, [r1]
 8002784:	45b1      	cmp	r9, r6
 8002786:	ee02 1a21 	vmla.f32	s2, s4, s3
 800278a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800278e:	da19      	bge.n	80027c4 <ai_conv2d_stripe_f32+0x3d0>
 8002790:	f109 0901 	add.w	r9, r9, #1
 8002794:	edd0 1a00 	vldr	s3, [r0]
 8002798:	1d00      	adds	r0, r0, #4
 800279a:	ed91 2a00 	vldr	s4, [r1]
 800279e:	45b1      	cmp	r9, r6
 80027a0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80027a4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80027a8:	da0c      	bge.n	80027c4 <ai_conv2d_stripe_f32+0x3d0>
 80027aa:	f109 0901 	add.w	r9, r9, #1
 80027ae:	ed90 2a00 	vldr	s4, [r0]
 80027b2:	1d00      	adds	r0, r0, #4
 80027b4:	edd1 1a00 	vldr	s3, [r1]
 80027b8:	45b1      	cmp	r9, r6
 80027ba:	ee02 1a21 	vmla.f32	s2, s4, s3
 80027be:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80027c2:	dbcb      	blt.n	800275c <ai_conv2d_stripe_f32+0x368>
 80027c4:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 80027c8:	1e52      	subs	r2, r2, #1
 80027ca:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80027ce:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80027d2:	d18d      	bne.n	80026f0 <ai_conv2d_stripe_f32+0x2fc>
 80027d4:	1d24      	adds	r4, r4, #4
 80027d6:	9908      	ldr	r1, [sp, #32]
 80027d8:	ed85 1a00 	vstr	s2, [r5]
 80027dc:	1d2d      	adds	r5, r5, #4
 80027de:	f1bb 0b01 	subs.w	fp, fp, #1
 80027e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80027e6:	f10a 0a01 	add.w	sl, sl, #1
 80027ea:	f47f af78 	bne.w	80026de <ai_conv2d_stripe_f32+0x2ea>
 80027ee:	9d00      	ldr	r5, [sp, #0]
 80027f0:	9908      	ldr	r1, [sp, #32]
 80027f2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80027f6:	9a03      	ldr	r2, [sp, #12]
 80027f8:	f10e 0e04 	add.w	lr, lr, #4
 80027fc:	4596      	cmp	lr, r2
 80027fe:	f4bf af28 	bcs.w	8002652 <ai_conv2d_stripe_f32+0x25e>
 8002802:	e75b      	b.n	80026bc <ai_conv2d_stripe_f32+0x2c8>
 8002804:	00000000 	.word	0x00000000
 8002808:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 800280c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8002810:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8002814:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8002818:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 800281c:	4608      	mov	r0, r1
 800281e:	1b0b      	subs	r3, r1, r4
 8002820:	1876      	adds	r6, r6, r1
 8002822:	fb94 faf0 	sdiv	sl, r4, r0
 8002826:	fb00 300a 	mla	r0, r0, sl, r3
 800282a:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 800282e:	1e76      	subs	r6, r6, #1
 8002830:	1864      	adds	r4, r4, r1
 8002832:	1e64      	subs	r4, r4, #1
 8002834:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8002838:	fb90 f7f1 	sdiv	r7, r0, r1
 800283c:	fb01 0717 	mls	r7, r1, r7, r0
 8002840:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8002842:	fb90 f0f3 	sdiv	r0, r0, r3
 8002846:	fb03 c000 	mla	r0, r3, r0, ip
 800284a:	1bf6      	subs	r6, r6, r7
 800284c:	fb90 fbf3 	sdiv	fp, r0, r3
 8002850:	fb03 0b1b 	mls	fp, r3, fp, r0
 8002854:	fb96 f0f1 	sdiv	r0, r6, r1
 8002858:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800285a:	fb00 9911 	mls	r9, r0, r1, r9
 800285e:	9609      	str	r6, [sp, #36]	; 0x24
 8002860:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8002862:	fb94 f1f1 	sdiv	r1, r4, r1
 8002866:	9c00      	ldr	r4, [sp, #0]
 8002868:	eba5 050b 	sub.w	r5, r5, fp
 800286c:	195d      	adds	r5, r3, r5
 800286e:	1e6d      	subs	r5, r5, #1
 8002870:	fb95 fcf3 	sdiv	ip, r5, r3
 8002874:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002876:	eba6 060c 	sub.w	r6, r6, ip
 800287a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800287c:	eba8 0800 	sub.w	r8, r8, r0
 8002880:	fb05 f909 	mul.w	r9, r5, r9
 8002884:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002886:	fb0e fe03 	mul.w	lr, lr, r3
 800288a:	ebaa 0a03 	sub.w	sl, sl, r3
 800288e:	fb08 f803 	mul.w	r8, r8, r3
 8002892:	194d      	adds	r5, r1, r5
 8002894:	fb06 fe0e 	mul.w	lr, r6, lr
 8002898:	9e06      	ldr	r6, [sp, #24]
 800289a:	435d      	muls	r5, r3
 800289c:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80028a0:	9d01      	ldr	r5, [sp, #4]
 80028a2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80028a4:	42a5      	cmp	r5, r4
 80028a6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80028a8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80028aa:	44b3      	add	fp, r6
 80028ac:	fb04 770b 	mla	r7, r4, fp, r7
 80028b0:	bf0c      	ite	eq
 80028b2:	eddf 0a47 	vldreq	s1, [pc, #284]	; 80029d0 <.text_3>
 80028b6:	eef0 0a40 	vmovne.f32	s1, s0
 80028ba:	436f      	muls	r7, r5
 80028bc:	eb02 0487 	add.w	r4, r2, r7, lsl #2
 80028c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80028c2:	2500      	movs	r5, #0
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	d06b      	beq.n	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 80028c8:	9202      	str	r2, [sp, #8]
 80028ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d061      	beq.n	8002994 <ai_conv2d_stripe_f32+0x5a0>
 80028d0:	9a00      	ldr	r2, [sp, #0]
 80028d2:	9e01      	ldr	r6, [sp, #4]
 80028d4:	f8cd c00c 	str.w	ip, [sp, #12]
 80028d8:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 80028dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028de:	f8cd e020 	str.w	lr, [sp, #32]
 80028e2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80028e6:	9407      	str	r4, [sp, #28]
 80028e8:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80028ec:	ed96 1a00 	vldr	s2, [r6]
 80028f0:	ee21 1a20 	vmul.f32	s2, s2, s1
 80028f4:	9c07      	ldr	r4, [sp, #28]
 80028f6:	f1be 0f00 	cmp.w	lr, #0
 80028fa:	dd3b      	ble.n	8002974 <ai_conv2d_stripe_f32+0x580>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	dd32      	ble.n	8002966 <ai_conv2d_stripe_f32+0x572>
 8002900:	ea4f 0c00 	mov.w	ip, r0
 8002904:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
 8002908:	455c      	cmp	r4, fp
 800290a:	d227      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 800290c:	edd1 2a00 	vldr	s5, [r1]
 8002910:	1d09      	adds	r1, r1, #4
 8002912:	edd4 1a00 	vldr	s3, [r4]
 8002916:	1d24      	adds	r4, r4, #4
 8002918:	455c      	cmp	r4, fp
 800291a:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800291e:	d21d      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 8002920:	ed91 3a00 	vldr	s6, [r1]
 8002924:	1d09      	adds	r1, r1, #4
 8002926:	ed94 2a00 	vldr	s4, [r4]
 800292a:	1d24      	adds	r4, r4, #4
 800292c:	455c      	cmp	r4, fp
 800292e:	ee03 1a02 	vmla.f32	s2, s6, s4
 8002932:	d213      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 8002934:	edd1 2a00 	vldr	s5, [r1]
 8002938:	1d09      	adds	r1, r1, #4
 800293a:	edd4 1a00 	vldr	s3, [r4]
 800293e:	1d24      	adds	r4, r4, #4
 8002940:	455c      	cmp	r4, fp
 8002942:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8002946:	d209      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 8002948:	ed91 2a00 	vldr	s4, [r1]
 800294c:	1d09      	adds	r1, r1, #4
 800294e:	ed94 3a00 	vldr	s6, [r4]
 8002952:	1d24      	adds	r4, r4, #4
 8002954:	455c      	cmp	r4, fp
 8002956:	ee02 1a03 	vmla.f32	s2, s4, s6
 800295a:	d3d7      	bcc.n	800290c <ai_conv2d_stripe_f32+0x518>
 800295c:	f1bc 0c01 	subs.w	ip, ip, #1
 8002960:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8002964:	d1ce      	bne.n	8002904 <ai_conv2d_stripe_f32+0x510>
 8002966:	f1be 0e01 	subs.w	lr, lr, #1
 800296a:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 800296e:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002972:	d1c3      	bne.n	80028fc <ai_conv2d_stripe_f32+0x508>
 8002974:	1c6d      	adds	r5, r5, #1
 8002976:	f8dd c020 	ldr.w	ip, [sp, #32]
 800297a:	ed87 1a00 	vstr	s2, [r7]
 800297e:	1d3f      	adds	r7, r7, #4
 8002980:	1d36      	adds	r6, r6, #4
 8002982:	1e52      	subs	r2, r2, #1
 8002984:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8002988:	d1ae      	bne.n	80028e8 <ai_conv2d_stripe_f32+0x4f4>
 800298a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800298e:	f8dd e020 	ldr.w	lr, [sp, #32]
 8002992:	9c07      	ldr	r4, [sp, #28]
 8002994:	9f02      	ldr	r7, [sp, #8]
 8002996:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800299a:	1e7f      	subs	r7, r7, #1
 800299c:	9702      	str	r7, [sp, #8]
 800299e:	d194      	bne.n	80028ca <ai_conv2d_stripe_f32+0x4d6>
 80029a0:	9900      	ldr	r1, [sp, #0]
 80029a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80029a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80029a8:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80029ac:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	9b05      	ldr	r3, [sp, #20]
 80029b2:	188a      	adds	r2, r1, r2
 80029b4:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80029b8:	922c      	str	r2, [sp, #176]	; 0xb0
 80029ba:	9a04      	ldr	r2, [sp, #16]
 80029bc:	1859      	adds	r1, r3, r1
 80029be:	9105      	str	r1, [sp, #20]
 80029c0:	1e52      	subs	r2, r2, #1
 80029c2:	9204      	str	r2, [sp, #16]
 80029c4:	f47f ad79 	bne.w	80024ba <ai_conv2d_stripe_f32+0xc6>
 80029c8:	b018      	add	sp, #96	; 0x60
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080029d0 <.text_3>:
 80029d0:	00000000 	.word	0x00000000

080029d4 <func_dummy>:
 80029d4:	4770      	bx	lr
	...

080029d8 <ai_dict8_dot_array_f32>:
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	9805      	ldr	r0, [sp, #20]
 80029de:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80029e2:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002cb4 <.text_6>
 80029e6:	3d20      	subs	r5, #32
 80029e8:	2808      	cmp	r0, #8
 80029ea:	d231      	bcs.n	8002a50 <ai_dict8_dot_array_f32+0x78>
 80029ec:	3520      	adds	r5, #32
 80029ee:	42ab      	cmp	r3, r5
 80029f0:	f080 8159 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 80029f4:	780e      	ldrb	r6, [r1, #0]
 80029f6:	edd3 0a00 	vldr	s1, [r3]
 80029fa:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 80029fe:	ed90 1a00 	vldr	s2, [r0]
 8002a02:	1d18      	adds	r0, r3, #4
 8002a04:	42a8      	cmp	r0, r5
 8002a06:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a0a:	f080 814c 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a0e:	784e      	ldrb	r6, [r1, #1]
 8002a10:	edd0 0a00 	vldr	s1, [r0]
 8002a14:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002a18:	1d00      	adds	r0, r0, #4
 8002a1a:	42a8      	cmp	r0, r5
 8002a1c:	ed93 1a00 	vldr	s2, [r3]
 8002a20:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a24:	f080 813f 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a28:	788e      	ldrb	r6, [r1, #2]
 8002a2a:	1cc9      	adds	r1, r1, #3
 8002a2c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002a30:	edd0 0a00 	vldr	s1, [r0]
 8002a34:	ed93 1a00 	vldr	s2, [r3]
 8002a38:	1d03      	adds	r3, r0, #4
 8002a3a:	42ab      	cmp	r3, r5
 8002a3c:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a40:	d3d8      	bcc.n	80029f4 <ai_dict8_dot_array_f32+0x1c>
 8002a42:	edd4 0a00 	vldr	s1, [r4]
 8002a46:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002a4a:	ed84 0a00 	vstr	s0, [r4]
 8002a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a50:	f001 0003 	and.w	r0, r1, #3
 8002a54:	2803      	cmp	r0, #3
 8002a56:	f200 8126 	bhi.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a5a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002a5e:	0004      	.short	0x0004
 8002a60:	00940089 	.word	0x00940089
 8002a64:	009f      	.short	0x009f
 8002a66:	429d      	cmp	r5, r3
 8002a68:	d231      	bcs.n	8002ace <ai_dict8_dot_array_f32+0xf6>
 8002a6a:	3520      	adds	r5, #32
 8002a6c:	42ab      	cmp	r3, r5
 8002a6e:	f080 811a 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a72:	780e      	ldrb	r6, [r1, #0]
 8002a74:	edd3 0a00 	vldr	s1, [r3]
 8002a78:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8002a7c:	ed90 1a00 	vldr	s2, [r0]
 8002a80:	1d18      	adds	r0, r3, #4
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a88:	f080 810d 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a8c:	784e      	ldrb	r6, [r1, #1]
 8002a8e:	edd0 0a00 	vldr	s1, [r0]
 8002a92:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002a96:	1d00      	adds	r0, r0, #4
 8002a98:	42a8      	cmp	r0, r5
 8002a9a:	ed93 1a00 	vldr	s2, [r3]
 8002a9e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002aa2:	f080 8100 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002aa6:	788e      	ldrb	r6, [r1, #2]
 8002aa8:	1cc9      	adds	r1, r1, #3
 8002aaa:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002aae:	edd0 0a00 	vldr	s1, [r0]
 8002ab2:	ed93 1a00 	vldr	s2, [r3]
 8002ab6:	1d03      	adds	r3, r0, #4
 8002ab8:	42ab      	cmp	r3, r5
 8002aba:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002abe:	d3d8      	bcc.n	8002a72 <ai_dict8_dot_array_f32+0x9a>
 8002ac0:	edd4 0a00 	vldr	s1, [r4]
 8002ac4:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002ac8:	ed84 0a00 	vstr	s0, [r4]
 8002acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ace:	78cf      	ldrb	r7, [r1, #3]
 8002ad0:	f891 e000 	ldrb.w	lr, [r1]
 8002ad4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002ad8:	788f      	ldrb	r7, [r1, #2]
 8002ada:	f103 0010 	add.w	r0, r3, #16
 8002ade:	ed93 4a00 	vldr	s8, [r3]
 8002ae2:	ed93 3a01 	vldr	s6, [r3, #4]
 8002ae6:	ed93 2a02 	vldr	s4, [r3, #8]
 8002aea:	eddc 0a00 	vldr	s1, [ip]
 8002aee:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002af2:	784f      	ldrb	r7, [r1, #1]
 8002af4:	ed93 1a03 	vldr	s2, [r3, #12]
 8002af8:	790b      	ldrb	r3, [r1, #4]
 8002afa:	eddc 1a00 	vldr	s3, [ip]
 8002afe:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002b02:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8002b06:	edd7 3a00 	vldr	s7, [r7]
 8002b0a:	794f      	ldrb	r7, [r1, #5]
 8002b0c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002b10:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002b14:	eddc 2a00 	vldr	s5, [ip]
 8002b18:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002b1c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002b20:	798b      	ldrb	r3, [r1, #6]
 8002b22:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002b26:	79cf      	ldrb	r7, [r1, #7]
 8002b28:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002b2c:	3108      	adds	r1, #8
 8002b2e:	eddc 0a00 	vldr	s1, [ip]
 8002b32:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002b36:	ed9e 1a00 	vldr	s2, [lr]
 8002b3a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002b3e:	ed90 4a00 	vldr	s8, [r0]
 8002b42:	f100 0310 	add.w	r3, r0, #16
 8002b46:	edd0 3a01 	vldr	s7, [r0, #4]
 8002b4a:	429d      	cmp	r5, r3
 8002b4c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8002b50:	eddc 1a00 	vldr	s3, [ip]
 8002b54:	ed90 3a02 	vldr	s6, [r0, #8]
 8002b58:	ee01 0a23 	vmla.f32	s0, s2, s7
 8002b5c:	ed9e 2a00 	vldr	s4, [lr]
 8002b60:	edd0 2a03 	vldr	s5, [r0, #12]
 8002b64:	ee01 0a83 	vmla.f32	s0, s3, s6
 8002b68:	ee02 0a22 	vmla.f32	s0, s4, s5
 8002b6c:	d2af      	bcs.n	8002ace <ai_dict8_dot_array_f32+0xf6>
 8002b6e:	e77c      	b.n	8002a6a <ai_dict8_dot_array_f32+0x92>
 8002b70:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002b74:	edd3 0a00 	vldr	s1, [r3]
 8002b78:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002b7c:	1d1b      	adds	r3, r3, #4
 8002b7e:	ed96 0a00 	vldr	s0, [r6]
 8002b82:	ee20 0a20 	vmul.f32	s0, s0, s1
 8002b86:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002b8a:	edd3 0a00 	vldr	s1, [r3]
 8002b8e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002b92:	1d1b      	adds	r3, r3, #4
 8002b94:	ed96 1a00 	vldr	s2, [r6]
 8002b98:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002b9c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002ba0:	edd3 0a00 	vldr	s1, [r3]
 8002ba4:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002ba8:	1d1b      	adds	r3, r3, #4
 8002baa:	429d      	cmp	r5, r3
 8002bac:	ed96 1a00 	vldr	s2, [r6]
 8002bb0:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002bb4:	d34f      	bcc.n	8002c56 <ai_dict8_dot_array_f32+0x27e>
 8002bb6:	78cf      	ldrb	r7, [r1, #3]
 8002bb8:	f891 e000 	ldrb.w	lr, [r1]
 8002bbc:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002bc0:	788f      	ldrb	r7, [r1, #2]
 8002bc2:	f103 0010 	add.w	r0, r3, #16
 8002bc6:	ed93 4a00 	vldr	s8, [r3]
 8002bca:	ed93 3a01 	vldr	s6, [r3, #4]
 8002bce:	ed93 2a02 	vldr	s4, [r3, #8]
 8002bd2:	eddc 0a00 	vldr	s1, [ip]
 8002bd6:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002bda:	784f      	ldrb	r7, [r1, #1]
 8002bdc:	ed93 1a03 	vldr	s2, [r3, #12]
 8002be0:	790b      	ldrb	r3, [r1, #4]
 8002be2:	eddc 1a00 	vldr	s3, [ip]
 8002be6:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002bea:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8002bee:	edd7 3a00 	vldr	s7, [r7]
 8002bf2:	794f      	ldrb	r7, [r1, #5]
 8002bf4:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002bf8:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002bfc:	eddc 2a00 	vldr	s5, [ip]
 8002c00:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002c04:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002c08:	798b      	ldrb	r3, [r1, #6]
 8002c0a:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002c0e:	79cf      	ldrb	r7, [r1, #7]
 8002c10:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002c14:	3108      	adds	r1, #8
 8002c16:	eddc 0a00 	vldr	s1, [ip]
 8002c1a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002c1e:	ed9e 1a00 	vldr	s2, [lr]
 8002c22:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002c26:	ed90 4a00 	vldr	s8, [r0]
 8002c2a:	f100 0310 	add.w	r3, r0, #16
 8002c2e:	edd0 3a01 	vldr	s7, [r0, #4]
 8002c32:	429d      	cmp	r5, r3
 8002c34:	ee00 0a84 	vmla.f32	s0, s1, s8
 8002c38:	eddc 1a00 	vldr	s3, [ip]
 8002c3c:	ed90 3a02 	vldr	s6, [r0, #8]
 8002c40:	ee01 0a23 	vmla.f32	s0, s2, s7
 8002c44:	ed9e 2a00 	vldr	s4, [lr]
 8002c48:	edd0 2a03 	vldr	s5, [r0, #12]
 8002c4c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8002c50:	ee02 0a22 	vmla.f32	s0, s4, s5
 8002c54:	d2af      	bcs.n	8002bb6 <ai_dict8_dot_array_f32+0x1de>
 8002c56:	3520      	adds	r5, #32
 8002c58:	42ab      	cmp	r3, r5
 8002c5a:	d224      	bcs.n	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002c5c:	780e      	ldrb	r6, [r1, #0]
 8002c5e:	edd3 0a00 	vldr	s1, [r3]
 8002c62:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8002c66:	ed90 1a00 	vldr	s2, [r0]
 8002c6a:	1d18      	adds	r0, r3, #4
 8002c6c:	42a8      	cmp	r0, r5
 8002c6e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002c72:	d218      	bcs.n	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002c74:	784e      	ldrb	r6, [r1, #1]
 8002c76:	edd0 0a00 	vldr	s1, [r0]
 8002c7a:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002c7e:	1d00      	adds	r0, r0, #4
 8002c80:	42a8      	cmp	r0, r5
 8002c82:	ed93 1a00 	vldr	s2, [r3]
 8002c86:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002c8a:	d20c      	bcs.n	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002c8c:	788e      	ldrb	r6, [r1, #2]
 8002c8e:	1cc9      	adds	r1, r1, #3
 8002c90:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002c94:	edd0 0a00 	vldr	s1, [r0]
 8002c98:	ed93 1a00 	vldr	s2, [r3]
 8002c9c:	1d03      	adds	r3, r0, #4
 8002c9e:	42ab      	cmp	r3, r5
 8002ca0:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002ca4:	d3da      	bcc.n	8002c5c <ai_dict8_dot_array_f32+0x284>
 8002ca6:	edd4 0a00 	vldr	s1, [r4]
 8002caa:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002cae:	ed84 0a00 	vstr	s0, [r4]
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb4 <.text_6>:
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <ai_dict4_dot_array_f32>:
 8002cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cbc:	4680      	mov	r8, r0
 8002cbe:	461e      	mov	r6, r3
 8002cc0:	ed2d 8b02 	vpush	{d8}
 8002cc4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8002cc8:	460c      	mov	r4, r1
 8002cca:	4615      	mov	r5, r2
 8002ccc:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002e1c <.text_8>
 8002cd0:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8002cd4:	0040      	lsls	r0, r0, #1
 8002cd6:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 8002cda:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 8002cde:	d053      	beq.n	8002d88 <ai_dict4_dot_array_f32+0xd0>
 8002ce0:	ed96 8a00 	vldr	s16, [r6]
 8002ce4:	7820      	ldrb	r0, [r4, #0]
 8002ce6:	ed96 7a01 	vldr	s14, [r6, #4]
 8002cea:	7861      	ldrb	r1, [r4, #1]
 8002cec:	ed96 6a02 	vldr	s12, [r6, #8]
 8002cf0:	78a2      	ldrb	r2, [r4, #2]
 8002cf2:	ed96 5a03 	vldr	s10, [r6, #12]
 8002cf6:	78e7      	ldrb	r7, [r4, #3]
 8002cf8:	ed96 4a04 	vldr	s8, [r6, #16]
 8002cfc:	1d24      	adds	r4, r4, #4
 8002cfe:	ed96 3a05 	vldr	s6, [r6, #20]
 8002d02:	ed96 2a06 	vldr	s4, [r6, #24]
 8002d06:	f007 090f 	and.w	r9, r7, #15
 8002d0a:	093f      	lsrs	r7, r7, #4
 8002d0c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8002d10:	ed96 1a07 	vldr	s2, [r6, #28]
 8002d14:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 8002d18:	f002 090f 	and.w	r9, r2, #15
 8002d1c:	0912      	lsrs	r2, r2, #4
 8002d1e:	3620      	adds	r6, #32
 8002d20:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002d24:	edd7 1a00 	vldr	s3, [r7]
 8002d28:	f001 070f 	and.w	r7, r1, #15
 8002d2c:	0909      	lsrs	r1, r1, #4
 8002d2e:	edda 0a00 	vldr	s1, [sl]
 8002d32:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002d36:	edd2 3a00 	vldr	s7, [r2]
 8002d3a:	f000 020f 	and.w	r2, r0, #15
 8002d3e:	0900      	lsrs	r0, r0, #4
 8002d40:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 8002d44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002d48:	1e5b      	subs	r3, r3, #1
 8002d4a:	eb05 0987 	add.w	r9, r5, r7, lsl #2
 8002d4e:	edd1 5a00 	vldr	s11, [r1]
 8002d52:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8002d56:	edda 2a00 	vldr	s5, [sl]
 8002d5a:	edd0 7a00 	vldr	s15, [r0]
 8002d5e:	ee07 0a88 	vmla.f32	s0, s15, s16
 8002d62:	edd7 6a00 	vldr	s13, [r7]
 8002d66:	ee06 0a87 	vmla.f32	s0, s13, s14
 8002d6a:	edd9 4a00 	vldr	s9, [r9]
 8002d6e:	ee05 0a86 	vmla.f32	s0, s11, s12
 8002d72:	ee04 0a85 	vmla.f32	s0, s9, s10
 8002d76:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002d7a:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002d7e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002d82:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002d86:	d1ab      	bne.n	8002ce0 <ai_dict4_dot_array_f32+0x28>
 8002d88:	4576      	cmp	r6, lr
 8002d8a:	d22f      	bcs.n	8002dec <ai_dict4_dot_array_f32+0x134>
 8002d8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d90:	edd6 1a00 	vldr	s3, [r6]
 8002d94:	edd6 0a01 	vldr	s1, [r6, #4]
 8002d98:	3608      	adds	r6, #8
 8002d9a:	f000 010f 	and.w	r1, r0, #15
 8002d9e:	0900      	lsrs	r0, r0, #4
 8002da0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002da4:	4576      	cmp	r6, lr
 8002da6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8002daa:	ed90 2a00 	vldr	s4, [r0]
 8002dae:	ee02 0a21 	vmla.f32	s0, s4, s3
 8002db2:	ed92 1a00 	vldr	s2, [r2]
 8002db6:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002dba:	d217      	bcs.n	8002dec <ai_dict4_dot_array_f32+0x134>
 8002dbc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002dc0:	ed96 1a00 	vldr	s2, [r6]
 8002dc4:	ed96 2a01 	vldr	s4, [r6, #4]
 8002dc8:	3608      	adds	r6, #8
 8002dca:	f000 010f 	and.w	r1, r0, #15
 8002dce:	0900      	lsrs	r0, r0, #4
 8002dd0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002dd4:	4576      	cmp	r6, lr
 8002dd6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8002dda:	edd0 1a00 	vldr	s3, [r0]
 8002dde:	ee01 0a81 	vmla.f32	s0, s3, s2
 8002de2:	edd2 0a00 	vldr	s1, [r2]
 8002de6:	ee00 0a82 	vmla.f32	s0, s1, s4
 8002dea:	d3cf      	bcc.n	8002d8c <ai_dict4_dot_array_f32+0xd4>
 8002dec:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 8002df0:	d509      	bpl.n	8002e06 <ai_dict4_dot_array_f32+0x14e>
 8002df2:	7821      	ldrb	r1, [r4, #0]
 8002df4:	ed96 1a00 	vldr	s2, [r6]
 8002df8:	0909      	lsrs	r1, r1, #4
 8002dfa:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8002dfe:	edd2 0a00 	vldr	s1, [r2]
 8002e02:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002e06:	edd8 1a00 	vldr	s3, [r8]
 8002e0a:	ee31 0a80 	vadd.f32	s0, s3, s0
 8002e0e:	ed88 0a00 	vstr	s0, [r8]
 8002e12:	ecbd 8b02 	vpop	{d8}
 8002e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002e1c <.text_8>:
 8002e1c:	00000000 	.word	0x00000000

08002e20 <ai_dict_decompress_f32>:
 8002e20:	b4f0      	push	{r4, r5, r6, r7}
 8002e22:	4604      	mov	r4, r0
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	9805      	ldr	r0, [sp, #20]
 8002e28:	9e04      	ldr	r6, [sp, #16]
 8002e2a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002e2e:	d003      	beq.n	8002e38 <ai_dict_decompress_f32+0x18>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d03f      	beq.n	8002eb4 <ai_dict_decompress_f32+0x94>
 8002e34:	bcf0      	pop	{r4, r5, r6, r7}
 8002e36:	4770      	bx	lr
 8002e38:	42ac      	cmp	r4, r5
 8002e3a:	d25a      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002e3c:	0870      	lsrs	r0, r6, #1
 8002e3e:	d02f      	beq.n	8002ea0 <ai_dict_decompress_f32+0x80>
 8002e40:	07c3      	lsls	r3, r0, #31
 8002e42:	d50d      	bpl.n	8002e60 <ai_dict_decompress_f32+0x40>
 8002e44:	780f      	ldrb	r7, [r1, #0]
 8002e46:	093f      	lsrs	r7, r7, #4
 8002e48:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8002e4c:	f8c4 c000 	str.w	ip, [r4]
 8002e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002e5c:	6067      	str	r7, [r4, #4]
 8002e5e:	3408      	adds	r4, #8
 8002e60:	0840      	lsrs	r0, r0, #1
 8002e62:	d01d      	beq.n	8002ea0 <ai_dict_decompress_f32+0x80>
 8002e64:	780b      	ldrb	r3, [r1, #0]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002e6c:	6027      	str	r7, [r4, #0]
 8002e6e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002e72:	f00c 0c0f 	and.w	ip, ip, #15
 8002e76:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8002e7a:	6063      	str	r3, [r4, #4]
 8002e7c:	f104 0308 	add.w	r3, r4, #8
 8002e80:	780c      	ldrb	r4, [r1, #0]
 8002e82:	0924      	lsrs	r4, r4, #4
 8002e84:	1e40      	subs	r0, r0, #1
 8002e86:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8002e8a:	601f      	str	r7, [r3, #0]
 8002e8c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002e90:	f00c 0c0f 	and.w	ip, ip, #15
 8002e94:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8002e98:	605c      	str	r4, [r3, #4]
 8002e9a:	f103 0408 	add.w	r4, r3, #8
 8002e9e:	d1e1      	bne.n	8002e64 <ai_dict_decompress_f32+0x44>
 8002ea0:	07f0      	lsls	r0, r6, #31
 8002ea2:	d5c9      	bpl.n	8002e38 <ai_dict_decompress_f32+0x18>
 8002ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002eae:	f844 7b04 	str.w	r7, [r4], #4
 8002eb2:	e7c1      	b.n	8002e38 <ai_dict_decompress_f32+0x18>
 8002eb4:	42ac      	cmp	r4, r5
 8002eb6:	d21c      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002eb8:	7808      	ldrb	r0, [r1, #0]
 8002eba:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002ebe:	6020      	str	r0, [r4, #0]
 8002ec0:	1d20      	adds	r0, r4, #4
 8002ec2:	42a8      	cmp	r0, r5
 8002ec4:	bf3f      	itttt	cc
 8002ec6:	784c      	ldrbcc	r4, [r1, #1]
 8002ec8:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8002ecc:	f840 3b04 	strcc.w	r3, [r0], #4
 8002ed0:	42a8      	cmpcc	r0, r5
 8002ed2:	d20e      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002ed4:	788b      	ldrb	r3, [r1, #2]
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	f840 3b04 	str.w	r3, [r0], #4
 8002ede:	42a8      	cmp	r0, r5
 8002ee0:	d207      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002ee2:	78cc      	ldrb	r4, [r1, #3]
 8002ee4:	1d09      	adds	r1, r1, #4
 8002ee6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002eea:	1d04      	adds	r4, r0, #4
 8002eec:	42ac      	cmp	r4, r5
 8002eee:	6003      	str	r3, [r0, #0]
 8002ef0:	d3e2      	bcc.n	8002eb8 <ai_dict_decompress_f32+0x98>
 8002ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ef4:	4770      	bx	lr

08002ef6 <forward_conv2d>:
 8002ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efa:	b0a9      	sub	sp, #164	; 0xa4
 8002efc:	4605      	mov	r5, r0
 8002efe:	696b      	ldr	r3, [r5, #20]
 8002f00:	8819      	ldrh	r1, [r3, #0]
 8002f02:	2900      	cmp	r1, #0
 8002f04:	bf1a      	itte	ne
 8002f06:	6858      	ldrne	r0, [r3, #4]
 8002f08:	1d00      	addne	r0, r0, #4
 8002f0a:	2004      	moveq	r0, #4
 8002f0c:	6800      	ldr	r0, [r0, #0]
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	bf14      	ite	ne
 8002f12:	6802      	ldrne	r2, [r0, #0]
 8002f14:	2200      	moveq	r2, #0
 8002f16:	2901      	cmp	r1, #1
 8002f18:	bfc6      	itte	gt
 8002f1a:	6858      	ldrgt	r0, [r3, #4]
 8002f1c:	3010      	addgt	r0, #16
 8002f1e:	2004      	movle	r0, #4
 8002f20:	6800      	ldr	r0, [r0, #0]
 8002f22:	2800      	cmp	r0, #0
 8002f24:	bf14      	ite	ne
 8002f26:	f8d0 a000 	ldrne.w	sl, [r0]
 8002f2a:	f04f 0a00 	moveq.w	sl, #0
 8002f2e:	2902      	cmp	r1, #2
 8002f30:	bfc6      	itte	gt
 8002f32:	6858      	ldrgt	r0, [r3, #4]
 8002f34:	f100 091c 	addgt.w	r9, r0, #28
 8002f38:	f04f 0904 	movle.w	r9, #4
 8002f3c:	f8d9 0000 	ldr.w	r0, [r9]
 8002f40:	2800      	cmp	r0, #0
 8002f42:	bf14      	ite	ne
 8002f44:	6806      	ldrne	r6, [r0, #0]
 8002f46:	2600      	moveq	r6, #0
 8002f48:	2902      	cmp	r1, #2
 8002f4a:	dd0a      	ble.n	8002f62 <forward_conv2d+0x6c>
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f113 0118 	adds.w	r1, r3, #24
 8002f52:	d006      	beq.n	8002f62 <forward_conv2d+0x6c>
 8002f54:	8b1f      	ldrh	r7, [r3, #24]
 8002f56:	2f01      	cmp	r7, #1
 8002f58:	dd03      	ble.n	8002f62 <forward_conv2d+0x6c>
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	b109      	cbz	r1, 8002f62 <forward_conv2d+0x6c>
 8002f5e:	6849      	ldr	r1, [r1, #4]
 8002f60:	e000      	b.n	8002f64 <forward_conv2d+0x6e>
 8002f62:	2100      	movs	r1, #0
 8002f64:	b100      	cbz	r0, 8002f68 <forward_conv2d+0x72>
 8002f66:	6880      	ldr	r0, [r0, #8]
 8002f68:	68d7      	ldr	r7, [r2, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8002f6e:	f8da c00c 	ldr.w	ip, [sl, #12]
 8002f72:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8002f76:	f8cd 9010 	str.w	r9, [sp, #16]
 8002f7a:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8002f7e:	f8dc e008 	ldr.w	lr, [ip, #8]
 8002f82:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8002f86:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8002f8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8002f8e:	68bf      	ldr	r7, [r7, #8]
 8002f90:	9720      	str	r7, [sp, #128]	; 0x80
 8002f92:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8002f96:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
 8002f9a:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8002f9c:	971f      	str	r7, [sp, #124]	; 0x7c
 8002f9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002fa0:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
 8002fa4:	681f      	ldr	r7, [r3, #0]
 8002fa6:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002faa:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8002fae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8002fb0:	9418      	str	r4, [sp, #96]	; 0x60
 8002fb2:	68f3      	ldr	r3, [r6, #12]
 8002fb4:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002fb8:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8002fbc:	685c      	ldr	r4, [r3, #4]
 8002fbe:	9412      	str	r4, [sp, #72]	; 0x48
 8002fc0:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8002fc4:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8002fc8:	6994      	ldr	r4, [r2, #24]
 8002fca:	68a3      	ldr	r3, [r4, #8]
 8002fcc:	931d      	str	r3, [sp, #116]	; 0x74
 8002fce:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8002fd2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8002fd6:	b119      	cbz	r1, 8002fe0 <forward_conv2d+0xea>
 8002fd8:	698a      	ldr	r2, [r1, #24]
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fde:	e003      	b.n	8002fe8 <forward_conv2d+0xf2>
 8002fe0:	f04f 0e00 	mov.w	lr, #0
 8002fe4:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8002fe8:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002fec:	688a      	ldr	r2, [r1, #8]
 8002fee:	9203      	str	r2, [sp, #12]
 8002ff0:	69e9      	ldr	r1, [r5, #28]
 8002ff2:	b118      	cbz	r0, 8002ffc <forward_conv2d+0x106>
 8002ff4:	6981      	ldr	r1, [r0, #24]
 8002ff6:	688a      	ldr	r2, [r1, #8]
 8002ff8:	9215      	str	r2, [sp, #84]	; 0x54
 8002ffa:	e005      	b.n	8003008 <forward_conv2d+0x112>
 8002ffc:	b111      	cbz	r1, 8003004 <forward_conv2d+0x10e>
 8002ffe:	688a      	ldr	r2, [r1, #8]
 8003000:	9215      	str	r2, [sp, #84]	; 0x54
 8003002:	e001      	b.n	8003008 <forward_conv2d+0x112>
 8003004:	2300      	movs	r3, #0
 8003006:	9315      	str	r3, [sp, #84]	; 0x54
 8003008:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800300a:	9202      	str	r2, [sp, #8]
 800300c:	b920      	cbnz	r0, 8003018 <forward_conv2d+0x122>
 800300e:	2100      	movs	r1, #0
 8003010:	2201      	movs	r2, #1
 8003012:	9124      	str	r1, [sp, #144]	; 0x90
 8003014:	9223      	str	r2, [sp, #140]	; 0x8c
 8003016:	e008      	b.n	800302a <forward_conv2d+0x134>
 8003018:	6941      	ldr	r1, [r0, #20]
 800301a:	688a      	ldr	r2, [r1, #8]
 800301c:	9224      	str	r2, [sp, #144]	; 0x90
 800301e:	6980      	ldr	r0, [r0, #24]
 8003020:	6841      	ldr	r1, [r0, #4]
 8003022:	6800      	ldr	r0, [r0, #0]
 8003024:	f003 fc94 	bl	8006950 <ai_array_get_byte_size>
 8003028:	9023      	str	r0, [sp, #140]	; 0x8c
 800302a:	6a28      	ldr	r0, [r5, #32]
 800302c:	2800      	cmp	r0, #0
 800302e:	bf12      	itee	ne
 8003030:	9022      	strne	r0, [sp, #136]	; 0x88
 8003032:	f8df 1d7c 	ldreq.w	r1, [pc, #3452]	; 8003db0 <.text_16>
 8003036:	9122      	streq	r1, [sp, #136]	; 0x88
 8003038:	a818      	add	r0, sp, #96	; 0x60
 800303a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800303c:	8803      	ldrh	r3, [r0, #0]
 800303e:	1e51      	subs	r1, r2, #1
 8003040:	1e5b      	subs	r3, r3, #1
 8003042:	fb03 2201 	mla	r2, r3, r1, r2
 8003046:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003048:	9216      	str	r2, [sp, #88]	; 0x58
 800304a:	aa19      	add	r2, sp, #100	; 0x64
 800304c:	8813      	ldrh	r3, [r2, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	1e48      	subs	r0, r1, #1
 8003052:	1e5b      	subs	r3, r3, #1
 8003054:	fb03 1100 	mla	r1, r3, r0, r1
 8003058:	2000      	movs	r0, #0
 800305a:	911c      	str	r1, [sp, #112]	; 0x70
 800305c:	69b6      	ldr	r6, [r6, #24]
 800305e:	4683      	mov	fp, r0
 8003060:	6831      	ldr	r1, [r6, #0]
 8003062:	11cb      	asrs	r3, r1, #7
 8003064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003068:	ea4f 5c61 	mov.w	ip, r1, asr #21
 800306c:	1449      	asrs	r1, r1, #17
 800306e:	f001 010f 	and.w	r1, r1, #15
 8003072:	f00c 0c03 	and.w	ip, ip, #3
 8003076:	2904      	cmp	r1, #4
 8003078:	fa23 f30c 	lsr.w	r3, r3, ip
 800307c:	bf14      	ite	ne
 800307e:	2908      	cmpne	r1, #8
 8003080:	68f2      	ldreq	r2, [r6, #12]
 8003082:	b1da      	cbz	r2, 80030bc <forward_conv2d+0x1c6>
 8003084:	6969      	ldr	r1, [r5, #20]
 8003086:	880d      	ldrh	r5, [r1, #0]
 8003088:	2d04      	cmp	r5, #4
 800308a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800308c:	bfa6      	itte	ge
 800308e:	6849      	ldrge	r1, [r1, #4]
 8003090:	3128      	addge	r1, #40	; 0x28
 8003092:	2104      	movlt	r1, #4
 8003094:	6809      	ldr	r1, [r1, #0]
 8003096:	2900      	cmp	r1, #0
 8003098:	bf1f      	itttt	ne
 800309a:	6808      	ldrne	r0, [r1, #0]
 800309c:	2800      	cmpne	r0, #0
 800309e:	6981      	ldrne	r1, [r0, #24]
 80030a0:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 80030a4:	6980      	ldr	r0, [r0, #24]
 80030a6:	6841      	ldr	r1, [r0, #4]
 80030a8:	9500      	str	r5, [sp, #0]
 80030aa:	9101      	str	r1, [sp, #4]
 80030ac:	68b1      	ldr	r1, [r6, #8]
 80030ae:	4658      	mov	r0, fp
 80030b0:	f7ff feb6 	bl	8002e20 <ai_dict_decompress_f32>
 80030b4:	f1bb 0f00 	cmp.w	fp, #0
 80030b8:	bf18      	it	ne
 80030ba:	465c      	movne	r4, fp
 80030bc:	b2bf      	uxth	r7, r7
 80030be:	427f      	negs	r7, r7
 80030c0:	f1b9 0f00 	cmp.w	r9, #0
 80030c4:	d06f      	beq.n	80031a6 <forward_conv2d+0x2b0>
 80030c6:	464a      	mov	r2, r9
 80030c8:	f1c8 0800 	rsb	r8, r8, #0
 80030cc:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80030d0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80030d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80030d8:	9427      	str	r4, [sp, #156]	; 0x9c
 80030da:	9711      	str	r7, [sp, #68]	; 0x44
 80030dc:	9e02      	ldr	r6, [sp, #8]
 80030de:	9221      	str	r2, [sp, #132]	; 0x84
 80030e0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80030e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80030e4:	9025      	str	r0, [sp, #148]	; 0x94
 80030e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80030e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80030ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80030ec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80030ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80030f2:	4240      	negs	r0, r0
 80030f4:	950d      	str	r5, [sp, #52]	; 0x34
 80030f6:	bfd8      	it	le
 80030f8:	2000      	movle	r0, #0
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	4299      	cmp	r1, r3
 80030fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003100:	9009      	str	r0, [sp, #36]	; 0x24
 8003102:	bf28      	it	cs
 8003104:	4619      	movcs	r1, r3
 8003106:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003108:	910a      	str	r1, [sp, #40]	; 0x28
 800310a:	b212      	sxth	r2, r2
 800310c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800310e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003110:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003112:	920c      	str	r2, [sp, #48]	; 0x30
 8003114:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8003118:	b21b      	sxth	r3, r3
 800311a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800311c:	930e      	str	r3, [sp, #56]	; 0x38
 800311e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003120:	9008      	str	r0, [sp, #32]
 8003122:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003124:	9107      	str	r1, [sp, #28]
 8003126:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003128:	9206      	str	r2, [sp, #24]
 800312a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800312c:	930b      	str	r3, [sp, #44]	; 0x2c
 800312e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003130:	9005      	str	r0, [sp, #20]
 8003132:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003134:	9104      	str	r1, [sp, #16]
 8003136:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003138:	9203      	str	r2, [sp, #12]
 800313a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800313c:	9001      	str	r0, [sp, #4]
 800313e:	2000      	movs	r0, #0
 8003140:	9100      	str	r1, [sp, #0]
 8003142:	4659      	mov	r1, fp
 8003144:	f7ff f956 	bl	80023f4 <ai_conv2d_stripe_f32>
 8003148:	9814      	ldr	r0, [sp, #80]	; 0x50
 800314a:	b300      	cbz	r0, 800318e <forward_conv2d+0x298>
 800314c:	f8cd a000 	str.w	sl, [sp]
 8003150:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003152:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8003154:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8003158:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800315a:	4682      	mov	sl, r0
 800315c:	9800      	ldr	r0, [sp, #0]
 800315e:	462b      	mov	r3, r5
 8003160:	464a      	mov	r2, r9
 8003162:	443d      	add	r5, r7
 8003164:	6981      	ldr	r1, [r0, #24]
 8003166:	f8c1 b008 	str.w	fp, [r1, #8]
 800316a:	eb0b 0b89 	add.w	fp, fp, r9, lsl #2
 800316e:	4608      	mov	r0, r1
 8003170:	47a0      	blx	r4
 8003172:	1ba9      	subs	r1, r5, r6
 8003174:	4541      	cmp	r1, r8
 8003176:	bfa8      	it	ge
 8003178:	4635      	movge	r5, r6
 800317a:	f1ba 0a01 	subs.w	sl, sl, #1
 800317e:	d1ed      	bne.n	800315c <forward_conv2d+0x266>
 8003180:	f8dd a000 	ldr.w	sl, [sp]
 8003184:	9515      	str	r5, [sp, #84]	; 0x54
 8003186:	9724      	str	r7, [sp, #144]	; 0x90
 8003188:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 800318c:	9422      	str	r4, [sp, #136]	; 0x88
 800318e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8003192:	68c1      	ldr	r1, [r0, #12]
 8003194:	6081      	str	r1, [r0, #8]
 8003196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800319a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800319c:	189a      	adds	r2, r3, r2
 800319e:	9211      	str	r2, [sp, #68]	; 0x44
 80031a0:	1e49      	subs	r1, r1, #1
 80031a2:	9121      	str	r1, [sp, #132]	; 0x84
 80031a4:	d19c      	bne.n	80030e0 <forward_conv2d+0x1ea>
 80031a6:	b029      	add	sp, #164	; 0xa4
 80031a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080031ac <forward_conv2d_nl_pool>:
 80031ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b0:	b0b9      	sub	sp, #228	; 0xe4
 80031b2:	4604      	mov	r4, r0
 80031b4:	6963      	ldr	r3, [r4, #20]
 80031b6:	8819      	ldrh	r1, [r3, #0]
 80031b8:	2900      	cmp	r1, #0
 80031ba:	bf1a      	itte	ne
 80031bc:	6858      	ldrne	r0, [r3, #4]
 80031be:	1d00      	addne	r0, r0, #4
 80031c0:	2004      	moveq	r0, #4
 80031c2:	6800      	ldr	r0, [r0, #0]
 80031c4:	2800      	cmp	r0, #0
 80031c6:	bf14      	ite	ne
 80031c8:	6802      	ldrne	r2, [r0, #0]
 80031ca:	2200      	moveq	r2, #0
 80031cc:	2901      	cmp	r1, #1
 80031ce:	bfc6      	itte	gt
 80031d0:	6858      	ldrgt	r0, [r3, #4]
 80031d2:	3010      	addgt	r0, #16
 80031d4:	2004      	movle	r0, #4
 80031d6:	6800      	ldr	r0, [r0, #0]
 80031d8:	2800      	cmp	r0, #0
 80031da:	bf14      	ite	ne
 80031dc:	f8d0 a000 	ldrne.w	sl, [r0]
 80031e0:	f04f 0a00 	moveq.w	sl, #0
 80031e4:	2902      	cmp	r1, #2
 80031e6:	bfc6      	itte	gt
 80031e8:	6858      	ldrgt	r0, [r3, #4]
 80031ea:	f100 071c 	addgt.w	r7, r0, #28
 80031ee:	2704      	movle	r7, #4
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	2800      	cmp	r0, #0
 80031f4:	bf14      	ite	ne
 80031f6:	6806      	ldrne	r6, [r0, #0]
 80031f8:	2600      	moveq	r6, #0
 80031fa:	2902      	cmp	r1, #2
 80031fc:	dd0c      	ble.n	8003218 <forward_conv2d_nl_pool+0x6c>
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f113 0118 	adds.w	r1, r3, #24
 8003204:	d008      	beq.n	8003218 <forward_conv2d_nl_pool+0x6c>
 8003206:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 800320a:	f1bc 0f01 	cmp.w	ip, #1
 800320e:	dd03      	ble.n	8003218 <forward_conv2d_nl_pool+0x6c>
 8003210:	69d9      	ldr	r1, [r3, #28]
 8003212:	b109      	cbz	r1, 8003218 <forward_conv2d_nl_pool+0x6c>
 8003214:	6849      	ldr	r1, [r1, #4]
 8003216:	e000      	b.n	800321a <forward_conv2d_nl_pool+0x6e>
 8003218:	2100      	movs	r1, #0
 800321a:	b100      	cbz	r0, 800321e <forward_conv2d_nl_pool+0x72>
 800321c:	6880      	ldr	r0, [r0, #8]
 800321e:	68d7      	ldr	r7, [r2, #12]
 8003220:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8003224:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 8003228:	f8da e00c 	ldr.w	lr, [sl, #12]
 800322c:	f8de 8004 	ldr.w	r8, [lr, #4]
 8003230:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003234:	f8de 900c 	ldr.w	r9, [lr, #12]
 8003238:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800323c:	f8de e008 	ldr.w	lr, [lr, #8]
 8003240:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 8003244:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003248:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800324c:	68bf      	ldr	r7, [r7, #8]
 800324e:	972d      	str	r7, [sp, #180]	; 0xb4
 8003250:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8003254:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8003258:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 800325a:	9720      	str	r7, [sp, #128]	; 0x80
 800325c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800325e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8003262:	881f      	ldrh	r7, [r3, #0]
 8003264:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8003268:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800326c:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 8003270:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003272:	951f      	str	r5, [sp, #124]	; 0x7c
 8003274:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 8003278:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800327c:	68f3      	ldr	r3, [r6, #12]
 800327e:	685d      	ldr	r5, [r3, #4]
 8003280:	951a      	str	r5, [sp, #104]	; 0x68
 8003282:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8003286:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800328a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800328c:	952b      	str	r5, [sp, #172]	; 0xac
 800328e:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8003292:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8003296:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003298:	9511      	str	r5, [sp, #68]	; 0x44
 800329a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800329c:	681d      	ldr	r5, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80032a2:	f8d2 e018 	ldr.w	lr, [r2, #24]
 80032a6:	f8de b008 	ldr.w	fp, [lr, #8]
 80032aa:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 80032ae:	69b3      	ldr	r3, [r6, #24]
 80032b0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80032b4:	b119      	cbz	r1, 80032be <forward_conv2d_nl_pool+0x112>
 80032b6:	698a      	ldr	r2, [r1, #24]
 80032b8:	6893      	ldr	r3, [r2, #8]
 80032ba:	931d      	str	r3, [sp, #116]	; 0x74
 80032bc:	e003      	b.n	80032c6 <forward_conv2d_nl_pool+0x11a>
 80032be:	f04f 0e00 	mov.w	lr, #0
 80032c2:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 80032c6:	69e1      	ldr	r1, [r4, #28]
 80032c8:	b118      	cbz	r0, 80032d2 <forward_conv2d_nl_pool+0x126>
 80032ca:	6981      	ldr	r1, [r0, #24]
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	921c      	str	r2, [sp, #112]	; 0x70
 80032d0:	e005      	b.n	80032de <forward_conv2d_nl_pool+0x132>
 80032d2:	b111      	cbz	r1, 80032da <forward_conv2d_nl_pool+0x12e>
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	921c      	str	r2, [sp, #112]	; 0x70
 80032d8:	e001      	b.n	80032de <forward_conv2d_nl_pool+0x132>
 80032da:	2300      	movs	r3, #0
 80032dc:	931c      	str	r3, [sp, #112]	; 0x70
 80032de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80032e0:	9202      	str	r2, [sp, #8]
 80032e2:	b920      	cbnz	r0, 80032ee <forward_conv2d_nl_pool+0x142>
 80032e4:	2100      	movs	r1, #0
 80032e6:	2201      	movs	r2, #1
 80032e8:	9116      	str	r1, [sp, #88]	; 0x58
 80032ea:	9215      	str	r2, [sp, #84]	; 0x54
 80032ec:	e008      	b.n	8003300 <forward_conv2d_nl_pool+0x154>
 80032ee:	6941      	ldr	r1, [r0, #20]
 80032f0:	688a      	ldr	r2, [r1, #8]
 80032f2:	9216      	str	r2, [sp, #88]	; 0x58
 80032f4:	6980      	ldr	r0, [r0, #24]
 80032f6:	6841      	ldr	r1, [r0, #4]
 80032f8:	6800      	ldr	r0, [r0, #0]
 80032fa:	f003 fb29 	bl	8006950 <ai_array_get_byte_size>
 80032fe:	9015      	str	r0, [sp, #84]	; 0x54
 8003300:	6a20      	ldr	r0, [r4, #32]
 8003302:	2800      	cmp	r0, #0
 8003304:	bf12      	itee	ne
 8003306:	9030      	strne	r0, [sp, #192]	; 0xc0
 8003308:	f8df 1aa4 	ldreq.w	r1, [pc, #2724]	; 8003db0 <.text_16>
 800330c:	9130      	streq	r1, [sp, #192]	; 0xc0
 800330e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003310:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003312:	9227      	str	r2, [sp, #156]	; 0x9c
 8003314:	aa1e      	add	r2, sp, #120	; 0x78
 8003316:	8813      	ldrh	r3, [r2, #0]
 8003318:	1e41      	subs	r1, r0, #1
 800331a:	1e5b      	subs	r3, r3, #1
 800331c:	fb03 0001 	mla	r0, r3, r1, r0
 8003320:	ab1f      	add	r3, sp, #124	; 0x7c
 8003322:	f8b3 e000 	ldrh.w	lr, [r3]
 8003326:	9018      	str	r0, [sp, #96]	; 0x60
 8003328:	991a      	ldr	r1, [sp, #104]	; 0x68
 800332a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800332c:	1e4a      	subs	r2, r1, #1
 800332e:	f1ae 0e01 	sub.w	lr, lr, #1
 8003332:	fb0e 1102 	mla	r1, lr, r2, r1
 8003336:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003338:	9126      	str	r1, [sp, #152]	; 0x98
 800333a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800333c:	9112      	str	r1, [sp, #72]	; 0x48
 800333e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8003340:	1a12      	subs	r2, r2, r0
 8003342:	18ba      	adds	r2, r7, r2
 8003344:	fa12 f089 	uxtah	r0, r2, r9
 8003348:	2200      	movs	r2, #0
 800334a:	fbb0 f1f1 	udiv	r1, r0, r1
 800334e:	1c49      	adds	r1, r1, #1
 8003350:	2000      	movs	r0, #0
 8003352:	9114      	str	r1, [sp, #80]	; 0x50
 8003354:	69b6      	ldr	r6, [r6, #24]
 8003356:	4681      	mov	r9, r0
 8003358:	6831      	ldr	r1, [r6, #0]
 800335a:	11cb      	asrs	r3, r1, #7
 800335c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003360:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8003364:	1449      	asrs	r1, r1, #17
 8003366:	f001 010f 	and.w	r1, r1, #15
 800336a:	f00c 0c03 	and.w	ip, ip, #3
 800336e:	2904      	cmp	r1, #4
 8003370:	fa23 f30c 	lsr.w	r3, r3, ip
 8003374:	bf14      	ite	ne
 8003376:	2908      	cmpne	r1, #8
 8003378:	68f2      	ldreq	r2, [r6, #12]
 800337a:	b302      	cbz	r2, 80033be <forward_conv2d_nl_pool+0x212>
 800337c:	6961      	ldr	r1, [r4, #20]
 800337e:	f8b1 c000 	ldrh.w	ip, [r1]
 8003382:	f1bc 0f04 	cmp.w	ip, #4
 8003386:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 800338a:	bfa6      	itte	ge
 800338c:	6849      	ldrge	r1, [r1, #4]
 800338e:	3128      	addge	r1, #40	; 0x28
 8003390:	2104      	movlt	r1, #4
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	2900      	cmp	r1, #0
 8003396:	bf1f      	itttt	ne
 8003398:	6848      	ldrne	r0, [r1, #4]
 800339a:	2800      	cmpne	r0, #0
 800339c:	6981      	ldrne	r1, [r0, #24]
 800339e:	f8d1 9008 	ldrne.w	r9, [r1, #8]
 80033a2:	6980      	ldr	r0, [r0, #24]
 80033a4:	6841      	ldr	r1, [r0, #4]
 80033a6:	f8cd c000 	str.w	ip, [sp]
 80033aa:	9101      	str	r1, [sp, #4]
 80033ac:	68b1      	ldr	r1, [r6, #8]
 80033ae:	4648      	mov	r0, r9
 80033b0:	f7ff fd36 	bl	8002e20 <ai_dict_decompress_f32>
 80033b4:	f1b9 0f00 	cmp.w	r9, #0
 80033b8:	bf18      	it	ne
 80033ba:	4648      	movne	r0, r9
 80033bc:	d100      	bne.n	80033c0 <forward_conv2d_nl_pool+0x214>
 80033be:	4658      	mov	r0, fp
 80033c0:	6963      	ldr	r3, [r4, #20]
 80033c2:	2600      	movs	r6, #0
 80033c4:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80033c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80033cc:	b22d      	sxth	r5, r5
 80033ce:	f1c8 0800 	rsb	r8, r8, #0
 80033d2:	881c      	ldrh	r4, [r3, #0]
 80033d4:	46aa      	mov	sl, r5
 80033d6:	2c04      	cmp	r4, #4
 80033d8:	bfa6      	itte	ge
 80033da:	685b      	ldrge	r3, [r3, #4]
 80033dc:	3328      	addge	r3, #40	; 0x28
 80033de:	2304      	movlt	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	f8d3 9000 	ldrne.w	r9, [r3]
 80033ea:	46b1      	moveq	r9, r6
 80033ec:	f8d9 4018 	ldr.w	r4, [r9, #24]
 80033f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80033f4:	427f      	negs	r7, r7
 80033f6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80033fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8003402:	435c      	muls	r4, r3
 8003404:	fb0e f404 	mul.w	r4, lr, r4
 8003408:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 800340c:	9437      	str	r4, [sp, #220]	; 0xdc
 800340e:	ac11      	add	r4, sp, #68	; 0x44
 8003410:	f9b4 c000 	ldrsh.w	ip, [r4]
 8003414:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003416:	fb0e f404 	mul.w	r4, lr, r4
 800341a:	9435      	str	r4, [sp, #212]	; 0xd4
 800341c:	ac12      	add	r4, sp, #72	; 0x48
 800341e:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 8003422:	f9b4 c000 	ldrsh.w	ip, [r4]
 8003426:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003428:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 800342c:	435c      	muls	r4, r3
 800342e:	9433      	str	r4, [sp, #204]	; 0xcc
 8003430:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8003432:	2c00      	cmp	r4, #0
 8003434:	f000 812d 	beq.w	8003692 <forward_conv2d_nl_pool+0x4e6>
 8003438:	9038      	str	r0, [sp, #224]	; 0xe0
 800343a:	462c      	mov	r4, r5
 800343c:	9125      	str	r1, [sp, #148]	; 0x94
 800343e:	962f      	str	r6, [sp, #188]	; 0xbc
 8003440:	962e      	str	r6, [sp, #184]	; 0xb8
 8003442:	9324      	str	r3, [sp, #144]	; 0x90
 8003444:	9717      	str	r7, [sp, #92]	; 0x5c
 8003446:	9d02      	ldr	r5, [sp, #8]
 8003448:	9814      	ldr	r0, [sp, #80]	; 0x50
 800344a:	2800      	cmp	r0, #0
 800344c:	dd68      	ble.n	8003520 <forward_conv2d_nl_pool+0x374>
 800344e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003450:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8003452:	9131      	str	r1, [sp, #196]	; 0xc4
 8003454:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003456:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003458:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800345a:	4240      	negs	r0, r0
 800345c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800345e:	960d      	str	r6, [sp, #52]	; 0x34
 8003460:	bfd8      	it	le
 8003462:	2000      	movle	r0, #0
 8003464:	1a89      	subs	r1, r1, r2
 8003466:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003468:	4299      	cmp	r1, r3
 800346a:	9009      	str	r0, [sp, #36]	; 0x24
 800346c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800346e:	b212      	sxth	r2, r2
 8003470:	9008      	str	r0, [sp, #32]
 8003472:	920f      	str	r2, [sp, #60]	; 0x3c
 8003474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003476:	bf28      	it	cs
 8003478:	4619      	movcs	r1, r3
 800347a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800347c:	920c      	str	r2, [sp, #48]	; 0x30
 800347e:	910a      	str	r1, [sp, #40]	; 0x28
 8003480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003482:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8003486:	9206      	str	r2, [sp, #24]
 8003488:	b21b      	sxth	r3, r3
 800348a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800348c:	930e      	str	r3, [sp, #56]	; 0x38
 800348e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8003490:	9107      	str	r1, [sp, #28]
 8003492:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003494:	9203      	str	r2, [sp, #12]
 8003496:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003498:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800349a:	930b      	str	r3, [sp, #44]	; 0x2c
 800349c:	9005      	str	r0, [sp, #20]
 800349e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80034a0:	9104      	str	r1, [sp, #16]
 80034a2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80034a4:	9200      	str	r2, [sp, #0]
 80034a6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80034a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80034aa:	9002      	str	r0, [sp, #8]
 80034ac:	9101      	str	r1, [sp, #4]
 80034ae:	4659      	mov	r1, fp
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fe ff9f 	bl	80023f4 <ai_conv2d_stripe_f32>
 80034b6:	9824      	ldr	r0, [sp, #144]	; 0x90
 80034b8:	b350      	cbz	r0, 8003510 <forward_conv2d_nl_pool+0x364>
 80034ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80034bc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80034be:	9502      	str	r5, [sp, #8]
 80034c0:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 80034c4:	ea4f 0500 	mov.w	r5, r0
 80034c8:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80034cc:	463b      	mov	r3, r7
 80034ce:	4632      	mov	r2, r6
 80034d0:	f8c1 b008 	str.w	fp, [r1, #8]
 80034d4:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 80034d8:	4608      	mov	r0, r1
 80034da:	47c0      	blx	r8
 80034dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80034de:	9902      	ldr	r1, [sp, #8]
 80034e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80034e2:	4407      	add	r7, r0
 80034e4:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80034e8:	1a79      	subs	r1, r7, r1
 80034ea:	4291      	cmp	r1, r2
 80034ec:	6841      	ldr	r1, [r0, #4]
 80034ee:	68c0      	ldr	r0, [r0, #12]
 80034f0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80034f4:	bfa8      	it	ge
 80034f6:	9f02      	ldrge	r7, [sp, #8]
 80034f8:	4593      	cmp	fp, r2
 80034fa:	d302      	bcc.n	8003502 <forward_conv2d_nl_pool+0x356>
 80034fc:	0089      	lsls	r1, r1, #2
 80034fe:	4249      	negs	r1, r1
 8003500:	448b      	add	fp, r1
 8003502:	1e6d      	subs	r5, r5, #1
 8003504:	d1e0      	bne.n	80034c8 <forward_conv2d_nl_pool+0x31c>
 8003506:	9610      	str	r6, [sp, #64]	; 0x40
 8003508:	971c      	str	r7, [sp, #112]	; 0x70
 800350a:	9d02      	ldr	r5, [sp, #8]
 800350c:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8003510:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8003514:	f10a 0a01 	add.w	sl, sl, #1
 8003518:	fa0f fa8a 	sxth.w	sl, sl
 800351c:	68c1      	ldr	r1, [r0, #12]
 800351e:	6081      	str	r1, [r0, #8]
 8003520:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003522:	1e40      	subs	r0, r0, #1
 8003524:	9014      	str	r0, [sp, #80]	; 0x50
 8003526:	d56d      	bpl.n	8003604 <forward_conv2d_nl_pool+0x458>
 8003528:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800352a:	4659      	mov	r1, fp
 800352c:	fb00 f00a 	mul.w	r0, r0, sl
 8003530:	0080      	lsls	r0, r0, #2
 8003532:	4240      	negs	r0, r0
 8003534:	eb0b 0200 	add.w	r2, fp, r0
 8003538:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800353c:	68c3      	ldr	r3, [r0, #12]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf3c      	itt	cc
 8003542:	6847      	ldrcc	r7, [r0, #4]
 8003544:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8003548:	4293      	cmp	r3, r2
 800354a:	d237      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 800354c:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 800354e:	45b2      	cmp	sl, r6
 8003550:	d034      	beq.n	80035bc <forward_conv2d_nl_pool+0x410>
 8003552:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003556:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800355a:	429a      	cmp	r2, r3
 800355c:	f080 802e 	bcs.w	80035bc <forward_conv2d_nl_pool+0x410>
 8003560:	ed92 0a00 	vldr	s0, [r2]
 8003564:	1d12      	adds	r2, r2, #4
 8003566:	ed8b 0a00 	vstr	s0, [fp]
 800356a:	68c6      	ldr	r6, [r0, #12]
 800356c:	6843      	ldr	r3, [r0, #4]
 800356e:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 8003572:	42ba      	cmp	r2, r7
 8003574:	d222      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 8003576:	edd2 0a00 	vldr	s1, [r2]
 800357a:	1d12      	adds	r2, r2, #4
 800357c:	edcb 0a01 	vstr	s1, [fp, #4]
 8003580:	68c3      	ldr	r3, [r0, #12]
 8003582:	6846      	ldr	r6, [r0, #4]
 8003584:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8003588:	42ba      	cmp	r2, r7
 800358a:	d217      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 800358c:	ed92 0a00 	vldr	s0, [r2]
 8003590:	1d12      	adds	r2, r2, #4
 8003592:	ed8b 0a02 	vstr	s0, [fp, #8]
 8003596:	68c3      	ldr	r3, [r0, #12]
 8003598:	6846      	ldr	r6, [r0, #4]
 800359a:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 800359e:	42ba      	cmp	r2, r7
 80035a0:	d20c      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 80035a2:	edd2 0a00 	vldr	s1, [r2]
 80035a6:	1d12      	adds	r2, r2, #4
 80035a8:	edcb 0a03 	vstr	s1, [fp, #12]
 80035ac:	68c3      	ldr	r3, [r0, #12]
 80035ae:	6846      	ldr	r6, [r0, #4]
 80035b0:	f10b 0b10 	add.w	fp, fp, #16
 80035b4:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80035b8:	42ba      	cmp	r2, r7
 80035ba:	d3d1      	bcc.n	8003560 <forward_conv2d_nl_pool+0x3b4>
 80035bc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80035be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80035c2:	189a      	adds	r2, r3, r2
 80035c4:	eba2 020a 	sub.w	r2, r2, sl
 80035c8:	922f      	str	r2, [sp, #188]	; 0xbc
 80035ca:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80035cc:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 80035d0:	68c1      	ldr	r1, [r0, #12]
 80035d2:	6843      	ldr	r3, [r0, #4]
 80035d4:	44b2      	add	sl, r6
 80035d6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80035da:	fa0f fa8a 	sxth.w	sl, sl
 80035de:	460b      	mov	r3, r1
 80035e0:	4593      	cmp	fp, r2
 80035e2:	d30f      	bcc.n	8003604 <forward_conv2d_nl_pool+0x458>
 80035e4:	6841      	ldr	r1, [r0, #4]
 80035e6:	008a      	lsls	r2, r1, #2
 80035e8:	4252      	negs	r2, r2
 80035ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80035ee:	4493      	add	fp, r2
 80035f0:	458b      	cmp	fp, r1
 80035f2:	bf24      	itt	cs
 80035f4:	4493      	addcs	fp, r2
 80035f6:	458b      	cmpcs	fp, r1
 80035f8:	bf21      	itttt	cs
 80035fa:	4493      	addcs	fp, r2
 80035fc:	458b      	cmpcs	fp, r1
 80035fe:	4493      	addcs	fp, r2
 8003600:	458b      	cmpcs	fp, r1
 8003602:	d2ef      	bcs.n	80035e4 <forward_conv2d_nl_pool+0x438>
 8003604:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003606:	4582      	cmp	sl, r0
 8003608:	d339      	bcc.n	800367e <forward_conv2d_nl_pool+0x4d2>
 800360a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800360c:	9825      	ldr	r0, [sp, #148]	; 0x94
 800360e:	9008      	str	r0, [sp, #32]
 8003610:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8003612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003614:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8003616:	1c52      	adds	r2, r2, #1
 8003618:	9911      	ldr	r1, [sp, #68]	; 0x44
 800361a:	922e      	str	r2, [sp, #184]	; 0xb8
 800361c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800361e:	b280      	uxth	r0, r0
 8003620:	b29b      	uxth	r3, r3
 8003622:	9004      	str	r0, [sp, #16]
 8003624:	b2a0      	uxth	r0, r4
 8003626:	b292      	uxth	r2, r2
 8003628:	9003      	str	r0, [sp, #12]
 800362a:	9206      	str	r2, [sp, #24]
 800362c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800362e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8003630:	9305      	str	r3, [sp, #20]
 8003632:	b292      	uxth	r2, r2
 8003634:	ebaa 0a01 	sub.w	sl, sl, r1
 8003638:	2101      	movs	r1, #1
 800363a:	9201      	str	r2, [sp, #4]
 800363c:	9107      	str	r1, [sp, #28]
 800363e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8003640:	b280      	uxth	r0, r0
 8003642:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003644:	9000      	str	r0, [sp, #0]
 8003646:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8003648:	b289      	uxth	r1, r1
 800364a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800364c:	9102      	str	r1, [sp, #8]
 800364e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003650:	1a12      	subs	r2, r2, r0
 8003652:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8003656:	b29b      	uxth	r3, r3
 8003658:	b292      	uxth	r2, r2
 800365a:	b289      	uxth	r1, r1
 800365c:	fa0f fa8a 	sxth.w	sl, sl
 8003660:	47b0      	blx	r6
 8003662:	9825      	ldr	r0, [sp, #148]	; 0x94
 8003664:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8003666:	6881      	ldr	r1, [r0, #8]
 8003668:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800366c:	6083      	str	r3, [r0, #8]
 800366e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8003670:	1a61      	subs	r1, r4, r1
 8003672:	2900      	cmp	r1, #0
 8003674:	bfc3      	ittte	gt
 8003676:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8003678:	1a24      	subgt	r4, r4, r0
 800367a:	b224      	sxthgt	r4, r4
 800367c:	2400      	movle	r4, #0
 800367e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003680:	9820      	ldr	r0, [sp, #128]	; 0x80
 8003682:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8003684:	1841      	adds	r1, r0, r1
 8003686:	9117      	str	r1, [sp, #92]	; 0x5c
 8003688:	9922      	ldr	r1, [sp, #136]	; 0x88
 800368a:	428a      	cmp	r2, r1
 800368c:	f4ff aedc 	bcc.w	8003448 <forward_conv2d_nl_pool+0x29c>
 8003690:	9925      	ldr	r1, [sp, #148]	; 0x94
 8003692:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8003696:	68c2      	ldr	r2, [r0, #12]
 8003698:	6082      	str	r2, [r0, #8]
 800369a:	68c8      	ldr	r0, [r1, #12]
 800369c:	6088      	str	r0, [r1, #8]
 800369e:	b039      	add	sp, #228	; 0xe4
 80036a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080036a4 <forward_dense>:
 80036a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a8:	b081      	sub	sp, #4
 80036aa:	ed2d 8b02 	vpush	{d8}
 80036ae:	b088      	sub	sp, #32
 80036b0:	6944      	ldr	r4, [r0, #20]
 80036b2:	8820      	ldrh	r0, [r4, #0]
 80036b4:	2800      	cmp	r0, #0
 80036b6:	bf1a      	itte	ne
 80036b8:	6861      	ldrne	r1, [r4, #4]
 80036ba:	1d09      	addne	r1, r1, #4
 80036bc:	2104      	moveq	r1, #4
 80036be:	6809      	ldr	r1, [r1, #0]
 80036c0:	2900      	cmp	r1, #0
 80036c2:	bf14      	ite	ne
 80036c4:	680a      	ldrne	r2, [r1, #0]
 80036c6:	2200      	moveq	r2, #0
 80036c8:	2802      	cmp	r0, #2
 80036ca:	bfa6      	itte	ge
 80036cc:	6861      	ldrge	r1, [r4, #4]
 80036ce:	3110      	addge	r1, #16
 80036d0:	2104      	movlt	r1, #4
 80036d2:	6809      	ldr	r1, [r1, #0]
 80036d4:	2900      	cmp	r1, #0
 80036d6:	bf14      	ite	ne
 80036d8:	680f      	ldrne	r7, [r1, #0]
 80036da:	2700      	moveq	r7, #0
 80036dc:	2802      	cmp	r0, #2
 80036de:	bfc6      	itte	gt
 80036e0:	6861      	ldrgt	r1, [r4, #4]
 80036e2:	311c      	addgt	r1, #28
 80036e4:	2104      	movle	r1, #4
 80036e6:	6809      	ldr	r1, [r1, #0]
 80036e8:	2900      	cmp	r1, #0
 80036ea:	bf14      	ite	ne
 80036ec:	680b      	ldrne	r3, [r1, #0]
 80036ee:	2300      	moveq	r3, #0
 80036f0:	2802      	cmp	r0, #2
 80036f2:	dd0b      	ble.n	800370c <forward_dense+0x68>
 80036f4:	6861      	ldr	r1, [r4, #4]
 80036f6:	f111 0018 	adds.w	r0, r1, #24
 80036fa:	d007      	beq.n	800370c <forward_dense+0x68>
 80036fc:	8b0c      	ldrh	r4, [r1, #24]
 80036fe:	2c02      	cmp	r4, #2
 8003700:	db04      	blt.n	800370c <forward_dense+0x68>
 8003702:	69c8      	ldr	r0, [r1, #28]
 8003704:	b110      	cbz	r0, 800370c <forward_dense+0x68>
 8003706:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800370a:	e001      	b.n	8003710 <forward_dense+0x6c>
 800370c:	f04f 0a00 	mov.w	sl, #0
 8003710:	68d0      	ldr	r0, [r2, #12]
 8003712:	699e      	ldr	r6, [r3, #24]
 8003714:	6992      	ldr	r2, [r2, #24]
 8003716:	6844      	ldr	r4, [r0, #4]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800371e:	f8d6 e000 	ldr.w	lr, [r6]
 8003722:	69bf      	ldr	r7, [r7, #24]
 8003724:	6881      	ldr	r1, [r0, #8]
 8003726:	68c0      	ldr	r0, [r0, #12]
 8003728:	ea4f 19ee 	mov.w	r9, lr, asr #7
 800372c:	ea4f 586e 	mov.w	r8, lr, asr #21
 8003730:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8003734:	f00e 0e0f 	and.w	lr, lr, #15
 8003738:	4341      	muls	r1, r0
 800373a:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 800373e:	f008 0803 	and.w	r8, r8, #3
 8003742:	fa29 f908 	lsr.w	r9, r9, r8
 8003746:	2000      	movs	r0, #0
 8003748:	f1be 0f04 	cmp.w	lr, #4
 800374c:	68bf      	ldr	r7, [r7, #8]
 800374e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8003752:	bf14      	ite	ne
 8003754:	f1be 0f08 	cmpne.w	lr, #8
 8003758:	68f0      	ldreq	r0, [r6, #12]
 800375a:	695e      	ldr	r6, [r3, #20]
 800375c:	2900      	cmp	r1, #0
 800375e:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8003762:	6876      	ldr	r6, [r6, #4]
 8003764:	f000 80ee 	beq.w	8003944 <forward_dense+0x2a0>
 8003768:	9307      	str	r3, [sp, #28]
 800376a:	f8cd a014 	str.w	sl, [sp, #20]
 800376e:	f8cd c018 	str.w	ip, [sp, #24]
 8003772:	9201      	str	r2, [sp, #4]
 8003774:	9104      	str	r1, [sp, #16]
 8003776:	9907      	ldr	r1, [sp, #28]
 8003778:	698b      	ldr	r3, [r1, #24]
 800377a:	9905      	ldr	r1, [sp, #20]
 800377c:	2900      	cmp	r1, #0
 800377e:	bf1a      	itte	ne
 8003780:	6989      	ldrne	r1, [r1, #24]
 8003782:	688a      	ldrne	r2, [r1, #8]
 8003784:	2200      	moveq	r2, #0
 8003786:	2800      	cmp	r0, #0
 8003788:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800378c:	9b01      	ldr	r3, [sp, #4]
 800378e:	f040 80ab 	bne.w	80038e8 <forward_dense+0x244>
 8003792:	429f      	cmp	r7, r3
 8003794:	f080 80c9 	bcs.w	800392a <forward_dense+0x286>
 8003798:	9003      	str	r0, [sp, #12]
 800379a:	2a00      	cmp	r2, #0
 800379c:	4620      	mov	r0, r4
 800379e:	46c6      	mov	lr, r8
 80037a0:	46dc      	mov	ip, fp
 80037a2:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8003950 <.text_13>
 80037a6:	bf0e      	itee	eq
 80037a8:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 8003950 <.text_13>
 80037ac:	ed92 0a00 	vldrne	s0, [r2]
 80037b0:	1d12      	addne	r2, r2, #4
 80037b2:	2c04      	cmp	r4, #4
 80037b4:	d35d      	bcc.n	8003872 <forward_dense+0x1ce>
 80037b6:	08a1      	lsrs	r1, r4, #2
 80037b8:	07cd      	lsls	r5, r1, #31
 80037ba:	d51c      	bpl.n	80037f6 <forward_dense+0x152>
 80037bc:	ed9c 4a00 	vldr	s8, [ip]
 80037c0:	1f00      	subs	r0, r0, #4
 80037c2:	edde 4a00 	vldr	s9, [lr]
 80037c6:	ed9c 3a01 	vldr	s6, [ip, #4]
 80037ca:	edde 3a01 	vldr	s7, [lr, #4]
 80037ce:	ee44 0a24 	vmla.f32	s1, s8, s9
 80037d2:	ed9c 2a02 	vldr	s4, [ip, #8]
 80037d6:	edde 2a02 	vldr	s5, [lr, #8]
 80037da:	ee43 0a23 	vmla.f32	s1, s6, s7
 80037de:	ed9c 1a03 	vldr	s2, [ip, #12]
 80037e2:	f10c 0c10 	add.w	ip, ip, #16
 80037e6:	edde 1a03 	vldr	s3, [lr, #12]
 80037ea:	f10e 0e10 	add.w	lr, lr, #16
 80037ee:	ee42 0a22 	vmla.f32	s1, s4, s5
 80037f2:	ee41 0a21 	vmla.f32	s1, s2, s3
 80037f6:	0849      	lsrs	r1, r1, #1
 80037f8:	f000 803b 	beq.w	8003872 <forward_dense+0x1ce>
 80037fc:	ed9c 1a03 	vldr	s2, [ip, #12]
 8003800:	3808      	subs	r0, #8
 8003802:	edde 1a03 	vldr	s3, [lr, #12]
 8003806:	1e49      	subs	r1, r1, #1
 8003808:	ed9c 2a02 	vldr	s4, [ip, #8]
 800380c:	edde 2a02 	vldr	s5, [lr, #8]
 8003810:	ed9c 3a01 	vldr	s6, [ip, #4]
 8003814:	edde 3a01 	vldr	s7, [lr, #4]
 8003818:	ed9c 4a00 	vldr	s8, [ip]
 800381c:	f10c 0c10 	add.w	ip, ip, #16
 8003820:	edde 4a00 	vldr	s9, [lr]
 8003824:	f10e 0e10 	add.w	lr, lr, #16
 8003828:	ee44 0a24 	vmla.f32	s1, s8, s9
 800382c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8003830:	ee42 0a22 	vmla.f32	s1, s4, s5
 8003834:	ed9c 8a00 	vldr	s16, [ip]
 8003838:	edde 8a00 	vldr	s17, [lr]
 800383c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8003840:	ed9c 7a01 	vldr	s14, [ip, #4]
 8003844:	edde 7a01 	vldr	s15, [lr, #4]
 8003848:	ee48 0a28 	vmla.f32	s1, s16, s17
 800384c:	ed9c 6a02 	vldr	s12, [ip, #8]
 8003850:	edde 6a02 	vldr	s13, [lr, #8]
 8003854:	ee47 0a27 	vmla.f32	s1, s14, s15
 8003858:	ed9c 5a03 	vldr	s10, [ip, #12]
 800385c:	f10c 0c10 	add.w	ip, ip, #16
 8003860:	edde 5a03 	vldr	s11, [lr, #12]
 8003864:	f10e 0e10 	add.w	lr, lr, #16
 8003868:	ee46 0a26 	vmla.f32	s1, s12, s13
 800386c:	ee45 0a25 	vmla.f32	s1, s10, s11
 8003870:	d1c4      	bne.n	80037fc <forward_dense+0x158>
 8003872:	b378      	cbz	r0, 80038d4 <forward_dense+0x230>
 8003874:	f010 0103 	ands.w	r1, r0, #3
 8003878:	d00b      	beq.n	8003892 <forward_dense+0x1ee>
 800387a:	1e49      	subs	r1, r1, #1
 800387c:	ed9c 1a00 	vldr	s2, [ip]
 8003880:	edde 1a00 	vldr	s3, [lr]
 8003884:	f10e 0e04 	add.w	lr, lr, #4
 8003888:	ee41 0a21 	vmla.f32	s1, s2, s3
 800388c:	f10c 0c04 	add.w	ip, ip, #4
 8003890:	d1f3      	bne.n	800387a <forward_dense+0x1d6>
 8003892:	0880      	lsrs	r0, r0, #2
 8003894:	f000 801e 	beq.w	80038d4 <forward_dense+0x230>
 8003898:	ed9c 2a00 	vldr	s4, [ip]
 800389c:	1e40      	subs	r0, r0, #1
 800389e:	ed9e 1a00 	vldr	s2, [lr]
 80038a2:	eddc 1a01 	vldr	s3, [ip, #4]
 80038a6:	edde 2a01 	vldr	s5, [lr, #4]
 80038aa:	ee42 0a01 	vmla.f32	s1, s4, s2
 80038ae:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80038b2:	ed9c 2a02 	vldr	s4, [ip, #8]
 80038b6:	ed9e 1a02 	vldr	s2, [lr, #8]
 80038ba:	eddc 1a03 	vldr	s3, [ip, #12]
 80038be:	f10c 0c10 	add.w	ip, ip, #16
 80038c2:	edde 2a03 	vldr	s5, [lr, #12]
 80038c6:	f10e 0e10 	add.w	lr, lr, #16
 80038ca:	ee42 0a01 	vmla.f32	s1, s4, s2
 80038ce:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80038d2:	d1e1      	bne.n	8003898 <forward_dense+0x1f4>
 80038d4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80038d8:	44b3      	add	fp, r6
 80038da:	ed87 0a00 	vstr	s0, [r7]
 80038de:	1d3f      	adds	r7, r7, #4
 80038e0:	429f      	cmp	r7, r3
 80038e2:	f4ff af5a 	bcc.w	800379a <forward_dense+0xf6>
 80038e6:	e01f      	b.n	8003928 <forward_dense+0x284>
 80038e8:	429f      	cmp	r7, r3
 80038ea:	d21e      	bcs.n	800392a <forward_dense+0x286>
 80038ec:	469a      	mov	sl, r3
 80038ee:	9003      	str	r0, [sp, #12]
 80038f0:	4615      	mov	r5, r2
 80038f2:	2d00      	cmp	r5, #0
 80038f4:	a802      	add	r0, sp, #8
 80038f6:	bf19      	ittee	ne
 80038f8:	f855 1b04 	ldrne.w	r1, [r5], #4
 80038fc:	9102      	strne	r1, [sp, #8]
 80038fe:	2300      	moveq	r3, #0
 8003900:	9302      	streq	r3, [sp, #8]
 8003902:	f1b9 0f04 	cmp.w	r9, #4
 8003906:	9400      	str	r4, [sp, #0]
 8003908:	4643      	mov	r3, r8
 800390a:	9a03      	ldr	r2, [sp, #12]
 800390c:	4659      	mov	r1, fp
 800390e:	d103      	bne.n	8003918 <forward_dense+0x274>
 8003910:	f7ff f9d2 	bl	8002cb8 <ai_dict4_dot_array_f32>
 8003914:	e002      	b.n	800391c <forward_dense+0x278>
 8003916:	bf00      	nop
 8003918:	f7ff f85e 	bl	80029d8 <ai_dict8_dot_array_f32>
 800391c:	9802      	ldr	r0, [sp, #8]
 800391e:	44b3      	add	fp, r6
 8003920:	f847 0b04 	str.w	r0, [r7], #4
 8003924:	4557      	cmp	r7, sl
 8003926:	d3e4      	bcc.n	80038f2 <forward_dense+0x24e>
 8003928:	9803      	ldr	r0, [sp, #12]
 800392a:	9a01      	ldr	r2, [sp, #4]
 800392c:	9b06      	ldr	r3, [sp, #24]
 800392e:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8003932:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8003936:	9a04      	ldr	r2, [sp, #16]
 8003938:	f8cd e004 	str.w	lr, [sp, #4]
 800393c:	1e52      	subs	r2, r2, #1
 800393e:	9204      	str	r2, [sp, #16]
 8003940:	f47f af19 	bne.w	8003776 <forward_dense+0xd2>
 8003944:	b008      	add	sp, #32
 8003946:	ecbd 8b02 	vpop	{d8}
 800394a:	b001      	add	sp, #4
 800394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003950 <.text_13>:
 8003950:	00000000 	.word	0x00000000

08003954 <forward_gemm>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b091      	sub	sp, #68	; 0x44
 800395a:	4604      	mov	r4, r0
 800395c:	6961      	ldr	r1, [r4, #20]
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	8808      	ldrh	r0, [r1, #0]
 8003962:	2800      	cmp	r0, #0
 8003964:	bf1a      	itte	ne
 8003966:	6849      	ldrne	r1, [r1, #4]
 8003968:	1d0a      	addne	r2, r1, #4
 800396a:	2204      	moveq	r2, #4
 800396c:	6810      	ldr	r0, [r2, #0]
 800396e:	8819      	ldrh	r1, [r3, #0]
 8003970:	2800      	cmp	r0, #0
 8003972:	bf14      	ite	ne
 8003974:	6805      	ldrne	r5, [r0, #0]
 8003976:	2500      	moveq	r5, #0
 8003978:	2900      	cmp	r1, #0
 800397a:	bf1d      	ittte	ne
 800397c:	6858      	ldrne	r0, [r3, #4]
 800397e:	2800      	cmpne	r0, #0
 8003980:	f8b0 c000 	ldrhne.w	ip, [r0]
 8003984:	f04f 0c00 	moveq.w	ip, #0
 8003988:	2902      	cmp	r1, #2
 800398a:	bfa6      	itte	ge
 800398c:	6858      	ldrge	r0, [r3, #4]
 800398e:	3010      	addge	r0, #16
 8003990:	2004      	movlt	r0, #4
 8003992:	6800      	ldr	r0, [r0, #0]
 8003994:	2800      	cmp	r0, #0
 8003996:	bf14      	ite	ne
 8003998:	6801      	ldrne	r1, [r0, #0]
 800399a:	2100      	moveq	r1, #0
 800399c:	2600      	movs	r6, #0
 800399e:	2700      	movs	r7, #0
 80039a0:	f1bc 0f03 	cmp.w	ip, #3
 80039a4:	d106      	bne.n	80039b4 <forward_gemm+0x60>
 80039a6:	6810      	ldr	r0, [r2, #0]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d023      	beq.n	80039f4 <forward_gemm+0xa0>
 80039ac:	6846      	ldr	r6, [r0, #4]
 80039ae:	d021      	beq.n	80039f4 <forward_gemm+0xa0>
 80039b0:	6887      	ldr	r7, [r0, #8]
 80039b2:	e01f      	b.n	80039f4 <forward_gemm+0xa0>
 80039b4:	f1bc 0f02 	cmp.w	ip, #2
 80039b8:	d10c      	bne.n	80039d4 <forward_gemm+0x80>
 80039ba:	6810      	ldr	r0, [r2, #0]
 80039bc:	b100      	cbz	r0, 80039c0 <forward_gemm+0x6c>
 80039be:	6846      	ldr	r6, [r0, #4]
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	2a02      	cmp	r2, #2
 80039c4:	bfc6      	itte	gt
 80039c6:	6858      	ldrgt	r0, [r3, #4]
 80039c8:	301c      	addgt	r0, #28
 80039ca:	2004      	movle	r0, #4
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	b188      	cbz	r0, 80039f4 <forward_gemm+0xa0>
 80039d0:	6807      	ldr	r7, [r0, #0]
 80039d2:	e00f      	b.n	80039f4 <forward_gemm+0xa0>
 80039d4:	f1bc 0f01 	cmp.w	ip, #1
 80039d8:	d10c      	bne.n	80039f4 <forward_gemm+0xa0>
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	2a02      	cmp	r2, #2
 80039de:	bfc6      	itte	gt
 80039e0:	6858      	ldrgt	r0, [r3, #4]
 80039e2:	f100 021c 	addgt.w	r2, r0, #28
 80039e6:	2204      	movle	r2, #4
 80039e8:	6810      	ldr	r0, [r2, #0]
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d002      	beq.n	80039f4 <forward_gemm+0xa0>
 80039ee:	6806      	ldr	r6, [r0, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6847      	ldrne	r7, [r0, #4]
 80039f4:	68c8      	ldr	r0, [r1, #12]
 80039f6:	6989      	ldr	r1, [r1, #24]
 80039f8:	688b      	ldr	r3, [r1, #8]
 80039fa:	68c1      	ldr	r1, [r0, #12]
 80039fc:	6842      	ldr	r2, [r0, #4]
 80039fe:	a806      	add	r0, sp, #24
 8003a00:	b292      	uxth	r2, r2
 8003a02:	b289      	uxth	r1, r1
 8003a04:	f003 f96a 	bl	8006cdc <arm_mat_init_f32>
 8003a08:	69a9      	ldr	r1, [r5, #24]
 8003a0a:	68e8      	ldr	r0, [r5, #12]
 8003a0c:	688b      	ldr	r3, [r1, #8]
 8003a0e:	6842      	ldr	r2, [r0, #4]
 8003a10:	68c1      	ldr	r1, [r0, #12]
 8003a12:	a804      	add	r0, sp, #16
 8003a14:	b292      	uxth	r2, r2
 8003a16:	b289      	uxth	r1, r1
 8003a18:	f003 f960 	bl	8006cdc <arm_mat_init_f32>
 8003a1c:	69b1      	ldr	r1, [r6, #24]
 8003a1e:	68f0      	ldr	r0, [r6, #12]
 8003a20:	688b      	ldr	r3, [r1, #8]
 8003a22:	6842      	ldr	r2, [r0, #4]
 8003a24:	68c1      	ldr	r1, [r0, #12]
 8003a26:	a802      	add	r0, sp, #8
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	b289      	uxth	r1, r1
 8003a2c:	f003 f956 	bl	8006cdc <arm_mat_init_f32>
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	688b      	ldr	r3, [r1, #8]
 8003a36:	6842      	ldr	r2, [r0, #4]
 8003a38:	68c1      	ldr	r1, [r0, #12]
 8003a3a:	4668      	mov	r0, sp
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	b289      	uxth	r1, r1
 8003a40:	f003 f94c 	bl	8006cdc <arm_mat_init_f32>
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	f8bd e010 	ldrh.w	lr, [sp, #16]
 8003a4a:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 8003a4e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8003a52:	ed94 0a07 	vldr	s0, [r4, #28]
 8003a56:	9a05      	ldr	r2, [sp, #20]
 8003a58:	edd4 0a06 	vldr	s1, [r4, #24]
 8003a5c:	9308      	str	r3, [sp, #32]
 8003a5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8003a66:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003a70:	f8bd c000 	ldrh.w	ip, [sp]
 8003a74:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a78:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8003a7c:	9c07      	ldr	r4, [sp, #28]
 8003a7e:	bf0c      	ite	eq
 8003a80:	4672      	moveq	r2, lr
 8003a82:	4642      	movne	r2, r8
 8003a84:	f1ba 0f01 	cmp.w	sl, #1
 8003a88:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8003a8c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003a90:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8003a94:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8003a98:	bf0c      	ite	eq
 8003a9a:	4699      	moveq	r9, r3
 8003a9c:	f04f 0904 	movne.w	r9, #4
 8003aa0:	f1bc 0f01 	cmp.w	ip, #1
 8003aa4:	d105      	bne.n	8003ab2 <forward_gemm+0x15e>
 8003aa6:	f1ba 0f01 	cmp.w	sl, #1
 8003aaa:	d005      	beq.n	8003ab8 <forward_gemm+0x164>
 8003aac:	f1cb 0a00 	rsb	sl, fp, #0
 8003ab0:	e003      	b.n	8003aba <forward_gemm+0x166>
 8003ab2:	f1ba 0f01 	cmp.w	sl, #1
 8003ab6:	d000      	beq.n	8003aba <forward_gemm+0x166>
 8003ab8:	469a      	mov	sl, r3
 8003aba:	2800      	cmp	r0, #0
 8003abc:	fa0f fa8a 	sxth.w	sl, sl
 8003ac0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003ac4:	bf0c      	ite	eq
 8003ac6:	46f4      	moveq	ip, lr
 8003ac8:	46c4      	movne	ip, r8
 8003aca:	45b4      	cmp	ip, r6
 8003acc:	f040 808d 	bne.w	8003bea <forward_gemm+0x296>
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	9109      	streq	r1, [sp, #36]	; 0x24
 8003ad6:	9709      	strne	r7, [sp, #36]	; 0x24
 8003ad8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8003adc:	45dc      	cmp	ip, fp
 8003ade:	f040 8084 	bne.w	8003bea <forward_gemm+0x296>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	bf0c      	ite	eq
 8003ae6:	46c4      	moveq	ip, r8
 8003ae8:	46f4      	movne	ip, lr
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	bf0c      	ite	eq
 8003aee:	46ba      	moveq	sl, r7
 8003af0:	468a      	movne	sl, r1
 8003af2:	45d4      	cmp	ip, sl
 8003af4:	d179      	bne.n	8003bea <forward_gemm+0x296>
 8003af6:	9e08      	ldr	r6, [sp, #32]
 8003af8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003afc:	9410      	str	r4, [sp, #64]	; 0x40
 8003afe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8003b02:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003b06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b08:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 8003b0c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b12:	eb02 0a84 	add.w	sl, r2, r4, lsl #2
 8003b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b18:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8003b1c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8003b20:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8003b24:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8003db4 <.text_17>
 8003b2e:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8003b32:	bf0c      	ite	eq
 8003b34:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 8003b38:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 8003b3c:	fa1f fb88 	uxth.w	fp, r8
 8003b40:	f1bb 0f00 	cmp.w	fp, #0
 8003b44:	d019      	beq.n	8003b7a <forward_gemm+0x226>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f1a8 0801 	sub.w	r8, r8, #1
 8003b4c:	edde 1a00 	vldr	s3, [lr]
 8003b50:	ed93 2a00 	vldr	s4, [r3]
 8003b54:	bf0c      	ite	eq
 8003b56:	f04f 0b04 	moveq.w	fp, #4
 8003b5a:	46a3      	movne	fp, r4
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	44de      	add	lr, fp
 8003b60:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003b64:	bf0c      	ite	eq
 8003b66:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8003b6a:	f04f 0b04 	movne.w	fp, #4
 8003b6e:	445b      	add	r3, fp
 8003b70:	fa1f fb88 	uxth.w	fp, r8
 8003b74:	f1bb 0f00 	cmp.w	fp, #0
 8003b78:	d1e5      	bne.n	8003b46 <forward_gemm+0x1f2>
 8003b7a:	1e52      	subs	r2, r2, #1
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	002b      	movs	r3, r5
 8003b80:	ee20 1a81 	vmul.f32	s2, s1, s2
 8003b84:	edd6 1a00 	vldr	s3, [r6]
 8003b88:	444e      	add	r6, r9
 8003b8a:	ee00 1a21 	vmla.f32	s2, s0, s3
 8003b8e:	ed8a 1a00 	vstr	s2, [sl]
 8003b92:	f10a 0a04 	add.w	sl, sl, #4
 8003b96:	bf0e      	itee	eq
 8003b98:	1a8b      	subeq	r3, r1, r2
 8003b9a:	1abb      	subne	r3, r7, r2
 8003b9c:	434b      	mulne	r3, r1
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8003ba4:	d1c0      	bne.n	8003b28 <forward_gemm+0x1d4>
 8003ba6:	f8bd a022 	ldrh.w	sl, [sp, #34]	; 0x22
 8003baa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bb0:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 8003bb4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003bb8:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003bbc:	44da      	add	sl, fp
 8003bbe:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
 8003bc2:	b100      	cbz	r0, 8003bc6 <forward_gemm+0x272>
 8003bc4:	2404      	movs	r4, #4
 8003bc6:	eb02 0c04 	add.w	ip, r2, r4
 8003bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bcc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003bd0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8003bd4:	f1a4 0a01 	sub.w	sl, r4, #1
 8003bd8:	f8ad a020 	strh.w	sl, [sp, #32]
 8003bdc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	d190      	bne.n	8003b06 <forward_gemm+0x1b2>
 8003be4:	b011      	add	sp, #68	; 0x44
 8003be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bea:	fb0b f606 	mul.w	r6, fp, r6
 8003bee:	2e00      	cmp	r6, #0
 8003bf0:	ddf8      	ble.n	8003be4 <forward_gemm+0x290>
 8003bf2:	f016 0003 	ands.w	r0, r6, #3
 8003bf6:	d003      	beq.n	8003c00 <forward_gemm+0x2ac>
 8003bf8:	1e40      	subs	r0, r0, #1
 8003bfa:	f844 3b04 	str.w	r3, [r4], #4
 8003bfe:	d1fb      	bne.n	8003bf8 <forward_gemm+0x2a4>
 8003c00:	08b1      	lsrs	r1, r6, #2
 8003c02:	d0ef      	beq.n	8003be4 <forward_gemm+0x290>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	6063      	str	r3, [r4, #4]
 8003c08:	60a3      	str	r3, [r4, #8]
 8003c0a:	60e3      	str	r3, [r4, #12]
 8003c0c:	3410      	adds	r4, #16
 8003c0e:	1e49      	subs	r1, r1, #1
 8003c10:	d1f8      	bne.n	8003c04 <forward_gemm+0x2b0>
 8003c12:	b011      	add	sp, #68	; 0x44
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c18 <forward_matmul>:
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1c:	b08b      	sub	sp, #44	; 0x2c
 8003c1e:	6944      	ldr	r4, [r0, #20]
 8003c20:	8822      	ldrh	r2, [r4, #0]
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	bf1a      	itte	ne
 8003c26:	6860      	ldrne	r0, [r4, #4]
 8003c28:	1d03      	addne	r3, r0, #4
 8003c2a:	2304      	moveq	r3, #4
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	2900      	cmp	r1, #0
 8003c30:	bf14      	ite	ne
 8003c32:	6808      	ldrne	r0, [r1, #0]
 8003c34:	2000      	moveq	r0, #0
 8003c36:	2900      	cmp	r1, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8003c3e:	f04f 0b00 	moveq.w	fp, #0
 8003c42:	2a02      	cmp	r2, #2
 8003c44:	bfa6      	itte	ge
 8003c46:	6861      	ldrge	r1, [r4, #4]
 8003c48:	3110      	addge	r1, #16
 8003c4a:	2104      	movlt	r1, #4
 8003c4c:	6809      	ldr	r1, [r1, #0]
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	bf14      	ite	ne
 8003c52:	680b      	ldrne	r3, [r1, #0]
 8003c54:	2300      	moveq	r3, #0
 8003c56:	f1bb 0f00 	cmp.w	fp, #0
 8003c5a:	d108      	bne.n	8003c6e <forward_matmul+0x56>
 8003c5c:	2a02      	cmp	r2, #2
 8003c5e:	bfc6      	itte	gt
 8003c60:	6861      	ldrgt	r1, [r4, #4]
 8003c62:	311c      	addgt	r1, #28
 8003c64:	2104      	movle	r1, #4
 8003c66:	6809      	ldr	r1, [r1, #0]
 8003c68:	b109      	cbz	r1, 8003c6e <forward_matmul+0x56>
 8003c6a:	f8d1 b000 	ldr.w	fp, [r1]
 8003c6e:	68dd      	ldr	r5, [r3, #12]
 8003c70:	68c4      	ldr	r4, [r0, #12]
 8003c72:	f8db 900c 	ldr.w	r9, [fp, #12]
 8003c76:	686e      	ldr	r6, [r5, #4]
 8003c78:	f8d4 e000 	ldr.w	lr, [r4]
 8003c7c:	f8d5 a000 	ldr.w	sl, [r5]
 8003c80:	f8d9 2000 	ldr.w	r2, [r9]
 8003c84:	68a1      	ldr	r1, [r4, #8]
 8003c86:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8003c8a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8003c8e:	68ef      	ldr	r7, [r5, #12]
 8003c90:	9706      	str	r7, [sp, #24]
 8003c92:	68e7      	ldr	r7, [r4, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	fb01 f50e 	mul.w	r5, r1, lr
 8003c9a:	434f      	muls	r7, r1
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	fb0e f707 	mul.w	r7, lr, r7
 8003ca2:	970a      	str	r7, [sp, #40]	; 0x28
 8003ca4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8003ca8:	fb08 f404 	mul.w	r4, r8, r4
 8003cac:	fb08 f802 	mul.w	r8, r8, r2
 8003cb0:	4354      	muls	r4, r2
 8003cb2:	9409      	str	r4, [sp, #36]	; 0x24
 8003cb4:	2e00      	cmp	r6, #0
 8003cb6:	d077      	beq.n	8003da8 <forward_matmul+0x190>
 8003cb8:	2400      	movs	r4, #0
 8003cba:	46a1      	mov	r9, r4
 8003cbc:	9602      	str	r6, [sp, #8]
 8003cbe:	9e06      	ldr	r6, [sp, #24]
 8003cc0:	2e00      	cmp	r6, #0
 8003cc2:	d067      	beq.n	8003d94 <forward_matmul+0x17c>
 8003cc4:	9f06      	ldr	r7, [sp, #24]
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	9701      	str	r7, [sp, #4]
 8003cca:	f8cd c00c 	str.w	ip, [sp, #12]
 8003cce:	9505      	str	r5, [sp, #20]
 8003cd0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003cd4:	f1bc 0f00 	cmp.w	ip, #0
 8003cd8:	d051      	beq.n	8003d7e <forward_matmul+0x166>
 8003cda:	f8cd a010 	str.w	sl, [sp, #16]
 8003cde:	f04f 0a00 	mov.w	sl, #0
 8003ce2:	f8cd c000 	str.w	ip, [sp]
 8003ce6:	9207      	str	r2, [sp, #28]
 8003ce8:	9a04      	ldr	r2, [sp, #16]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d03e      	beq.n	8003d6c <forward_matmul+0x154>
 8003cee:	f04f 0c00 	mov.w	ip, #0
 8003cf2:	9008      	str	r0, [sp, #32]
 8003cf4:	9808      	ldr	r0, [sp, #32]
 8003cf6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003db4 <.text_17>
 8003cfa:	6987      	ldr	r7, [r0, #24]
 8003cfc:	f8db 0018 	ldr.w	r0, [fp, #24]
 8003d00:	68bd      	ldr	r5, [r7, #8]
 8003d02:	6887      	ldr	r7, [r0, #8]
 8003d04:	192d      	adds	r5, r5, r4
 8003d06:	19ad      	adds	r5, r5, r6
 8003d08:	4465      	add	r5, ip
 8003d0a:	444f      	add	r7, r9
 8003d0c:	4457      	add	r7, sl
 8003d0e:	4467      	add	r7, ip
 8003d10:	b321      	cbz	r1, 8003d5c <forward_matmul+0x144>
 8003d12:	07c8      	lsls	r0, r1, #31
 8003d14:	d509      	bpl.n	8003d2a <forward_matmul+0x112>
 8003d16:	edd5 0a00 	vldr	s1, [r5]
 8003d1a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003d1e:	ed97 1a00 	vldr	s2, [r7]
 8003d22:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003d26:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003d2a:	0848      	lsrs	r0, r1, #1
 8003d2c:	f000 8016 	beq.w	8003d5c <forward_matmul+0x144>
 8003d30:	edd5 0a00 	vldr	s1, [r5]
 8003d34:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003d38:	ed97 1a00 	vldr	s2, [r7]
 8003d3c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003d40:	1e40      	subs	r0, r0, #1
 8003d42:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003d46:	edd5 1a00 	vldr	s3, [r5]
 8003d4a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003d4e:	ed97 2a00 	vldr	s4, [r7]
 8003d52:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003d56:	ee01 0a82 	vmla.f32	s0, s3, s4
 8003d5a:	d1e9      	bne.n	8003d30 <forward_matmul+0x118>
 8003d5c:	ed83 0a00 	vstr	s0, [r3]
 8003d60:	1d1b      	adds	r3, r3, #4
 8003d62:	1e52      	subs	r2, r2, #1
 8003d64:	f10c 0c04 	add.w	ip, ip, #4
 8003d68:	d1c4      	bne.n	8003cf4 <forward_matmul+0xdc>
 8003d6a:	9808      	ldr	r0, [sp, #32]
 8003d6c:	9d00      	ldr	r5, [sp, #0]
 8003d6e:	9a07      	ldr	r2, [sp, #28]
 8003d70:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8003d74:	1e6d      	subs	r5, r5, #1
 8003d76:	9500      	str	r5, [sp, #0]
 8003d78:	d1b6      	bne.n	8003ce8 <forward_matmul+0xd0>
 8003d7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003d7e:	9f01      	ldr	r7, [sp, #4]
 8003d80:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003d84:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8003d88:	1e7f      	subs	r7, r7, #1
 8003d8a:	9701      	str	r7, [sp, #4]
 8003d8c:	d1a0      	bne.n	8003cd0 <forward_matmul+0xb8>
 8003d8e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003d92:	9d05      	ldr	r5, [sp, #20]
 8003d94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003d96:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8003d9a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003d9c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8003da0:	9e02      	ldr	r6, [sp, #8]
 8003da2:	1e76      	subs	r6, r6, #1
 8003da4:	9602      	str	r6, [sp, #8]
 8003da6:	d18a      	bne.n	8003cbe <forward_matmul+0xa6>
 8003da8:	b00b      	add	sp, #44	; 0x2c
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003db0 <.text_16>:
 8003db0:	080029d5 	.word	0x080029d5

08003db4 <.text_17>:
 8003db4:	00000000 	.word	0x00000000

08003db8 <ai_shape_get_size>:
 8003db8:	b470      	push	{r4, r5, r6}
 8003dba:	4601      	mov	r1, r0
 8003dbc:	f04f 0201 	mov.w	r2, #1
 8003dc0:	680b      	ldr	r3, [r1, #0]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	d01e      	beq.n	8003e04 <ai_shape_get_size+0x4c>
 8003dc6:	684c      	ldr	r4, [r1, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8003dce:	1f0d      	subs	r5, r1, #4
 8003dd0:	f010 0103 	ands.w	r1, r0, #3
 8003dd4:	f000 8006 	beq.w	8003de4 <ai_shape_get_size+0x2c>
 8003dd8:	f855 6904 	ldr.w	r6, [r5], #-4
 8003ddc:	1e5b      	subs	r3, r3, #1
 8003dde:	4372      	muls	r2, r6
 8003de0:	1e49      	subs	r1, r1, #1
 8003de2:	d1f9      	bne.n	8003dd8 <ai_shape_get_size+0x20>
 8003de4:	0880      	lsrs	r0, r0, #2
 8003de6:	d00d      	beq.n	8003e04 <ai_shape_get_size+0x4c>
 8003de8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8003dec:	3910      	subs	r1, #16
 8003dee:	68cb      	ldr	r3, [r1, #12]
 8003df0:	688c      	ldr	r4, [r1, #8]
 8003df2:	684d      	ldr	r5, [r1, #4]
 8003df4:	f851 6910 	ldr.w	r6, [r1], #-16
 8003df8:	4363      	muls	r3, r4
 8003dfa:	436b      	muls	r3, r5
 8003dfc:	4373      	muls	r3, r6
 8003dfe:	435a      	muls	r2, r3
 8003e00:	1e40      	subs	r0, r0, #1
 8003e02:	d1f4      	bne.n	8003dee <ai_shape_get_size+0x36>
 8003e04:	4610      	mov	r0, r2
 8003e06:	bc70      	pop	{r4, r5, r6}
 8003e08:	4770      	bx	lr
	...

08003e0c <nl_func_acos_array_f32>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	688c      	ldr	r4, [r1, #8]
 8003e10:	6880      	ldr	r0, [r0, #8]
 8003e12:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e1a:	1f0d      	subs	r5, r1, #4
 8003e1c:	1f16      	subs	r6, r2, #4
 8003e1e:	42a5      	cmp	r5, r4
 8003e20:	f0c0 800a 	bcc.w	8003e38 <nl_func_acos_array_f32+0x2c>
 8003e24:	ed95 0a00 	vldr	s0, [r5]
 8003e28:	1f2d      	subs	r5, r5, #4
 8003e2a:	f00f fee5 	bl	8013bf8 <acosf>
 8003e2e:	ed86 0a00 	vstr	s0, [r6]
 8003e32:	1f36      	subs	r6, r6, #4
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d2f5      	bcs.n	8003e24 <nl_func_acos_array_f32+0x18>
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e3c <forward_acos>:
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b081      	sub	sp, #4
 8003e40:	6942      	ldr	r2, [r0, #20]
 8003e42:	f04f 0501 	mov.w	r5, #1
 8003e46:	8811      	ldrh	r1, [r2, #0]
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	bf1a      	itte	ne
 8003e4c:	6850      	ldrne	r0, [r2, #4]
 8003e4e:	1d00      	addne	r0, r0, #4
 8003e50:	2004      	moveq	r0, #4
 8003e52:	6800      	ldr	r0, [r0, #0]
 8003e54:	2800      	cmp	r0, #0
 8003e56:	bf14      	ite	ne
 8003e58:	6803      	ldrne	r3, [r0, #0]
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	2902      	cmp	r1, #2
 8003e5e:	bfa6      	itte	ge
 8003e60:	6850      	ldrge	r0, [r2, #4]
 8003e62:	3010      	addge	r0, #16
 8003e64:	2004      	movlt	r0, #4
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	bf19      	ittee	ne
 8003e6c:	6800      	ldrne	r0, [r0, #0]
 8003e6e:	f100 0418 	addne.w	r4, r0, #24
 8003e72:	2100      	moveq	r1, #0
 8003e74:	f101 0418 	addeq.w	r4, r1, #24
 8003e78:	f103 0108 	add.w	r1, r3, #8
 8003e7c:	680a      	ldr	r2, [r1, #0]
 8003e7e:	0a12      	lsrs	r2, r2, #8
 8003e80:	d01f      	beq.n	8003ec2 <forward_acos+0x86>
 8003e82:	684e      	ldr	r6, [r1, #4]
 8003e84:	4610      	mov	r0, r2
 8003e86:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e8a:	1f0f      	subs	r7, r1, #4
 8003e8c:	f010 0103 	ands.w	r1, r0, #3
 8003e90:	d006      	beq.n	8003ea0 <forward_acos+0x64>
 8003e92:	1e52      	subs	r2, r2, #1
 8003e94:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e98:	1e49      	subs	r1, r1, #1
 8003e9a:	fb0c f505 	mul.w	r5, ip, r5
 8003e9e:	d1f8      	bne.n	8003e92 <forward_acos+0x56>
 8003ea0:	0880      	lsrs	r0, r0, #2
 8003ea2:	d00e      	beq.n	8003ec2 <forward_acos+0x86>
 8003ea4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ea8:	3910      	subs	r1, #16
 8003eaa:	68ca      	ldr	r2, [r1, #12]
 8003eac:	688e      	ldr	r6, [r1, #8]
 8003eae:	684f      	ldr	r7, [r1, #4]
 8003eb0:	f851 c910 	ldr.w	ip, [r1], #-16
 8003eb4:	4372      	muls	r2, r6
 8003eb6:	437a      	muls	r2, r7
 8003eb8:	fb0c f202 	mul.w	r2, ip, r2
 8003ebc:	4355      	muls	r5, r2
 8003ebe:	1e40      	subs	r0, r0, #1
 8003ec0:	d1f3      	bne.n	8003eaa <forward_acos+0x6e>
 8003ec2:	6998      	ldr	r0, [r3, #24]
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	6886      	ldr	r6, [r0, #8]
 8003ec8:	688a      	ldr	r2, [r1, #8]
 8003eca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003ece:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003ed2:	1f07      	subs	r7, r0, #4
 8003ed4:	1f1c      	subs	r4, r3, #4
 8003ed6:	42b7      	cmp	r7, r6
 8003ed8:	f0c0 800a 	bcc.w	8003ef0 <forward_acos+0xb4>
 8003edc:	ed97 0a00 	vldr	s0, [r7]
 8003ee0:	1f3f      	subs	r7, r7, #4
 8003ee2:	f00f fe89 	bl	8013bf8 <acosf>
 8003ee6:	ed84 0a00 	vstr	s0, [r4]
 8003eea:	1f24      	subs	r4, r4, #4
 8003eec:	42b7      	cmp	r7, r6
 8003eee:	d2f5      	bcs.n	8003edc <forward_acos+0xa0>
 8003ef0:	b001      	add	sp, #4
 8003ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ef4 <nl_func_acosh_array_f32>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	688c      	ldr	r4, [r1, #8]
 8003ef8:	6880      	ldr	r0, [r0, #8]
 8003efa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003efe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f02:	1f0d      	subs	r5, r1, #4
 8003f04:	1f16      	subs	r6, r2, #4
 8003f06:	42a5      	cmp	r5, r4
 8003f08:	f0c0 800a 	bcc.w	8003f20 <nl_func_acosh_array_f32+0x2c>
 8003f0c:	ed95 0a00 	vldr	s0, [r5]
 8003f10:	1f2d      	subs	r5, r5, #4
 8003f12:	f00f fec5 	bl	8013ca0 <acoshf>
 8003f16:	ed86 0a00 	vstr	s0, [r6]
 8003f1a:	1f36      	subs	r6, r6, #4
 8003f1c:	42a5      	cmp	r5, r4
 8003f1e:	d2f5      	bcs.n	8003f0c <nl_func_acosh_array_f32+0x18>
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f24 <forward_acosh>:
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b081      	sub	sp, #4
 8003f28:	6942      	ldr	r2, [r0, #20]
 8003f2a:	f04f 0501 	mov.w	r5, #1
 8003f2e:	8811      	ldrh	r1, [r2, #0]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	bf1a      	itte	ne
 8003f34:	6850      	ldrne	r0, [r2, #4]
 8003f36:	1d00      	addne	r0, r0, #4
 8003f38:	2004      	moveq	r0, #4
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	6803      	ldrne	r3, [r0, #0]
 8003f42:	2300      	moveq	r3, #0
 8003f44:	2902      	cmp	r1, #2
 8003f46:	bfa6      	itte	ge
 8003f48:	6850      	ldrge	r0, [r2, #4]
 8003f4a:	3010      	addge	r0, #16
 8003f4c:	2004      	movlt	r0, #4
 8003f4e:	6800      	ldr	r0, [r0, #0]
 8003f50:	2800      	cmp	r0, #0
 8003f52:	bf19      	ittee	ne
 8003f54:	6800      	ldrne	r0, [r0, #0]
 8003f56:	f100 0418 	addne.w	r4, r0, #24
 8003f5a:	2100      	moveq	r1, #0
 8003f5c:	f101 0418 	addeq.w	r4, r1, #24
 8003f60:	f103 0108 	add.w	r1, r3, #8
 8003f64:	680a      	ldr	r2, [r1, #0]
 8003f66:	0a12      	lsrs	r2, r2, #8
 8003f68:	d01f      	beq.n	8003faa <forward_acosh+0x86>
 8003f6a:	684e      	ldr	r6, [r1, #4]
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f72:	1f0f      	subs	r7, r1, #4
 8003f74:	f010 0103 	ands.w	r1, r0, #3
 8003f78:	d006      	beq.n	8003f88 <forward_acosh+0x64>
 8003f7a:	1e52      	subs	r2, r2, #1
 8003f7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003f80:	1e49      	subs	r1, r1, #1
 8003f82:	fb0c f505 	mul.w	r5, ip, r5
 8003f86:	d1f8      	bne.n	8003f7a <forward_acosh+0x56>
 8003f88:	0880      	lsrs	r0, r0, #2
 8003f8a:	d00e      	beq.n	8003faa <forward_acosh+0x86>
 8003f8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f90:	3910      	subs	r1, #16
 8003f92:	68ca      	ldr	r2, [r1, #12]
 8003f94:	688e      	ldr	r6, [r1, #8]
 8003f96:	684f      	ldr	r7, [r1, #4]
 8003f98:	f851 c910 	ldr.w	ip, [r1], #-16
 8003f9c:	4372      	muls	r2, r6
 8003f9e:	437a      	muls	r2, r7
 8003fa0:	fb0c f202 	mul.w	r2, ip, r2
 8003fa4:	4355      	muls	r5, r2
 8003fa6:	1e40      	subs	r0, r0, #1
 8003fa8:	d1f3      	bne.n	8003f92 <forward_acosh+0x6e>
 8003faa:	6998      	ldr	r0, [r3, #24]
 8003fac:	6821      	ldr	r1, [r4, #0]
 8003fae:	6886      	ldr	r6, [r0, #8]
 8003fb0:	688a      	ldr	r2, [r1, #8]
 8003fb2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003fb6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003fba:	1f07      	subs	r7, r0, #4
 8003fbc:	1f1c      	subs	r4, r3, #4
 8003fbe:	42b7      	cmp	r7, r6
 8003fc0:	f0c0 800a 	bcc.w	8003fd8 <forward_acosh+0xb4>
 8003fc4:	ed97 0a00 	vldr	s0, [r7]
 8003fc8:	1f3f      	subs	r7, r7, #4
 8003fca:	f00f fe69 	bl	8013ca0 <acoshf>
 8003fce:	ed84 0a00 	vstr	s0, [r4]
 8003fd2:	1f24      	subs	r4, r4, #4
 8003fd4:	42b7      	cmp	r7, r6
 8003fd6:	d2f5      	bcs.n	8003fc4 <forward_acosh+0xa0>
 8003fd8:	b001      	add	sp, #4
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fdc <nl_func_asin_array_f32>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	688c      	ldr	r4, [r1, #8]
 8003fe0:	6880      	ldr	r0, [r0, #8]
 8003fe2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003fe6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003fea:	1f0d      	subs	r5, r1, #4
 8003fec:	1f16      	subs	r6, r2, #4
 8003fee:	42a5      	cmp	r5, r4
 8003ff0:	f0c0 800a 	bcc.w	8004008 <nl_func_asin_array_f32+0x2c>
 8003ff4:	ed95 0a00 	vldr	s0, [r5]
 8003ff8:	1f2d      	subs	r5, r5, #4
 8003ffa:	f00f fea1 	bl	8013d40 <asinf>
 8003ffe:	ed86 0a00 	vstr	s0, [r6]
 8004002:	1f36      	subs	r6, r6, #4
 8004004:	42a5      	cmp	r5, r4
 8004006:	d2f5      	bcs.n	8003ff4 <nl_func_asin_array_f32+0x18>
 8004008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800400c <forward_asin>:
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b081      	sub	sp, #4
 8004010:	6942      	ldr	r2, [r0, #20]
 8004012:	f04f 0501 	mov.w	r5, #1
 8004016:	8811      	ldrh	r1, [r2, #0]
 8004018:	2900      	cmp	r1, #0
 800401a:	bf1a      	itte	ne
 800401c:	6850      	ldrne	r0, [r2, #4]
 800401e:	1d00      	addne	r0, r0, #4
 8004020:	2004      	moveq	r0, #4
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	2800      	cmp	r0, #0
 8004026:	bf14      	ite	ne
 8004028:	6803      	ldrne	r3, [r0, #0]
 800402a:	2300      	moveq	r3, #0
 800402c:	2902      	cmp	r1, #2
 800402e:	bfa6      	itte	ge
 8004030:	6850      	ldrge	r0, [r2, #4]
 8004032:	3010      	addge	r0, #16
 8004034:	2004      	movlt	r0, #4
 8004036:	6800      	ldr	r0, [r0, #0]
 8004038:	2800      	cmp	r0, #0
 800403a:	bf19      	ittee	ne
 800403c:	6800      	ldrne	r0, [r0, #0]
 800403e:	f100 0418 	addne.w	r4, r0, #24
 8004042:	2100      	moveq	r1, #0
 8004044:	f101 0418 	addeq.w	r4, r1, #24
 8004048:	f103 0108 	add.w	r1, r3, #8
 800404c:	680a      	ldr	r2, [r1, #0]
 800404e:	0a12      	lsrs	r2, r2, #8
 8004050:	d01f      	beq.n	8004092 <forward_asin+0x86>
 8004052:	684e      	ldr	r6, [r1, #4]
 8004054:	4610      	mov	r0, r2
 8004056:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800405a:	1f0f      	subs	r7, r1, #4
 800405c:	f010 0103 	ands.w	r1, r0, #3
 8004060:	d006      	beq.n	8004070 <forward_asin+0x64>
 8004062:	1e52      	subs	r2, r2, #1
 8004064:	f857 c904 	ldr.w	ip, [r7], #-4
 8004068:	1e49      	subs	r1, r1, #1
 800406a:	fb0c f505 	mul.w	r5, ip, r5
 800406e:	d1f8      	bne.n	8004062 <forward_asin+0x56>
 8004070:	0880      	lsrs	r0, r0, #2
 8004072:	d00e      	beq.n	8004092 <forward_asin+0x86>
 8004074:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004078:	3910      	subs	r1, #16
 800407a:	68ca      	ldr	r2, [r1, #12]
 800407c:	688e      	ldr	r6, [r1, #8]
 800407e:	684f      	ldr	r7, [r1, #4]
 8004080:	f851 c910 	ldr.w	ip, [r1], #-16
 8004084:	4372      	muls	r2, r6
 8004086:	437a      	muls	r2, r7
 8004088:	fb0c f202 	mul.w	r2, ip, r2
 800408c:	4355      	muls	r5, r2
 800408e:	1e40      	subs	r0, r0, #1
 8004090:	d1f3      	bne.n	800407a <forward_asin+0x6e>
 8004092:	6998      	ldr	r0, [r3, #24]
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	6886      	ldr	r6, [r0, #8]
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800409e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80040a2:	1f07      	subs	r7, r0, #4
 80040a4:	1f1c      	subs	r4, r3, #4
 80040a6:	42b7      	cmp	r7, r6
 80040a8:	f0c0 800a 	bcc.w	80040c0 <forward_asin+0xb4>
 80040ac:	ed97 0a00 	vldr	s0, [r7]
 80040b0:	1f3f      	subs	r7, r7, #4
 80040b2:	f00f fe45 	bl	8013d40 <asinf>
 80040b6:	ed84 0a00 	vstr	s0, [r4]
 80040ba:	1f24      	subs	r4, r4, #4
 80040bc:	42b7      	cmp	r7, r6
 80040be:	d2f5      	bcs.n	80040ac <forward_asin+0xa0>
 80040c0:	b001      	add	sp, #4
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c4 <nl_func_asinh_array_f32>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	688c      	ldr	r4, [r1, #8]
 80040c8:	6880      	ldr	r0, [r0, #8]
 80040ca:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80040ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040d2:	1f0d      	subs	r5, r1, #4
 80040d4:	1f16      	subs	r6, r2, #4
 80040d6:	42a5      	cmp	r5, r4
 80040d8:	f0c0 800a 	bcc.w	80040f0 <nl_func_asinh_array_f32+0x2c>
 80040dc:	ed95 0a00 	vldr	s0, [r5]
 80040e0:	1f2d      	subs	r5, r5, #4
 80040e2:	f00e fd7f 	bl	8012be4 <asinhf>
 80040e6:	ed86 0a00 	vstr	s0, [r6]
 80040ea:	1f36      	subs	r6, r6, #4
 80040ec:	42a5      	cmp	r5, r4
 80040ee:	d2f5      	bcs.n	80040dc <nl_func_asinh_array_f32+0x18>
 80040f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080040f4 <forward_asinh>:
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	b081      	sub	sp, #4
 80040f8:	6942      	ldr	r2, [r0, #20]
 80040fa:	f04f 0501 	mov.w	r5, #1
 80040fe:	8811      	ldrh	r1, [r2, #0]
 8004100:	2900      	cmp	r1, #0
 8004102:	bf1a      	itte	ne
 8004104:	6850      	ldrne	r0, [r2, #4]
 8004106:	1d00      	addne	r0, r0, #4
 8004108:	2004      	moveq	r0, #4
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	2800      	cmp	r0, #0
 800410e:	bf14      	ite	ne
 8004110:	6803      	ldrne	r3, [r0, #0]
 8004112:	2300      	moveq	r3, #0
 8004114:	2902      	cmp	r1, #2
 8004116:	bfa6      	itte	ge
 8004118:	6850      	ldrge	r0, [r2, #4]
 800411a:	3010      	addge	r0, #16
 800411c:	2004      	movlt	r0, #4
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	2800      	cmp	r0, #0
 8004122:	bf19      	ittee	ne
 8004124:	6800      	ldrne	r0, [r0, #0]
 8004126:	f100 0418 	addne.w	r4, r0, #24
 800412a:	2100      	moveq	r1, #0
 800412c:	f101 0418 	addeq.w	r4, r1, #24
 8004130:	f103 0108 	add.w	r1, r3, #8
 8004134:	680a      	ldr	r2, [r1, #0]
 8004136:	0a12      	lsrs	r2, r2, #8
 8004138:	d01f      	beq.n	800417a <forward_asinh+0x86>
 800413a:	684e      	ldr	r6, [r1, #4]
 800413c:	4610      	mov	r0, r2
 800413e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004142:	1f0f      	subs	r7, r1, #4
 8004144:	f010 0103 	ands.w	r1, r0, #3
 8004148:	d006      	beq.n	8004158 <forward_asinh+0x64>
 800414a:	1e52      	subs	r2, r2, #1
 800414c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004150:	1e49      	subs	r1, r1, #1
 8004152:	fb0c f505 	mul.w	r5, ip, r5
 8004156:	d1f8      	bne.n	800414a <forward_asinh+0x56>
 8004158:	0880      	lsrs	r0, r0, #2
 800415a:	d00e      	beq.n	800417a <forward_asinh+0x86>
 800415c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004160:	3910      	subs	r1, #16
 8004162:	68ca      	ldr	r2, [r1, #12]
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	684f      	ldr	r7, [r1, #4]
 8004168:	f851 c910 	ldr.w	ip, [r1], #-16
 800416c:	4372      	muls	r2, r6
 800416e:	437a      	muls	r2, r7
 8004170:	fb0c f202 	mul.w	r2, ip, r2
 8004174:	4355      	muls	r5, r2
 8004176:	1e40      	subs	r0, r0, #1
 8004178:	d1f3      	bne.n	8004162 <forward_asinh+0x6e>
 800417a:	6998      	ldr	r0, [r3, #24]
 800417c:	6821      	ldr	r1, [r4, #0]
 800417e:	6886      	ldr	r6, [r0, #8]
 8004180:	688a      	ldr	r2, [r1, #8]
 8004182:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004186:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800418a:	1f07      	subs	r7, r0, #4
 800418c:	1f1c      	subs	r4, r3, #4
 800418e:	42b7      	cmp	r7, r6
 8004190:	f0c0 800a 	bcc.w	80041a8 <forward_asinh+0xb4>
 8004194:	ed97 0a00 	vldr	s0, [r7]
 8004198:	1f3f      	subs	r7, r7, #4
 800419a:	f00e fd23 	bl	8012be4 <asinhf>
 800419e:	ed84 0a00 	vstr	s0, [r4]
 80041a2:	1f24      	subs	r4, r4, #4
 80041a4:	42b7      	cmp	r7, r6
 80041a6:	d2f5      	bcs.n	8004194 <forward_asinh+0xa0>
 80041a8:	b001      	add	sp, #4
 80041aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ac <nl_func_atan_array_f32>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	688c      	ldr	r4, [r1, #8]
 80041b0:	6880      	ldr	r0, [r0, #8]
 80041b2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80041b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80041ba:	1f0d      	subs	r5, r1, #4
 80041bc:	1f16      	subs	r6, r2, #4
 80041be:	42a5      	cmp	r5, r4
 80041c0:	f0c0 800a 	bcc.w	80041d8 <nl_func_atan_array_f32+0x2c>
 80041c4:	ed95 0a00 	vldr	s0, [r5]
 80041c8:	1f2d      	subs	r5, r5, #4
 80041ca:	f00e fd73 	bl	8012cb4 <atanf>
 80041ce:	ed86 0a00 	vstr	s0, [r6]
 80041d2:	1f36      	subs	r6, r6, #4
 80041d4:	42a5      	cmp	r5, r4
 80041d6:	d2f5      	bcs.n	80041c4 <nl_func_atan_array_f32+0x18>
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080041dc <forward_atan>:
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	b081      	sub	sp, #4
 80041e0:	6942      	ldr	r2, [r0, #20]
 80041e2:	f04f 0501 	mov.w	r5, #1
 80041e6:	8811      	ldrh	r1, [r2, #0]
 80041e8:	2900      	cmp	r1, #0
 80041ea:	bf1a      	itte	ne
 80041ec:	6850      	ldrne	r0, [r2, #4]
 80041ee:	1d00      	addne	r0, r0, #4
 80041f0:	2004      	moveq	r0, #4
 80041f2:	6800      	ldr	r0, [r0, #0]
 80041f4:	2800      	cmp	r0, #0
 80041f6:	bf14      	ite	ne
 80041f8:	6803      	ldrne	r3, [r0, #0]
 80041fa:	2300      	moveq	r3, #0
 80041fc:	2902      	cmp	r1, #2
 80041fe:	bfa6      	itte	ge
 8004200:	6850      	ldrge	r0, [r2, #4]
 8004202:	3010      	addge	r0, #16
 8004204:	2004      	movlt	r0, #4
 8004206:	6800      	ldr	r0, [r0, #0]
 8004208:	2800      	cmp	r0, #0
 800420a:	bf19      	ittee	ne
 800420c:	6800      	ldrne	r0, [r0, #0]
 800420e:	f100 0418 	addne.w	r4, r0, #24
 8004212:	2100      	moveq	r1, #0
 8004214:	f101 0418 	addeq.w	r4, r1, #24
 8004218:	f103 0108 	add.w	r1, r3, #8
 800421c:	680a      	ldr	r2, [r1, #0]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	d01f      	beq.n	8004262 <forward_atan+0x86>
 8004222:	684e      	ldr	r6, [r1, #4]
 8004224:	4610      	mov	r0, r2
 8004226:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800422a:	1f0f      	subs	r7, r1, #4
 800422c:	f010 0103 	ands.w	r1, r0, #3
 8004230:	d006      	beq.n	8004240 <forward_atan+0x64>
 8004232:	1e52      	subs	r2, r2, #1
 8004234:	f857 c904 	ldr.w	ip, [r7], #-4
 8004238:	1e49      	subs	r1, r1, #1
 800423a:	fb0c f505 	mul.w	r5, ip, r5
 800423e:	d1f8      	bne.n	8004232 <forward_atan+0x56>
 8004240:	0880      	lsrs	r0, r0, #2
 8004242:	d00e      	beq.n	8004262 <forward_atan+0x86>
 8004244:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004248:	3910      	subs	r1, #16
 800424a:	68ca      	ldr	r2, [r1, #12]
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	684f      	ldr	r7, [r1, #4]
 8004250:	f851 c910 	ldr.w	ip, [r1], #-16
 8004254:	4372      	muls	r2, r6
 8004256:	437a      	muls	r2, r7
 8004258:	fb0c f202 	mul.w	r2, ip, r2
 800425c:	4355      	muls	r5, r2
 800425e:	1e40      	subs	r0, r0, #1
 8004260:	d1f3      	bne.n	800424a <forward_atan+0x6e>
 8004262:	6998      	ldr	r0, [r3, #24]
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	6886      	ldr	r6, [r0, #8]
 8004268:	688a      	ldr	r2, [r1, #8]
 800426a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800426e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004272:	1f07      	subs	r7, r0, #4
 8004274:	1f1c      	subs	r4, r3, #4
 8004276:	42b7      	cmp	r7, r6
 8004278:	f0c0 800a 	bcc.w	8004290 <forward_atan+0xb4>
 800427c:	ed97 0a00 	vldr	s0, [r7]
 8004280:	1f3f      	subs	r7, r7, #4
 8004282:	f00e fd17 	bl	8012cb4 <atanf>
 8004286:	ed84 0a00 	vstr	s0, [r4]
 800428a:	1f24      	subs	r4, r4, #4
 800428c:	42b7      	cmp	r7, r6
 800428e:	d2f5      	bcs.n	800427c <forward_atan+0xa0>
 8004290:	b001      	add	sp, #4
 8004292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004294 <nl_func_atanh_array_f32>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	688c      	ldr	r4, [r1, #8]
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800429e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80042a2:	1f0d      	subs	r5, r1, #4
 80042a4:	1f16      	subs	r6, r2, #4
 80042a6:	42a5      	cmp	r5, r4
 80042a8:	f0c0 800a 	bcc.w	80042c0 <nl_func_atanh_array_f32+0x2c>
 80042ac:	ed95 0a00 	vldr	s0, [r5]
 80042b0:	1f2d      	subs	r5, r5, #4
 80042b2:	f00f fd99 	bl	8013de8 <atanhf>
 80042b6:	ed86 0a00 	vstr	s0, [r6]
 80042ba:	1f36      	subs	r6, r6, #4
 80042bc:	42a5      	cmp	r5, r4
 80042be:	d2f5      	bcs.n	80042ac <nl_func_atanh_array_f32+0x18>
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042c4 <forward_atanh>:
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b081      	sub	sp, #4
 80042c8:	6942      	ldr	r2, [r0, #20]
 80042ca:	f04f 0501 	mov.w	r5, #1
 80042ce:	8811      	ldrh	r1, [r2, #0]
 80042d0:	2900      	cmp	r1, #0
 80042d2:	bf1a      	itte	ne
 80042d4:	6850      	ldrne	r0, [r2, #4]
 80042d6:	1d00      	addne	r0, r0, #4
 80042d8:	2004      	moveq	r0, #4
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	2800      	cmp	r0, #0
 80042de:	bf14      	ite	ne
 80042e0:	6803      	ldrne	r3, [r0, #0]
 80042e2:	2300      	moveq	r3, #0
 80042e4:	2902      	cmp	r1, #2
 80042e6:	bfa6      	itte	ge
 80042e8:	6850      	ldrge	r0, [r2, #4]
 80042ea:	3010      	addge	r0, #16
 80042ec:	2004      	movlt	r0, #4
 80042ee:	6800      	ldr	r0, [r0, #0]
 80042f0:	2800      	cmp	r0, #0
 80042f2:	bf19      	ittee	ne
 80042f4:	6800      	ldrne	r0, [r0, #0]
 80042f6:	f100 0418 	addne.w	r4, r0, #24
 80042fa:	2100      	moveq	r1, #0
 80042fc:	f101 0418 	addeq.w	r4, r1, #24
 8004300:	f103 0108 	add.w	r1, r3, #8
 8004304:	680a      	ldr	r2, [r1, #0]
 8004306:	0a12      	lsrs	r2, r2, #8
 8004308:	d01f      	beq.n	800434a <forward_atanh+0x86>
 800430a:	684e      	ldr	r6, [r1, #4]
 800430c:	4610      	mov	r0, r2
 800430e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004312:	1f0f      	subs	r7, r1, #4
 8004314:	f010 0103 	ands.w	r1, r0, #3
 8004318:	d006      	beq.n	8004328 <forward_atanh+0x64>
 800431a:	1e52      	subs	r2, r2, #1
 800431c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004320:	1e49      	subs	r1, r1, #1
 8004322:	fb0c f505 	mul.w	r5, ip, r5
 8004326:	d1f8      	bne.n	800431a <forward_atanh+0x56>
 8004328:	0880      	lsrs	r0, r0, #2
 800432a:	d00e      	beq.n	800434a <forward_atanh+0x86>
 800432c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004330:	3910      	subs	r1, #16
 8004332:	68ca      	ldr	r2, [r1, #12]
 8004334:	688e      	ldr	r6, [r1, #8]
 8004336:	684f      	ldr	r7, [r1, #4]
 8004338:	f851 c910 	ldr.w	ip, [r1], #-16
 800433c:	4372      	muls	r2, r6
 800433e:	437a      	muls	r2, r7
 8004340:	fb0c f202 	mul.w	r2, ip, r2
 8004344:	4355      	muls	r5, r2
 8004346:	1e40      	subs	r0, r0, #1
 8004348:	d1f3      	bne.n	8004332 <forward_atanh+0x6e>
 800434a:	6998      	ldr	r0, [r3, #24]
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	6886      	ldr	r6, [r0, #8]
 8004350:	688a      	ldr	r2, [r1, #8]
 8004352:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004356:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800435a:	1f07      	subs	r7, r0, #4
 800435c:	1f1c      	subs	r4, r3, #4
 800435e:	42b7      	cmp	r7, r6
 8004360:	f0c0 800a 	bcc.w	8004378 <forward_atanh+0xb4>
 8004364:	ed97 0a00 	vldr	s0, [r7]
 8004368:	1f3f      	subs	r7, r7, #4
 800436a:	f00f fd3d 	bl	8013de8 <atanhf>
 800436e:	ed84 0a00 	vstr	s0, [r4]
 8004372:	1f24      	subs	r4, r4, #4
 8004374:	42b7      	cmp	r7, r6
 8004376:	d2f5      	bcs.n	8004364 <forward_atanh+0xa0>
 8004378:	b001      	add	sp, #4
 800437a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800437c <nl_func_cos_array_f32>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	688c      	ldr	r4, [r1, #8]
 8004380:	6880      	ldr	r0, [r0, #8]
 8004382:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004386:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800438a:	1f0d      	subs	r5, r1, #4
 800438c:	1f16      	subs	r6, r2, #4
 800438e:	42a5      	cmp	r5, r4
 8004390:	f0c0 800a 	bcc.w	80043a8 <nl_func_cos_array_f32+0x2c>
 8004394:	ed95 0a00 	vldr	s0, [r5]
 8004398:	1f2d      	subs	r5, r5, #4
 800439a:	f00e fd9d 	bl	8012ed8 <cosf>
 800439e:	ed86 0a00 	vstr	s0, [r6]
 80043a2:	1f36      	subs	r6, r6, #4
 80043a4:	42a5      	cmp	r5, r4
 80043a6:	d2f5      	bcs.n	8004394 <nl_func_cos_array_f32+0x18>
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080043ac <forward_cos>:
 80043ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ae:	b081      	sub	sp, #4
 80043b0:	6942      	ldr	r2, [r0, #20]
 80043b2:	f04f 0501 	mov.w	r5, #1
 80043b6:	8811      	ldrh	r1, [r2, #0]
 80043b8:	2900      	cmp	r1, #0
 80043ba:	bf1a      	itte	ne
 80043bc:	6850      	ldrne	r0, [r2, #4]
 80043be:	1d00      	addne	r0, r0, #4
 80043c0:	2004      	moveq	r0, #4
 80043c2:	6800      	ldr	r0, [r0, #0]
 80043c4:	2800      	cmp	r0, #0
 80043c6:	bf14      	ite	ne
 80043c8:	6803      	ldrne	r3, [r0, #0]
 80043ca:	2300      	moveq	r3, #0
 80043cc:	2902      	cmp	r1, #2
 80043ce:	bfa6      	itte	ge
 80043d0:	6850      	ldrge	r0, [r2, #4]
 80043d2:	3010      	addge	r0, #16
 80043d4:	2004      	movlt	r0, #4
 80043d6:	6800      	ldr	r0, [r0, #0]
 80043d8:	2800      	cmp	r0, #0
 80043da:	bf19      	ittee	ne
 80043dc:	6800      	ldrne	r0, [r0, #0]
 80043de:	f100 0418 	addne.w	r4, r0, #24
 80043e2:	2100      	moveq	r1, #0
 80043e4:	f101 0418 	addeq.w	r4, r1, #24
 80043e8:	f103 0108 	add.w	r1, r3, #8
 80043ec:	680a      	ldr	r2, [r1, #0]
 80043ee:	0a12      	lsrs	r2, r2, #8
 80043f0:	d01f      	beq.n	8004432 <forward_cos+0x86>
 80043f2:	684e      	ldr	r6, [r1, #4]
 80043f4:	4610      	mov	r0, r2
 80043f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80043fa:	1f0f      	subs	r7, r1, #4
 80043fc:	f010 0103 	ands.w	r1, r0, #3
 8004400:	d006      	beq.n	8004410 <forward_cos+0x64>
 8004402:	1e52      	subs	r2, r2, #1
 8004404:	f857 c904 	ldr.w	ip, [r7], #-4
 8004408:	1e49      	subs	r1, r1, #1
 800440a:	fb0c f505 	mul.w	r5, ip, r5
 800440e:	d1f8      	bne.n	8004402 <forward_cos+0x56>
 8004410:	0880      	lsrs	r0, r0, #2
 8004412:	d00e      	beq.n	8004432 <forward_cos+0x86>
 8004414:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004418:	3910      	subs	r1, #16
 800441a:	68ca      	ldr	r2, [r1, #12]
 800441c:	688e      	ldr	r6, [r1, #8]
 800441e:	684f      	ldr	r7, [r1, #4]
 8004420:	f851 c910 	ldr.w	ip, [r1], #-16
 8004424:	4372      	muls	r2, r6
 8004426:	437a      	muls	r2, r7
 8004428:	fb0c f202 	mul.w	r2, ip, r2
 800442c:	4355      	muls	r5, r2
 800442e:	1e40      	subs	r0, r0, #1
 8004430:	d1f3      	bne.n	800441a <forward_cos+0x6e>
 8004432:	6998      	ldr	r0, [r3, #24]
 8004434:	6821      	ldr	r1, [r4, #0]
 8004436:	6886      	ldr	r6, [r0, #8]
 8004438:	688a      	ldr	r2, [r1, #8]
 800443a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800443e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004442:	1f07      	subs	r7, r0, #4
 8004444:	1f1c      	subs	r4, r3, #4
 8004446:	42b7      	cmp	r7, r6
 8004448:	f0c0 800a 	bcc.w	8004460 <forward_cos+0xb4>
 800444c:	ed97 0a00 	vldr	s0, [r7]
 8004450:	1f3f      	subs	r7, r7, #4
 8004452:	f00e fd41 	bl	8012ed8 <cosf>
 8004456:	ed84 0a00 	vstr	s0, [r4]
 800445a:	1f24      	subs	r4, r4, #4
 800445c:	42b7      	cmp	r7, r6
 800445e:	d2f5      	bcs.n	800444c <forward_cos+0xa0>
 8004460:	b001      	add	sp, #4
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004464 <nl_func_cosh_array_f32>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	688c      	ldr	r4, [r1, #8]
 8004468:	6880      	ldr	r0, [r0, #8]
 800446a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800446e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004472:	1f0d      	subs	r5, r1, #4
 8004474:	1f16      	subs	r6, r2, #4
 8004476:	42a5      	cmp	r5, r4
 8004478:	f0c0 800a 	bcc.w	8004490 <nl_func_cosh_array_f32+0x2c>
 800447c:	ed95 0a00 	vldr	s0, [r5]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	f00f fd19 	bl	8013eb8 <coshf>
 8004486:	ed86 0a00 	vstr	s0, [r6]
 800448a:	1f36      	subs	r6, r6, #4
 800448c:	42a5      	cmp	r5, r4
 800448e:	d2f5      	bcs.n	800447c <nl_func_cosh_array_f32+0x18>
 8004490:	bd70      	pop	{r4, r5, r6, pc}
	...

08004494 <forward_cosh>:
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	b081      	sub	sp, #4
 8004498:	6942      	ldr	r2, [r0, #20]
 800449a:	f04f 0501 	mov.w	r5, #1
 800449e:	8811      	ldrh	r1, [r2, #0]
 80044a0:	2900      	cmp	r1, #0
 80044a2:	bf1a      	itte	ne
 80044a4:	6850      	ldrne	r0, [r2, #4]
 80044a6:	1d00      	addne	r0, r0, #4
 80044a8:	2004      	moveq	r0, #4
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	2800      	cmp	r0, #0
 80044ae:	bf14      	ite	ne
 80044b0:	6803      	ldrne	r3, [r0, #0]
 80044b2:	2300      	moveq	r3, #0
 80044b4:	2902      	cmp	r1, #2
 80044b6:	bfa6      	itte	ge
 80044b8:	6850      	ldrge	r0, [r2, #4]
 80044ba:	3010      	addge	r0, #16
 80044bc:	2004      	movlt	r0, #4
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	2800      	cmp	r0, #0
 80044c2:	bf19      	ittee	ne
 80044c4:	6800      	ldrne	r0, [r0, #0]
 80044c6:	f100 0418 	addne.w	r4, r0, #24
 80044ca:	2100      	moveq	r1, #0
 80044cc:	f101 0418 	addeq.w	r4, r1, #24
 80044d0:	f103 0108 	add.w	r1, r3, #8
 80044d4:	680a      	ldr	r2, [r1, #0]
 80044d6:	0a12      	lsrs	r2, r2, #8
 80044d8:	d01f      	beq.n	800451a <forward_cosh+0x86>
 80044da:	684e      	ldr	r6, [r1, #4]
 80044dc:	4610      	mov	r0, r2
 80044de:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044e2:	1f0f      	subs	r7, r1, #4
 80044e4:	f010 0103 	ands.w	r1, r0, #3
 80044e8:	d006      	beq.n	80044f8 <forward_cosh+0x64>
 80044ea:	1e52      	subs	r2, r2, #1
 80044ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80044f0:	1e49      	subs	r1, r1, #1
 80044f2:	fb0c f505 	mul.w	r5, ip, r5
 80044f6:	d1f8      	bne.n	80044ea <forward_cosh+0x56>
 80044f8:	0880      	lsrs	r0, r0, #2
 80044fa:	d00e      	beq.n	800451a <forward_cosh+0x86>
 80044fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004500:	3910      	subs	r1, #16
 8004502:	68ca      	ldr	r2, [r1, #12]
 8004504:	688e      	ldr	r6, [r1, #8]
 8004506:	684f      	ldr	r7, [r1, #4]
 8004508:	f851 c910 	ldr.w	ip, [r1], #-16
 800450c:	4372      	muls	r2, r6
 800450e:	437a      	muls	r2, r7
 8004510:	fb0c f202 	mul.w	r2, ip, r2
 8004514:	4355      	muls	r5, r2
 8004516:	1e40      	subs	r0, r0, #1
 8004518:	d1f3      	bne.n	8004502 <forward_cosh+0x6e>
 800451a:	6998      	ldr	r0, [r3, #24]
 800451c:	6821      	ldr	r1, [r4, #0]
 800451e:	6886      	ldr	r6, [r0, #8]
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004526:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800452a:	1f07      	subs	r7, r0, #4
 800452c:	1f1c      	subs	r4, r3, #4
 800452e:	42b7      	cmp	r7, r6
 8004530:	f0c0 800a 	bcc.w	8004548 <forward_cosh+0xb4>
 8004534:	ed97 0a00 	vldr	s0, [r7]
 8004538:	1f3f      	subs	r7, r7, #4
 800453a:	f00f fcbd 	bl	8013eb8 <coshf>
 800453e:	ed84 0a00 	vstr	s0, [r4]
 8004542:	1f24      	subs	r4, r4, #4
 8004544:	42b7      	cmp	r7, r6
 8004546:	d2f5      	bcs.n	8004534 <forward_cosh+0xa0>
 8004548:	b001      	add	sp, #4
 800454a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800454c <nl_func_erf_array_f32>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	688c      	ldr	r4, [r1, #8]
 8004550:	6880      	ldr	r0, [r0, #8]
 8004552:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004556:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800455a:	1f0d      	subs	r5, r1, #4
 800455c:	1f16      	subs	r6, r2, #4
 800455e:	42a5      	cmp	r5, r4
 8004560:	f0c0 800a 	bcc.w	8004578 <nl_func_erf_array_f32+0x2c>
 8004564:	ed95 0a00 	vldr	s0, [r5]
 8004568:	1f2d      	subs	r5, r5, #4
 800456a:	f00e fcf5 	bl	8012f58 <erff>
 800456e:	ed86 0a00 	vstr	s0, [r6]
 8004572:	1f36      	subs	r6, r6, #4
 8004574:	42a5      	cmp	r5, r4
 8004576:	d2f5      	bcs.n	8004564 <nl_func_erf_array_f32+0x18>
 8004578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800457c <forward_erf>:
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	b081      	sub	sp, #4
 8004580:	6942      	ldr	r2, [r0, #20]
 8004582:	f04f 0501 	mov.w	r5, #1
 8004586:	8811      	ldrh	r1, [r2, #0]
 8004588:	2900      	cmp	r1, #0
 800458a:	bf1a      	itte	ne
 800458c:	6850      	ldrne	r0, [r2, #4]
 800458e:	1d00      	addne	r0, r0, #4
 8004590:	2004      	moveq	r0, #4
 8004592:	6800      	ldr	r0, [r0, #0]
 8004594:	2800      	cmp	r0, #0
 8004596:	bf14      	ite	ne
 8004598:	6803      	ldrne	r3, [r0, #0]
 800459a:	2300      	moveq	r3, #0
 800459c:	2902      	cmp	r1, #2
 800459e:	bfa6      	itte	ge
 80045a0:	6850      	ldrge	r0, [r2, #4]
 80045a2:	3010      	addge	r0, #16
 80045a4:	2004      	movlt	r0, #4
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	2800      	cmp	r0, #0
 80045aa:	bf19      	ittee	ne
 80045ac:	6800      	ldrne	r0, [r0, #0]
 80045ae:	f100 0418 	addne.w	r4, r0, #24
 80045b2:	2100      	moveq	r1, #0
 80045b4:	f101 0418 	addeq.w	r4, r1, #24
 80045b8:	f103 0108 	add.w	r1, r3, #8
 80045bc:	680a      	ldr	r2, [r1, #0]
 80045be:	0a12      	lsrs	r2, r2, #8
 80045c0:	d01f      	beq.n	8004602 <forward_erf+0x86>
 80045c2:	684e      	ldr	r6, [r1, #4]
 80045c4:	4610      	mov	r0, r2
 80045c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045ca:	1f0f      	subs	r7, r1, #4
 80045cc:	f010 0103 	ands.w	r1, r0, #3
 80045d0:	d006      	beq.n	80045e0 <forward_erf+0x64>
 80045d2:	1e52      	subs	r2, r2, #1
 80045d4:	f857 c904 	ldr.w	ip, [r7], #-4
 80045d8:	1e49      	subs	r1, r1, #1
 80045da:	fb0c f505 	mul.w	r5, ip, r5
 80045de:	d1f8      	bne.n	80045d2 <forward_erf+0x56>
 80045e0:	0880      	lsrs	r0, r0, #2
 80045e2:	d00e      	beq.n	8004602 <forward_erf+0x86>
 80045e4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045e8:	3910      	subs	r1, #16
 80045ea:	68ca      	ldr	r2, [r1, #12]
 80045ec:	688e      	ldr	r6, [r1, #8]
 80045ee:	684f      	ldr	r7, [r1, #4]
 80045f0:	f851 c910 	ldr.w	ip, [r1], #-16
 80045f4:	4372      	muls	r2, r6
 80045f6:	437a      	muls	r2, r7
 80045f8:	fb0c f202 	mul.w	r2, ip, r2
 80045fc:	4355      	muls	r5, r2
 80045fe:	1e40      	subs	r0, r0, #1
 8004600:	d1f3      	bne.n	80045ea <forward_erf+0x6e>
 8004602:	6998      	ldr	r0, [r3, #24]
 8004604:	6821      	ldr	r1, [r4, #0]
 8004606:	6886      	ldr	r6, [r0, #8]
 8004608:	688a      	ldr	r2, [r1, #8]
 800460a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800460e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004612:	1f07      	subs	r7, r0, #4
 8004614:	1f1c      	subs	r4, r3, #4
 8004616:	42b7      	cmp	r7, r6
 8004618:	f0c0 800a 	bcc.w	8004630 <forward_erf+0xb4>
 800461c:	ed97 0a00 	vldr	s0, [r7]
 8004620:	1f3f      	subs	r7, r7, #4
 8004622:	f00e fc99 	bl	8012f58 <erff>
 8004626:	ed84 0a00 	vstr	s0, [r4]
 800462a:	1f24      	subs	r4, r4, #4
 800462c:	42b7      	cmp	r7, r6
 800462e:	d2f5      	bcs.n	800461c <forward_erf+0xa0>
 8004630:	b001      	add	sp, #4
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004634 <nl_func_log_array_f32>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	688c      	ldr	r4, [r1, #8]
 8004638:	6880      	ldr	r0, [r0, #8]
 800463a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800463e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004642:	1f0d      	subs	r5, r1, #4
 8004644:	1f16      	subs	r6, r2, #4
 8004646:	42a5      	cmp	r5, r4
 8004648:	f0c0 800a 	bcc.w	8004660 <nl_func_log_array_f32+0x2c>
 800464c:	ed95 0a00 	vldr	s0, [r5]
 8004650:	1f2d      	subs	r5, r5, #4
 8004652:	f00e ff29 	bl	80134a8 <logf>
 8004656:	ed86 0a00 	vstr	s0, [r6]
 800465a:	1f36      	subs	r6, r6, #4
 800465c:	42a5      	cmp	r5, r4
 800465e:	d2f5      	bcs.n	800464c <nl_func_log_array_f32+0x18>
 8004660:	bd70      	pop	{r4, r5, r6, pc}
	...

08004664 <forward_log>:
 8004664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004666:	b081      	sub	sp, #4
 8004668:	6942      	ldr	r2, [r0, #20]
 800466a:	f04f 0501 	mov.w	r5, #1
 800466e:	8811      	ldrh	r1, [r2, #0]
 8004670:	2900      	cmp	r1, #0
 8004672:	bf1a      	itte	ne
 8004674:	6850      	ldrne	r0, [r2, #4]
 8004676:	1d00      	addne	r0, r0, #4
 8004678:	2004      	moveq	r0, #4
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	2800      	cmp	r0, #0
 800467e:	bf14      	ite	ne
 8004680:	6803      	ldrne	r3, [r0, #0]
 8004682:	2300      	moveq	r3, #0
 8004684:	2902      	cmp	r1, #2
 8004686:	bfa6      	itte	ge
 8004688:	6850      	ldrge	r0, [r2, #4]
 800468a:	3010      	addge	r0, #16
 800468c:	2004      	movlt	r0, #4
 800468e:	6800      	ldr	r0, [r0, #0]
 8004690:	2800      	cmp	r0, #0
 8004692:	bf19      	ittee	ne
 8004694:	6800      	ldrne	r0, [r0, #0]
 8004696:	f100 0418 	addne.w	r4, r0, #24
 800469a:	2100      	moveq	r1, #0
 800469c:	f101 0418 	addeq.w	r4, r1, #24
 80046a0:	f103 0108 	add.w	r1, r3, #8
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	0a12      	lsrs	r2, r2, #8
 80046a8:	d01f      	beq.n	80046ea <forward_log+0x86>
 80046aa:	684e      	ldr	r6, [r1, #4]
 80046ac:	4610      	mov	r0, r2
 80046ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80046b2:	1f0f      	subs	r7, r1, #4
 80046b4:	f010 0103 	ands.w	r1, r0, #3
 80046b8:	d006      	beq.n	80046c8 <forward_log+0x64>
 80046ba:	1e52      	subs	r2, r2, #1
 80046bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80046c0:	1e49      	subs	r1, r1, #1
 80046c2:	fb0c f505 	mul.w	r5, ip, r5
 80046c6:	d1f8      	bne.n	80046ba <forward_log+0x56>
 80046c8:	0880      	lsrs	r0, r0, #2
 80046ca:	d00e      	beq.n	80046ea <forward_log+0x86>
 80046cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80046d0:	3910      	subs	r1, #16
 80046d2:	68ca      	ldr	r2, [r1, #12]
 80046d4:	688e      	ldr	r6, [r1, #8]
 80046d6:	684f      	ldr	r7, [r1, #4]
 80046d8:	f851 c910 	ldr.w	ip, [r1], #-16
 80046dc:	4372      	muls	r2, r6
 80046de:	437a      	muls	r2, r7
 80046e0:	fb0c f202 	mul.w	r2, ip, r2
 80046e4:	4355      	muls	r5, r2
 80046e6:	1e40      	subs	r0, r0, #1
 80046e8:	d1f3      	bne.n	80046d2 <forward_log+0x6e>
 80046ea:	6998      	ldr	r0, [r3, #24]
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	6886      	ldr	r6, [r0, #8]
 80046f0:	688a      	ldr	r2, [r1, #8]
 80046f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80046f6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80046fa:	1f07      	subs	r7, r0, #4
 80046fc:	1f1c      	subs	r4, r3, #4
 80046fe:	42b7      	cmp	r7, r6
 8004700:	f0c0 800a 	bcc.w	8004718 <forward_log+0xb4>
 8004704:	ed97 0a00 	vldr	s0, [r7]
 8004708:	1f3f      	subs	r7, r7, #4
 800470a:	f00e fecd 	bl	80134a8 <logf>
 800470e:	ed84 0a00 	vstr	s0, [r4]
 8004712:	1f24      	subs	r4, r4, #4
 8004714:	42b7      	cmp	r7, r6
 8004716:	d2f5      	bcs.n	8004704 <forward_log+0xa0>
 8004718:	b001      	add	sp, #4
 800471a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800471c <nl_func_rsqrt_array_f32>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	6880      	ldr	r0, [r0, #8]
 8004722:	68a1      	ldr	r1, [r4, #8]
 8004724:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004728:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800472c:	1f1d      	subs	r5, r3, #4
 800472e:	1f16      	subs	r6, r2, #4
 8004730:	428d      	cmp	r5, r1
 8004732:	d30e      	bcc.n	8004752 <nl_func_rsqrt_array_f32+0x36>
 8004734:	ed95 0a00 	vldr	s0, [r5]
 8004738:	1f2d      	subs	r5, r5, #4
 800473a:	f002 fa49 	bl	8006bd0 <ai_math_sqrt>
 800473e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004742:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8004746:	edc6 0a00 	vstr	s1, [r6]
 800474a:	68a0      	ldr	r0, [r4, #8]
 800474c:	1f36      	subs	r6, r6, #4
 800474e:	4285      	cmp	r5, r0
 8004750:	d2f0      	bcs.n	8004734 <nl_func_rsqrt_array_f32+0x18>
 8004752:	bd70      	pop	{r4, r5, r6, pc}

08004754 <forward_rsqrt>:
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	b081      	sub	sp, #4
 8004758:	6942      	ldr	r2, [r0, #20]
 800475a:	f04f 0501 	mov.w	r5, #1
 800475e:	8811      	ldrh	r1, [r2, #0]
 8004760:	2900      	cmp	r1, #0
 8004762:	bf1a      	itte	ne
 8004764:	6850      	ldrne	r0, [r2, #4]
 8004766:	1d00      	addne	r0, r0, #4
 8004768:	2004      	moveq	r0, #4
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	2800      	cmp	r0, #0
 800476e:	bf14      	ite	ne
 8004770:	6803      	ldrne	r3, [r0, #0]
 8004772:	2300      	moveq	r3, #0
 8004774:	2902      	cmp	r1, #2
 8004776:	bfa6      	itte	ge
 8004778:	6850      	ldrge	r0, [r2, #4]
 800477a:	3010      	addge	r0, #16
 800477c:	2004      	movlt	r0, #4
 800477e:	6800      	ldr	r0, [r0, #0]
 8004780:	2800      	cmp	r0, #0
 8004782:	bf19      	ittee	ne
 8004784:	6800      	ldrne	r0, [r0, #0]
 8004786:	f100 0418 	addne.w	r4, r0, #24
 800478a:	2100      	moveq	r1, #0
 800478c:	f101 0418 	addeq.w	r4, r1, #24
 8004790:	f103 0108 	add.w	r1, r3, #8
 8004794:	680a      	ldr	r2, [r1, #0]
 8004796:	0a12      	lsrs	r2, r2, #8
 8004798:	d01f      	beq.n	80047da <forward_rsqrt+0x86>
 800479a:	684e      	ldr	r6, [r1, #4]
 800479c:	4610      	mov	r0, r2
 800479e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80047a2:	1f0f      	subs	r7, r1, #4
 80047a4:	f010 0103 	ands.w	r1, r0, #3
 80047a8:	d006      	beq.n	80047b8 <forward_rsqrt+0x64>
 80047aa:	1e52      	subs	r2, r2, #1
 80047ac:	f857 c904 	ldr.w	ip, [r7], #-4
 80047b0:	1e49      	subs	r1, r1, #1
 80047b2:	fb0c f505 	mul.w	r5, ip, r5
 80047b6:	d1f8      	bne.n	80047aa <forward_rsqrt+0x56>
 80047b8:	0880      	lsrs	r0, r0, #2
 80047ba:	d00e      	beq.n	80047da <forward_rsqrt+0x86>
 80047bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80047c0:	3910      	subs	r1, #16
 80047c2:	68ca      	ldr	r2, [r1, #12]
 80047c4:	688e      	ldr	r6, [r1, #8]
 80047c6:	684f      	ldr	r7, [r1, #4]
 80047c8:	f851 c910 	ldr.w	ip, [r1], #-16
 80047cc:	4372      	muls	r2, r6
 80047ce:	437a      	muls	r2, r7
 80047d0:	fb0c f202 	mul.w	r2, ip, r2
 80047d4:	4355      	muls	r5, r2
 80047d6:	1e40      	subs	r0, r0, #1
 80047d8:	d1f3      	bne.n	80047c2 <forward_rsqrt+0x6e>
 80047da:	699e      	ldr	r6, [r3, #24]
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	68b0      	ldr	r0, [r6, #8]
 80047e0:	6893      	ldr	r3, [r2, #8]
 80047e2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80047e6:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80047ea:	1f0f      	subs	r7, r1, #4
 80047ec:	1f24      	subs	r4, r4, #4
 80047ee:	4287      	cmp	r7, r0
 80047f0:	f0c0 800f 	bcc.w	8004812 <forward_rsqrt+0xbe>
 80047f4:	ed97 0a00 	vldr	s0, [r7]
 80047f8:	1f3f      	subs	r7, r7, #4
 80047fa:	f002 f9e9 	bl	8006bd0 <ai_math_sqrt>
 80047fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004802:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8004806:	edc4 0a00 	vstr	s1, [r4]
 800480a:	68b0      	ldr	r0, [r6, #8]
 800480c:	1f24      	subs	r4, r4, #4
 800480e:	4287      	cmp	r7, r0
 8004810:	d2f0      	bcs.n	80047f4 <forward_rsqrt+0xa0>
 8004812:	b001      	add	sp, #4
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004818 <nl_func_sin_array_f32>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	688c      	ldr	r4, [r1, #8]
 800481c:	6880      	ldr	r0, [r0, #8]
 800481e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004822:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004826:	1f0d      	subs	r5, r1, #4
 8004828:	1f16      	subs	r6, r2, #4
 800482a:	42a5      	cmp	r5, r4
 800482c:	f0c0 800a 	bcc.w	8004844 <nl_func_sin_array_f32+0x2c>
 8004830:	ed95 0a00 	vldr	s0, [r5]
 8004834:	1f2d      	subs	r5, r5, #4
 8004836:	f00f f923 	bl	8013a80 <sinf>
 800483a:	ed86 0a00 	vstr	s0, [r6]
 800483e:	1f36      	subs	r6, r6, #4
 8004840:	42a5      	cmp	r5, r4
 8004842:	d2f5      	bcs.n	8004830 <nl_func_sin_array_f32+0x18>
 8004844:	bd70      	pop	{r4, r5, r6, pc}
	...

08004848 <forward_sin>:
 8004848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484a:	b081      	sub	sp, #4
 800484c:	6942      	ldr	r2, [r0, #20]
 800484e:	f04f 0501 	mov.w	r5, #1
 8004852:	8811      	ldrh	r1, [r2, #0]
 8004854:	2900      	cmp	r1, #0
 8004856:	bf1a      	itte	ne
 8004858:	6850      	ldrne	r0, [r2, #4]
 800485a:	1d00      	addne	r0, r0, #4
 800485c:	2004      	moveq	r0, #4
 800485e:	6800      	ldr	r0, [r0, #0]
 8004860:	2800      	cmp	r0, #0
 8004862:	bf14      	ite	ne
 8004864:	6803      	ldrne	r3, [r0, #0]
 8004866:	2300      	moveq	r3, #0
 8004868:	2902      	cmp	r1, #2
 800486a:	bfa6      	itte	ge
 800486c:	6850      	ldrge	r0, [r2, #4]
 800486e:	3010      	addge	r0, #16
 8004870:	2004      	movlt	r0, #4
 8004872:	6800      	ldr	r0, [r0, #0]
 8004874:	2800      	cmp	r0, #0
 8004876:	bf19      	ittee	ne
 8004878:	6800      	ldrne	r0, [r0, #0]
 800487a:	f100 0418 	addne.w	r4, r0, #24
 800487e:	2100      	moveq	r1, #0
 8004880:	f101 0418 	addeq.w	r4, r1, #24
 8004884:	f103 0108 	add.w	r1, r3, #8
 8004888:	680a      	ldr	r2, [r1, #0]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	d01f      	beq.n	80048ce <forward_sin+0x86>
 800488e:	684e      	ldr	r6, [r1, #4]
 8004890:	4610      	mov	r0, r2
 8004892:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004896:	1f0f      	subs	r7, r1, #4
 8004898:	f010 0103 	ands.w	r1, r0, #3
 800489c:	d006      	beq.n	80048ac <forward_sin+0x64>
 800489e:	1e52      	subs	r2, r2, #1
 80048a0:	f857 c904 	ldr.w	ip, [r7], #-4
 80048a4:	1e49      	subs	r1, r1, #1
 80048a6:	fb0c f505 	mul.w	r5, ip, r5
 80048aa:	d1f8      	bne.n	800489e <forward_sin+0x56>
 80048ac:	0880      	lsrs	r0, r0, #2
 80048ae:	d00e      	beq.n	80048ce <forward_sin+0x86>
 80048b0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048b4:	3910      	subs	r1, #16
 80048b6:	68ca      	ldr	r2, [r1, #12]
 80048b8:	688e      	ldr	r6, [r1, #8]
 80048ba:	684f      	ldr	r7, [r1, #4]
 80048bc:	f851 c910 	ldr.w	ip, [r1], #-16
 80048c0:	4372      	muls	r2, r6
 80048c2:	437a      	muls	r2, r7
 80048c4:	fb0c f202 	mul.w	r2, ip, r2
 80048c8:	4355      	muls	r5, r2
 80048ca:	1e40      	subs	r0, r0, #1
 80048cc:	d1f3      	bne.n	80048b6 <forward_sin+0x6e>
 80048ce:	6998      	ldr	r0, [r3, #24]
 80048d0:	6821      	ldr	r1, [r4, #0]
 80048d2:	6886      	ldr	r6, [r0, #8]
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80048da:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80048de:	1f07      	subs	r7, r0, #4
 80048e0:	1f1c      	subs	r4, r3, #4
 80048e2:	42b7      	cmp	r7, r6
 80048e4:	f0c0 800a 	bcc.w	80048fc <forward_sin+0xb4>
 80048e8:	ed97 0a00 	vldr	s0, [r7]
 80048ec:	1f3f      	subs	r7, r7, #4
 80048ee:	f00f f8c7 	bl	8013a80 <sinf>
 80048f2:	ed84 0a00 	vstr	s0, [r4]
 80048f6:	1f24      	subs	r4, r4, #4
 80048f8:	42b7      	cmp	r7, r6
 80048fa:	d2f5      	bcs.n	80048e8 <forward_sin+0xa0>
 80048fc:	b001      	add	sp, #4
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004900 <nl_func_sinh_array_f32>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	688c      	ldr	r4, [r1, #8]
 8004904:	6880      	ldr	r0, [r0, #8]
 8004906:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800490a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800490e:	1f0d      	subs	r5, r1, #4
 8004910:	1f16      	subs	r6, r2, #4
 8004912:	42a5      	cmp	r5, r4
 8004914:	f0c0 800a 	bcc.w	800492c <nl_func_sinh_array_f32+0x2c>
 8004918:	ed95 0a00 	vldr	s0, [r5]
 800491c:	1f2d      	subs	r5, r5, #4
 800491e:	f00f fb7f 	bl	8014020 <sinhf>
 8004922:	ed86 0a00 	vstr	s0, [r6]
 8004926:	1f36      	subs	r6, r6, #4
 8004928:	42a5      	cmp	r5, r4
 800492a:	d2f5      	bcs.n	8004918 <nl_func_sinh_array_f32+0x18>
 800492c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004930 <forward_sinh>:
 8004930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004932:	b081      	sub	sp, #4
 8004934:	6942      	ldr	r2, [r0, #20]
 8004936:	f04f 0501 	mov.w	r5, #1
 800493a:	8811      	ldrh	r1, [r2, #0]
 800493c:	2900      	cmp	r1, #0
 800493e:	bf1a      	itte	ne
 8004940:	6850      	ldrne	r0, [r2, #4]
 8004942:	1d00      	addne	r0, r0, #4
 8004944:	2004      	moveq	r0, #4
 8004946:	6800      	ldr	r0, [r0, #0]
 8004948:	2800      	cmp	r0, #0
 800494a:	bf14      	ite	ne
 800494c:	6803      	ldrne	r3, [r0, #0]
 800494e:	2300      	moveq	r3, #0
 8004950:	2902      	cmp	r1, #2
 8004952:	bfa6      	itte	ge
 8004954:	6850      	ldrge	r0, [r2, #4]
 8004956:	3010      	addge	r0, #16
 8004958:	2004      	movlt	r0, #4
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	2800      	cmp	r0, #0
 800495e:	bf19      	ittee	ne
 8004960:	6800      	ldrne	r0, [r0, #0]
 8004962:	f100 0418 	addne.w	r4, r0, #24
 8004966:	2100      	moveq	r1, #0
 8004968:	f101 0418 	addeq.w	r4, r1, #24
 800496c:	f103 0108 	add.w	r1, r3, #8
 8004970:	680a      	ldr	r2, [r1, #0]
 8004972:	0a12      	lsrs	r2, r2, #8
 8004974:	d01f      	beq.n	80049b6 <forward_sinh+0x86>
 8004976:	684e      	ldr	r6, [r1, #4]
 8004978:	4610      	mov	r0, r2
 800497a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800497e:	1f0f      	subs	r7, r1, #4
 8004980:	f010 0103 	ands.w	r1, r0, #3
 8004984:	d006      	beq.n	8004994 <forward_sinh+0x64>
 8004986:	1e52      	subs	r2, r2, #1
 8004988:	f857 c904 	ldr.w	ip, [r7], #-4
 800498c:	1e49      	subs	r1, r1, #1
 800498e:	fb0c f505 	mul.w	r5, ip, r5
 8004992:	d1f8      	bne.n	8004986 <forward_sinh+0x56>
 8004994:	0880      	lsrs	r0, r0, #2
 8004996:	d00e      	beq.n	80049b6 <forward_sinh+0x86>
 8004998:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800499c:	3910      	subs	r1, #16
 800499e:	68ca      	ldr	r2, [r1, #12]
 80049a0:	688e      	ldr	r6, [r1, #8]
 80049a2:	684f      	ldr	r7, [r1, #4]
 80049a4:	f851 c910 	ldr.w	ip, [r1], #-16
 80049a8:	4372      	muls	r2, r6
 80049aa:	437a      	muls	r2, r7
 80049ac:	fb0c f202 	mul.w	r2, ip, r2
 80049b0:	4355      	muls	r5, r2
 80049b2:	1e40      	subs	r0, r0, #1
 80049b4:	d1f3      	bne.n	800499e <forward_sinh+0x6e>
 80049b6:	6998      	ldr	r0, [r3, #24]
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	6886      	ldr	r6, [r0, #8]
 80049bc:	688a      	ldr	r2, [r1, #8]
 80049be:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80049c2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80049c6:	1f07      	subs	r7, r0, #4
 80049c8:	1f1c      	subs	r4, r3, #4
 80049ca:	42b7      	cmp	r7, r6
 80049cc:	f0c0 800a 	bcc.w	80049e4 <forward_sinh+0xb4>
 80049d0:	ed97 0a00 	vldr	s0, [r7]
 80049d4:	1f3f      	subs	r7, r7, #4
 80049d6:	f00f fb23 	bl	8014020 <sinhf>
 80049da:	ed84 0a00 	vstr	s0, [r4]
 80049de:	1f24      	subs	r4, r4, #4
 80049e0:	42b7      	cmp	r7, r6
 80049e2:	d2f5      	bcs.n	80049d0 <forward_sinh+0xa0>
 80049e4:	b001      	add	sp, #4
 80049e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e8 <nl_func_tan_array_f32>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	688c      	ldr	r4, [r1, #8]
 80049ec:	6880      	ldr	r0, [r0, #8]
 80049ee:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80049f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80049f6:	1f0d      	subs	r5, r1, #4
 80049f8:	1f16      	subs	r6, r2, #4
 80049fa:	42a5      	cmp	r5, r4
 80049fc:	f0c0 800a 	bcc.w	8004a14 <nl_func_tan_array_f32+0x2c>
 8004a00:	ed95 0a00 	vldr	s0, [r5]
 8004a04:	1f2d      	subs	r5, r5, #4
 8004a06:	f00f f87d 	bl	8013b04 <tanf>
 8004a0a:	ed86 0a00 	vstr	s0, [r6]
 8004a0e:	1f36      	subs	r6, r6, #4
 8004a10:	42a5      	cmp	r5, r4
 8004a12:	d2f5      	bcs.n	8004a00 <nl_func_tan_array_f32+0x18>
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a18 <forward_tan>:
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	b081      	sub	sp, #4
 8004a1c:	6942      	ldr	r2, [r0, #20]
 8004a1e:	f04f 0501 	mov.w	r5, #1
 8004a22:	8811      	ldrh	r1, [r2, #0]
 8004a24:	2900      	cmp	r1, #0
 8004a26:	bf1a      	itte	ne
 8004a28:	6850      	ldrne	r0, [r2, #4]
 8004a2a:	1d00      	addne	r0, r0, #4
 8004a2c:	2004      	moveq	r0, #4
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	2800      	cmp	r0, #0
 8004a32:	bf14      	ite	ne
 8004a34:	6803      	ldrne	r3, [r0, #0]
 8004a36:	2300      	moveq	r3, #0
 8004a38:	2902      	cmp	r1, #2
 8004a3a:	bfa6      	itte	ge
 8004a3c:	6850      	ldrge	r0, [r2, #4]
 8004a3e:	3010      	addge	r0, #16
 8004a40:	2004      	movlt	r0, #4
 8004a42:	6800      	ldr	r0, [r0, #0]
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bf19      	ittee	ne
 8004a48:	6800      	ldrne	r0, [r0, #0]
 8004a4a:	f100 0418 	addne.w	r4, r0, #24
 8004a4e:	2100      	moveq	r1, #0
 8004a50:	f101 0418 	addeq.w	r4, r1, #24
 8004a54:	f103 0108 	add.w	r1, r3, #8
 8004a58:	680a      	ldr	r2, [r1, #0]
 8004a5a:	0a12      	lsrs	r2, r2, #8
 8004a5c:	d01f      	beq.n	8004a9e <forward_tan+0x86>
 8004a5e:	684e      	ldr	r6, [r1, #4]
 8004a60:	4610      	mov	r0, r2
 8004a62:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a66:	1f0f      	subs	r7, r1, #4
 8004a68:	f010 0103 	ands.w	r1, r0, #3
 8004a6c:	d006      	beq.n	8004a7c <forward_tan+0x64>
 8004a6e:	1e52      	subs	r2, r2, #1
 8004a70:	f857 c904 	ldr.w	ip, [r7], #-4
 8004a74:	1e49      	subs	r1, r1, #1
 8004a76:	fb0c f505 	mul.w	r5, ip, r5
 8004a7a:	d1f8      	bne.n	8004a6e <forward_tan+0x56>
 8004a7c:	0880      	lsrs	r0, r0, #2
 8004a7e:	d00e      	beq.n	8004a9e <forward_tan+0x86>
 8004a80:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a84:	3910      	subs	r1, #16
 8004a86:	68ca      	ldr	r2, [r1, #12]
 8004a88:	688e      	ldr	r6, [r1, #8]
 8004a8a:	684f      	ldr	r7, [r1, #4]
 8004a8c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004a90:	4372      	muls	r2, r6
 8004a92:	437a      	muls	r2, r7
 8004a94:	fb0c f202 	mul.w	r2, ip, r2
 8004a98:	4355      	muls	r5, r2
 8004a9a:	1e40      	subs	r0, r0, #1
 8004a9c:	d1f3      	bne.n	8004a86 <forward_tan+0x6e>
 8004a9e:	6998      	ldr	r0, [r3, #24]
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	6886      	ldr	r6, [r0, #8]
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004aaa:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004aae:	1f07      	subs	r7, r0, #4
 8004ab0:	1f1c      	subs	r4, r3, #4
 8004ab2:	42b7      	cmp	r7, r6
 8004ab4:	f0c0 800a 	bcc.w	8004acc <forward_tan+0xb4>
 8004ab8:	ed97 0a00 	vldr	s0, [r7]
 8004abc:	1f3f      	subs	r7, r7, #4
 8004abe:	f00f f821 	bl	8013b04 <tanf>
 8004ac2:	ed84 0a00 	vstr	s0, [r4]
 8004ac6:	1f24      	subs	r4, r4, #4
 8004ac8:	42b7      	cmp	r7, r6
 8004aca:	d2f5      	bcs.n	8004ab8 <forward_tan+0xa0>
 8004acc:	b001      	add	sp, #4
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad0 <nl_func_abs_array_f32>:
 8004ad0:	6889      	ldr	r1, [r1, #8]
 8004ad2:	6880      	ldr	r0, [r0, #8]
 8004ad4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004ad8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004adc:	1f1b      	subs	r3, r3, #4
 8004ade:	1f10      	subs	r0, r2, #4
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	d307      	bcc.n	8004af4 <nl_func_abs_array_f32+0x24>
 8004ae4:	f853 c904 	ldr.w	ip, [r3], #-4
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8004aee:	f840 2904 	str.w	r2, [r0], #-4
 8004af2:	d2f7      	bcs.n	8004ae4 <nl_func_abs_array_f32+0x14>
 8004af4:	4770      	bx	lr
	...

08004af8 <forward_abs>:
 8004af8:	b4f0      	push	{r4, r5, r6, r7}
 8004afa:	6942      	ldr	r2, [r0, #20]
 8004afc:	f04f 0501 	mov.w	r5, #1
 8004b00:	8811      	ldrh	r1, [r2, #0]
 8004b02:	2900      	cmp	r1, #0
 8004b04:	bf1a      	itte	ne
 8004b06:	6850      	ldrne	r0, [r2, #4]
 8004b08:	1d00      	addne	r0, r0, #4
 8004b0a:	2004      	moveq	r0, #4
 8004b0c:	6800      	ldr	r0, [r0, #0]
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	bf14      	ite	ne
 8004b12:	6803      	ldrne	r3, [r0, #0]
 8004b14:	2300      	moveq	r3, #0
 8004b16:	2902      	cmp	r1, #2
 8004b18:	bfa6      	itte	ge
 8004b1a:	6850      	ldrge	r0, [r2, #4]
 8004b1c:	3010      	addge	r0, #16
 8004b1e:	2004      	movlt	r0, #4
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	2800      	cmp	r0, #0
 8004b24:	bf19      	ittee	ne
 8004b26:	6800      	ldrne	r0, [r0, #0]
 8004b28:	f100 0418 	addne.w	r4, r0, #24
 8004b2c:	2100      	moveq	r1, #0
 8004b2e:	f101 0418 	addeq.w	r4, r1, #24
 8004b32:	f103 0108 	add.w	r1, r3, #8
 8004b36:	680a      	ldr	r2, [r1, #0]
 8004b38:	0a12      	lsrs	r2, r2, #8
 8004b3a:	d01f      	beq.n	8004b7c <forward_abs+0x84>
 8004b3c:	684e      	ldr	r6, [r1, #4]
 8004b3e:	4610      	mov	r0, r2
 8004b40:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b44:	1f0f      	subs	r7, r1, #4
 8004b46:	f010 0103 	ands.w	r1, r0, #3
 8004b4a:	d006      	beq.n	8004b5a <forward_abs+0x62>
 8004b4c:	1e52      	subs	r2, r2, #1
 8004b4e:	f857 c904 	ldr.w	ip, [r7], #-4
 8004b52:	1e49      	subs	r1, r1, #1
 8004b54:	fb0c f505 	mul.w	r5, ip, r5
 8004b58:	d1f8      	bne.n	8004b4c <forward_abs+0x54>
 8004b5a:	0880      	lsrs	r0, r0, #2
 8004b5c:	d00e      	beq.n	8004b7c <forward_abs+0x84>
 8004b5e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b62:	3910      	subs	r1, #16
 8004b64:	68ca      	ldr	r2, [r1, #12]
 8004b66:	688e      	ldr	r6, [r1, #8]
 8004b68:	684f      	ldr	r7, [r1, #4]
 8004b6a:	f851 c910 	ldr.w	ip, [r1], #-16
 8004b6e:	4372      	muls	r2, r6
 8004b70:	437a      	muls	r2, r7
 8004b72:	fb0c f202 	mul.w	r2, ip, r2
 8004b76:	4355      	muls	r5, r2
 8004b78:	1e40      	subs	r0, r0, #1
 8004b7a:	d1f3      	bne.n	8004b64 <forward_abs+0x6c>
 8004b7c:	6998      	ldr	r0, [r3, #24]
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	6880      	ldr	r0, [r0, #8]
 8004b82:	6893      	ldr	r3, [r2, #8]
 8004b84:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004b88:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004b8c:	1f09      	subs	r1, r1, #4
 8004b8e:	1f22      	subs	r2, r4, #4
 8004b90:	4281      	cmp	r1, r0
 8004b92:	d307      	bcc.n	8004ba4 <forward_abs+0xac>
 8004b94:	f851 5904 	ldr.w	r5, [r1], #-4
 8004b98:	4281      	cmp	r1, r0
 8004b9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b9e:	f842 3904 	str.w	r3, [r2], #-4
 8004ba2:	d2f7      	bcs.n	8004b94 <forward_abs+0x9c>
 8004ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8004ba6:	4770      	bx	lr

08004ba8 <nl_func_ceil_array_f32>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	688c      	ldr	r4, [r1, #8]
 8004bac:	6880      	ldr	r0, [r0, #8]
 8004bae:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004bb2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004bb6:	1f0d      	subs	r5, r1, #4
 8004bb8:	1f16      	subs	r6, r2, #4
 8004bba:	42a5      	cmp	r5, r4
 8004bbc:	f0c0 800a 	bcc.w	8004bd4 <nl_func_ceil_array_f32+0x2c>
 8004bc0:	ed95 0a00 	vldr	s0, [r5]
 8004bc4:	1f2d      	subs	r5, r5, #4
 8004bc6:	f00e f947 	bl	8012e58 <ceilf>
 8004bca:	ed86 0a00 	vstr	s0, [r6]
 8004bce:	1f36      	subs	r6, r6, #4
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d2f5      	bcs.n	8004bc0 <nl_func_ceil_array_f32+0x18>
 8004bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bd8 <forward_ceil>:
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	b081      	sub	sp, #4
 8004bdc:	6942      	ldr	r2, [r0, #20]
 8004bde:	f04f 0501 	mov.w	r5, #1
 8004be2:	8811      	ldrh	r1, [r2, #0]
 8004be4:	2900      	cmp	r1, #0
 8004be6:	bf1a      	itte	ne
 8004be8:	6850      	ldrne	r0, [r2, #4]
 8004bea:	1d00      	addne	r0, r0, #4
 8004bec:	2004      	moveq	r0, #4
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	6803      	ldrne	r3, [r0, #0]
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	2902      	cmp	r1, #2
 8004bfa:	bfa6      	itte	ge
 8004bfc:	6850      	ldrge	r0, [r2, #4]
 8004bfe:	3010      	addge	r0, #16
 8004c00:	2004      	movlt	r0, #4
 8004c02:	6800      	ldr	r0, [r0, #0]
 8004c04:	2800      	cmp	r0, #0
 8004c06:	bf19      	ittee	ne
 8004c08:	6800      	ldrne	r0, [r0, #0]
 8004c0a:	f100 0418 	addne.w	r4, r0, #24
 8004c0e:	2100      	moveq	r1, #0
 8004c10:	f101 0418 	addeq.w	r4, r1, #24
 8004c14:	f103 0108 	add.w	r1, r3, #8
 8004c18:	680a      	ldr	r2, [r1, #0]
 8004c1a:	0a12      	lsrs	r2, r2, #8
 8004c1c:	d01f      	beq.n	8004c5e <forward_ceil+0x86>
 8004c1e:	684e      	ldr	r6, [r1, #4]
 8004c20:	4610      	mov	r0, r2
 8004c22:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c26:	1f0f      	subs	r7, r1, #4
 8004c28:	f010 0103 	ands.w	r1, r0, #3
 8004c2c:	d006      	beq.n	8004c3c <forward_ceil+0x64>
 8004c2e:	1e52      	subs	r2, r2, #1
 8004c30:	f857 c904 	ldr.w	ip, [r7], #-4
 8004c34:	1e49      	subs	r1, r1, #1
 8004c36:	fb0c f505 	mul.w	r5, ip, r5
 8004c3a:	d1f8      	bne.n	8004c2e <forward_ceil+0x56>
 8004c3c:	0880      	lsrs	r0, r0, #2
 8004c3e:	d00e      	beq.n	8004c5e <forward_ceil+0x86>
 8004c40:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c44:	3910      	subs	r1, #16
 8004c46:	68ca      	ldr	r2, [r1, #12]
 8004c48:	688e      	ldr	r6, [r1, #8]
 8004c4a:	684f      	ldr	r7, [r1, #4]
 8004c4c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004c50:	4372      	muls	r2, r6
 8004c52:	437a      	muls	r2, r7
 8004c54:	fb0c f202 	mul.w	r2, ip, r2
 8004c58:	4355      	muls	r5, r2
 8004c5a:	1e40      	subs	r0, r0, #1
 8004c5c:	d1f3      	bne.n	8004c46 <forward_ceil+0x6e>
 8004c5e:	6998      	ldr	r0, [r3, #24]
 8004c60:	6821      	ldr	r1, [r4, #0]
 8004c62:	6886      	ldr	r6, [r0, #8]
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004c6a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004c6e:	1f07      	subs	r7, r0, #4
 8004c70:	1f1c      	subs	r4, r3, #4
 8004c72:	42b7      	cmp	r7, r6
 8004c74:	f0c0 800a 	bcc.w	8004c8c <forward_ceil+0xb4>
 8004c78:	ed97 0a00 	vldr	s0, [r7]
 8004c7c:	1f3f      	subs	r7, r7, #4
 8004c7e:	f00e f8eb 	bl	8012e58 <ceilf>
 8004c82:	ed84 0a00 	vstr	s0, [r4]
 8004c86:	1f24      	subs	r4, r4, #4
 8004c88:	42b7      	cmp	r7, r6
 8004c8a:	d2f5      	bcs.n	8004c78 <forward_ceil+0xa0>
 8004c8c:	b001      	add	sp, #4
 8004c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c90 <nl_func_floor_array_f32>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	688c      	ldr	r4, [r1, #8]
 8004c94:	6880      	ldr	r0, [r0, #8]
 8004c96:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004c9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c9e:	1f0d      	subs	r5, r1, #4
 8004ca0:	1f16      	subs	r6, r2, #4
 8004ca2:	42a5      	cmp	r5, r4
 8004ca4:	f0c0 800a 	bcc.w	8004cbc <nl_func_floor_array_f32+0x2c>
 8004ca8:	ed95 0a00 	vldr	s0, [r5]
 8004cac:	1f2d      	subs	r5, r5, #4
 8004cae:	f00e fbb9 	bl	8013424 <floorf>
 8004cb2:	ed86 0a00 	vstr	s0, [r6]
 8004cb6:	1f36      	subs	r6, r6, #4
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	d2f5      	bcs.n	8004ca8 <nl_func_floor_array_f32+0x18>
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cc0 <forward_floor>:
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b081      	sub	sp, #4
 8004cc4:	6942      	ldr	r2, [r0, #20]
 8004cc6:	f04f 0501 	mov.w	r5, #1
 8004cca:	8811      	ldrh	r1, [r2, #0]
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	bf1a      	itte	ne
 8004cd0:	6850      	ldrne	r0, [r2, #4]
 8004cd2:	1d00      	addne	r0, r0, #4
 8004cd4:	2004      	moveq	r0, #4
 8004cd6:	6800      	ldr	r0, [r0, #0]
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	bf14      	ite	ne
 8004cdc:	6803      	ldrne	r3, [r0, #0]
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	2902      	cmp	r1, #2
 8004ce2:	bfa6      	itte	ge
 8004ce4:	6850      	ldrge	r0, [r2, #4]
 8004ce6:	3010      	addge	r0, #16
 8004ce8:	2004      	movlt	r0, #4
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	2800      	cmp	r0, #0
 8004cee:	bf19      	ittee	ne
 8004cf0:	6800      	ldrne	r0, [r0, #0]
 8004cf2:	f100 0418 	addne.w	r4, r0, #24
 8004cf6:	2100      	moveq	r1, #0
 8004cf8:	f101 0418 	addeq.w	r4, r1, #24
 8004cfc:	f103 0108 	add.w	r1, r3, #8
 8004d00:	680a      	ldr	r2, [r1, #0]
 8004d02:	0a12      	lsrs	r2, r2, #8
 8004d04:	d01f      	beq.n	8004d46 <forward_floor+0x86>
 8004d06:	684e      	ldr	r6, [r1, #4]
 8004d08:	4610      	mov	r0, r2
 8004d0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d0e:	1f0f      	subs	r7, r1, #4
 8004d10:	f010 0103 	ands.w	r1, r0, #3
 8004d14:	d006      	beq.n	8004d24 <forward_floor+0x64>
 8004d16:	1e52      	subs	r2, r2, #1
 8004d18:	f857 c904 	ldr.w	ip, [r7], #-4
 8004d1c:	1e49      	subs	r1, r1, #1
 8004d1e:	fb0c f505 	mul.w	r5, ip, r5
 8004d22:	d1f8      	bne.n	8004d16 <forward_floor+0x56>
 8004d24:	0880      	lsrs	r0, r0, #2
 8004d26:	d00e      	beq.n	8004d46 <forward_floor+0x86>
 8004d28:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d2c:	3910      	subs	r1, #16
 8004d2e:	68ca      	ldr	r2, [r1, #12]
 8004d30:	688e      	ldr	r6, [r1, #8]
 8004d32:	684f      	ldr	r7, [r1, #4]
 8004d34:	f851 c910 	ldr.w	ip, [r1], #-16
 8004d38:	4372      	muls	r2, r6
 8004d3a:	437a      	muls	r2, r7
 8004d3c:	fb0c f202 	mul.w	r2, ip, r2
 8004d40:	4355      	muls	r5, r2
 8004d42:	1e40      	subs	r0, r0, #1
 8004d44:	d1f3      	bne.n	8004d2e <forward_floor+0x6e>
 8004d46:	6998      	ldr	r0, [r3, #24]
 8004d48:	6821      	ldr	r1, [r4, #0]
 8004d4a:	6886      	ldr	r6, [r0, #8]
 8004d4c:	688a      	ldr	r2, [r1, #8]
 8004d4e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004d52:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004d56:	1f07      	subs	r7, r0, #4
 8004d58:	1f1c      	subs	r4, r3, #4
 8004d5a:	42b7      	cmp	r7, r6
 8004d5c:	f0c0 800a 	bcc.w	8004d74 <forward_floor+0xb4>
 8004d60:	ed97 0a00 	vldr	s0, [r7]
 8004d64:	1f3f      	subs	r7, r7, #4
 8004d66:	f00e fb5d 	bl	8013424 <floorf>
 8004d6a:	ed84 0a00 	vstr	s0, [r4]
 8004d6e:	1f24      	subs	r4, r4, #4
 8004d70:	42b7      	cmp	r7, r6
 8004d72:	d2f5      	bcs.n	8004d60 <forward_floor+0xa0>
 8004d74:	b001      	add	sp, #4
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d78 <nl_func_round_array_f32>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	688c      	ldr	r4, [r1, #8]
 8004d7c:	6880      	ldr	r0, [r0, #8]
 8004d7e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004d82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d86:	1f0d      	subs	r5, r1, #4
 8004d88:	1f16      	subs	r6, r2, #4
 8004d8a:	42a5      	cmp	r5, r4
 8004d8c:	f0c0 800a 	bcc.w	8004da4 <nl_func_round_array_f32+0x2c>
 8004d90:	ed95 0a00 	vldr	s0, [r5]
 8004d94:	1f2d      	subs	r5, r5, #4
 8004d96:	f00e fe4d 	bl	8013a34 <roundf>
 8004d9a:	ed86 0a00 	vstr	s0, [r6]
 8004d9e:	1f36      	subs	r6, r6, #4
 8004da0:	42a5      	cmp	r5, r4
 8004da2:	d2f5      	bcs.n	8004d90 <nl_func_round_array_f32+0x18>
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004da8 <forward_round>:
 8004da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004daa:	b081      	sub	sp, #4
 8004dac:	6942      	ldr	r2, [r0, #20]
 8004dae:	f04f 0501 	mov.w	r5, #1
 8004db2:	8811      	ldrh	r1, [r2, #0]
 8004db4:	2900      	cmp	r1, #0
 8004db6:	bf1a      	itte	ne
 8004db8:	6850      	ldrne	r0, [r2, #4]
 8004dba:	1d00      	addne	r0, r0, #4
 8004dbc:	2004      	moveq	r0, #4
 8004dbe:	6800      	ldr	r0, [r0, #0]
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	bf14      	ite	ne
 8004dc4:	6803      	ldrne	r3, [r0, #0]
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	2902      	cmp	r1, #2
 8004dca:	bfa6      	itte	ge
 8004dcc:	6850      	ldrge	r0, [r2, #4]
 8004dce:	3010      	addge	r0, #16
 8004dd0:	2004      	movlt	r0, #4
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	bf19      	ittee	ne
 8004dd8:	6800      	ldrne	r0, [r0, #0]
 8004dda:	f100 0418 	addne.w	r4, r0, #24
 8004dde:	2100      	moveq	r1, #0
 8004de0:	f101 0418 	addeq.w	r4, r1, #24
 8004de4:	f103 0108 	add.w	r1, r3, #8
 8004de8:	680a      	ldr	r2, [r1, #0]
 8004dea:	0a12      	lsrs	r2, r2, #8
 8004dec:	d01f      	beq.n	8004e2e <forward_round+0x86>
 8004dee:	684e      	ldr	r6, [r1, #4]
 8004df0:	4610      	mov	r0, r2
 8004df2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004df6:	1f0f      	subs	r7, r1, #4
 8004df8:	f010 0103 	ands.w	r1, r0, #3
 8004dfc:	d006      	beq.n	8004e0c <forward_round+0x64>
 8004dfe:	1e52      	subs	r2, r2, #1
 8004e00:	f857 c904 	ldr.w	ip, [r7], #-4
 8004e04:	1e49      	subs	r1, r1, #1
 8004e06:	fb0c f505 	mul.w	r5, ip, r5
 8004e0a:	d1f8      	bne.n	8004dfe <forward_round+0x56>
 8004e0c:	0880      	lsrs	r0, r0, #2
 8004e0e:	d00e      	beq.n	8004e2e <forward_round+0x86>
 8004e10:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004e14:	3910      	subs	r1, #16
 8004e16:	68ca      	ldr	r2, [r1, #12]
 8004e18:	688e      	ldr	r6, [r1, #8]
 8004e1a:	684f      	ldr	r7, [r1, #4]
 8004e1c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004e20:	4372      	muls	r2, r6
 8004e22:	437a      	muls	r2, r7
 8004e24:	fb0c f202 	mul.w	r2, ip, r2
 8004e28:	4355      	muls	r5, r2
 8004e2a:	1e40      	subs	r0, r0, #1
 8004e2c:	d1f3      	bne.n	8004e16 <forward_round+0x6e>
 8004e2e:	6998      	ldr	r0, [r3, #24]
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	6886      	ldr	r6, [r0, #8]
 8004e34:	688a      	ldr	r2, [r1, #8]
 8004e36:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004e3a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004e3e:	1f07      	subs	r7, r0, #4
 8004e40:	1f1c      	subs	r4, r3, #4
 8004e42:	42b7      	cmp	r7, r6
 8004e44:	f0c0 800a 	bcc.w	8004e5c <forward_round+0xb4>
 8004e48:	ed97 0a00 	vldr	s0, [r7]
 8004e4c:	1f3f      	subs	r7, r7, #4
 8004e4e:	f00e fdf1 	bl	8013a34 <roundf>
 8004e52:	ed84 0a00 	vstr	s0, [r4]
 8004e56:	1f24      	subs	r4, r4, #4
 8004e58:	42b7      	cmp	r7, r6
 8004e5a:	d2f5      	bcs.n	8004e48 <forward_round+0xa0>
 8004e5c:	b001      	add	sp, #4
 8004e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e60 <nl_func_neg_array_f32>:
 8004e60:	6889      	ldr	r1, [r1, #8]
 8004e62:	6880      	ldr	r0, [r0, #8]
 8004e64:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004e68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004e6c:	1f1b      	subs	r3, r3, #4
 8004e6e:	1f12      	subs	r2, r2, #4
 8004e70:	428b      	cmp	r3, r1
 8004e72:	d32b      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004e74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004e78:	1f18      	subs	r0, r3, #4
 8004e7a:	edd3 0a00 	vldr	s1, [r3]
 8004e7e:	4288      	cmp	r0, r1
 8004e80:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004e84:	edc2 0a00 	vstr	s1, [r2]
 8004e88:	d320      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004e8a:	ed90 1a00 	vldr	s2, [r0]
 8004e8e:	1f00      	subs	r0, r0, #4
 8004e90:	1f13      	subs	r3, r2, #4
 8004e92:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004e96:	4288      	cmp	r0, r1
 8004e98:	ed83 1a00 	vstr	s2, [r3]
 8004e9c:	d316      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004e9e:	edd0 0a00 	vldr	s1, [r0]
 8004ea2:	1f00      	subs	r0, r0, #4
 8004ea4:	f1a2 0c08 	sub.w	ip, r2, #8
 8004ea8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004eac:	4288      	cmp	r0, r1
 8004eae:	edcc 0a00 	vstr	s1, [ip]
 8004eb2:	d30b      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004eb4:	ed90 1a00 	vldr	s2, [r0]
 8004eb8:	f1a2 030c 	sub.w	r3, r2, #12
 8004ebc:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004ec0:	3a10      	subs	r2, #16
 8004ec2:	ed83 1a00 	vstr	s2, [r3]
 8004ec6:	1f03      	subs	r3, r0, #4
 8004ec8:	428b      	cmp	r3, r1
 8004eca:	d2d5      	bcs.n	8004e78 <nl_func_neg_array_f32+0x18>
 8004ecc:	4770      	bx	lr
	...

08004ed0 <forward_neg>:
 8004ed0:	b4f0      	push	{r4, r5, r6, r7}
 8004ed2:	6942      	ldr	r2, [r0, #20]
 8004ed4:	f04f 0501 	mov.w	r5, #1
 8004ed8:	8811      	ldrh	r1, [r2, #0]
 8004eda:	2900      	cmp	r1, #0
 8004edc:	bf1a      	itte	ne
 8004ede:	6850      	ldrne	r0, [r2, #4]
 8004ee0:	1d00      	addne	r0, r0, #4
 8004ee2:	2004      	moveq	r0, #4
 8004ee4:	6800      	ldr	r0, [r0, #0]
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	6803      	ldrne	r3, [r0, #0]
 8004eec:	2300      	moveq	r3, #0
 8004eee:	2902      	cmp	r1, #2
 8004ef0:	bfa6      	itte	ge
 8004ef2:	6850      	ldrge	r0, [r2, #4]
 8004ef4:	3010      	addge	r0, #16
 8004ef6:	2004      	movlt	r0, #4
 8004ef8:	6800      	ldr	r0, [r0, #0]
 8004efa:	2800      	cmp	r0, #0
 8004efc:	bf19      	ittee	ne
 8004efe:	6800      	ldrne	r0, [r0, #0]
 8004f00:	f100 0418 	addne.w	r4, r0, #24
 8004f04:	2100      	moveq	r1, #0
 8004f06:	f101 0418 	addeq.w	r4, r1, #24
 8004f0a:	f103 0108 	add.w	r1, r3, #8
 8004f0e:	680a      	ldr	r2, [r1, #0]
 8004f10:	0a12      	lsrs	r2, r2, #8
 8004f12:	d01f      	beq.n	8004f54 <forward_neg+0x84>
 8004f14:	684e      	ldr	r6, [r1, #4]
 8004f16:	4610      	mov	r0, r2
 8004f18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f1c:	1f0f      	subs	r7, r1, #4
 8004f1e:	f010 0103 	ands.w	r1, r0, #3
 8004f22:	d006      	beq.n	8004f32 <forward_neg+0x62>
 8004f24:	1e52      	subs	r2, r2, #1
 8004f26:	f857 c904 	ldr.w	ip, [r7], #-4
 8004f2a:	1e49      	subs	r1, r1, #1
 8004f2c:	fb0c f505 	mul.w	r5, ip, r5
 8004f30:	d1f8      	bne.n	8004f24 <forward_neg+0x54>
 8004f32:	0880      	lsrs	r0, r0, #2
 8004f34:	d00e      	beq.n	8004f54 <forward_neg+0x84>
 8004f36:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f3a:	3910      	subs	r1, #16
 8004f3c:	68ca      	ldr	r2, [r1, #12]
 8004f3e:	688e      	ldr	r6, [r1, #8]
 8004f40:	684f      	ldr	r7, [r1, #4]
 8004f42:	f851 c910 	ldr.w	ip, [r1], #-16
 8004f46:	4372      	muls	r2, r6
 8004f48:	437a      	muls	r2, r7
 8004f4a:	fb0c f202 	mul.w	r2, ip, r2
 8004f4e:	4355      	muls	r5, r2
 8004f50:	1e40      	subs	r0, r0, #1
 8004f52:	d1f3      	bne.n	8004f3c <forward_neg+0x6c>
 8004f54:	6998      	ldr	r0, [r3, #24]
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	6880      	ldr	r0, [r0, #8]
 8004f5a:	6893      	ldr	r3, [r2, #8]
 8004f5c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004f60:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004f64:	1f09      	subs	r1, r1, #4
 8004f66:	1f22      	subs	r2, r4, #4
 8004f68:	4281      	cmp	r1, r0
 8004f6a:	d32b      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004f6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004f70:	edd1 0a00 	vldr	s1, [r1]
 8004f74:	1f09      	subs	r1, r1, #4
 8004f76:	4281      	cmp	r1, r0
 8004f78:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004f7c:	edc2 0a00 	vstr	s1, [r2]
 8004f80:	d320      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004f82:	ed91 1a00 	vldr	s2, [r1]
 8004f86:	1f09      	subs	r1, r1, #4
 8004f88:	1f13      	subs	r3, r2, #4
 8004f8a:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004f8e:	4281      	cmp	r1, r0
 8004f90:	ed83 1a00 	vstr	s2, [r3]
 8004f94:	d316      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004f96:	edd1 0a00 	vldr	s1, [r1]
 8004f9a:	1f09      	subs	r1, r1, #4
 8004f9c:	f1a2 0408 	sub.w	r4, r2, #8
 8004fa0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004fa4:	4281      	cmp	r1, r0
 8004fa6:	edc4 0a00 	vstr	s1, [r4]
 8004faa:	d30b      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004fac:	ed91 1a00 	vldr	s2, [r1]
 8004fb0:	f1a2 030c 	sub.w	r3, r2, #12
 8004fb4:	1f09      	subs	r1, r1, #4
 8004fb6:	3a10      	subs	r2, #16
 8004fb8:	4281      	cmp	r1, r0
 8004fba:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004fbe:	ed83 1a00 	vstr	s2, [r3]
 8004fc2:	d2d5      	bcs.n	8004f70 <forward_neg+0xa0>
 8004fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8004fc6:	4770      	bx	lr

08004fc8 <nl_func_reciprocal_array_f32>:
 8004fc8:	6889      	ldr	r1, [r1, #8]
 8004fca:	6880      	ldr	r0, [r0, #8]
 8004fcc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004fd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004fd4:	1f1b      	subs	r3, r3, #4
 8004fd6:	1f12      	subs	r2, r2, #4
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	d331      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 8004fdc:	1f18      	subs	r0, r3, #4
 8004fde:	ed93 0a00 	vldr	s0, [r3]
 8004fe2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004fe6:	4288      	cmp	r0, r1
 8004fe8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8004fec:	ed82 0a00 	vstr	s0, [r2]
 8004ff0:	d326      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 8004ff2:	edd0 0a00 	vldr	s1, [r0]
 8004ff6:	1f00      	subs	r0, r0, #4
 8004ff8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004ffc:	1f13      	subs	r3, r2, #4
 8004ffe:	4288      	cmp	r0, r1
 8005000:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005004:	ed83 1a00 	vstr	s2, [r3]
 8005008:	d31a      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 800500a:	ed90 0a00 	vldr	s0, [r0]
 800500e:	1f00      	subs	r0, r0, #4
 8005010:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005014:	f1a2 0c08 	sub.w	ip, r2, #8
 8005018:	4288      	cmp	r0, r1
 800501a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800501e:	ed8c 0a00 	vstr	s0, [ip]
 8005022:	d30d      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 8005024:	edd0 0a00 	vldr	s1, [r0]
 8005028:	f1a2 030c 	sub.w	r3, r2, #12
 800502c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005030:	3a10      	subs	r2, #16
 8005032:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005036:	ed83 1a00 	vstr	s2, [r3]
 800503a:	1f03      	subs	r3, r0, #4
 800503c:	428b      	cmp	r3, r1
 800503e:	d2cd      	bcs.n	8004fdc <nl_func_reciprocal_array_f32+0x14>
 8005040:	4770      	bx	lr
	...

08005044 <forward_reciprocal>:
 8005044:	b4f0      	push	{r4, r5, r6, r7}
 8005046:	6942      	ldr	r2, [r0, #20]
 8005048:	f04f 0501 	mov.w	r5, #1
 800504c:	8811      	ldrh	r1, [r2, #0]
 800504e:	2900      	cmp	r1, #0
 8005050:	bf1a      	itte	ne
 8005052:	6850      	ldrne	r0, [r2, #4]
 8005054:	1d00      	addne	r0, r0, #4
 8005056:	2004      	moveq	r0, #4
 8005058:	6800      	ldr	r0, [r0, #0]
 800505a:	2800      	cmp	r0, #0
 800505c:	bf14      	ite	ne
 800505e:	6803      	ldrne	r3, [r0, #0]
 8005060:	2300      	moveq	r3, #0
 8005062:	2902      	cmp	r1, #2
 8005064:	bfa6      	itte	ge
 8005066:	6850      	ldrge	r0, [r2, #4]
 8005068:	3010      	addge	r0, #16
 800506a:	2004      	movlt	r0, #4
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	2800      	cmp	r0, #0
 8005070:	bf19      	ittee	ne
 8005072:	6800      	ldrne	r0, [r0, #0]
 8005074:	f100 0418 	addne.w	r4, r0, #24
 8005078:	2100      	moveq	r1, #0
 800507a:	f101 0418 	addeq.w	r4, r1, #24
 800507e:	f103 0108 	add.w	r1, r3, #8
 8005082:	680a      	ldr	r2, [r1, #0]
 8005084:	0a12      	lsrs	r2, r2, #8
 8005086:	d01f      	beq.n	80050c8 <forward_reciprocal+0x84>
 8005088:	684e      	ldr	r6, [r1, #4]
 800508a:	4610      	mov	r0, r2
 800508c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8005090:	1f0f      	subs	r7, r1, #4
 8005092:	f010 0103 	ands.w	r1, r0, #3
 8005096:	d006      	beq.n	80050a6 <forward_reciprocal+0x62>
 8005098:	1e52      	subs	r2, r2, #1
 800509a:	f857 c904 	ldr.w	ip, [r7], #-4
 800509e:	1e49      	subs	r1, r1, #1
 80050a0:	fb0c f505 	mul.w	r5, ip, r5
 80050a4:	d1f8      	bne.n	8005098 <forward_reciprocal+0x54>
 80050a6:	0880      	lsrs	r0, r0, #2
 80050a8:	d00e      	beq.n	80050c8 <forward_reciprocal+0x84>
 80050aa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80050ae:	3910      	subs	r1, #16
 80050b0:	68ca      	ldr	r2, [r1, #12]
 80050b2:	688e      	ldr	r6, [r1, #8]
 80050b4:	684f      	ldr	r7, [r1, #4]
 80050b6:	f851 c910 	ldr.w	ip, [r1], #-16
 80050ba:	4372      	muls	r2, r6
 80050bc:	437a      	muls	r2, r7
 80050be:	fb0c f202 	mul.w	r2, ip, r2
 80050c2:	4355      	muls	r5, r2
 80050c4:	1e40      	subs	r0, r0, #1
 80050c6:	d1f3      	bne.n	80050b0 <forward_reciprocal+0x6c>
 80050c8:	6998      	ldr	r0, [r3, #24]
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	6880      	ldr	r0, [r0, #8]
 80050ce:	6893      	ldr	r3, [r2, #8]
 80050d0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80050d4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80050d8:	1f09      	subs	r1, r1, #4
 80050da:	1f22      	subs	r2, r4, #4
 80050dc:	4281      	cmp	r1, r0
 80050de:	d331      	bcc.n	8005144 <forward_reciprocal+0x100>
 80050e0:	ed91 0a00 	vldr	s0, [r1]
 80050e4:	1f09      	subs	r1, r1, #4
 80050e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80050ea:	4281      	cmp	r1, r0
 80050ec:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80050f0:	ed82 0a00 	vstr	s0, [r2]
 80050f4:	d326      	bcc.n	8005144 <forward_reciprocal+0x100>
 80050f6:	edd1 0a00 	vldr	s1, [r1]
 80050fa:	1f09      	subs	r1, r1, #4
 80050fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005100:	1f13      	subs	r3, r2, #4
 8005102:	4281      	cmp	r1, r0
 8005104:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005108:	ed83 1a00 	vstr	s2, [r3]
 800510c:	d31a      	bcc.n	8005144 <forward_reciprocal+0x100>
 800510e:	ed91 0a00 	vldr	s0, [r1]
 8005112:	1f09      	subs	r1, r1, #4
 8005114:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005118:	f1a2 0408 	sub.w	r4, r2, #8
 800511c:	4281      	cmp	r1, r0
 800511e:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005122:	ed84 0a00 	vstr	s0, [r4]
 8005126:	d30d      	bcc.n	8005144 <forward_reciprocal+0x100>
 8005128:	edd1 0a00 	vldr	s1, [r1]
 800512c:	f1a2 030c 	sub.w	r3, r2, #12
 8005130:	1f09      	subs	r1, r1, #4
 8005132:	3a10      	subs	r2, #16
 8005134:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005138:	4281      	cmp	r1, r0
 800513a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800513e:	ed83 1a00 	vstr	s2, [r3]
 8005142:	d2cd      	bcs.n	80050e0 <forward_reciprocal+0x9c>
 8005144:	bcf0      	pop	{r4, r5, r6, r7}
 8005146:	4770      	bx	lr

08005148 <nl_func_exp_array_f32>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	688c      	ldr	r4, [r1, #8]
 800514c:	6880      	ldr	r0, [r0, #8]
 800514e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005152:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005156:	1f0d      	subs	r5, r1, #4
 8005158:	1f16      	subs	r6, r2, #4
 800515a:	42a5      	cmp	r5, r4
 800515c:	f0c0 800a 	bcc.w	8005174 <nl_func_exp_array_f32+0x2c>
 8005160:	ed95 0a00 	vldr	s0, [r5]
 8005164:	1f2d      	subs	r5, r5, #4
 8005166:	f00e f8d7 	bl	8013318 <expf>
 800516a:	ed86 0a00 	vstr	s0, [r6]
 800516e:	1f36      	subs	r6, r6, #4
 8005170:	42a5      	cmp	r5, r4
 8005172:	d2f5      	bcs.n	8005160 <nl_func_exp_array_f32+0x18>
 8005174:	bd70      	pop	{r4, r5, r6, pc}
	...

08005178 <forward_exp>:
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	b081      	sub	sp, #4
 800517c:	6942      	ldr	r2, [r0, #20]
 800517e:	f04f 0501 	mov.w	r5, #1
 8005182:	8811      	ldrh	r1, [r2, #0]
 8005184:	2900      	cmp	r1, #0
 8005186:	bf1a      	itte	ne
 8005188:	6850      	ldrne	r0, [r2, #4]
 800518a:	1d00      	addne	r0, r0, #4
 800518c:	2004      	moveq	r0, #4
 800518e:	6800      	ldr	r0, [r0, #0]
 8005190:	2800      	cmp	r0, #0
 8005192:	bf14      	ite	ne
 8005194:	6803      	ldrne	r3, [r0, #0]
 8005196:	2300      	moveq	r3, #0
 8005198:	2902      	cmp	r1, #2
 800519a:	bfa6      	itte	ge
 800519c:	6850      	ldrge	r0, [r2, #4]
 800519e:	3010      	addge	r0, #16
 80051a0:	2004      	movlt	r0, #4
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	2800      	cmp	r0, #0
 80051a6:	bf19      	ittee	ne
 80051a8:	6800      	ldrne	r0, [r0, #0]
 80051aa:	f100 0418 	addne.w	r4, r0, #24
 80051ae:	2100      	moveq	r1, #0
 80051b0:	f101 0418 	addeq.w	r4, r1, #24
 80051b4:	f103 0108 	add.w	r1, r3, #8
 80051b8:	680a      	ldr	r2, [r1, #0]
 80051ba:	0a12      	lsrs	r2, r2, #8
 80051bc:	d01f      	beq.n	80051fe <forward_exp+0x86>
 80051be:	684e      	ldr	r6, [r1, #4]
 80051c0:	4610      	mov	r0, r2
 80051c2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80051c6:	1f0f      	subs	r7, r1, #4
 80051c8:	f010 0103 	ands.w	r1, r0, #3
 80051cc:	d006      	beq.n	80051dc <forward_exp+0x64>
 80051ce:	1e52      	subs	r2, r2, #1
 80051d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80051d4:	1e49      	subs	r1, r1, #1
 80051d6:	fb0c f505 	mul.w	r5, ip, r5
 80051da:	d1f8      	bne.n	80051ce <forward_exp+0x56>
 80051dc:	0880      	lsrs	r0, r0, #2
 80051de:	d00e      	beq.n	80051fe <forward_exp+0x86>
 80051e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80051e4:	3910      	subs	r1, #16
 80051e6:	68ca      	ldr	r2, [r1, #12]
 80051e8:	688e      	ldr	r6, [r1, #8]
 80051ea:	684f      	ldr	r7, [r1, #4]
 80051ec:	f851 c910 	ldr.w	ip, [r1], #-16
 80051f0:	4372      	muls	r2, r6
 80051f2:	437a      	muls	r2, r7
 80051f4:	fb0c f202 	mul.w	r2, ip, r2
 80051f8:	4355      	muls	r5, r2
 80051fa:	1e40      	subs	r0, r0, #1
 80051fc:	d1f3      	bne.n	80051e6 <forward_exp+0x6e>
 80051fe:	6998      	ldr	r0, [r3, #24]
 8005200:	6821      	ldr	r1, [r4, #0]
 8005202:	6886      	ldr	r6, [r0, #8]
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800520a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800520e:	1f07      	subs	r7, r0, #4
 8005210:	1f1c      	subs	r4, r3, #4
 8005212:	42b7      	cmp	r7, r6
 8005214:	f0c0 800a 	bcc.w	800522c <forward_exp+0xb4>
 8005218:	ed97 0a00 	vldr	s0, [r7]
 800521c:	1f3f      	subs	r7, r7, #4
 800521e:	f00e f87b 	bl	8013318 <expf>
 8005222:	ed84 0a00 	vstr	s0, [r4]
 8005226:	1f24      	subs	r4, r4, #4
 8005228:	42b7      	cmp	r7, r6
 800522a:	d2f5      	bcs.n	8005218 <forward_exp+0xa0>
 800522c:	b001      	add	sp, #4
 800522e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005230 <nl_func_sigmoid_array_f32>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	688c      	ldr	r4, [r1, #8]
 8005234:	6880      	ldr	r0, [r0, #8]
 8005236:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800523a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800523e:	1f0d      	subs	r5, r1, #4
 8005240:	1f16      	subs	r6, r2, #4
 8005242:	42a5      	cmp	r5, r4
 8005244:	f0c0 8014 	bcc.w	8005270 <nl_func_sigmoid_array_f32+0x40>
 8005248:	ed95 0a00 	vldr	s0, [r5]
 800524c:	1f2d      	subs	r5, r5, #4
 800524e:	eeb1 0a40 	vneg.f32	s0, s0
 8005252:	f00e f861 	bl	8013318 <expf>
 8005256:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800525a:	ee70 0a20 	vadd.f32	s1, s0, s1
 800525e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005262:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005266:	ed86 1a00 	vstr	s2, [r6]
 800526a:	1f36      	subs	r6, r6, #4
 800526c:	42a5      	cmp	r5, r4
 800526e:	d2eb      	bcs.n	8005248 <nl_func_sigmoid_array_f32+0x18>
 8005270:	bd70      	pop	{r4, r5, r6, pc}
	...

08005274 <forward_sigmoid>:
 8005274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005276:	b081      	sub	sp, #4
 8005278:	6942      	ldr	r2, [r0, #20]
 800527a:	f04f 0501 	mov.w	r5, #1
 800527e:	8811      	ldrh	r1, [r2, #0]
 8005280:	2900      	cmp	r1, #0
 8005282:	bf1a      	itte	ne
 8005284:	6850      	ldrne	r0, [r2, #4]
 8005286:	1d00      	addne	r0, r0, #4
 8005288:	2004      	moveq	r0, #4
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	2800      	cmp	r0, #0
 800528e:	bf14      	ite	ne
 8005290:	6803      	ldrne	r3, [r0, #0]
 8005292:	2300      	moveq	r3, #0
 8005294:	2902      	cmp	r1, #2
 8005296:	bfa6      	itte	ge
 8005298:	6850      	ldrge	r0, [r2, #4]
 800529a:	3010      	addge	r0, #16
 800529c:	2004      	movlt	r0, #4
 800529e:	6800      	ldr	r0, [r0, #0]
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bf19      	ittee	ne
 80052a4:	6800      	ldrne	r0, [r0, #0]
 80052a6:	f100 0418 	addne.w	r4, r0, #24
 80052aa:	2100      	moveq	r1, #0
 80052ac:	f101 0418 	addeq.w	r4, r1, #24
 80052b0:	f103 0108 	add.w	r1, r3, #8
 80052b4:	680a      	ldr	r2, [r1, #0]
 80052b6:	0a12      	lsrs	r2, r2, #8
 80052b8:	d01f      	beq.n	80052fa <forward_sigmoid+0x86>
 80052ba:	684e      	ldr	r6, [r1, #4]
 80052bc:	4610      	mov	r0, r2
 80052be:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80052c2:	1f0f      	subs	r7, r1, #4
 80052c4:	f010 0103 	ands.w	r1, r0, #3
 80052c8:	d006      	beq.n	80052d8 <forward_sigmoid+0x64>
 80052ca:	1e52      	subs	r2, r2, #1
 80052cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80052d0:	1e49      	subs	r1, r1, #1
 80052d2:	fb0c f505 	mul.w	r5, ip, r5
 80052d6:	d1f8      	bne.n	80052ca <forward_sigmoid+0x56>
 80052d8:	0880      	lsrs	r0, r0, #2
 80052da:	d00e      	beq.n	80052fa <forward_sigmoid+0x86>
 80052dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80052e0:	3910      	subs	r1, #16
 80052e2:	68ca      	ldr	r2, [r1, #12]
 80052e4:	688e      	ldr	r6, [r1, #8]
 80052e6:	684f      	ldr	r7, [r1, #4]
 80052e8:	f851 c910 	ldr.w	ip, [r1], #-16
 80052ec:	4372      	muls	r2, r6
 80052ee:	437a      	muls	r2, r7
 80052f0:	fb0c f202 	mul.w	r2, ip, r2
 80052f4:	4355      	muls	r5, r2
 80052f6:	1e40      	subs	r0, r0, #1
 80052f8:	d1f3      	bne.n	80052e2 <forward_sigmoid+0x6e>
 80052fa:	6998      	ldr	r0, [r3, #24]
 80052fc:	6821      	ldr	r1, [r4, #0]
 80052fe:	6886      	ldr	r6, [r0, #8]
 8005300:	688a      	ldr	r2, [r1, #8]
 8005302:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8005306:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800530a:	1f07      	subs	r7, r0, #4
 800530c:	1f1c      	subs	r4, r3, #4
 800530e:	42b7      	cmp	r7, r6
 8005310:	f0c0 8014 	bcc.w	800533c <forward_sigmoid+0xc8>
 8005314:	ed97 0a00 	vldr	s0, [r7]
 8005318:	1f3f      	subs	r7, r7, #4
 800531a:	eeb1 0a40 	vneg.f32	s0, s0
 800531e:	f00d fffb 	bl	8013318 <expf>
 8005322:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005326:	ee70 0a20 	vadd.f32	s1, s0, s1
 800532a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800532e:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005332:	ed84 1a00 	vstr	s2, [r4]
 8005336:	1f24      	subs	r4, r4, #4
 8005338:	42b7      	cmp	r7, r6
 800533a:	d2eb      	bcs.n	8005314 <forward_sigmoid+0xa0>
 800533c:	b001      	add	sp, #4
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005340 <nl_func_sign_array_f32>:
 8005340:	6889      	ldr	r1, [r1, #8]
 8005342:	6880      	ldr	r0, [r0, #8]
 8005344:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005348:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800534c:	1f1b      	subs	r3, r3, #4
 800534e:	1f10      	subs	r0, r2, #4
 8005350:	428b      	cmp	r3, r1
 8005352:	d314      	bcc.n	800537e <nl_func_sign_array_f32+0x3e>
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	ed93 0a00 	vldr	s0, [r3]
 800535c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	bfcc      	ite	gt
 8005366:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 800544c <.text_49>
 800536a:	ee00 2a10 	vmovle	s0, r2
 800536e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005372:	1f1b      	subs	r3, r3, #4
 8005374:	ed80 0a00 	vstr	s0, [r0]
 8005378:	1f00      	subs	r0, r0, #4
 800537a:	428b      	cmp	r3, r1
 800537c:	d2ec      	bcs.n	8005358 <nl_func_sign_array_f32+0x18>
 800537e:	4770      	bx	lr

08005380 <forward_sign>:
 8005380:	b4f0      	push	{r4, r5, r6, r7}
 8005382:	6942      	ldr	r2, [r0, #20]
 8005384:	f04f 0501 	mov.w	r5, #1
 8005388:	8811      	ldrh	r1, [r2, #0]
 800538a:	2900      	cmp	r1, #0
 800538c:	bf1a      	itte	ne
 800538e:	6850      	ldrne	r0, [r2, #4]
 8005390:	1d00      	addne	r0, r0, #4
 8005392:	2004      	moveq	r0, #4
 8005394:	6800      	ldr	r0, [r0, #0]
 8005396:	2800      	cmp	r0, #0
 8005398:	bf14      	ite	ne
 800539a:	6803      	ldrne	r3, [r0, #0]
 800539c:	2300      	moveq	r3, #0
 800539e:	2901      	cmp	r1, #1
 80053a0:	bfc6      	itte	gt
 80053a2:	6850      	ldrgt	r0, [r2, #4]
 80053a4:	3010      	addgt	r0, #16
 80053a6:	2004      	movle	r0, #4
 80053a8:	6800      	ldr	r0, [r0, #0]
 80053aa:	2800      	cmp	r0, #0
 80053ac:	bf19      	ittee	ne
 80053ae:	6800      	ldrne	r0, [r0, #0]
 80053b0:	f100 0418 	addne.w	r4, r0, #24
 80053b4:	2100      	moveq	r1, #0
 80053b6:	f101 0418 	addeq.w	r4, r1, #24
 80053ba:	f103 0108 	add.w	r1, r3, #8
 80053be:	680a      	ldr	r2, [r1, #0]
 80053c0:	0a12      	lsrs	r2, r2, #8
 80053c2:	d01f      	beq.n	8005404 <forward_sign+0x84>
 80053c4:	684e      	ldr	r6, [r1, #4]
 80053c6:	4610      	mov	r0, r2
 80053c8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80053cc:	1f0f      	subs	r7, r1, #4
 80053ce:	f010 0103 	ands.w	r1, r0, #3
 80053d2:	d006      	beq.n	80053e2 <forward_sign+0x62>
 80053d4:	1e52      	subs	r2, r2, #1
 80053d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80053da:	1e49      	subs	r1, r1, #1
 80053dc:	fb0c f505 	mul.w	r5, ip, r5
 80053e0:	d1f8      	bne.n	80053d4 <forward_sign+0x54>
 80053e2:	0880      	lsrs	r0, r0, #2
 80053e4:	d00e      	beq.n	8005404 <forward_sign+0x84>
 80053e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80053ea:	3910      	subs	r1, #16
 80053ec:	68ca      	ldr	r2, [r1, #12]
 80053ee:	688e      	ldr	r6, [r1, #8]
 80053f0:	684f      	ldr	r7, [r1, #4]
 80053f2:	f851 c910 	ldr.w	ip, [r1], #-16
 80053f6:	4372      	muls	r2, r6
 80053f8:	437a      	muls	r2, r7
 80053fa:	fb0c f202 	mul.w	r2, ip, r2
 80053fe:	4355      	muls	r5, r2
 8005400:	1e40      	subs	r0, r0, #1
 8005402:	d1f3      	bne.n	80053ec <forward_sign+0x6c>
 8005404:	6998      	ldr	r0, [r3, #24]
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6880      	ldr	r0, [r0, #8]
 800540a:	6893      	ldr	r3, [r2, #8]
 800540c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005410:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005414:	1f09      	subs	r1, r1, #4
 8005416:	1f22      	subs	r2, r4, #4
 8005418:	4281      	cmp	r1, r0
 800541a:	d314      	bcc.n	8005446 <forward_sign+0xc6>
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	ed91 0a00 	vldr	s0, [r1]
 8005424:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	bfcc      	ite	gt
 800542e:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 800544c <.text_49>
 8005432:	ee00 3a10 	vmovle	s0, r3
 8005436:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800543a:	1f09      	subs	r1, r1, #4
 800543c:	ed82 0a00 	vstr	s0, [r2]
 8005440:	1f12      	subs	r2, r2, #4
 8005442:	4281      	cmp	r1, r0
 8005444:	d2ec      	bcs.n	8005420 <forward_sign+0xa0>
 8005446:	bcf0      	pop	{r4, r5, r6, r7}
 8005448:	4770      	bx	lr
	...

0800544c <.text_49>:
 800544c:	00000001 	.word	0x00000001

08005450 <nl_func_sqrt_array_f32>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	6880      	ldr	r0, [r0, #8]
 8005456:	68a1      	ldr	r1, [r4, #8]
 8005458:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800545c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005460:	1f1d      	subs	r5, r3, #4
 8005462:	1f16      	subs	r6, r2, #4
 8005464:	428d      	cmp	r5, r1
 8005466:	d30a      	bcc.n	800547e <nl_func_sqrt_array_f32+0x2e>
 8005468:	ed95 0a00 	vldr	s0, [r5]
 800546c:	1f2d      	subs	r5, r5, #4
 800546e:	f001 fbaf 	bl	8006bd0 <ai_math_sqrt>
 8005472:	ed86 0a00 	vstr	s0, [r6]
 8005476:	68a0      	ldr	r0, [r4, #8]
 8005478:	1f36      	subs	r6, r6, #4
 800547a:	4285      	cmp	r5, r0
 800547c:	d2f4      	bcs.n	8005468 <nl_func_sqrt_array_f32+0x18>
 800547e:	bd70      	pop	{r4, r5, r6, pc}

08005480 <forward_sqrt>:
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005482:	b081      	sub	sp, #4
 8005484:	6942      	ldr	r2, [r0, #20]
 8005486:	f04f 0501 	mov.w	r5, #1
 800548a:	8811      	ldrh	r1, [r2, #0]
 800548c:	2900      	cmp	r1, #0
 800548e:	bf1a      	itte	ne
 8005490:	6850      	ldrne	r0, [r2, #4]
 8005492:	1d00      	addne	r0, r0, #4
 8005494:	2004      	moveq	r0, #4
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	2800      	cmp	r0, #0
 800549a:	bf14      	ite	ne
 800549c:	6803      	ldrne	r3, [r0, #0]
 800549e:	2300      	moveq	r3, #0
 80054a0:	2902      	cmp	r1, #2
 80054a2:	bfa6      	itte	ge
 80054a4:	6850      	ldrge	r0, [r2, #4]
 80054a6:	3010      	addge	r0, #16
 80054a8:	2004      	movlt	r0, #4
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	bf19      	ittee	ne
 80054b0:	6800      	ldrne	r0, [r0, #0]
 80054b2:	f100 0418 	addne.w	r4, r0, #24
 80054b6:	2100      	moveq	r1, #0
 80054b8:	f101 0418 	addeq.w	r4, r1, #24
 80054bc:	f103 0108 	add.w	r1, r3, #8
 80054c0:	680a      	ldr	r2, [r1, #0]
 80054c2:	0a12      	lsrs	r2, r2, #8
 80054c4:	d01f      	beq.n	8005506 <forward_sqrt+0x86>
 80054c6:	684e      	ldr	r6, [r1, #4]
 80054c8:	4610      	mov	r0, r2
 80054ca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80054ce:	1f0f      	subs	r7, r1, #4
 80054d0:	f010 0103 	ands.w	r1, r0, #3
 80054d4:	d006      	beq.n	80054e4 <forward_sqrt+0x64>
 80054d6:	1e52      	subs	r2, r2, #1
 80054d8:	f857 c904 	ldr.w	ip, [r7], #-4
 80054dc:	1e49      	subs	r1, r1, #1
 80054de:	fb0c f505 	mul.w	r5, ip, r5
 80054e2:	d1f8      	bne.n	80054d6 <forward_sqrt+0x56>
 80054e4:	0880      	lsrs	r0, r0, #2
 80054e6:	d00e      	beq.n	8005506 <forward_sqrt+0x86>
 80054e8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80054ec:	3910      	subs	r1, #16
 80054ee:	68ca      	ldr	r2, [r1, #12]
 80054f0:	688e      	ldr	r6, [r1, #8]
 80054f2:	684f      	ldr	r7, [r1, #4]
 80054f4:	f851 c910 	ldr.w	ip, [r1], #-16
 80054f8:	4372      	muls	r2, r6
 80054fa:	437a      	muls	r2, r7
 80054fc:	fb0c f202 	mul.w	r2, ip, r2
 8005500:	4355      	muls	r5, r2
 8005502:	1e40      	subs	r0, r0, #1
 8005504:	d1f3      	bne.n	80054ee <forward_sqrt+0x6e>
 8005506:	699e      	ldr	r6, [r3, #24]
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	68b0      	ldr	r0, [r6, #8]
 800550c:	6893      	ldr	r3, [r2, #8]
 800550e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005512:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005516:	1f0f      	subs	r7, r1, #4
 8005518:	1f24      	subs	r4, r4, #4
 800551a:	4287      	cmp	r7, r0
 800551c:	f0c0 800b 	bcc.w	8005536 <forward_sqrt+0xb6>
 8005520:	ed97 0a00 	vldr	s0, [r7]
 8005524:	1f3f      	subs	r7, r7, #4
 8005526:	f001 fb53 	bl	8006bd0 <ai_math_sqrt>
 800552a:	ed84 0a00 	vstr	s0, [r4]
 800552e:	68b0      	ldr	r0, [r6, #8]
 8005530:	1f24      	subs	r4, r4, #4
 8005532:	4287      	cmp	r7, r0
 8005534:	d2f4      	bcs.n	8005520 <forward_sqrt+0xa0>
 8005536:	b001      	add	sp, #4
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800553c <nl_func_soft_plus_array_f32>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	688c      	ldr	r4, [r1, #8]
 8005540:	6880      	ldr	r0, [r0, #8]
 8005542:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005546:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800554a:	1f0d      	subs	r5, r1, #4
 800554c:	1f16      	subs	r6, r2, #4
 800554e:	42a5      	cmp	r5, r4
 8005550:	f0c0 8010 	bcc.w	8005574 <nl_func_soft_plus_array_f32+0x38>
 8005554:	ed95 0a00 	vldr	s0, [r5]
 8005558:	1f2d      	subs	r5, r5, #4
 800555a:	f00d fedd 	bl	8013318 <expf>
 800555e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005562:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005566:	f00d ff9f 	bl	80134a8 <logf>
 800556a:	ed86 0a00 	vstr	s0, [r6]
 800556e:	1f36      	subs	r6, r6, #4
 8005570:	42a5      	cmp	r5, r4
 8005572:	d2ef      	bcs.n	8005554 <nl_func_soft_plus_array_f32+0x18>
 8005574:	bd70      	pop	{r4, r5, r6, pc}
	...

08005578 <forward_soft_plus>:
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	b081      	sub	sp, #4
 800557c:	6942      	ldr	r2, [r0, #20]
 800557e:	f04f 0501 	mov.w	r5, #1
 8005582:	8811      	ldrh	r1, [r2, #0]
 8005584:	2900      	cmp	r1, #0
 8005586:	bf1a      	itte	ne
 8005588:	6850      	ldrne	r0, [r2, #4]
 800558a:	1d00      	addne	r0, r0, #4
 800558c:	2004      	moveq	r0, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	2800      	cmp	r0, #0
 8005592:	bf14      	ite	ne
 8005594:	6803      	ldrne	r3, [r0, #0]
 8005596:	2300      	moveq	r3, #0
 8005598:	2902      	cmp	r1, #2
 800559a:	bfa6      	itte	ge
 800559c:	6850      	ldrge	r0, [r2, #4]
 800559e:	3010      	addge	r0, #16
 80055a0:	2004      	movlt	r0, #4
 80055a2:	6800      	ldr	r0, [r0, #0]
 80055a4:	2800      	cmp	r0, #0
 80055a6:	bf19      	ittee	ne
 80055a8:	6800      	ldrne	r0, [r0, #0]
 80055aa:	f100 0418 	addne.w	r4, r0, #24
 80055ae:	2100      	moveq	r1, #0
 80055b0:	f101 0418 	addeq.w	r4, r1, #24
 80055b4:	f103 0108 	add.w	r1, r3, #8
 80055b8:	680a      	ldr	r2, [r1, #0]
 80055ba:	0a12      	lsrs	r2, r2, #8
 80055bc:	d01f      	beq.n	80055fe <forward_soft_plus+0x86>
 80055be:	684e      	ldr	r6, [r1, #4]
 80055c0:	4610      	mov	r0, r2
 80055c2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80055c6:	1f0f      	subs	r7, r1, #4
 80055c8:	f010 0103 	ands.w	r1, r0, #3
 80055cc:	d006      	beq.n	80055dc <forward_soft_plus+0x64>
 80055ce:	1e52      	subs	r2, r2, #1
 80055d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80055d4:	1e49      	subs	r1, r1, #1
 80055d6:	fb0c f505 	mul.w	r5, ip, r5
 80055da:	d1f8      	bne.n	80055ce <forward_soft_plus+0x56>
 80055dc:	0880      	lsrs	r0, r0, #2
 80055de:	d00e      	beq.n	80055fe <forward_soft_plus+0x86>
 80055e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80055e4:	3910      	subs	r1, #16
 80055e6:	68ca      	ldr	r2, [r1, #12]
 80055e8:	688e      	ldr	r6, [r1, #8]
 80055ea:	684f      	ldr	r7, [r1, #4]
 80055ec:	f851 c910 	ldr.w	ip, [r1], #-16
 80055f0:	4372      	muls	r2, r6
 80055f2:	437a      	muls	r2, r7
 80055f4:	fb0c f202 	mul.w	r2, ip, r2
 80055f8:	4355      	muls	r5, r2
 80055fa:	1e40      	subs	r0, r0, #1
 80055fc:	d1f3      	bne.n	80055e6 <forward_soft_plus+0x6e>
 80055fe:	6998      	ldr	r0, [r3, #24]
 8005600:	6821      	ldr	r1, [r4, #0]
 8005602:	6886      	ldr	r6, [r0, #8]
 8005604:	688a      	ldr	r2, [r1, #8]
 8005606:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800560a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800560e:	1f07      	subs	r7, r0, #4
 8005610:	1f1c      	subs	r4, r3, #4
 8005612:	42b7      	cmp	r7, r6
 8005614:	f0c0 8010 	bcc.w	8005638 <forward_soft_plus+0xc0>
 8005618:	ed97 0a00 	vldr	s0, [r7]
 800561c:	1f3f      	subs	r7, r7, #4
 800561e:	f00d fe7b 	bl	8013318 <expf>
 8005622:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005626:	ee30 0a20 	vadd.f32	s0, s0, s1
 800562a:	f00d ff3d 	bl	80134a8 <logf>
 800562e:	ed84 0a00 	vstr	s0, [r4]
 8005632:	1f24      	subs	r4, r4, #4
 8005634:	42b7      	cmp	r7, r6
 8005636:	d2ef      	bcs.n	8005618 <forward_soft_plus+0xa0>
 8005638:	b001      	add	sp, #4
 800563a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563c <nl_func_soft_sign_array_f32>:
 800563c:	6889      	ldr	r1, [r1, #8]
 800563e:	6880      	ldr	r0, [r0, #8]
 8005640:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005644:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005648:	1f1b      	subs	r3, r3, #4
 800564a:	1f10      	subs	r0, r2, #4
 800564c:	428b      	cmp	r3, r1
 800564e:	d30f      	bcc.n	8005670 <nl_func_soft_sign_array_f32+0x34>
 8005650:	ed93 0a00 	vldr	s0, [r3]
 8005654:	1f1b      	subs	r3, r3, #4
 8005656:	eef0 0ac0 	vabs.f32	s1, s0
 800565a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800565e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005662:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005666:	ed80 0a00 	vstr	s0, [r0]
 800566a:	1f00      	subs	r0, r0, #4
 800566c:	428b      	cmp	r3, r1
 800566e:	d2ef      	bcs.n	8005650 <nl_func_soft_sign_array_f32+0x14>
 8005670:	4770      	bx	lr
	...

08005674 <forward_soft_sign>:
 8005674:	b4f0      	push	{r4, r5, r6, r7}
 8005676:	6942      	ldr	r2, [r0, #20]
 8005678:	f04f 0501 	mov.w	r5, #1
 800567c:	8811      	ldrh	r1, [r2, #0]
 800567e:	2900      	cmp	r1, #0
 8005680:	bf1a      	itte	ne
 8005682:	6850      	ldrne	r0, [r2, #4]
 8005684:	1d00      	addne	r0, r0, #4
 8005686:	2004      	moveq	r0, #4
 8005688:	6800      	ldr	r0, [r0, #0]
 800568a:	2800      	cmp	r0, #0
 800568c:	bf14      	ite	ne
 800568e:	6803      	ldrne	r3, [r0, #0]
 8005690:	2300      	moveq	r3, #0
 8005692:	2902      	cmp	r1, #2
 8005694:	bfa6      	itte	ge
 8005696:	6850      	ldrge	r0, [r2, #4]
 8005698:	3010      	addge	r0, #16
 800569a:	2004      	movlt	r0, #4
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	2800      	cmp	r0, #0
 80056a0:	bf19      	ittee	ne
 80056a2:	6800      	ldrne	r0, [r0, #0]
 80056a4:	f100 0418 	addne.w	r4, r0, #24
 80056a8:	2100      	moveq	r1, #0
 80056aa:	f101 0418 	addeq.w	r4, r1, #24
 80056ae:	f103 0108 	add.w	r1, r3, #8
 80056b2:	680a      	ldr	r2, [r1, #0]
 80056b4:	0a12      	lsrs	r2, r2, #8
 80056b6:	d01f      	beq.n	80056f8 <forward_soft_sign+0x84>
 80056b8:	684e      	ldr	r6, [r1, #4]
 80056ba:	4610      	mov	r0, r2
 80056bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80056c0:	1f0f      	subs	r7, r1, #4
 80056c2:	f010 0103 	ands.w	r1, r0, #3
 80056c6:	d006      	beq.n	80056d6 <forward_soft_sign+0x62>
 80056c8:	1e52      	subs	r2, r2, #1
 80056ca:	f857 c904 	ldr.w	ip, [r7], #-4
 80056ce:	1e49      	subs	r1, r1, #1
 80056d0:	fb0c f505 	mul.w	r5, ip, r5
 80056d4:	d1f8      	bne.n	80056c8 <forward_soft_sign+0x54>
 80056d6:	0880      	lsrs	r0, r0, #2
 80056d8:	d00e      	beq.n	80056f8 <forward_soft_sign+0x84>
 80056da:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80056de:	3910      	subs	r1, #16
 80056e0:	68ca      	ldr	r2, [r1, #12]
 80056e2:	688e      	ldr	r6, [r1, #8]
 80056e4:	684f      	ldr	r7, [r1, #4]
 80056e6:	f851 c910 	ldr.w	ip, [r1], #-16
 80056ea:	4372      	muls	r2, r6
 80056ec:	437a      	muls	r2, r7
 80056ee:	fb0c f202 	mul.w	r2, ip, r2
 80056f2:	4355      	muls	r5, r2
 80056f4:	1e40      	subs	r0, r0, #1
 80056f6:	d1f3      	bne.n	80056e0 <forward_soft_sign+0x6c>
 80056f8:	6998      	ldr	r0, [r3, #24]
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	6880      	ldr	r0, [r0, #8]
 80056fe:	6893      	ldr	r3, [r2, #8]
 8005700:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005704:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005708:	1f09      	subs	r1, r1, #4
 800570a:	1f22      	subs	r2, r4, #4
 800570c:	4281      	cmp	r1, r0
 800570e:	d30f      	bcc.n	8005730 <forward_soft_sign+0xbc>
 8005710:	ed91 0a00 	vldr	s0, [r1]
 8005714:	1f09      	subs	r1, r1, #4
 8005716:	eef0 0ac0 	vabs.f32	s1, s0
 800571a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800571e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005722:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005726:	ed82 0a00 	vstr	s0, [r2]
 800572a:	1f12      	subs	r2, r2, #4
 800572c:	4281      	cmp	r1, r0
 800572e:	d2ef      	bcs.n	8005710 <forward_soft_sign+0x9c>
 8005730:	bcf0      	pop	{r4, r5, r6, r7}
 8005732:	4770      	bx	lr

08005734 <nl_func_tanh_array_f32>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	688c      	ldr	r4, [r1, #8]
 8005738:	6880      	ldr	r0, [r0, #8]
 800573a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800573e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005742:	1f0d      	subs	r5, r1, #4
 8005744:	1f16      	subs	r6, r2, #4
 8005746:	42a5      	cmp	r5, r4
 8005748:	f0c0 800a 	bcc.w	8005760 <nl_func_tanh_array_f32+0x2c>
 800574c:	ed95 0a00 	vldr	s0, [r5]
 8005750:	1f2d      	subs	r5, r5, #4
 8005752:	f00e f9ff 	bl	8013b54 <tanhf>
 8005756:	ed86 0a00 	vstr	s0, [r6]
 800575a:	1f36      	subs	r6, r6, #4
 800575c:	42a5      	cmp	r5, r4
 800575e:	d2f5      	bcs.n	800574c <nl_func_tanh_array_f32+0x18>
 8005760:	bd70      	pop	{r4, r5, r6, pc}
	...

08005764 <forward_tanh>:
 8005764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005766:	b081      	sub	sp, #4
 8005768:	6942      	ldr	r2, [r0, #20]
 800576a:	f04f 0501 	mov.w	r5, #1
 800576e:	8811      	ldrh	r1, [r2, #0]
 8005770:	2900      	cmp	r1, #0
 8005772:	bf1a      	itte	ne
 8005774:	6850      	ldrne	r0, [r2, #4]
 8005776:	1d00      	addne	r0, r0, #4
 8005778:	2004      	moveq	r0, #4
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	2800      	cmp	r0, #0
 800577e:	bf14      	ite	ne
 8005780:	6803      	ldrne	r3, [r0, #0]
 8005782:	2300      	moveq	r3, #0
 8005784:	2902      	cmp	r1, #2
 8005786:	bfa6      	itte	ge
 8005788:	6850      	ldrge	r0, [r2, #4]
 800578a:	3010      	addge	r0, #16
 800578c:	2004      	movlt	r0, #4
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	2800      	cmp	r0, #0
 8005792:	bf19      	ittee	ne
 8005794:	6800      	ldrne	r0, [r0, #0]
 8005796:	f100 0418 	addne.w	r4, r0, #24
 800579a:	2100      	moveq	r1, #0
 800579c:	f101 0418 	addeq.w	r4, r1, #24
 80057a0:	f103 0108 	add.w	r1, r3, #8
 80057a4:	680a      	ldr	r2, [r1, #0]
 80057a6:	0a12      	lsrs	r2, r2, #8
 80057a8:	d01f      	beq.n	80057ea <forward_tanh+0x86>
 80057aa:	684e      	ldr	r6, [r1, #4]
 80057ac:	4610      	mov	r0, r2
 80057ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80057b2:	1f0f      	subs	r7, r1, #4
 80057b4:	f010 0103 	ands.w	r1, r0, #3
 80057b8:	d006      	beq.n	80057c8 <forward_tanh+0x64>
 80057ba:	1e52      	subs	r2, r2, #1
 80057bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80057c0:	1e49      	subs	r1, r1, #1
 80057c2:	fb0c f505 	mul.w	r5, ip, r5
 80057c6:	d1f8      	bne.n	80057ba <forward_tanh+0x56>
 80057c8:	0880      	lsrs	r0, r0, #2
 80057ca:	d00e      	beq.n	80057ea <forward_tanh+0x86>
 80057cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80057d0:	3910      	subs	r1, #16
 80057d2:	68ca      	ldr	r2, [r1, #12]
 80057d4:	688e      	ldr	r6, [r1, #8]
 80057d6:	684f      	ldr	r7, [r1, #4]
 80057d8:	f851 c910 	ldr.w	ip, [r1], #-16
 80057dc:	4372      	muls	r2, r6
 80057de:	437a      	muls	r2, r7
 80057e0:	fb0c f202 	mul.w	r2, ip, r2
 80057e4:	4355      	muls	r5, r2
 80057e6:	1e40      	subs	r0, r0, #1
 80057e8:	d1f3      	bne.n	80057d2 <forward_tanh+0x6e>
 80057ea:	6998      	ldr	r0, [r3, #24]
 80057ec:	6821      	ldr	r1, [r4, #0]
 80057ee:	6886      	ldr	r6, [r0, #8]
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80057f6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80057fa:	1f07      	subs	r7, r0, #4
 80057fc:	1f1c      	subs	r4, r3, #4
 80057fe:	42b7      	cmp	r7, r6
 8005800:	f0c0 800a 	bcc.w	8005818 <forward_tanh+0xb4>
 8005804:	ed97 0a00 	vldr	s0, [r7]
 8005808:	1f3f      	subs	r7, r7, #4
 800580a:	f00e f9a3 	bl	8013b54 <tanhf>
 800580e:	ed84 0a00 	vstr	s0, [r4]
 8005812:	1f24      	subs	r4, r4, #4
 8005814:	42b7      	cmp	r7, r6
 8005816:	d2f5      	bcs.n	8005804 <forward_tanh+0xa0>
 8005818:	b001      	add	sp, #4
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800581c <nl_func_relu_array_f32>:
 800581c:	6889      	ldr	r1, [r1, #8]
 800581e:	6880      	ldr	r0, [r0, #8]
 8005820:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005824:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005828:	1f1b      	subs	r3, r3, #4
 800582a:	1f10      	subs	r0, r2, #4
 800582c:	428b      	cmp	r3, r1
 800582e:	d30e      	bcc.n	800584e <nl_func_relu_array_f32+0x32>
 8005830:	ed93 0a00 	vldr	s0, [r3]
 8005834:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	bf48      	it	mi
 800583e:	ed9f 0a7c 	vldrmi	s0, [pc, #496]	; 8005a30 <.text_62>
 8005842:	ed80 0a00 	vstr	s0, [r0]
 8005846:	1f1b      	subs	r3, r3, #4
 8005848:	1f00      	subs	r0, r0, #4
 800584a:	428b      	cmp	r3, r1
 800584c:	d2f0      	bcs.n	8005830 <nl_func_relu_array_f32+0x14>
 800584e:	4770      	bx	lr

08005850 <nl_func_sm_channel_f32>:
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4614      	mov	r4, r2
 8005856:	2c02      	cmp	r4, #2
 8005858:	ed2d 8b02 	vpush	{d8}
 800585c:	688f      	ldr	r7, [r1, #8]
 800585e:	6886      	ldr	r6, [r0, #8]
 8005860:	eddf 8a73 	vldr	s17, [pc, #460]	; 8005a30 <.text_62>
 8005864:	ed97 8a00 	vldr	s16, [r7]
 8005868:	d33d      	bcc.n	80058e6 <nl_func_sm_channel_f32+0x96>
 800586a:	1e61      	subs	r1, r4, #1
 800586c:	1d3a      	adds	r2, r7, #4
 800586e:	f011 0003 	ands.w	r0, r1, #3
 8005872:	d00c      	beq.n	800588e <nl_func_sm_channel_f32+0x3e>
 8005874:	ed92 0a00 	vldr	s0, [r2]
 8005878:	f102 0204 	add.w	r2, r2, #4
 800587c:	eeb4 0a48 	vcmp.f32	s0, s16
 8005880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005884:	bf58      	it	pl
 8005886:	eeb0 8a40 	vmovpl.f32	s16, s0
 800588a:	1e40      	subs	r0, r0, #1
 800588c:	d1f2      	bne.n	8005874 <nl_func_sm_channel_f32+0x24>
 800588e:	0889      	lsrs	r1, r1, #2
 8005890:	f000 802b 	beq.w	80058ea <nl_func_sm_channel_f32+0x9a>
 8005894:	ed92 0a00 	vldr	s0, [r2]
 8005898:	eeb4 0a48 	vcmp.f32	s0, s16
 800589c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a0:	bf58      	it	pl
 80058a2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058a6:	ed92 0a01 	vldr	s0, [r2, #4]
 80058aa:	eeb4 0a48 	vcmp.f32	s0, s16
 80058ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b2:	bf58      	it	pl
 80058b4:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058b8:	ed92 0a02 	vldr	s0, [r2, #8]
 80058bc:	eeb4 0a48 	vcmp.f32	s0, s16
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	bf58      	it	pl
 80058c6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058ca:	ed92 0a03 	vldr	s0, [r2, #12]
 80058ce:	f102 0210 	add.w	r2, r2, #16
 80058d2:	eeb4 0a48 	vcmp.f32	s0, s16
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	bf58      	it	pl
 80058dc:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058e0:	1e49      	subs	r1, r1, #1
 80058e2:	d1d7      	bne.n	8005894 <nl_func_sm_channel_f32+0x44>
 80058e4:	e001      	b.n	80058ea <nl_func_sm_channel_f32+0x9a>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d040      	beq.n	800596c <nl_func_sm_channel_f32+0x11c>
 80058ea:	46b0      	mov	r8, r6
 80058ec:	ea4f 0504 	mov.w	r5, r4
 80058f0:	ed97 0a00 	vldr	s0, [r7]
 80058f4:	1d3f      	adds	r7, r7, #4
 80058f6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80058fa:	f00d fd0d 	bl	8013318 <expf>
 80058fe:	1e6d      	subs	r5, r5, #1
 8005900:	ed88 0a00 	vstr	s0, [r8]
 8005904:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005908:	f108 0804 	add.w	r8, r8, #4
 800590c:	d1f0      	bne.n	80058f0 <nl_func_sm_channel_f32+0xa0>
 800590e:	f014 0003 	ands.w	r0, r4, #3
 8005912:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005916:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800591a:	d009      	beq.n	8005930 <nl_func_sm_channel_f32+0xe0>
 800591c:	edd6 0a00 	vldr	s1, [r6]
 8005920:	1e40      	subs	r0, r0, #1
 8005922:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005926:	edc6 0a00 	vstr	s1, [r6]
 800592a:	f106 0604 	add.w	r6, r6, #4
 800592e:	d1f5      	bne.n	800591c <nl_func_sm_channel_f32+0xcc>
 8005930:	08a4      	lsrs	r4, r4, #2
 8005932:	d01b      	beq.n	800596c <nl_func_sm_channel_f32+0x11c>
 8005934:	edd6 0a00 	vldr	s1, [r6]
 8005938:	1e64      	subs	r4, r4, #1
 800593a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800593e:	edc6 0a00 	vstr	s1, [r6]
 8005942:	ed96 1a01 	vldr	s2, [r6, #4]
 8005946:	ee21 1a00 	vmul.f32	s2, s2, s0
 800594a:	ed86 1a01 	vstr	s2, [r6, #4]
 800594e:	edd6 0a02 	vldr	s1, [r6, #8]
 8005952:	ed96 1a03 	vldr	s2, [r6, #12]
 8005956:	ee60 1a80 	vmul.f32	s3, s1, s0
 800595a:	ee61 0a00 	vmul.f32	s1, s2, s0
 800595e:	edc6 1a02 	vstr	s3, [r6, #8]
 8005962:	edc6 0a03 	vstr	s1, [r6, #12]
 8005966:	f106 0610 	add.w	r6, r6, #16
 800596a:	d1e3      	bne.n	8005934 <nl_func_sm_channel_f32+0xe4>
 800596c:	ecbd 8b02 	vpop	{d8}
 8005970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005974 <nl_func_sm_array_f32>:
 8005974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	9f08      	ldr	r7, [sp, #32]
 800597e:	68a8      	ldr	r0, [r5, #8]
 8005980:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005982:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005986:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800598a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800598e:	00bf      	lsls	r7, r7, #2
 8005990:	427f      	negs	r7, r7
 8005992:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8005996:	00b6      	lsls	r6, r6, #2
 8005998:	eb01 0a07 	add.w	sl, r1, r7
 800599c:	4276      	negs	r6, r6
 800599e:	45e2      	cmp	sl, ip
 80059a0:	eb02 0906 	add.w	r9, r2, r6
 80059a4:	d310      	bcc.n	80059c8 <nl_func_sm_array_f32+0x54>
 80059a6:	4698      	mov	r8, r3
 80059a8:	f8c5 a008 	str.w	sl, [r5, #8]
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c4 9008 	str.w	r9, [r4, #8]
 80059b2:	4642      	mov	r2, r8
 80059b4:	4629      	mov	r1, r5
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff ff4a 	bl	8005850 <nl_func_sm_channel_f32>
 80059bc:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80059c0:	44ba      	add	sl, r7
 80059c2:	44b1      	add	r9, r6
 80059c4:	45e2      	cmp	sl, ip
 80059c6:	d2ef      	bcs.n	80059a8 <nl_func_sm_array_f32+0x34>
 80059c8:	68e8      	ldr	r0, [r5, #12]
 80059ca:	60a8      	str	r0, [r5, #8]
 80059cc:	68e1      	ldr	r1, [r4, #12]
 80059ce:	60a1      	str	r1, [r4, #8]
 80059d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059d4 <nl_func_hard_sigmoid_array_f32>:
 80059d4:	6889      	ldr	r1, [r1, #8]
 80059d6:	6880      	ldr	r0, [r0, #8]
 80059d8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80059dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80059e0:	1f1b      	subs	r3, r3, #4
 80059e2:	1f10      	subs	r0, r2, #4
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d321      	bcc.n	8005a2c <nl_func_hard_sigmoid_array_f32+0x58>
 80059e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80059ec:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005cd8 <.text_68>
 80059f0:	edd3 1a00 	vldr	s3, [r3]
 80059f4:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8005cdc <.text_69>
 80059f8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80059fc:	ee01 1a82 	vmla.f32	s2, s3, s4
 8005a00:	eeb4 1a60 	vcmp.f32	s2, s1
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	da08      	bge.n	8005a1c <nl_func_hard_sigmoid_array_f32+0x48>
 8005a0a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	d505      	bpl.n	8005a20 <nl_func_hard_sigmoid_array_f32+0x4c>
 8005a14:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8005a30 <.text_62>
 8005a18:	e002      	b.n	8005a20 <nl_func_hard_sigmoid_array_f32+0x4c>
 8005a1a:	bf00      	nop
 8005a1c:	eeb0 1a40 	vmov.f32	s2, s0
 8005a20:	ed80 1a00 	vstr	s2, [r0]
 8005a24:	1f1b      	subs	r3, r3, #4
 8005a26:	1f00      	subs	r0, r0, #4
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	d2e1      	bcs.n	80059f0 <nl_func_hard_sigmoid_array_f32+0x1c>
 8005a2c:	4770      	bx	lr
	...

08005a30 <.text_62>:
 8005a30:	00000000 	.word	0x00000000

08005a34 <nl_func_clip_array_f32>:
 8005a34:	6889      	ldr	r1, [r1, #8]
 8005a36:	6880      	ldr	r0, [r0, #8]
 8005a38:	ed93 0a00 	vldr	s0, [r3]
 8005a3c:	edd3 0a01 	vldr	s1, [r3, #4]
 8005a40:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005a44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a48:	1f1b      	subs	r3, r3, #4
 8005a4a:	1f10      	subs	r0, r2, #4
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	d315      	bcc.n	8005a7c <nl_func_clip_array_f32+0x48>
 8005a50:	ed93 1a00 	vldr	s2, [r3]
 8005a54:	eeb4 0a41 	vcmp.f32	s0, s2
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	bf58      	it	pl
 8005a5e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8005a62:	eeb4 1a60 	vcmp.f32	s2, s1
 8005a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6a:	bf58      	it	pl
 8005a6c:	eeb0 1a60 	vmovpl.f32	s2, s1
 8005a70:	ed80 1a00 	vstr	s2, [r0]
 8005a74:	1f1b      	subs	r3, r3, #4
 8005a76:	1f00      	subs	r0, r0, #4
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	d2e9      	bcs.n	8005a50 <nl_func_clip_array_f32+0x1c>
 8005a7c:	4770      	bx	lr
	...

08005a80 <nl_func_hardmax_array_f32>:
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	6852      	ldr	r2, [r2, #4]
 8005a86:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8005a8a:	6855      	ldr	r5, [r2, #4]
 8005a8c:	688e      	ldr	r6, [r1, #8]
 8005a8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a92:	68d4      	ldr	r4, [r2, #12]
 8005a94:	4640      	mov	r0, r8
 8005a96:	436c      	muls	r4, r5
 8005a98:	00a1      	lsls	r1, r4, #2
 8005a9a:	f00a fd0d 	bl	80104b8 <__aeabi_memclr>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2c00      	cmp	r4, #0
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	f000 805d 	beq.w	8005b62 <nl_func_hardmax_array_f32+0xe2>
 8005aa8:	f102 0c01 	add.w	ip, r2, #1
 8005aac:	eb05 0e02 	add.w	lr, r5, r2
 8005ab0:	45f4      	cmp	ip, lr
 8005ab2:	edd3 0a00 	vldr	s1, [r3]
 8005ab6:	d24b      	bcs.n	8005b50 <nl_func_hardmax_array_f32+0xd0>
 8005ab8:	1e69      	subs	r1, r5, #1
 8005aba:	f011 0003 	ands.w	r0, r1, #3
 8005abe:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8005ac2:	d00f      	beq.n	8005ae4 <nl_func_hardmax_array_f32+0x64>
 8005ac4:	ed97 1a00 	vldr	s2, [r7]
 8005ac8:	f107 0704 	add.w	r7, r7, #4
 8005acc:	eef4 0a41 	vcmp.f32	s1, s2
 8005ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad4:	bf44      	itt	mi
 8005ad6:	eef0 0a41 	vmovmi.f32	s1, s2
 8005ada:	4662      	movmi	r2, ip
 8005adc:	1e40      	subs	r0, r0, #1
 8005ade:	f10c 0c01 	add.w	ip, ip, #1
 8005ae2:	d1ef      	bne.n	8005ac4 <nl_func_hardmax_array_f32+0x44>
 8005ae4:	0889      	lsrs	r1, r1, #2
 8005ae6:	d033      	beq.n	8005b50 <nl_func_hardmax_array_f32+0xd0>
 8005ae8:	ed97 1a00 	vldr	s2, [r7]
 8005aec:	eef4 0a41 	vcmp.f32	s1, s2
 8005af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af4:	bf44      	itt	mi
 8005af6:	eef0 0a41 	vmovmi.f32	s1, s2
 8005afa:	4662      	movmi	r2, ip
 8005afc:	ed97 1a01 	vldr	s2, [r7, #4]
 8005b00:	f10c 0c01 	add.w	ip, ip, #1
 8005b04:	eef4 0a41 	vcmp.f32	s1, s2
 8005b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0c:	bf44      	itt	mi
 8005b0e:	eef0 0a41 	vmovmi.f32	s1, s2
 8005b12:	4662      	movmi	r2, ip
 8005b14:	ed97 1a02 	vldr	s2, [r7, #8]
 8005b18:	f10c 0c01 	add.w	ip, ip, #1
 8005b1c:	eef4 0a41 	vcmp.f32	s1, s2
 8005b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b24:	bf44      	itt	mi
 8005b26:	eef0 0a41 	vmovmi.f32	s1, s2
 8005b2a:	4662      	movmi	r2, ip
 8005b2c:	ed97 1a03 	vldr	s2, [r7, #12]
 8005b30:	f10c 0c01 	add.w	ip, ip, #1
 8005b34:	eef4 0a41 	vcmp.f32	s1, s2
 8005b38:	f107 0710 	add.w	r7, r7, #16
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	bf44      	itt	mi
 8005b42:	eef0 0a41 	vmovmi.f32	s1, s2
 8005b46:	4662      	movmi	r2, ip
 8005b48:	1e49      	subs	r1, r1, #1
 8005b4a:	f10c 0c01 	add.w	ip, ip, #1
 8005b4e:	d1cb      	bne.n	8005ae8 <nl_func_hardmax_array_f32+0x68>
 8005b50:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8005b54:	4672      	mov	r2, lr
 8005b56:	42a2      	cmp	r2, r4
 8005b58:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005b5c:	ed80 0a00 	vstr	s0, [r0]
 8005b60:	d3a2      	bcc.n	8005aa8 <nl_func_hardmax_array_f32+0x28>
 8005b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b68 <nl_func_relu_generic_array_f32>:
 8005b68:	6880      	ldr	r0, [r0, #8]
 8005b6a:	6889      	ldr	r1, [r1, #8]
 8005b6c:	ed93 0a00 	vldr	s0, [r3]
 8005b70:	edd3 0a01 	vldr	s1, [r3, #4]
 8005b74:	ed93 1a02 	vldr	s2, [r3, #8]
 8005b78:	1f03      	subs	r3, r0, #4
 8005b7a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005b7e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8005b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b86:	f1a1 0c04 	sub.w	ip, r1, #4
 8005b8a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8005b8e:	d52b      	bpl.n	8005be8 <nl_func_relu_generic_array_f32+0x80>
 8005b90:	eef5 0a40 	vcmp.f32	s1, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d014      	beq.n	8005bc4 <nl_func_relu_generic_array_f32+0x5c>
 8005b9a:	428a      	cmp	r2, r1
 8005b9c:	f0c0 8011 	bcc.w	8005bc2 <nl_func_relu_generic_array_f32+0x5a>
 8005ba0:	ed92 1a00 	vldr	s2, [r2]
 8005ba4:	eeb4 1a40 	vcmp.f32	s2, s0
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	bf44      	itt	mi
 8005bae:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 8005bb2:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8005bb6:	ed80 1a00 	vstr	s2, [r0]
 8005bba:	1f12      	subs	r2, r2, #4
 8005bbc:	1f00      	subs	r0, r0, #4
 8005bbe:	428a      	cmp	r2, r1
 8005bc0:	d2ee      	bcs.n	8005ba0 <nl_func_relu_generic_array_f32+0x38>
 8005bc2:	4770      	bx	lr
 8005bc4:	428a      	cmp	r2, r1
 8005bc6:	d3fc      	bcc.n	8005bc2 <nl_func_relu_generic_array_f32+0x5a>
 8005bc8:	edd2 0a00 	vldr	s1, [r2]
 8005bcc:	eef4 0a40 	vcmp.f32	s1, s0
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	bf48      	it	mi
 8005bd6:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8005e74 <.text_73>
 8005bda:	edc0 0a00 	vstr	s1, [r0]
 8005bde:	1f12      	subs	r2, r2, #4
 8005be0:	1f00      	subs	r0, r0, #4
 8005be2:	428a      	cmp	r2, r1
 8005be4:	d2f0      	bcs.n	8005bc8 <nl_func_relu_generic_array_f32+0x60>
 8005be6:	4770      	bx	lr
 8005be8:	428a      	cmp	r2, r1
 8005bea:	d3ea      	bcc.n	8005bc2 <nl_func_relu_generic_array_f32+0x5a>
 8005bec:	edd2 1a00 	vldr	s3, [r2]
 8005bf0:	eef4 1a41 	vcmp.f32	s3, s2
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	d50a      	bpl.n	8005c10 <nl_func_relu_generic_array_f32+0xa8>
 8005bfa:	eef4 1a40 	vcmp.f32	s3, s0
 8005bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c02:	d507      	bpl.n	8005c14 <nl_func_relu_generic_array_f32+0xac>
 8005c04:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8005c08:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8005c0c:	e002      	b.n	8005c14 <nl_func_relu_generic_array_f32+0xac>
 8005c0e:	bf00      	nop
 8005c10:	eef0 1a41 	vmov.f32	s3, s2
 8005c14:	edc0 1a00 	vstr	s3, [r0]
 8005c18:	1f12      	subs	r2, r2, #4
 8005c1a:	1f00      	subs	r0, r0, #4
 8005c1c:	428a      	cmp	r2, r1
 8005c1e:	d2e5      	bcs.n	8005bec <nl_func_relu_generic_array_f32+0x84>
 8005c20:	4770      	bx	lr
	...

08005c24 <nl_func_relu_thresholded_array_f32>:
 8005c24:	6889      	ldr	r1, [r1, #8]
 8005c26:	ed93 0a00 	vldr	s0, [r3]
 8005c2a:	6880      	ldr	r0, [r0, #8]
 8005c2c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005c30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c34:	1f1b      	subs	r3, r3, #4
 8005c36:	1f10      	subs	r0, r2, #4
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	d30e      	bcc.n	8005c5a <nl_func_relu_thresholded_array_f32+0x36>
 8005c3c:	edd3 0a00 	vldr	s1, [r3]
 8005c40:	eef4 0a40 	vcmp.f32	s1, s0
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	bf48      	it	mi
 8005c4a:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8005e74 <.text_73>
 8005c4e:	edc0 0a00 	vstr	s1, [r0]
 8005c52:	1f1b      	subs	r3, r3, #4
 8005c54:	1f00      	subs	r0, r0, #4
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d2f0      	bcs.n	8005c3c <nl_func_relu_thresholded_array_f32+0x18>
 8005c5a:	4770      	bx	lr

08005c5c <nl_func_elu_array_f32>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	ed2d 8b04 	vpush	{d8-d9}
 8005c62:	688c      	ldr	r4, [r1, #8]
 8005c64:	6880      	ldr	r0, [r0, #8]
 8005c66:	ed93 8a00 	vldr	s16, [r3]
 8005c6a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005c6e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c72:	1f0d      	subs	r5, r1, #4
 8005c74:	1f16      	subs	r6, r2, #4
 8005c76:	42a5      	cmp	r5, r4
 8005c78:	f0c0 802a 	bcc.w	8005cd0 <nl_func_elu_array_f32+0x74>
 8005c7c:	edd5 8a00 	vldr	s17, [r5]
 8005c80:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c88:	eeb0 0a68 	vmov.f32	s0, s17
 8005c8c:	bf4c      	ite	mi
 8005c8e:	ed9f 9a79 	vldrmi	s18, [pc, #484]	; 8005e74 <.text_73>
 8005c92:	eeb0 9a68 	vmovpl.f32	s18, s17
 8005c96:	f00d fb3f 	bl	8013318 <expf>
 8005c9a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005c9e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005ca2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005ca6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	dc09      	bgt.n	8005cc4 <nl_func_elu_array_f32+0x68>
 8005cb0:	eeb0 0a68 	vmov.f32	s0, s17
 8005cb4:	f00d fb30 	bl	8013318 <expf>
 8005cb8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005cbc:	ee30 1a01 	vadd.f32	s2, s0, s2
 8005cc0:	ee01 9a08 	vmla.f32	s18, s2, s16
 8005cc4:	ed86 9a00 	vstr	s18, [r6]
 8005cc8:	1f2d      	subs	r5, r5, #4
 8005cca:	1f36      	subs	r6, r6, #4
 8005ccc:	42a5      	cmp	r5, r4
 8005cce:	d2d5      	bcs.n	8005c7c <nl_func_elu_array_f32+0x20>
 8005cd0:	ecbd 8b04 	vpop	{d8-d9}
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cd8 <.text_68>:
 8005cd8:	3f800001 	.word	0x3f800001

08005cdc <.text_69>:
 8005cdc:	3e4ccccd 	.word	0x3e4ccccd

08005ce0 <nl_func_selu_array_f32>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	ed2d 8b04 	vpush	{d8-d9}
 8005ce6:	688c      	ldr	r4, [r1, #8]
 8005ce8:	6880      	ldr	r0, [r0, #8]
 8005cea:	ed93 8a00 	vldr	s16, [r3]
 8005cee:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005cf2:	edd3 8a01 	vldr	s17, [r3, #4]
 8005cf6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005cfa:	1f0d      	subs	r5, r1, #4
 8005cfc:	1f16      	subs	r6, r2, #4
 8005cfe:	42a5      	cmp	r5, r4
 8005d00:	f0c0 802c 	bcc.w	8005d5c <nl_func_selu_array_f32+0x7c>
 8005d04:	ed95 9a00 	vldr	s18, [r5]
 8005d08:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d10:	eeb0 0a49 	vmov.f32	s0, s18
 8005d14:	bf4c      	ite	mi
 8005d16:	eddf 9a57 	vldrmi	s19, [pc, #348]	; 8005e74 <.text_73>
 8005d1a:	eef0 9a49 	vmovpl.f32	s19, s18
 8005d1e:	f00d fafb 	bl	8013318 <expf>
 8005d22:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005d26:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005d2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005d2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	dc09      	bgt.n	8005d4c <nl_func_selu_array_f32+0x6c>
 8005d38:	eeb0 0a49 	vmov.f32	s0, s18
 8005d3c:	f00d faec 	bl	8013318 <expf>
 8005d40:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005d44:	ee30 1a01 	vadd.f32	s2, s0, s2
 8005d48:	ee41 9a08 	vmla.f32	s19, s2, s16
 8005d4c:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8005d50:	1f2d      	subs	r5, r5, #4
 8005d52:	ed86 0a00 	vstr	s0, [r6]
 8005d56:	1f36      	subs	r6, r6, #4
 8005d58:	42a5      	cmp	r5, r4
 8005d5a:	d2d3      	bcs.n	8005d04 <nl_func_selu_array_f32+0x24>
 8005d5c:	ecbd 8b04 	vpop	{d8-d9}
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d64 <nl_func_prelu_array_f32>:
 8005d64:	6889      	ldr	r1, [r1, #8]
 8005d66:	6880      	ldr	r0, [r0, #8]
 8005d68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005d6c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005d70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d74:	1f1b      	subs	r3, r3, #4
 8005d76:	f1ac 0c04 	sub.w	ip, ip, #4
 8005d7a:	1f10      	subs	r0, r2, #4
 8005d7c:	458c      	cmp	ip, r1
 8005d7e:	d320      	bcc.n	8005dc2 <nl_func_prelu_array_f32+0x5e>
 8005d80:	ed9c 0a00 	vldr	s0, [ip]
 8005d84:	461a      	mov	r2, r3
 8005d86:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005d8a:	f1ac 0c04 	sub.w	ip, ip, #4
 8005d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d92:	ed92 1a00 	vldr	s2, [r2]
 8005d96:	bf4c      	ite	mi
 8005d98:	eddf 0a36 	vldrmi	s1, [pc, #216]	; 8005e74 <.text_73>
 8005d9c:	eef0 0a40 	vmovpl.f32	s1, s0
 8005da0:	eeb1 0a40 	vneg.f32	s0, s0
 8005da4:	1f13      	subs	r3, r2, #4
 8005da6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	bf48      	it	mi
 8005db0:	ed9f 0a30 	vldrmi	s0, [pc, #192]	; 8005e74 <.text_73>
 8005db4:	ee41 0a40 	vmls.f32	s1, s2, s0
 8005db8:	edc0 0a00 	vstr	s1, [r0]
 8005dbc:	1f00      	subs	r0, r0, #4
 8005dbe:	458c      	cmp	ip, r1
 8005dc0:	d2de      	bcs.n	8005d80 <nl_func_prelu_array_f32+0x1c>
 8005dc2:	4770      	bx	lr

08005dc4 <forward_relu>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	6962      	ldr	r2, [r4, #20]
 8005dca:	8811      	ldrh	r1, [r2, #0]
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	bf1a      	itte	ne
 8005dd0:	6850      	ldrne	r0, [r2, #4]
 8005dd2:	1d00      	addne	r0, r0, #4
 8005dd4:	2004      	moveq	r0, #4
 8005dd6:	6800      	ldr	r0, [r0, #0]
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	bf14      	ite	ne
 8005ddc:	6805      	ldrne	r5, [r0, #0]
 8005dde:	2500      	moveq	r5, #0
 8005de0:	2902      	cmp	r1, #2
 8005de2:	bfa6      	itte	ge
 8005de4:	6850      	ldrge	r0, [r2, #4]
 8005de6:	3010      	addge	r0, #16
 8005de8:	2004      	movlt	r0, #4
 8005dea:	6800      	ldr	r0, [r0, #0]
 8005dec:	2800      	cmp	r0, #0
 8005dee:	bf19      	ittee	ne
 8005df0:	6800      	ldrne	r0, [r0, #0]
 8005df2:	f100 0618 	addne.w	r6, r0, #24
 8005df6:	2100      	moveq	r1, #0
 8005df8:	f101 0618 	addeq.w	r6, r1, #24
 8005dfc:	69a0      	ldr	r0, [r4, #24]
 8005dfe:	b9f8      	cbnz	r0, 8005e40 <forward_relu+0x7c>
 8005e00:	f105 0008 	add.w	r0, r5, #8
 8005e04:	f7fd ffd8 	bl	8003db8 <ai_shape_get_size>
 8005e08:	69a9      	ldr	r1, [r5, #24]
 8005e0a:	6833      	ldr	r3, [r6, #0]
 8005e0c:	6889      	ldr	r1, [r1, #8]
 8005e0e:	689c      	ldr	r4, [r3, #8]
 8005e10:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8005e14:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005e18:	1f12      	subs	r2, r2, #4
 8005e1a:	1f00      	subs	r0, r0, #4
 8005e1c:	428a      	cmp	r2, r1
 8005e1e:	d328      	bcc.n	8005e72 <forward_relu+0xae>
 8005e20:	ed92 0a00 	vldr	s0, [r2]
 8005e24:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	bf48      	it	mi
 8005e2e:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8005e74 <.text_73>
 8005e32:	ed80 0a00 	vstr	s0, [r0]
 8005e36:	1f12      	subs	r2, r2, #4
 8005e38:	1f00      	subs	r0, r0, #4
 8005e3a:	428a      	cmp	r2, r1
 8005e3c:	d2f0      	bcs.n	8005e20 <forward_relu+0x5c>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	6840      	ldr	r0, [r0, #4]
 8005e42:	2801      	cmp	r0, #1
 8005e44:	f105 0008 	add.w	r0, r5, #8
 8005e48:	d109      	bne.n	8005e5e <forward_relu+0x9a>
 8005e4a:	f7fd ffb5 	bl	8003db8 <ai_shape_get_size>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69a0      	ldr	r0, [r4, #24]
 8005e52:	69a9      	ldr	r1, [r5, #24]
 8005e54:	6883      	ldr	r3, [r0, #8]
 8005e56:	6830      	ldr	r0, [r6, #0]
 8005e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e5c:	e6e2      	b.n	8005c24 <nl_func_relu_thresholded_array_f32>
 8005e5e:	f7fd ffab 	bl	8003db8 <ai_shape_get_size>
 8005e62:	69a1      	ldr	r1, [r4, #24]
 8005e64:	4602      	mov	r2, r0
 8005e66:	6830      	ldr	r0, [r6, #0]
 8005e68:	688b      	ldr	r3, [r1, #8]
 8005e6a:	69a9      	ldr	r1, [r5, #24]
 8005e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e70:	e67a      	b.n	8005b68 <nl_func_relu_generic_array_f32>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}

08005e74 <.text_73>:
 8005e74:	00000000 	.word	0x00000000

08005e78 <forward_relu_thresholded>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	f04f 0601 	mov.w	r6, #1
 8005e80:	6953      	ldr	r3, [r2, #20]
 8005e82:	8819      	ldrh	r1, [r3, #0]
 8005e84:	2900      	cmp	r1, #0
 8005e86:	bf1a      	itte	ne
 8005e88:	6858      	ldrne	r0, [r3, #4]
 8005e8a:	1d00      	addne	r0, r0, #4
 8005e8c:	2004      	moveq	r0, #4
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	2800      	cmp	r0, #0
 8005e92:	bf14      	ite	ne
 8005e94:	6804      	ldrne	r4, [r0, #0]
 8005e96:	2400      	moveq	r4, #0
 8005e98:	2902      	cmp	r1, #2
 8005e9a:	bfa6      	itte	ge
 8005e9c:	6858      	ldrge	r0, [r3, #4]
 8005e9e:	3010      	addge	r0, #16
 8005ea0:	2004      	movlt	r0, #4
 8005ea2:	6800      	ldr	r0, [r0, #0]
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	bf19      	ittee	ne
 8005ea8:	6800      	ldrne	r0, [r0, #0]
 8005eaa:	f100 0518 	addne.w	r5, r0, #24
 8005eae:	2100      	moveq	r1, #0
 8005eb0:	f101 0518 	addeq.w	r5, r1, #24
 8005eb4:	f104 0108 	add.w	r1, r4, #8
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	d022      	beq.n	8005f04 <forward_relu_thresholded+0x8c>
 8005ebe:	684f      	ldr	r7, [r1, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005ec6:	f1a1 0c04 	sub.w	ip, r1, #4
 8005eca:	f010 0103 	ands.w	r1, r0, #3
 8005ece:	d006      	beq.n	8005ede <forward_relu_thresholded+0x66>
 8005ed0:	1e5b      	subs	r3, r3, #1
 8005ed2:	f85c e904 	ldr.w	lr, [ip], #-4
 8005ed6:	1e49      	subs	r1, r1, #1
 8005ed8:	fb0e f606 	mul.w	r6, lr, r6
 8005edc:	d1f8      	bne.n	8005ed0 <forward_relu_thresholded+0x58>
 8005ede:	0880      	lsrs	r0, r0, #2
 8005ee0:	d010      	beq.n	8005f04 <forward_relu_thresholded+0x8c>
 8005ee2:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005ee6:	3910      	subs	r1, #16
 8005ee8:	68cb      	ldr	r3, [r1, #12]
 8005eea:	688f      	ldr	r7, [r1, #8]
 8005eec:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005ef0:	f851 e910 	ldr.w	lr, [r1], #-16
 8005ef4:	437b      	muls	r3, r7
 8005ef6:	fb0c f303 	mul.w	r3, ip, r3
 8005efa:	fb0e f303 	mul.w	r3, lr, r3
 8005efe:	435e      	muls	r6, r3
 8005f00:	1e40      	subs	r0, r0, #1
 8005f02:	d1f1      	bne.n	8005ee8 <forward_relu_thresholded+0x70>
 8005f04:	6990      	ldr	r0, [r2, #24]
 8005f06:	682a      	ldr	r2, [r5, #0]
 8005f08:	6881      	ldr	r1, [r0, #8]
 8005f0a:	69a0      	ldr	r0, [r4, #24]
 8005f0c:	6880      	ldr	r0, [r0, #8]
 8005f0e:	6893      	ldr	r3, [r2, #8]
 8005f10:	ed91 0a00 	vldr	s0, [r1]
 8005f14:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8005f18:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8005f1c:	1f09      	subs	r1, r1, #4
 8005f1e:	1f22      	subs	r2, r4, #4
 8005f20:	4281      	cmp	r1, r0
 8005f22:	d30e      	bcc.n	8005f42 <forward_relu_thresholded+0xca>
 8005f24:	edd1 0a00 	vldr	s1, [r1]
 8005f28:	eef4 0a40 	vcmp.f32	s1, s0
 8005f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f30:	bf48      	it	mi
 8005f32:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8006238 <.text_80>
 8005f36:	edc2 0a00 	vstr	s1, [r2]
 8005f3a:	1f09      	subs	r1, r1, #4
 8005f3c:	1f12      	subs	r2, r2, #4
 8005f3e:	4281      	cmp	r1, r0
 8005f40:	d2f0      	bcs.n	8005f24 <forward_relu_thresholded+0xac>
 8005f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f44 <forward_elu>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	6962      	ldr	r2, [r4, #20]
 8005f4a:	8811      	ldrh	r1, [r2, #0]
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	bf1a      	itte	ne
 8005f50:	6850      	ldrne	r0, [r2, #4]
 8005f52:	1d00      	addne	r0, r0, #4
 8005f54:	2004      	moveq	r0, #4
 8005f56:	6800      	ldr	r0, [r0, #0]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bf14      	ite	ne
 8005f5c:	6805      	ldrne	r5, [r0, #0]
 8005f5e:	2500      	moveq	r5, #0
 8005f60:	2902      	cmp	r1, #2
 8005f62:	bfa6      	itte	ge
 8005f64:	6850      	ldrge	r0, [r2, #4]
 8005f66:	3010      	addge	r0, #16
 8005f68:	2004      	movlt	r0, #4
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	bf19      	ittee	ne
 8005f70:	6800      	ldrne	r0, [r0, #0]
 8005f72:	f100 0618 	addne.w	r6, r0, #24
 8005f76:	2100      	moveq	r1, #0
 8005f78:	f101 0618 	addeq.w	r6, r1, #24
 8005f7c:	f105 0008 	add.w	r0, r5, #8
 8005f80:	f7fd ff1a 	bl	8003db8 <ai_shape_get_size>
 8005f84:	69a1      	ldr	r1, [r4, #24]
 8005f86:	4602      	mov	r2, r0
 8005f88:	6830      	ldr	r0, [r6, #0]
 8005f8a:	688b      	ldr	r3, [r1, #8]
 8005f8c:	69a9      	ldr	r1, [r5, #24]
 8005f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f92:	e663      	b.n	8005c5c <nl_func_elu_array_f32>

08005f94 <forward_selu>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	6962      	ldr	r2, [r4, #20]
 8005f9a:	8811      	ldrh	r1, [r2, #0]
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	bf1a      	itte	ne
 8005fa0:	6850      	ldrne	r0, [r2, #4]
 8005fa2:	1d00      	addne	r0, r0, #4
 8005fa4:	2004      	moveq	r0, #4
 8005fa6:	6800      	ldr	r0, [r0, #0]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	bf14      	ite	ne
 8005fac:	6805      	ldrne	r5, [r0, #0]
 8005fae:	2500      	moveq	r5, #0
 8005fb0:	2902      	cmp	r1, #2
 8005fb2:	bfa6      	itte	ge
 8005fb4:	6850      	ldrge	r0, [r2, #4]
 8005fb6:	3010      	addge	r0, #16
 8005fb8:	2004      	movlt	r0, #4
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	bf19      	ittee	ne
 8005fc0:	6800      	ldrne	r0, [r0, #0]
 8005fc2:	f100 0618 	addne.w	r6, r0, #24
 8005fc6:	2100      	moveq	r1, #0
 8005fc8:	f101 0618 	addeq.w	r6, r1, #24
 8005fcc:	f105 0008 	add.w	r0, r5, #8
 8005fd0:	f7fd fef2 	bl	8003db8 <ai_shape_get_size>
 8005fd4:	69a1      	ldr	r1, [r4, #24]
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6830      	ldr	r0, [r6, #0]
 8005fda:	688b      	ldr	r3, [r1, #8]
 8005fdc:	69a9      	ldr	r1, [r5, #24]
 8005fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fe2:	e67d      	b.n	8005ce0 <nl_func_selu_array_f32>

08005fe4 <forward_prelu>:
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	6942      	ldr	r2, [r0, #20]
 8005fec:	8810      	ldrh	r0, [r2, #0]
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	bf1a      	itte	ne
 8005ff2:	6851      	ldrne	r1, [r2, #4]
 8005ff4:	1d09      	addne	r1, r1, #4
 8005ff6:	2104      	moveq	r1, #4
 8005ff8:	6809      	ldr	r1, [r1, #0]
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	bf19      	ittee	ne
 8005ffe:	6809      	ldrne	r1, [r1, #0]
 8006000:	f101 0518 	addne.w	r5, r1, #24
 8006004:	2300      	moveq	r3, #0
 8006006:	f103 0518 	addeq.w	r5, r3, #24
 800600a:	2801      	cmp	r0, #1
 800600c:	bfc6      	itte	gt
 800600e:	6851      	ldrgt	r1, [r2, #4]
 8006010:	3110      	addgt	r1, #16
 8006012:	2104      	movle	r1, #4
 8006014:	6809      	ldr	r1, [r1, #0]
 8006016:	2900      	cmp	r1, #0
 8006018:	bf19      	ittee	ne
 800601a:	6809      	ldrne	r1, [r1, #0]
 800601c:	f101 0618 	addne.w	r6, r1, #24
 8006020:	2300      	moveq	r3, #0
 8006022:	f103 0618 	addeq.w	r6, r3, #24
 8006026:	2802      	cmp	r0, #2
 8006028:	bfc6      	itte	gt
 800602a:	6850      	ldrgt	r0, [r2, #4]
 800602c:	301c      	addgt	r0, #28
 800602e:	2004      	movle	r0, #4
 8006030:	6800      	ldr	r0, [r0, #0]
 8006032:	2800      	cmp	r0, #0
 8006034:	bf14      	ite	ne
 8006036:	6804      	ldrne	r4, [r0, #0]
 8006038:	2400      	moveq	r4, #0
 800603a:	69a0      	ldr	r0, [r4, #24]
 800603c:	6887      	ldr	r7, [r0, #8]
 800603e:	b12c      	cbz	r4, 800604c <forward_prelu+0x68>
 8006040:	6841      	ldr	r1, [r0, #4]
 8006042:	6800      	ldr	r0, [r0, #0]
 8006044:	f000 fc84 	bl	8006950 <ai_array_get_byte_size>
 8006048:	4680      	mov	r8, r0
 800604a:	e001      	b.n	8006050 <forward_prelu+0x6c>
 800604c:	f04f 0801 	mov.w	r8, #1
 8006050:	6828      	ldr	r0, [r5, #0]
 8006052:	3408      	adds	r4, #8
 8006054:	6841      	ldr	r1, [r0, #4]
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f000 fc7a 	bl	8006950 <ai_array_get_byte_size>
 800605c:	4601      	mov	r1, r0
 800605e:	6828      	ldr	r0, [r5, #0]
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	6880      	ldr	r0, [r0, #8]
 8006064:	4401      	add	r1, r0
 8006066:	4288      	cmp	r0, r1
 8006068:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800606c:	9400      	str	r4, [sp, #0]
 800606e:	d240      	bcs.n	80060f2 <forward_prelu+0x10e>
 8006070:	9702      	str	r7, [sp, #8]
 8006072:	4607      	mov	r7, r0
 8006074:	9101      	str	r1, [sp, #4]
 8006076:	6829      	ldr	r1, [r5, #0]
 8006078:	f04f 0201 	mov.w	r2, #1
 800607c:	608f      	str	r7, [r1, #8]
 800607e:	6834      	ldr	r4, [r6, #0]
 8006080:	f8c4 9008 	str.w	r9, [r4, #8]
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	0a00      	lsrs	r0, r0, #8
 800608a:	d029      	beq.n	80060e0 <forward_prelu+0xfc>
 800608c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8006090:	4684      	mov	ip, r0
 8006092:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8006096:	f1a3 0a04 	sub.w	sl, r3, #4
 800609a:	f01c 0303 	ands.w	r3, ip, #3
 800609e:	d006      	beq.n	80060ae <forward_prelu+0xca>
 80060a0:	1e40      	subs	r0, r0, #1
 80060a2:	f85a b904 	ldr.w	fp, [sl], #-4
 80060a6:	1e5b      	subs	r3, r3, #1
 80060a8:	fb0b f202 	mul.w	r2, fp, r2
 80060ac:	d1f8      	bne.n	80060a0 <forward_prelu+0xbc>
 80060ae:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80060b2:	4663      	mov	r3, ip
 80060b4:	d014      	beq.n	80060e0 <forward_prelu+0xfc>
 80060b6:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80060ba:	3810      	subs	r0, #16
 80060bc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80060c0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80060c4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80060c8:	f850 b910 	ldr.w	fp, [r0], #-16
 80060cc:	1e5b      	subs	r3, r3, #1
 80060ce:	fb0e fc0c 	mul.w	ip, lr, ip
 80060d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80060d6:	fb0b fc0c 	mul.w	ip, fp, ip
 80060da:	fb0c f202 	mul.w	r2, ip, r2
 80060de:	d1ed      	bne.n	80060bc <forward_prelu+0xd8>
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	4620      	mov	r0, r4
 80060e4:	4447      	add	r7, r8
 80060e6:	44c1      	add	r9, r8
 80060e8:	f7ff fe3c 	bl	8005d64 <nl_func_prelu_array_f32>
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	4287      	cmp	r7, r0
 80060f0:	d3c1      	bcc.n	8006076 <forward_prelu+0x92>
 80060f2:	6828      	ldr	r0, [r5, #0]
 80060f4:	68c1      	ldr	r1, [r0, #12]
 80060f6:	6081      	str	r1, [r0, #8]
 80060f8:	6830      	ldr	r0, [r6, #0]
 80060fa:	68c2      	ldr	r2, [r0, #12]
 80060fc:	6082      	str	r2, [r0, #8]
 80060fe:	b003      	add	sp, #12
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006104 <forward_clip>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4604      	mov	r4, r0
 8006108:	6962      	ldr	r2, [r4, #20]
 800610a:	8811      	ldrh	r1, [r2, #0]
 800610c:	2900      	cmp	r1, #0
 800610e:	bf1a      	itte	ne
 8006110:	6850      	ldrne	r0, [r2, #4]
 8006112:	1d00      	addne	r0, r0, #4
 8006114:	2004      	moveq	r0, #4
 8006116:	6800      	ldr	r0, [r0, #0]
 8006118:	2800      	cmp	r0, #0
 800611a:	bf14      	ite	ne
 800611c:	6805      	ldrne	r5, [r0, #0]
 800611e:	2500      	moveq	r5, #0
 8006120:	2902      	cmp	r1, #2
 8006122:	bfa6      	itte	ge
 8006124:	6850      	ldrge	r0, [r2, #4]
 8006126:	3010      	addge	r0, #16
 8006128:	2004      	movlt	r0, #4
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	2800      	cmp	r0, #0
 800612e:	bf19      	ittee	ne
 8006130:	6800      	ldrne	r0, [r0, #0]
 8006132:	f100 0618 	addne.w	r6, r0, #24
 8006136:	2100      	moveq	r1, #0
 8006138:	f101 0618 	addeq.w	r6, r1, #24
 800613c:	f105 0008 	add.w	r0, r5, #8
 8006140:	f7fd fe3a 	bl	8003db8 <ai_shape_get_size>
 8006144:	69a1      	ldr	r1, [r4, #24]
 8006146:	4602      	mov	r2, r0
 8006148:	6830      	ldr	r0, [r6, #0]
 800614a:	688b      	ldr	r3, [r1, #8]
 800614c:	69a9      	ldr	r1, [r5, #24]
 800614e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006152:	e46f      	b.n	8005a34 <nl_func_clip_array_f32>

08006154 <forward_hard_sigmoid>:
 8006154:	b4f0      	push	{r4, r5, r6, r7}
 8006156:	6942      	ldr	r2, [r0, #20]
 8006158:	f04f 0501 	mov.w	r5, #1
 800615c:	8811      	ldrh	r1, [r2, #0]
 800615e:	2900      	cmp	r1, #0
 8006160:	bf1a      	itte	ne
 8006162:	6850      	ldrne	r0, [r2, #4]
 8006164:	1d00      	addne	r0, r0, #4
 8006166:	2004      	moveq	r0, #4
 8006168:	6800      	ldr	r0, [r0, #0]
 800616a:	2800      	cmp	r0, #0
 800616c:	bf14      	ite	ne
 800616e:	6803      	ldrne	r3, [r0, #0]
 8006170:	2300      	moveq	r3, #0
 8006172:	2902      	cmp	r1, #2
 8006174:	bfa6      	itte	ge
 8006176:	6850      	ldrge	r0, [r2, #4]
 8006178:	3010      	addge	r0, #16
 800617a:	2004      	movlt	r0, #4
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	2800      	cmp	r0, #0
 8006180:	bf19      	ittee	ne
 8006182:	6800      	ldrne	r0, [r0, #0]
 8006184:	f100 0418 	addne.w	r4, r0, #24
 8006188:	2100      	moveq	r1, #0
 800618a:	f101 0418 	addeq.w	r4, r1, #24
 800618e:	f103 0108 	add.w	r1, r3, #8
 8006192:	680a      	ldr	r2, [r1, #0]
 8006194:	0a12      	lsrs	r2, r2, #8
 8006196:	d01f      	beq.n	80061d8 <forward_hard_sigmoid+0x84>
 8006198:	684e      	ldr	r6, [r1, #4]
 800619a:	4610      	mov	r0, r2
 800619c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80061a0:	1f0f      	subs	r7, r1, #4
 80061a2:	f010 0103 	ands.w	r1, r0, #3
 80061a6:	d006      	beq.n	80061b6 <forward_hard_sigmoid+0x62>
 80061a8:	1e52      	subs	r2, r2, #1
 80061aa:	f857 c904 	ldr.w	ip, [r7], #-4
 80061ae:	1e49      	subs	r1, r1, #1
 80061b0:	fb0c f505 	mul.w	r5, ip, r5
 80061b4:	d1f8      	bne.n	80061a8 <forward_hard_sigmoid+0x54>
 80061b6:	0880      	lsrs	r0, r0, #2
 80061b8:	d00e      	beq.n	80061d8 <forward_hard_sigmoid+0x84>
 80061ba:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80061be:	3910      	subs	r1, #16
 80061c0:	68ca      	ldr	r2, [r1, #12]
 80061c2:	688e      	ldr	r6, [r1, #8]
 80061c4:	684f      	ldr	r7, [r1, #4]
 80061c6:	f851 c910 	ldr.w	ip, [r1], #-16
 80061ca:	4372      	muls	r2, r6
 80061cc:	437a      	muls	r2, r7
 80061ce:	fb0c f202 	mul.w	r2, ip, r2
 80061d2:	4355      	muls	r5, r2
 80061d4:	1e40      	subs	r0, r0, #1
 80061d6:	d1f3      	bne.n	80061c0 <forward_hard_sigmoid+0x6c>
 80061d8:	6998      	ldr	r0, [r3, #24]
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	6880      	ldr	r0, [r0, #8]
 80061de:	6893      	ldr	r3, [r2, #8]
 80061e0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80061e4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80061e8:	1f09      	subs	r1, r1, #4
 80061ea:	1f22      	subs	r2, r4, #4
 80061ec:	4281      	cmp	r1, r0
 80061ee:	d321      	bcc.n	8006234 <forward_hard_sigmoid+0xe0>
 80061f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80061f4:	eddf 0a11 	vldr	s1, [pc, #68]	; 800623c <.text_81>
 80061f8:	edd1 1a00 	vldr	s3, [r1]
 80061fc:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006240 <.text_82>
 8006200:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8006204:	ee01 1a82 	vmla.f32	s2, s3, s4
 8006208:	eeb4 1a60 	vcmp.f32	s2, s1
 800620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006210:	da08      	bge.n	8006224 <forward_hard_sigmoid+0xd0>
 8006212:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8006216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621a:	d505      	bpl.n	8006228 <forward_hard_sigmoid+0xd4>
 800621c:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8006238 <.text_80>
 8006220:	e002      	b.n	8006228 <forward_hard_sigmoid+0xd4>
 8006222:	bf00      	nop
 8006224:	eeb0 1a40 	vmov.f32	s2, s0
 8006228:	ed82 1a00 	vstr	s2, [r2]
 800622c:	1f09      	subs	r1, r1, #4
 800622e:	1f12      	subs	r2, r2, #4
 8006230:	4281      	cmp	r1, r0
 8006232:	d2e1      	bcs.n	80061f8 <forward_hard_sigmoid+0xa4>
 8006234:	bcf0      	pop	{r4, r5, r6, r7}
 8006236:	4770      	bx	lr

08006238 <.text_80>:
 8006238:	00000000 	.word	0x00000000

0800623c <.text_81>:
 800623c:	3f800001 	.word	0x3f800001

08006240 <.text_82>:
 8006240:	3e4ccccd 	.word	0x3e4ccccd

08006244 <forward_sm>:
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	b083      	sub	sp, #12
 8006248:	6942      	ldr	r2, [r0, #20]
 800624a:	8811      	ldrh	r1, [r2, #0]
 800624c:	2900      	cmp	r1, #0
 800624e:	bf1a      	itte	ne
 8006250:	6850      	ldrne	r0, [r2, #4]
 8006252:	1d00      	addne	r0, r0, #4
 8006254:	2004      	moveq	r0, #4
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	2800      	cmp	r0, #0
 800625a:	bf14      	ite	ne
 800625c:	6804      	ldrne	r4, [r0, #0]
 800625e:	2400      	moveq	r4, #0
 8006260:	2902      	cmp	r1, #2
 8006262:	bfa6      	itte	ge
 8006264:	6850      	ldrge	r0, [r2, #4]
 8006266:	3010      	addge	r0, #16
 8006268:	2004      	movlt	r0, #4
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	2800      	cmp	r0, #0
 800626e:	bf14      	ite	ne
 8006270:	6805      	ldrne	r5, [r0, #0]
 8006272:	2500      	moveq	r5, #0
 8006274:	68e0      	ldr	r0, [r4, #12]
 8006276:	68e9      	ldr	r1, [r5, #12]
 8006278:	6846      	ldr	r6, [r0, #4]
 800627a:	f104 0008 	add.w	r0, r4, #8
 800627e:	684f      	ldr	r7, [r1, #4]
 8006280:	f7fd fd9a 	bl	8003db8 <ai_shape_get_size>
 8006284:	4602      	mov	r2, r0
 8006286:	9701      	str	r7, [sp, #4]
 8006288:	9600      	str	r6, [sp, #0]
 800628a:	69a1      	ldr	r1, [r4, #24]
 800628c:	69a8      	ldr	r0, [r5, #24]
 800628e:	4633      	mov	r3, r6
 8006290:	f7ff fb70 	bl	8005974 <nl_func_sm_array_f32>
 8006294:	b003      	add	sp, #12
 8006296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006298 <forward_hardmax>:
 8006298:	b430      	push	{r4, r5}
 800629a:	6943      	ldr	r3, [r0, #20]
 800629c:	6980      	ldr	r0, [r0, #24]
 800629e:	881a      	ldrh	r2, [r3, #0]
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	bf1a      	itte	ne
 80062a4:	6859      	ldrne	r1, [r3, #4]
 80062a6:	1d09      	addne	r1, r1, #4
 80062a8:	2104      	moveq	r1, #4
 80062aa:	6809      	ldr	r1, [r1, #0]
 80062ac:	2900      	cmp	r1, #0
 80062ae:	bf14      	ite	ne
 80062b0:	680c      	ldrne	r4, [r1, #0]
 80062b2:	2400      	moveq	r4, #0
 80062b4:	2a02      	cmp	r2, #2
 80062b6:	bfa6      	itte	ge
 80062b8:	6859      	ldrge	r1, [r3, #4]
 80062ba:	3110      	addge	r1, #16
 80062bc:	2104      	movlt	r1, #4
 80062be:	6809      	ldr	r1, [r1, #0]
 80062c0:	6883      	ldr	r3, [r0, #8]
 80062c2:	2900      	cmp	r1, #0
 80062c4:	bf19      	ittee	ne
 80062c6:	6809      	ldrne	r1, [r1, #0]
 80062c8:	f101 0518 	addne.w	r5, r1, #24
 80062cc:	2200      	moveq	r2, #0
 80062ce:	f102 0518 	addeq.w	r5, r2, #24
 80062d2:	f104 0208 	add.w	r2, r4, #8
 80062d6:	69a1      	ldr	r1, [r4, #24]
 80062d8:	6828      	ldr	r0, [r5, #0]
 80062da:	bc30      	pop	{r4, r5}
 80062dc:	f7ff bbd0 	b.w	8005a80 <nl_func_hardmax_array_f32>

080062e0 <ai_array_fmt_name>:
 80062e0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80062e4:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80062e8:	d062      	beq.n	80063b0 <ai_array_fmt_name+0xd0>
 80062ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80062ee:	1a89      	subs	r1, r1, r2
 80062f0:	f000 8094 	beq.w	800641c <ai_array_fmt_name+0x13c>
 80062f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f8:	1a89      	subs	r1, r1, r2
 80062fa:	d071      	beq.n	80063e0 <ai_array_fmt_name+0x100>
 80062fc:	1a89      	subs	r1, r1, r2
 80062fe:	d063      	beq.n	80063c8 <ai_array_fmt_name+0xe8>
 8006300:	1fc9      	subs	r1, r1, #7
 8006302:	f000 808e 	beq.w	8006422 <ai_array_fmt_name+0x142>
 8006306:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800630a:	1a89      	subs	r1, r1, r2
 800630c:	d05f      	beq.n	80063ce <ai_array_fmt_name+0xee>
 800630e:	390f      	subs	r1, #15
 8006310:	f000 808a 	beq.w	8006428 <ai_array_fmt_name+0x148>
 8006314:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006318:	1a89      	subs	r1, r1, r2
 800631a:	d05b      	beq.n	80063d4 <ai_array_fmt_name+0xf4>
 800631c:	391f      	subs	r1, #31
 800631e:	f000 8086 	beq.w	800642e <ai_array_fmt_name+0x14e>
 8006322:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006326:	1a89      	subs	r1, r1, r2
 8006328:	d057      	beq.n	80063da <ai_array_fmt_name+0xfa>
 800632a:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006900 <.text_15>
 800632e:	1a89      	subs	r1, r1, r2
 8006330:	f000 808f 	beq.w	8006452 <ai_array_fmt_name+0x172>
 8006334:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006338:	1a89      	subs	r1, r1, r2
 800633a:	f000 8087 	beq.w	800644c <ai_array_fmt_name+0x16c>
 800633e:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006904 <.text_16>
 8006342:	1a89      	subs	r1, r1, r2
 8006344:	d05e      	beq.n	8006404 <ai_array_fmt_name+0x124>
 8006346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800634a:	1a89      	subs	r1, r1, r2
 800634c:	d057      	beq.n	80063fe <ai_array_fmt_name+0x11e>
 800634e:	1a89      	subs	r1, r1, r2
 8006350:	d049      	beq.n	80063e6 <ai_array_fmt_name+0x106>
 8006352:	1fc9      	subs	r1, r1, #7
 8006354:	d059      	beq.n	800640a <ai_array_fmt_name+0x12a>
 8006356:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800635a:	1a89      	subs	r1, r1, r2
 800635c:	d046      	beq.n	80063ec <ai_array_fmt_name+0x10c>
 800635e:	390f      	subs	r1, #15
 8006360:	d056      	beq.n	8006410 <ai_array_fmt_name+0x130>
 8006362:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006366:	1a89      	subs	r1, r1, r2
 8006368:	d043      	beq.n	80063f2 <ai_array_fmt_name+0x112>
 800636a:	391f      	subs	r1, #31
 800636c:	d053      	beq.n	8006416 <ai_array_fmt_name+0x136>
 800636e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006372:	1a89      	subs	r1, r1, r2
 8006374:	d040      	beq.n	80063f8 <ai_array_fmt_name+0x118>
 8006376:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006900 <.text_15>
 800637a:	1a89      	subs	r1, r1, r2
 800637c:	d063      	beq.n	8006446 <ai_array_fmt_name+0x166>
 800637e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006382:	1a89      	subs	r1, r1, r2
 8006384:	d05c      	beq.n	8006440 <ai_array_fmt_name+0x160>
 8006386:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006908 <.text_17>
 800638a:	1a89      	subs	r1, r1, r2
 800638c:	d019      	beq.n	80063c2 <ai_array_fmt_name+0xe2>
 800638e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006392:	1a89      	subs	r1, r1, r2
 8006394:	d00f      	beq.n	80063b6 <ai_array_fmt_name+0xd6>
 8006396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800639a:	1a89      	subs	r1, r1, r2
 800639c:	d00e      	beq.n	80063bc <ai_array_fmt_name+0xdc>
 800639e:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 800690c <.text_18>
 80063a2:	1a89      	subs	r1, r1, r2
 80063a4:	d049      	beq.n	800643a <ai_array_fmt_name+0x15a>
 80063a6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80063aa:	1a89      	subs	r1, r1, r2
 80063ac:	d042      	beq.n	8006434 <ai_array_fmt_name+0x154>
 80063ae:	e053      	b.n	8006458 <ai_array_fmt_name+0x178>
 80063b0:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80063b4:	4770      	bx	lr
 80063b6:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80063ba:	4770      	bx	lr
 80063bc:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80063c0:	4770      	bx	lr
 80063c2:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80063c6:	4770      	bx	lr
 80063c8:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80063cc:	4770      	bx	lr
 80063ce:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80063d2:	4770      	bx	lr
 80063d4:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80063d8:	4770      	bx	lr
 80063da:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80063de:	4770      	bx	lr
 80063e0:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80063e4:	4770      	bx	lr
 80063e6:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80063ea:	4770      	bx	lr
 80063ec:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80063f0:	4770      	bx	lr
 80063f2:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80063f6:	4770      	bx	lr
 80063f8:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80063fc:	4770      	bx	lr
 80063fe:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006402:	4770      	bx	lr
 8006404:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006408:	4770      	bx	lr
 800640a:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800640e:	4770      	bx	lr
 8006410:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006414:	4770      	bx	lr
 8006416:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800641a:	4770      	bx	lr
 800641c:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006420:	4770      	bx	lr
 8006422:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006426:	4770      	bx	lr
 8006428:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800642c:	4770      	bx	lr
 800642e:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8006432:	4770      	bx	lr
 8006434:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006438:	4770      	bx	lr
 800643a:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 800643e:	4770      	bx	lr
 8006440:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8006444:	4770      	bx	lr
 8006446:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800644a:	4770      	bx	lr
 800644c:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006450:	4770      	bx	lr
 8006452:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8006456:	4770      	bx	lr
 8006458:	f36f 000d 	bfc	r0, #0, #14
 800645c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006460:	2840      	cmp	r0, #64	; 0x40
 8006462:	d009      	beq.n	8006478 <ai_array_fmt_name+0x198>
 8006464:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006910 <.text_19>
 8006468:	4288      	cmp	r0, r1
 800646a:	d00b      	beq.n	8006484 <ai_array_fmt_name+0x1a4>
 800646c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006914 <.text_20>
 8006470:	4288      	cmp	r0, r1
 8006472:	d004      	beq.n	800647e <ai_array_fmt_name+0x19e>
 8006474:	a07a      	add	r0, pc, #488	; (adr r0, 8006660 <.text_8>)
 8006476:	4770      	bx	lr
 8006478:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800647c:	4770      	bx	lr
 800647e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8006482:	4770      	bx	lr
 8006484:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8006488:	4770      	bx	lr

0800648a <ai_array_fmt_exported>:
 800648a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800648e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006492:	d068      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 8006494:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006498:	1a89      	subs	r1, r1, r2
 800649a:	d064      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 800649c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a0:	1a89      	subs	r1, r1, r2
 80064a2:	d062      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064a4:	1a89      	subs	r1, r1, r2
 80064a6:	d05e      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064a8:	1fc9      	subs	r1, r1, #7
 80064aa:	d05c      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80064b0:	1a89      	subs	r1, r1, r2
 80064b2:	d058      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064b4:	390f      	subs	r1, #15
 80064b6:	d056      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80064bc:	1a89      	subs	r1, r1, r2
 80064be:	d054      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064c0:	391f      	subs	r1, #31
 80064c2:	d052      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80064c8:	1a89      	subs	r1, r1, r2
 80064ca:	d04e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064cc:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006900 <.text_15>
 80064d0:	1a89      	subs	r1, r1, r2
 80064d2:	d04a      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80064d8:	1a89      	subs	r1, r1, r2
 80064da:	d046      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064dc:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006904 <.text_16>
 80064e0:	1a89      	subs	r1, r1, r2
 80064e2:	d040      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e8:	1a89      	subs	r1, r1, r2
 80064ea:	d03e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064ec:	1a89      	subs	r1, r1, r2
 80064ee:	d03a      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064f0:	1fc9      	subs	r1, r1, #7
 80064f2:	d038      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064f4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80064f8:	1a89      	subs	r1, r1, r2
 80064fa:	d034      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064fc:	390f      	subs	r1, #15
 80064fe:	d032      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 8006500:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006504:	1a89      	subs	r1, r1, r2
 8006506:	d030      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006508:	391f      	subs	r1, #31
 800650a:	d02e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800650c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006510:	1a89      	subs	r1, r1, r2
 8006512:	d02a      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006514:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006900 <.text_15>
 8006518:	1a89      	subs	r1, r1, r2
 800651a:	d026      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800651c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006520:	1a89      	subs	r1, r1, r2
 8006522:	d022      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006524:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006908 <.text_17>
 8006528:	1a89      	subs	r1, r1, r2
 800652a:	d01e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800652c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006530:	1a89      	subs	r1, r1, r2
 8006532:	d018      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 8006534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006538:	1a89      	subs	r1, r1, r2
 800653a:	d016      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800653c:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 800690c <.text_18>
 8006540:	1a89      	subs	r1, r1, r2
 8006542:	d012      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006544:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006548:	1a89      	subs	r1, r1, r2
 800654a:	d00e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800654c:	f36f 000d 	bfc	r0, #0, #14
 8006550:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006554:	2840      	cmp	r0, #64	; 0x40
 8006556:	bf1f      	itttt	ne
 8006558:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006910 <.text_19>
 800655c:	4298      	cmpne	r0, r3
 800655e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006914 <.text_20>
 8006562:	4298      	cmpne	r0, r3
 8006564:	d101      	bne.n	800656a <ai_array_fmt_exported+0xe0>
 8006566:	2001      	movs	r0, #1
 8006568:	4770      	bx	lr
 800656a:	2000      	movs	r0, #0
 800656c:	4770      	bx	lr

0800656e <ai_array_fmt_valid>:
 800656e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006572:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006576:	d069      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006578:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800657c:	1a89      	subs	r1, r1, r2
 800657e:	d065      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006584:	1a89      	subs	r1, r1, r2
 8006586:	d061      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006588:	1a89      	subs	r1, r1, r2
 800658a:	d05f      	beq.n	800664c <ai_array_fmt_valid+0xde>
 800658c:	1fc9      	subs	r1, r1, #7
 800658e:	d05d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006590:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006594:	1a89      	subs	r1, r1, r2
 8006596:	d059      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006598:	390f      	subs	r1, #15
 800659a:	d057      	beq.n	800664c <ai_array_fmt_valid+0xde>
 800659c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80065a0:	1a89      	subs	r1, r1, r2
 80065a2:	d053      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065a4:	391f      	subs	r1, #31
 80065a6:	d051      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80065ac:	1a89      	subs	r1, r1, r2
 80065ae:	d04d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065b0:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006900 <.text_15>
 80065b4:	1a89      	subs	r1, r1, r2
 80065b6:	d049      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80065bc:	1a89      	subs	r1, r1, r2
 80065be:	d045      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065c0:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006904 <.text_16>
 80065c4:	1a89      	subs	r1, r1, r2
 80065c6:	d041      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	1a89      	subs	r1, r1, r2
 80065ce:	d03d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065d0:	1a89      	subs	r1, r1, r2
 80065d2:	d03b      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065d4:	1fc9      	subs	r1, r1, #7
 80065d6:	d039      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065d8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80065dc:	1a89      	subs	r1, r1, r2
 80065de:	d035      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065e0:	390f      	subs	r1, #15
 80065e2:	d033      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065e4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80065e8:	1a89      	subs	r1, r1, r2
 80065ea:	d02f      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065ec:	391f      	subs	r1, #31
 80065ee:	d02d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065f0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80065f4:	1a89      	subs	r1, r1, r2
 80065f6:	d029      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065f8:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006900 <.text_15>
 80065fc:	1a89      	subs	r1, r1, r2
 80065fe:	d025      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006600:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006604:	1a89      	subs	r1, r1, r2
 8006606:	d021      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006608:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006908 <.text_17>
 800660c:	1a89      	subs	r1, r1, r2
 800660e:	d01d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	1a89      	subs	r1, r1, r2
 8006616:	d019      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800661c:	1a89      	subs	r1, r1, r2
 800661e:	d015      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006620:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 800690c <.text_18>
 8006624:	1a89      	subs	r1, r1, r2
 8006626:	d011      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006628:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800662c:	1a89      	subs	r1, r1, r2
 800662e:	bf1e      	ittt	ne
 8006630:	f36f 000d 	bfcne	r0, #0, #14
 8006634:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006638:	2840      	cmpne	r0, #64	; 0x40
 800663a:	d007      	beq.n	800664c <ai_array_fmt_valid+0xde>
 800663c:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006910 <.text_19>
 8006640:	4298      	cmp	r0, r3
 8006642:	bf1c      	itt	ne
 8006644:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006914 <.text_20>
 8006648:	4298      	cmpne	r0, r3
 800664a:	d101      	bne.n	8006650 <ai_array_fmt_valid+0xe2>
 800664c:	2001      	movs	r0, #1
 800664e:	4770      	bx	lr
 8006650:	2000      	movs	r0, #0
 8006652:	4770      	bx	lr

08006654 <ai_array_fmt_get_formats>:
 8006654:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006918 <.text_21>
 8006658:	6001      	str	r1, [r0, #0]
 800665a:	201c      	movs	r0, #28
 800665c:	4770      	bx	lr
	...

08006660 <.text_8>:
 8006660:	00000000 	.word	0x00000000

08006664 <ai_buffer_fmt_name>:
 8006664:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006668:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800666c:	d022      	beq.n	80066b4 <ai_buffer_fmt_name+0x50>
 800666e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006672:	1a89      	subs	r1, r1, r2
 8006674:	d039      	beq.n	80066ea <ai_buffer_fmt_name+0x86>
 8006676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800667a:	1a89      	subs	r1, r1, r2
 800667c:	d020      	beq.n	80066c0 <ai_buffer_fmt_name+0x5c>
 800667e:	1fc9      	subs	r1, r1, #7
 8006680:	d036      	beq.n	80066f0 <ai_buffer_fmt_name+0x8c>
 8006682:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006686:	1a89      	subs	r1, r1, r2
 8006688:	d01d      	beq.n	80066c6 <ai_buffer_fmt_name+0x62>
 800668a:	390f      	subs	r1, #15
 800668c:	d033      	beq.n	80066f6 <ai_buffer_fmt_name+0x92>
 800668e:	4aa3      	ldr	r2, [pc, #652]	; (800691c <.text_22>)
 8006690:	1a89      	subs	r1, r1, r2
 8006692:	d021      	beq.n	80066d8 <ai_buffer_fmt_name+0x74>
 8006694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006698:	1a89      	subs	r1, r1, r2
 800669a:	d017      	beq.n	80066cc <ai_buffer_fmt_name+0x68>
 800669c:	1fc9      	subs	r1, r1, #7
 800669e:	d01e      	beq.n	80066de <ai_buffer_fmt_name+0x7a>
 80066a0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80066a4:	1a89      	subs	r1, r1, r2
 80066a6:	d014      	beq.n	80066d2 <ai_buffer_fmt_name+0x6e>
 80066a8:	390f      	subs	r1, #15
 80066aa:	d01b      	beq.n	80066e4 <ai_buffer_fmt_name+0x80>
 80066ac:	4a9c      	ldr	r2, [pc, #624]	; (8006920 <.text_23>)
 80066ae:	1a89      	subs	r1, r1, r2
 80066b0:	d003      	beq.n	80066ba <ai_buffer_fmt_name+0x56>
 80066b2:	e023      	b.n	80066fc <ai_buffer_fmt_name+0x98>
 80066b4:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80066b8:	4770      	bx	lr
 80066ba:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80066be:	4770      	bx	lr
 80066c0:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80066c4:	4770      	bx	lr
 80066c6:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80066ca:	4770      	bx	lr
 80066cc:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 80066d0:	4770      	bx	lr
 80066d2:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 80066d6:	4770      	bx	lr
 80066d8:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 80066dc:	4770      	bx	lr
 80066de:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80066e2:	4770      	bx	lr
 80066e4:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80066e8:	4770      	bx	lr
 80066ea:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80066ee:	4770      	bx	lr
 80066f0:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80066f4:	4770      	bx	lr
 80066f6:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80066fa:	4770      	bx	lr
 80066fc:	0b80      	lsrs	r0, r0, #14
 80066fe:	0380      	lsls	r0, r0, #14
 8006700:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006704:	2840      	cmp	r0, #64	; 0x40
 8006706:	d007      	beq.n	8006718 <ai_buffer_fmt_name+0xb4>
 8006708:	4981      	ldr	r1, [pc, #516]	; (8006910 <.text_19>)
 800670a:	4288      	cmp	r0, r1
 800670c:	d00a      	beq.n	8006724 <ai_buffer_fmt_name+0xc0>
 800670e:	4981      	ldr	r1, [pc, #516]	; (8006914 <.text_20>)
 8006710:	4288      	cmp	r0, r1
 8006712:	d004      	beq.n	800671e <ai_buffer_fmt_name+0xba>
 8006714:	a079      	add	r0, pc, #484	; (adr r0, 80068fc <.text_14>)
 8006716:	4770      	bx	lr
 8006718:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 800671c:	4770      	bx	lr
 800671e:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006722:	4770      	bx	lr
 8006724:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006728:	4770      	bx	lr

0800672a <ai_buffer_fmt_valid>:
 800672a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800672e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006732:	d02d      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006734:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006738:	1a89      	subs	r1, r1, r2
 800673a:	d029      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 800673c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006740:	1a89      	subs	r1, r1, r2
 8006742:	d025      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006744:	1fc9      	subs	r1, r1, #7
 8006746:	d023      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006748:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800674c:	1a89      	subs	r1, r1, r2
 800674e:	d01f      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006750:	390f      	subs	r1, #15
 8006752:	d01d      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006754:	4a71      	ldr	r2, [pc, #452]	; (800691c <.text_22>)
 8006756:	1a89      	subs	r1, r1, r2
 8006758:	d01a      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 800675a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800675e:	1a89      	subs	r1, r1, r2
 8006760:	d016      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006762:	1fc9      	subs	r1, r1, #7
 8006764:	d014      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006766:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800676a:	1a89      	subs	r1, r1, r2
 800676c:	d010      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 800676e:	390f      	subs	r1, #15
 8006770:	d00e      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006772:	4a6b      	ldr	r2, [pc, #428]	; (8006920 <.text_23>)
 8006774:	1a89      	subs	r1, r1, r2
 8006776:	bf1f      	itttt	ne
 8006778:	0b80      	lsrne	r0, r0, #14
 800677a:	0380      	lslne	r0, r0, #14
 800677c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006780:	2840      	cmpne	r0, #64	; 0x40
 8006782:	d005      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006784:	4b62      	ldr	r3, [pc, #392]	; (8006910 <.text_19>)
 8006786:	4298      	cmp	r0, r3
 8006788:	bf1c      	itt	ne
 800678a:	4b62      	ldrne	r3, [pc, #392]	; (8006914 <.text_20>)
 800678c:	4298      	cmpne	r0, r3
 800678e:	d101      	bne.n	8006794 <ai_buffer_fmt_valid+0x6a>
 8006790:	2001      	movs	r0, #1
 8006792:	4770      	bx	lr
 8006794:	2000      	movs	r0, #0
 8006796:	4770      	bx	lr

08006798 <ai_buffer_fmt_get_formats>:
 8006798:	4962      	ldr	r1, [pc, #392]	; (8006924 <.text_24>)
 800679a:	6001      	str	r1, [r0, #0]
 800679c:	200c      	movs	r0, #12
 800679e:	4770      	bx	lr

080067a0 <ai_array_to_buffer_fmt>:
 80067a0:	4601      	mov	r1, r0
 80067a2:	2040      	movs	r0, #64	; 0x40
 80067a4:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80067a8:	2a02      	cmp	r2, #2
 80067aa:	d104      	bne.n	80067b6 <ai_array_to_buffer_fmt+0x16>
 80067ac:	485e      	ldr	r0, [pc, #376]	; (8006928 <.text_25>)
 80067ae:	4008      	ands	r0, r1
 80067b0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80067b4:	e037      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 80067b6:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80067ba:	4b55      	ldr	r3, [pc, #340]	; (8006910 <.text_19>)
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	d02d      	beq.n	800681c <ai_array_to_buffer_fmt+0x7c>
 80067c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	d01b      	beq.n	8006800 <ai_array_to_buffer_fmt+0x60>
 80067c8:	1fd2      	subs	r2, r2, #7
 80067ca:	d029      	beq.n	8006820 <ai_array_to_buffer_fmt+0x80>
 80067cc:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	d017      	beq.n	8006804 <ai_array_to_buffer_fmt+0x64>
 80067d4:	3a0f      	subs	r2, #15
 80067d6:	d025      	beq.n	8006824 <ai_array_to_buffer_fmt+0x84>
 80067d8:	4b50      	ldr	r3, [pc, #320]	; (800691c <.text_22>)
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	d018      	beq.n	8006810 <ai_array_to_buffer_fmt+0x70>
 80067de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	d010      	beq.n	8006808 <ai_array_to_buffer_fmt+0x68>
 80067e6:	1fd2      	subs	r2, r2, #7
 80067e8:	d014      	beq.n	8006814 <ai_array_to_buffer_fmt+0x74>
 80067ea:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	d00c      	beq.n	800680c <ai_array_to_buffer_fmt+0x6c>
 80067f2:	3a0f      	subs	r2, #15
 80067f4:	d010      	beq.n	8006818 <ai_array_to_buffer_fmt+0x78>
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <.text_23>)
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	d114      	bne.n	8006826 <ai_array_to_buffer_fmt+0x86>
 80067fc:	484b      	ldr	r0, [pc, #300]	; (800692c <.text_26>)
 80067fe:	e012      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006800:	484b      	ldr	r0, [pc, #300]	; (8006930 <.text_27>)
 8006802:	e010      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006804:	484b      	ldr	r0, [pc, #300]	; (8006934 <.text_28>)
 8006806:	e00e      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006808:	484b      	ldr	r0, [pc, #300]	; (8006938 <.text_29>)
 800680a:	e00c      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 800680c:	484b      	ldr	r0, [pc, #300]	; (800693c <.text_30>)
 800680e:	e00a      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006810:	4840      	ldr	r0, [pc, #256]	; (8006914 <.text_20>)
 8006812:	e008      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006814:	484a      	ldr	r0, [pc, #296]	; (8006940 <.text_31>)
 8006816:	e006      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006818:	484a      	ldr	r0, [pc, #296]	; (8006944 <.text_32>)
 800681a:	e004      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 800681c:	4618      	mov	r0, r3
 800681e:	e002      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006820:	4849      	ldr	r0, [pc, #292]	; (8006948 <.text_33>)
 8006822:	e000      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006824:	4849      	ldr	r0, [pc, #292]	; (800694c <.text_34>)
 8006826:	004a      	lsls	r2, r1, #1
 8006828:	bf4c      	ite	mi
 800682a:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 800682e:	2200      	movpl	r2, #0
 8006830:	4310      	orrs	r0, r2
 8006832:	008a      	lsls	r2, r1, #2
 8006834:	bf4c      	ite	mi
 8006836:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 800683a:	2200      	movpl	r2, #0
 800683c:	4310      	orrs	r0, r2
 800683e:	0109      	lsls	r1, r1, #4
 8006840:	bf4c      	ite	mi
 8006842:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006846:	2100      	movpl	r1, #0
 8006848:	4308      	orrs	r0, r1
 800684a:	4770      	bx	lr

0800684c <ai_buffer_to_array_fmt>:
 800684c:	4602      	mov	r2, r0
 800684e:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006852:	3840      	subs	r0, #64	; 0x40
 8006854:	d022      	beq.n	800689c <ai_buffer_to_array_fmt+0x50>
 8006856:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800685a:	1a40      	subs	r0, r0, r1
 800685c:	d030      	beq.n	80068c0 <ai_buffer_to_array_fmt+0x74>
 800685e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006862:	1a40      	subs	r0, r0, r1
 8006864:	d01e      	beq.n	80068a4 <ai_buffer_to_array_fmt+0x58>
 8006866:	1fc0      	subs	r0, r0, #7
 8006868:	d02c      	beq.n	80068c4 <ai_buffer_to_array_fmt+0x78>
 800686a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800686e:	1a40      	subs	r0, r0, r1
 8006870:	d01a      	beq.n	80068a8 <ai_buffer_to_array_fmt+0x5c>
 8006872:	380f      	subs	r0, #15
 8006874:	d028      	beq.n	80068c8 <ai_buffer_to_array_fmt+0x7c>
 8006876:	4929      	ldr	r1, [pc, #164]	; (800691c <.text_22>)
 8006878:	1a40      	subs	r0, r0, r1
 800687a:	d01b      	beq.n	80068b4 <ai_buffer_to_array_fmt+0x68>
 800687c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006880:	1a40      	subs	r0, r0, r1
 8006882:	d013      	beq.n	80068ac <ai_buffer_to_array_fmt+0x60>
 8006884:	1fc0      	subs	r0, r0, #7
 8006886:	d017      	beq.n	80068b8 <ai_buffer_to_array_fmt+0x6c>
 8006888:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800688c:	1a40      	subs	r0, r0, r1
 800688e:	d00f      	beq.n	80068b0 <ai_buffer_to_array_fmt+0x64>
 8006890:	380f      	subs	r0, #15
 8006892:	d013      	beq.n	80068bc <ai_buffer_to_array_fmt+0x70>
 8006894:	4922      	ldr	r1, [pc, #136]	; (8006920 <.text_23>)
 8006896:	1a40      	subs	r0, r0, r1
 8006898:	d002      	beq.n	80068a0 <ai_buffer_to_array_fmt+0x54>
 800689a:	e017      	b.n	80068cc <ai_buffer_to_array_fmt+0x80>
 800689c:	2040      	movs	r0, #64	; 0x40
 800689e:	e01f      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068a0:	4822      	ldr	r0, [pc, #136]	; (800692c <.text_26>)
 80068a2:	e01d      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068a4:	4822      	ldr	r0, [pc, #136]	; (8006930 <.text_27>)
 80068a6:	e01b      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068a8:	4822      	ldr	r0, [pc, #136]	; (8006934 <.text_28>)
 80068aa:	e019      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068ac:	4822      	ldr	r0, [pc, #136]	; (8006938 <.text_29>)
 80068ae:	e017      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068b0:	4822      	ldr	r0, [pc, #136]	; (800693c <.text_30>)
 80068b2:	e015      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068b4:	4817      	ldr	r0, [pc, #92]	; (8006914 <.text_20>)
 80068b6:	e013      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068b8:	4821      	ldr	r0, [pc, #132]	; (8006940 <.text_31>)
 80068ba:	e011      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068bc:	4821      	ldr	r0, [pc, #132]	; (8006944 <.text_32>)
 80068be:	e00f      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068c0:	4813      	ldr	r0, [pc, #76]	; (8006910 <.text_19>)
 80068c2:	e00d      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068c4:	4820      	ldr	r0, [pc, #128]	; (8006948 <.text_33>)
 80068c6:	e00b      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068c8:	4820      	ldr	r0, [pc, #128]	; (800694c <.text_34>)
 80068ca:	e009      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068cc:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 80068d0:	f3c2 000d 	ubfx	r0, r2, #0, #14
 80068d4:	2900      	cmp	r1, #0
 80068d6:	bf14      	ite	ne
 80068d8:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 80068dc:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 80068e0:	0051      	lsls	r1, r2, #1
 80068e2:	bf48      	it	mi
 80068e4:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80068e8:	0093      	lsls	r3, r2, #2
 80068ea:	bf48      	it	mi
 80068ec:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80068f0:	0111      	lsls	r1, r2, #4
 80068f2:	bf48      	it	mi
 80068f4:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80068f8:	4770      	bx	lr
	...

080068fc <.text_14>:
 80068fc:	00000000 	.word	0x00000000

08006900 <.text_15>:
 8006900:	002be80f 	.word	0x002be80f

08006904 <.text_16>:
 8006904:	003bf7f1 	.word	0x003bf7f1

08006908 <.text_17>:
 8006908:	00b9fff1 	.word	0x00b9fff1

0800690c <.text_18>:
 800690c:	004df000 	.word	0x004df000

08006910 <.text_19>:
 8006910:	00040040 	.word	0x00040040

08006914 <.text_20>:
 8006914:	00840040 	.word	0x00840040

08006918 <.text_21>:
 8006918:	08016414 	.word	0x08016414

0800691c <.text_22>:
 800691c:	007ff7f1 	.word	0x007ff7f1

08006920 <.text_23>:
 8006920:	00fe07f1 	.word	0x00fe07f1

08006924 <.text_24>:
 8006924:	08016484 	.word	0x08016484

08006928 <.text_25>:
 8006928:	00803fff 	.word	0x00803fff

0800692c <.text_26>:
 800692c:	01821040 	.word	0x01821040

08006930 <.text_27>:
 8006930:	00040440 	.word	0x00040440

08006934 <.text_28>:
 8006934:	00040840 	.word	0x00040840

08006938 <.text_29>:
 8006938:	00840440 	.word	0x00840440

0800693c <.text_30>:
 800693c:	00840840 	.word	0x00840840

08006940 <.text_31>:
 8006940:	00840447 	.word	0x00840447

08006944 <.text_32>:
 8006944:	0084084f 	.word	0x0084084f

08006948 <.text_33>:
 8006948:	00040447 	.word	0x00040447

0800694c <.text_34>:
 800694c:	0004084f 	.word	0x0004084f

08006950 <ai_array_get_byte_size>:
 8006950:	b909      	cbnz	r1, 8006956 <ai_array_get_byte_size+0x6>
 8006952:	2000      	movs	r0, #0
 8006954:	4770      	bx	lr
 8006956:	11c2      	asrs	r2, r0, #7
 8006958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800695c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006960:	189b      	adds	r3, r3, r2
 8006962:	4359      	muls	r1, r3
 8006964:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8006968:	f00c 0c0f 	and.w	ip, ip, #15
 800696c:	1543      	asrs	r3, r0, #21
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	1dc9      	adds	r1, r1, #7
 8006974:	08c9      	lsrs	r1, r1, #3
 8006976:	00c9      	lsls	r1, r1, #3
 8006978:	40d9      	lsrs	r1, r3
 800697a:	f1bc 0f04 	cmp.w	ip, #4
 800697e:	d00a      	beq.n	8006996 <ai_array_get_byte_size+0x46>
 8006980:	f1bc 0f08 	cmp.w	ip, #8
 8006984:	bf02      	ittt	eq
 8006986:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800698a:	1882      	addeq	r2, r0, r2
 800698c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8006990:	1dc9      	adds	r1, r1, #7
 8006992:	08c8      	lsrs	r0, r1, #3
 8006994:	4770      	bx	lr
 8006996:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800699a:	1882      	adds	r2, r0, r2
 800699c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80069a0:	1dc9      	adds	r1, r1, #7
 80069a2:	08c8      	lsrs	r0, r1, #3
 80069a4:	4770      	bx	lr

080069a6 <ai_array_get_data_byte_size>:
 80069a6:	b909      	cbnz	r1, 80069ac <ai_array_get_data_byte_size+0x6>
 80069a8:	2000      	movs	r0, #0
 80069aa:	4770      	bx	lr
 80069ac:	11c2      	asrs	r2, r0, #7
 80069ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069b2:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80069b6:	189a      	adds	r2, r3, r2
 80069b8:	4351      	muls	r1, r2
 80069ba:	1540      	asrs	r0, r0, #21
 80069bc:	f000 0003 	and.w	r0, r0, #3
 80069c0:	1dc9      	adds	r1, r1, #7
 80069c2:	08c9      	lsrs	r1, r1, #3
 80069c4:	00c9      	lsls	r1, r1, #3
 80069c6:	40c1      	lsrs	r1, r0
 80069c8:	1dc9      	adds	r1, r1, #7
 80069ca:	08c8      	lsrs	r0, r1, #3
 80069cc:	4770      	bx	lr

080069ce <ai_array_get_elems_from_size>:
 80069ce:	b909      	cbnz	r1, 80069d4 <ai_array_get_elems_from_size+0x6>
 80069d0:	2000      	movs	r0, #0
 80069d2:	4770      	bx	lr
 80069d4:	1442      	asrs	r2, r0, #17
 80069d6:	00c9      	lsls	r1, r1, #3
 80069d8:	f002 020f 	and.w	r2, r2, #15
 80069dc:	2a04      	cmp	r2, #4
 80069de:	d002      	beq.n	80069e6 <ai_array_get_elems_from_size+0x18>
 80069e0:	2a08      	cmp	r2, #8
 80069e2:	d009      	beq.n	80069f8 <ai_array_get_elems_from_size+0x2a>
 80069e4:	e010      	b.n	8006a08 <ai_array_get_elems_from_size+0x3a>
 80069e6:	11c3      	asrs	r3, r0, #7
 80069e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ec:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80069f0:	18d2      	adds	r2, r2, r3
 80069f2:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80069f6:	e007      	b.n	8006a08 <ai_array_get_elems_from_size+0x3a>
 80069f8:	11c2      	asrs	r2, r0, #7
 80069fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069fe:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006a02:	189a      	adds	r2, r3, r2
 8006a04:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8006a08:	1542      	asrs	r2, r0, #21
 8006a0a:	f002 0203 	and.w	r2, r2, #3
 8006a0e:	4091      	lsls	r1, r2
 8006a10:	1dc9      	adds	r1, r1, #7
 8006a12:	11c3      	asrs	r3, r0, #7
 8006a14:	08c9      	lsrs	r1, r1, #3
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8006a1e:	00c9      	lsls	r1, r1, #3
 8006a20:	18c0      	adds	r0, r0, r3
 8006a22:	fbb1 f0f0 	udiv	r0, r1, r0
 8006a26:	4770      	bx	lr

08006a28 <.text_38>:
 8006a28:	5f544d46 	.word	0x5f544d46
 8006a2c:	454e4f4e 	.word	0x454e4f4e
 8006a30:	00          	.byte	0x00
 8006a31:	00          	.byte	0x00
	...

08006a34 <.text_39>:
 8006a34:	5f544d46 	.word	0x5f544d46
 8006a38:	414f4c46 	.word	0x414f4c46
 8006a3c:	0054      	.short	0x0054
	...

08006a40 <.text_40>:
 8006a40:	5f544d46 	.word	0x5f544d46
 8006a44:	414f4c46 	.word	0x414f4c46
 8006a48:	00343654 	.word	0x00343654

08006a4c <.text_41>:
 8006a4c:	5f544d46 	.word	0x5f544d46
 8006a50:	414f4c46 	.word	0x414f4c46
 8006a54:	00363154 	.word	0x00363154

08006a58 <.text_42>:
 8006a58:	5f544d46 	.word	0x5f544d46
 8006a5c:	00003855 	.word	0x00003855

08006a60 <.text_43>:
 8006a60:	5f544d46 	.word	0x5f544d46
 8006a64:	00363155 	.word	0x00363155

08006a68 <.text_44>:
 8006a68:	5f544d46 	.word	0x5f544d46
 8006a6c:	00323355 	.word	0x00323355

08006a70 <.text_45>:
 8006a70:	5f544d46 	.word	0x5f544d46
 8006a74:	00343655 	.word	0x00343655

08006a78 <.text_46>:
 8006a78:	5f544d46 	.word	0x5f544d46
 8006a7c:	00003455 	.word	0x00003455

08006a80 <.text_47>:
 8006a80:	5f544d46 	.word	0x5f544d46
 8006a84:	00003853 	.word	0x00003853

08006a88 <.text_48>:
 8006a88:	5f544d46 	.word	0x5f544d46
 8006a8c:	00363153 	.word	0x00363153

08006a90 <.text_49>:
 8006a90:	5f544d46 	.word	0x5f544d46
 8006a94:	00323353 	.word	0x00323353

08006a98 <.text_50>:
 8006a98:	5f544d46 	.word	0x5f544d46
 8006a9c:	00343653 	.word	0x00343653

08006aa0 <.text_51>:
 8006aa0:	5f544d46 	.word	0x5f544d46
 8006aa4:	00003453 	.word	0x00003453

08006aa8 <.text_52>:
 8006aa8:	5f544d46 	.word	0x5f544d46
 8006aac:	0051      	.short	0x0051
	...

08006ab0 <.text_53>:
 8006ab0:	5f544d46 	.word	0x5f544d46
 8006ab4:	00003751 	.word	0x00003751

08006ab8 <.text_54>:
 8006ab8:	5f544d46 	.word	0x5f544d46
 8006abc:	00353151 	.word	0x00353151

08006ac0 <.text_55>:
 8006ac0:	5f544d46 	.word	0x5f544d46
 8006ac4:	00313351 	.word	0x00313351

08006ac8 <.text_56>:
 8006ac8:	5f544d46 	.word	0x5f544d46
 8006acc:	00005155 	.word	0x00005155

08006ad0 <.text_57>:
 8006ad0:	5f544d46 	.word	0x5f544d46
 8006ad4:	00375155 	.word	0x00375155

08006ad8 <.text_58>:
 8006ad8:	5f544d46 	.word	0x5f544d46
 8006adc:	35315155 	.word	0x35315155
 8006ae0:	00          	.byte	0x00
 8006ae1:	00          	.byte	0x00
	...

08006ae4 <.text_59>:
 8006ae4:	5f544d46 	.word	0x5f544d46
 8006ae8:	31335155 	.word	0x31335155
 8006aec:	00          	.byte	0x00
 8006aed:	00          	.byte	0x00
	...

08006af0 <.text_60>:
 8006af0:	5f544d46 	.word	0x5f544d46
 8006af4:	3454554c 	.word	0x3454554c
 8006af8:	4f4c465f 	.word	0x4f4c465f
 8006afc:	00005441 	.word	0x00005441

08006b00 <.text_61>:
 8006b00:	5f544d46 	.word	0x5f544d46
 8006b04:	3854554c 	.word	0x3854554c
 8006b08:	4f4c465f 	.word	0x4f4c465f
 8006b0c:	00005441 	.word	0x00005441

08006b10 <.text_62>:
 8006b10:	5f544d46 	.word	0x5f544d46
 8006b14:	3454554c 	.word	0x3454554c
 8006b18:	3531515f 	.word	0x3531515f
 8006b1c:	00          	.byte	0x00
 8006b1d:	00          	.byte	0x00
	...

08006b20 <.text_63>:
 8006b20:	5f544d46 	.word	0x5f544d46
 8006b24:	3854554c 	.word	0x3854554c
 8006b28:	3531515f 	.word	0x3531515f
 8006b2c:	00          	.byte	0x00
 8006b2d:	00          	.byte	0x00
	...

08006b30 <.text_64>:
 8006b30:	5f544d46 	.word	0x5f544d46
 8006b34:	3454554c 	.word	0x3454554c
 8006b38:	3151555f 	.word	0x3151555f
 8006b3c:	0035      	.short	0x0035
	...

08006b40 <.text_65>:
 8006b40:	5f544d46 	.word	0x5f544d46
 8006b44:	3854554c 	.word	0x3854554c
 8006b48:	3151555f 	.word	0x3151555f
 8006b4c:	0035      	.short	0x0035
	...

08006b50 <.text_66>:
 8006b50:	415f4941 	.word	0x415f4941
 8006b54:	59415252 	.word	0x59415252
 8006b58:	524f465f 	.word	0x524f465f
 8006b5c:	5f54414d 	.word	0x5f54414d
 8006b60:	454e4f4e 	.word	0x454e4f4e
 8006b64:	00          	.byte	0x00
 8006b65:	00          	.byte	0x00
	...

08006b68 <.text_67>:
 8006b68:	415f4941 	.word	0x415f4941
 8006b6c:	59415252 	.word	0x59415252
 8006b70:	524f465f 	.word	0x524f465f
 8006b74:	5f54414d 	.word	0x5f54414d
 8006b78:	0051      	.short	0x0051
	...

08006b7c <.text_68>:
 8006b7c:	415f4941 	.word	0x415f4941
 8006b80:	59415252 	.word	0x59415252
 8006b84:	524f465f 	.word	0x524f465f
 8006b88:	5f54414d 	.word	0x5f54414d
 8006b8c:	00005155 	.word	0x00005155

08006b90 <.text_69>:
 8006b90:	425f4941 	.word	0x425f4941
 8006b94:	45464655 	.word	0x45464655
 8006b98:	4f465f52 	.word	0x4f465f52
 8006b9c:	54414d52 	.word	0x54414d52
 8006ba0:	4e4f4e5f 	.word	0x4e4f4e5f
 8006ba4:	0045      	.short	0x0045
	...

08006ba8 <.text_70>:
 8006ba8:	425f4941 	.word	0x425f4941
 8006bac:	45464655 	.word	0x45464655
 8006bb0:	4f465f52 	.word	0x4f465f52
 8006bb4:	54414d52 	.word	0x54414d52
 8006bb8:	0000515f 	.word	0x0000515f

08006bbc <.text_71>:
 8006bbc:	425f4941 	.word	0x425f4941
 8006bc0:	45464655 	.word	0x45464655
 8006bc4:	4f465f52 	.word	0x4f465f52
 8006bc8:	54414d52 	.word	0x54414d52
 8006bcc:	0051555f 	.word	0x0051555f

08006bd0 <ai_math_sqrt>:
 8006bd0:	eef0 0a40 	vmov.f32	s1, s0
 8006bd4:	eef5 0a40 	vcmp.f32	s1, #0.0
 8006bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bdc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8006c84 <.text_12>
 8006be0:	db01      	blt.n	8006be6 <ai_math_sqrt+0x16>
 8006be2:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8006be6:	4770      	bx	lr

08006be8 <ai_math_exp>:
 8006be8:	f00c bb96 	b.w	8013318 <expf>

08006bec <ai_math_pow>:
 8006bec:	f00c bde4 	b.w	80137b8 <powf>

08006bf0 <ai_math_tanh>:
 8006bf0:	f00c bfb0 	b.w	8013b54 <tanhf>

08006bf4 <ai_math_cosh>:
 8006bf4:	f00d b960 	b.w	8013eb8 <coshf>

08006bf8 <ai_math_relu>:
 8006bf8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c00:	bf48      	it	mi
 8006c02:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8006c84 <.text_12>
 8006c06:	4770      	bx	lr

08006c08 <ai_math_prelu>:
 8006c08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c10:	bf48      	it	mi
 8006c12:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8006c16:	4770      	bx	lr

08006c18 <ai_math_sigmoid>:
 8006c18:	b500      	push	{lr}
 8006c1a:	b081      	sub	sp, #4
 8006c1c:	eeb1 0a40 	vneg.f32	s0, s0
 8006c20:	f00c fb7a 	bl	8013318 <expf>
 8006c24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006c28:	b001      	add	sp, #4
 8006c2a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006c2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006c32:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006c36:	bd00      	pop	{pc}

08006c38 <ai_math_hard_sigmoid>:
 8006c38:	eef0 0a40 	vmov.f32	s1, s0
 8006c3c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8006c88 <.text_13>
 8006c40:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006c44:	ee00 0a81 	vmla.f32	s0, s1, s2
 8006c48:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006c8c <.text_14>
 8006c4c:	eeb4 0a60 	vcmp.f32	s0, s1
 8006c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c54:	da07      	bge.n	8006c66 <ai_math_hard_sigmoid+0x2e>
 8006c56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d504      	bpl.n	8006c6a <ai_math_hard_sigmoid+0x32>
 8006c60:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006c84 <.text_12>
 8006c64:	4770      	bx	lr
 8006c66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c6a:	4770      	bx	lr

08006c6c <ai_math_sign>:
 8006c6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c74:	bfcc      	ite	gt
 8006c76:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8006c90 <.text_15>
 8006c7a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8006c94 <.text_16>
 8006c7e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8006c82:	4770      	bx	lr

08006c84 <.text_12>:
 8006c84:	00000000 	.word	0x00000000

08006c88 <.text_13>:
 8006c88:	3e4ccccd 	.word	0x3e4ccccd

08006c8c <.text_14>:
 8006c8c:	3f800001 	.word	0x3f800001

08006c90 <.text_15>:
 8006c90:	00000001 	.word	0x00000001

08006c94 <.text_16>:
 8006c94:	ffffffff 	.word	0xffffffff

08006c98 <ai_div>:
 8006c98:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8006c9c:	4770      	bx	lr

08006c9e <ai_floor_div>:
 8006c9e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8006ca2:	f00c bbbf 	b.w	8013424 <floorf>

08006ca6 <ai_floor_mod>:
 8006ca6:	f00d b963 	b.w	8013f70 <fmodf>

08006caa <ai_max>:
 8006caa:	eef4 0a40 	vcmp.f32	s1, s0
 8006cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb2:	bf58      	it	pl
 8006cb4:	eeb0 0a60 	vmovpl.f32	s0, s1
 8006cb8:	4770      	bx	lr

08006cba <ai_min>:
 8006cba:	eeb4 0a60 	vcmp.f32	s0, s1
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	bf58      	it	pl
 8006cc4:	eeb0 0a60 	vmovpl.f32	s0, s1
 8006cc8:	4770      	bx	lr

08006cca <ai_mul>:
 8006cca:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006cce:	4770      	bx	lr

08006cd0 <ai_sub>:
 8006cd0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006cd4:	4770      	bx	lr

08006cd6 <ai_sum>:
 8006cd6:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006cda:	4770      	bx	lr

08006cdc <arm_mat_init_f32>:
 8006cdc:	8001      	strh	r1, [r0, #0]
 8006cde:	8042      	strh	r2, [r0, #2]
 8006ce0:	6043      	str	r3, [r0, #4]
 8006ce2:	4770      	bx	lr

08006ce4 <core_timer_init_>:
 8006ce4:	4770      	bx	lr

08006ce6 <core_timer_ticks_>:
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	4770      	bx	lr
	...

08006cec <core_timer_init>:
 8006cec:	b530      	push	{r4, r5, lr}
 8006cee:	0005      	movs	r5, r0
 8006cf0:	b081      	sub	sp, #4
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	d00d      	beq.n	8006d12 <core_timer_init+0x26>
 8006cf6:	4929      	ldr	r1, [pc, #164]	; (8006d9c <.text_12>)
 8006cf8:	7808      	ldrb	r0, [r1, #0]
 8006cfa:	b118      	cbz	r0, 8006d04 <core_timer_init+0x18>
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	700a      	strb	r2, [r1, #0]
 8006d00:	f7ff fff0 	bl	8006ce4 <core_timer_init_>
 8006d04:	b904      	cbnz	r4, 8006d08 <core_timer_init+0x1c>
 8006d06:	a423      	add	r4, pc, #140	; (adr r4, 8006d94 <.text_10>)
 8006d08:	602c      	str	r4, [r5, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	60a8      	str	r0, [r5, #8]
 8006d0e:	6068      	str	r0, [r5, #4]
 8006d10:	2001      	movs	r0, #1
 8006d12:	b001      	add	sp, #4
 8006d14:	bd30      	pop	{r4, r5, pc}

08006d16 <core_timer_reset>:
 8006d16:	b118      	cbz	r0, 8006d20 <core_timer_reset+0xa>
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6081      	str	r1, [r0, #8]
 8006d1c:	6041      	str	r1, [r0, #4]
 8006d1e:	2001      	movs	r0, #1
 8006d20:	4770      	bx	lr

08006d22 <core_timer_start>:
 8006d22:	b510      	push	{r4, lr}
 8006d24:	0004      	movs	r4, r0
 8006d26:	d101      	bne.n	8006d2c <core_timer_start+0xa>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	f7ff ffdb 	bl	8006ce6 <core_timer_ticks_>
 8006d30:	6060      	str	r0, [r4, #4]
 8006d32:	2001      	movs	r0, #1
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <core_timer_stop>:
 8006d36:	b510      	push	{r4, lr}
 8006d38:	0004      	movs	r4, r0
 8006d3a:	d101      	bne.n	8006d40 <core_timer_stop+0xa>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	f7ff ffd1 	bl	8006ce6 <core_timer_ticks_>
 8006d44:	68a2      	ldr	r2, [r4, #8]
 8006d46:	6861      	ldr	r1, [r4, #4]
 8006d48:	1880      	adds	r0, r0, r2
 8006d4a:	1a40      	subs	r0, r0, r1
 8006d4c:	60a0      	str	r0, [r4, #8]
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <core_timer_main_test_unit>:
 8006d50:	b500      	push	{lr}
 8006d52:	b083      	sub	sp, #12
 8006d54:	a112      	add	r1, pc, #72	; (adr r1, 8006da0 <.text_13>)
 8006d56:	4668      	mov	r0, sp
 8006d58:	f7ff ffc8 	bl	8006cec <core_timer_init>
 8006d5c:	f7ff ffc3 	bl	8006ce6 <core_timer_ticks_>
 8006d60:	9001      	str	r0, [sp, #4]
 8006d62:	4668      	mov	r0, sp
 8006d64:	f7ff ffe7 	bl	8006d36 <core_timer_stop>
 8006d68:	ed9d 0a02 	vldr	s0, [sp, #8]
 8006d6c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8006d70:	eddf 0a09 	vldr	s1, [pc, #36]	; 8006d98 <.text_11>
 8006d74:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006d78:	ee10 0a90 	vmov	r0, s1
 8006d7c:	f000 fa34 	bl	80071e8 <__aeabi_f2d>
 8006d80:	460b      	mov	r3, r1
 8006d82:	4602      	mov	r2, r0
 8006d84:	f8dd 1000 	ldr.w	r1, [sp]
 8006d88:	a009      	add	r0, pc, #36	; (adr r0, 8006db0 <.text_14>)
 8006d8a:	f00a f8d9 	bl	8010f40 <iprintf>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	b003      	add	sp, #12
 8006d92:	bd00      	pop	{pc}

08006d94 <.text_10>:
 8006d94:	00000000 	.word	0x00000000

08006d98 <.text_11>:
 8006d98:	3a83126f 	.word	0x3a83126f

08006d9c <.text_12>:
 8006d9c:	20000004 	.word	0x20000004

08006da0 <.text_13>:
 8006da0:	6d617845 	.word	0x6d617845
 8006da4:	20656c70 	.word	0x20656c70
 8006da8:	656d6954 	.word	0x656d6954
 8006dac:	0072      	.short	0x0072
	...

08006db0 <.text_14>:
 8006db0:	656d6954 	.word	0x656d6954
 8006db4:	73252072 	.word	0x73252072
 8006db8:	6c45203a 	.word	0x6c45203a
 8006dbc:	65737061 	.word	0x65737061
 8006dc0:	66252064 	.word	0x66252064
 8006dc4:	0d736d20 	.word	0x0d736d20
 8006dc8:	000a      	.short	0x000a
	...

08006dcc <__aeabi_memset>:
 8006dcc:	b470      	push	{r4, r5, r6}
 8006dce:	0784      	lsls	r4, r0, #30
 8006dd0:	d046      	beq.n	8006e60 <__aeabi_memset+0x94>
 8006dd2:	1e4c      	subs	r4, r1, #1
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	d041      	beq.n	8006e5c <__aeabi_memset+0x90>
 8006dd8:	b2d5      	uxtb	r5, r2
 8006dda:	4603      	mov	r3, r0
 8006ddc:	e002      	b.n	8006de4 <__aeabi_memset+0x18>
 8006dde:	1e61      	subs	r1, r4, #1
 8006de0:	b3e4      	cbz	r4, 8006e5c <__aeabi_memset+0x90>
 8006de2:	460c      	mov	r4, r1
 8006de4:	f803 5b01 	strb.w	r5, [r3], #1
 8006de8:	0799      	lsls	r1, r3, #30
 8006dea:	d1f8      	bne.n	8006dde <__aeabi_memset+0x12>
 8006dec:	2c03      	cmp	r4, #3
 8006dee:	d92e      	bls.n	8006e4e <__aeabi_memset+0x82>
 8006df0:	b2d5      	uxtb	r5, r2
 8006df2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006df6:	2c0f      	cmp	r4, #15
 8006df8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006dfc:	d919      	bls.n	8006e32 <__aeabi_memset+0x66>
 8006dfe:	4626      	mov	r6, r4
 8006e00:	f103 0110 	add.w	r1, r3, #16
 8006e04:	3e10      	subs	r6, #16
 8006e06:	2e0f      	cmp	r6, #15
 8006e08:	f841 5c10 	str.w	r5, [r1, #-16]
 8006e0c:	f841 5c0c 	str.w	r5, [r1, #-12]
 8006e10:	f841 5c08 	str.w	r5, [r1, #-8]
 8006e14:	f841 5c04 	str.w	r5, [r1, #-4]
 8006e18:	f101 0110 	add.w	r1, r1, #16
 8006e1c:	d8f2      	bhi.n	8006e04 <__aeabi_memset+0x38>
 8006e1e:	f1a4 0110 	sub.w	r1, r4, #16
 8006e22:	f021 010f 	bic.w	r1, r1, #15
 8006e26:	f004 040f 	and.w	r4, r4, #15
 8006e2a:	3110      	adds	r1, #16
 8006e2c:	2c03      	cmp	r4, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	d90d      	bls.n	8006e4e <__aeabi_memset+0x82>
 8006e32:	461e      	mov	r6, r3
 8006e34:	4621      	mov	r1, r4
 8006e36:	3904      	subs	r1, #4
 8006e38:	2903      	cmp	r1, #3
 8006e3a:	f846 5b04 	str.w	r5, [r6], #4
 8006e3e:	d8fa      	bhi.n	8006e36 <__aeabi_memset+0x6a>
 8006e40:	1f21      	subs	r1, r4, #4
 8006e42:	f021 0103 	bic.w	r1, r1, #3
 8006e46:	3104      	adds	r1, #4
 8006e48:	440b      	add	r3, r1
 8006e4a:	f004 0403 	and.w	r4, r4, #3
 8006e4e:	b12c      	cbz	r4, 8006e5c <__aeabi_memset+0x90>
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	441c      	add	r4, r3
 8006e54:	f803 2b01 	strb.w	r2, [r3], #1
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	d1fb      	bne.n	8006e54 <__aeabi_memset+0x88>
 8006e5c:	bc70      	pop	{r4, r5, r6}
 8006e5e:	4770      	bx	lr
 8006e60:	460c      	mov	r4, r1
 8006e62:	4603      	mov	r3, r0
 8006e64:	e7c2      	b.n	8006dec <__aeabi_memset+0x20>

08006e66 <strlen>:
 8006e66:	4603      	mov	r3, r0
 8006e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	d1fb      	bne.n	8006e68 <strlen+0x2>
 8006e70:	1a18      	subs	r0, r3, r0
 8006e72:	3801      	subs	r0, #1
 8006e74:	4770      	bx	lr
	...

08006e80 <memchr>:
 8006e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006e84:	2a10      	cmp	r2, #16
 8006e86:	db2b      	blt.n	8006ee0 <memchr+0x60>
 8006e88:	f010 0f07 	tst.w	r0, #7
 8006e8c:	d008      	beq.n	8006ea0 <memchr+0x20>
 8006e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e92:	3a01      	subs	r2, #1
 8006e94:	428b      	cmp	r3, r1
 8006e96:	d02d      	beq.n	8006ef4 <memchr+0x74>
 8006e98:	f010 0f07 	tst.w	r0, #7
 8006e9c:	b342      	cbz	r2, 8006ef0 <memchr+0x70>
 8006e9e:	d1f6      	bne.n	8006e8e <memchr+0xe>
 8006ea0:	b4f0      	push	{r4, r5, r6, r7}
 8006ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006eaa:	f022 0407 	bic.w	r4, r2, #7
 8006eae:	f07f 0700 	mvns.w	r7, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006eb8:	3c08      	subs	r4, #8
 8006eba:	ea85 0501 	eor.w	r5, r5, r1
 8006ebe:	ea86 0601 	eor.w	r6, r6, r1
 8006ec2:	fa85 f547 	uadd8	r5, r5, r7
 8006ec6:	faa3 f587 	sel	r5, r3, r7
 8006eca:	fa86 f647 	uadd8	r6, r6, r7
 8006ece:	faa5 f687 	sel	r6, r5, r7
 8006ed2:	b98e      	cbnz	r6, 8006ef8 <memchr+0x78>
 8006ed4:	d1ee      	bne.n	8006eb4 <memchr+0x34>
 8006ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8006ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006edc:	f002 0207 	and.w	r2, r2, #7
 8006ee0:	b132      	cbz	r2, 8006ef0 <memchr+0x70>
 8006ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ee6:	3a01      	subs	r2, #1
 8006ee8:	ea83 0301 	eor.w	r3, r3, r1
 8006eec:	b113      	cbz	r3, 8006ef4 <memchr+0x74>
 8006eee:	d1f8      	bne.n	8006ee2 <memchr+0x62>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4770      	bx	lr
 8006ef4:	3801      	subs	r0, #1
 8006ef6:	4770      	bx	lr
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	bf06      	itte	eq
 8006efc:	4635      	moveq	r5, r6
 8006efe:	3803      	subeq	r0, #3
 8006f00:	3807      	subne	r0, #7
 8006f02:	f015 0f01 	tst.w	r5, #1
 8006f06:	d107      	bne.n	8006f18 <memchr+0x98>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006f0e:	bf02      	ittt	eq
 8006f10:	3001      	addeq	r0, #1
 8006f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006f16:	3001      	addeq	r0, #1
 8006f18:	bcf0      	pop	{r4, r5, r6, r7}
 8006f1a:	3801      	subs	r0, #1
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop

08006f20 <__aeabi_drsub>:
 8006f20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006f24:	e002      	b.n	8006f2c <__adddf3>
 8006f26:	bf00      	nop

08006f28 <__aeabi_dsub>:
 8006f28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006f2c <__adddf3>:
 8006f2c:	b530      	push	{r4, r5, lr}
 8006f2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006f32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006f36:	ea94 0f05 	teq	r4, r5
 8006f3a:	bf08      	it	eq
 8006f3c:	ea90 0f02 	teqeq	r0, r2
 8006f40:	bf1f      	itttt	ne
 8006f42:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006f46:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006f4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006f4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f52:	f000 80e2 	beq.w	800711a <__adddf3+0x1ee>
 8006f56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006f5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006f5e:	bfb8      	it	lt
 8006f60:	426d      	neglt	r5, r5
 8006f62:	dd0c      	ble.n	8006f7e <__adddf3+0x52>
 8006f64:	442c      	add	r4, r5
 8006f66:	ea80 0202 	eor.w	r2, r0, r2
 8006f6a:	ea81 0303 	eor.w	r3, r1, r3
 8006f6e:	ea82 0000 	eor.w	r0, r2, r0
 8006f72:	ea83 0101 	eor.w	r1, r3, r1
 8006f76:	ea80 0202 	eor.w	r2, r0, r2
 8006f7a:	ea81 0303 	eor.w	r3, r1, r3
 8006f7e:	2d36      	cmp	r5, #54	; 0x36
 8006f80:	bf88      	it	hi
 8006f82:	bd30      	pophi	{r4, r5, pc}
 8006f84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006f88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006f90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006f94:	d002      	beq.n	8006f9c <__adddf3+0x70>
 8006f96:	4240      	negs	r0, r0
 8006f98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006f9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006fa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006fa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006fa8:	d002      	beq.n	8006fb0 <__adddf3+0x84>
 8006faa:	4252      	negs	r2, r2
 8006fac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006fb0:	ea94 0f05 	teq	r4, r5
 8006fb4:	f000 80a7 	beq.w	8007106 <__adddf3+0x1da>
 8006fb8:	f1a4 0401 	sub.w	r4, r4, #1
 8006fbc:	f1d5 0e20 	rsbs	lr, r5, #32
 8006fc0:	db0d      	blt.n	8006fde <__adddf3+0xb2>
 8006fc2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006fc6:	fa22 f205 	lsr.w	r2, r2, r5
 8006fca:	1880      	adds	r0, r0, r2
 8006fcc:	f141 0100 	adc.w	r1, r1, #0
 8006fd0:	fa03 f20e 	lsl.w	r2, r3, lr
 8006fd4:	1880      	adds	r0, r0, r2
 8006fd6:	fa43 f305 	asr.w	r3, r3, r5
 8006fda:	4159      	adcs	r1, r3
 8006fdc:	e00e      	b.n	8006ffc <__adddf3+0xd0>
 8006fde:	f1a5 0520 	sub.w	r5, r5, #32
 8006fe2:	f10e 0e20 	add.w	lr, lr, #32
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006fec:	bf28      	it	cs
 8006fee:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006ff2:	fa43 f305 	asr.w	r3, r3, r5
 8006ff6:	18c0      	adds	r0, r0, r3
 8006ff8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	d507      	bpl.n	8007012 <__adddf3+0xe6>
 8007002:	f04f 0e00 	mov.w	lr, #0
 8007006:	f1dc 0c00 	rsbs	ip, ip, #0
 800700a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800700e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007012:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007016:	d31b      	bcc.n	8007050 <__adddf3+0x124>
 8007018:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800701c:	d30c      	bcc.n	8007038 <__adddf3+0x10c>
 800701e:	0849      	lsrs	r1, r1, #1
 8007020:	ea5f 0030 	movs.w	r0, r0, rrx
 8007024:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007028:	f104 0401 	add.w	r4, r4, #1
 800702c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007030:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007034:	f080 809a 	bcs.w	800716c <__adddf3+0x240>
 8007038:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800703c:	bf08      	it	eq
 800703e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007042:	f150 0000 	adcs.w	r0, r0, #0
 8007046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800704a:	ea41 0105 	orr.w	r1, r1, r5
 800704e:	bd30      	pop	{r4, r5, pc}
 8007050:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007054:	4140      	adcs	r0, r0
 8007056:	eb41 0101 	adc.w	r1, r1, r1
 800705a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800705e:	f1a4 0401 	sub.w	r4, r4, #1
 8007062:	d1e9      	bne.n	8007038 <__adddf3+0x10c>
 8007064:	f091 0f00 	teq	r1, #0
 8007068:	bf04      	itt	eq
 800706a:	4601      	moveq	r1, r0
 800706c:	2000      	moveq	r0, #0
 800706e:	fab1 f381 	clz	r3, r1
 8007072:	bf08      	it	eq
 8007074:	3320      	addeq	r3, #32
 8007076:	f1a3 030b 	sub.w	r3, r3, #11
 800707a:	f1b3 0220 	subs.w	r2, r3, #32
 800707e:	da0c      	bge.n	800709a <__adddf3+0x16e>
 8007080:	320c      	adds	r2, #12
 8007082:	dd08      	ble.n	8007096 <__adddf3+0x16a>
 8007084:	f102 0c14 	add.w	ip, r2, #20
 8007088:	f1c2 020c 	rsb	r2, r2, #12
 800708c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007090:	fa21 f102 	lsr.w	r1, r1, r2
 8007094:	e00c      	b.n	80070b0 <__adddf3+0x184>
 8007096:	f102 0214 	add.w	r2, r2, #20
 800709a:	bfd8      	it	le
 800709c:	f1c2 0c20 	rsble	ip, r2, #32
 80070a0:	fa01 f102 	lsl.w	r1, r1, r2
 80070a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80070a8:	bfdc      	itt	le
 80070aa:	ea41 010c 	orrle.w	r1, r1, ip
 80070ae:	4090      	lslle	r0, r2
 80070b0:	1ae4      	subs	r4, r4, r3
 80070b2:	bfa2      	ittt	ge
 80070b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80070b8:	4329      	orrge	r1, r5
 80070ba:	bd30      	popge	{r4, r5, pc}
 80070bc:	ea6f 0404 	mvn.w	r4, r4
 80070c0:	3c1f      	subs	r4, #31
 80070c2:	da1c      	bge.n	80070fe <__adddf3+0x1d2>
 80070c4:	340c      	adds	r4, #12
 80070c6:	dc0e      	bgt.n	80070e6 <__adddf3+0x1ba>
 80070c8:	f104 0414 	add.w	r4, r4, #20
 80070cc:	f1c4 0220 	rsb	r2, r4, #32
 80070d0:	fa20 f004 	lsr.w	r0, r0, r4
 80070d4:	fa01 f302 	lsl.w	r3, r1, r2
 80070d8:	ea40 0003 	orr.w	r0, r0, r3
 80070dc:	fa21 f304 	lsr.w	r3, r1, r4
 80070e0:	ea45 0103 	orr.w	r1, r5, r3
 80070e4:	bd30      	pop	{r4, r5, pc}
 80070e6:	f1c4 040c 	rsb	r4, r4, #12
 80070ea:	f1c4 0220 	rsb	r2, r4, #32
 80070ee:	fa20 f002 	lsr.w	r0, r0, r2
 80070f2:	fa01 f304 	lsl.w	r3, r1, r4
 80070f6:	ea40 0003 	orr.w	r0, r0, r3
 80070fa:	4629      	mov	r1, r5
 80070fc:	bd30      	pop	{r4, r5, pc}
 80070fe:	fa21 f004 	lsr.w	r0, r1, r4
 8007102:	4629      	mov	r1, r5
 8007104:	bd30      	pop	{r4, r5, pc}
 8007106:	f094 0f00 	teq	r4, #0
 800710a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800710e:	bf06      	itte	eq
 8007110:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007114:	3401      	addeq	r4, #1
 8007116:	3d01      	subne	r5, #1
 8007118:	e74e      	b.n	8006fb8 <__adddf3+0x8c>
 800711a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800711e:	bf18      	it	ne
 8007120:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007124:	d029      	beq.n	800717a <__adddf3+0x24e>
 8007126:	ea94 0f05 	teq	r4, r5
 800712a:	bf08      	it	eq
 800712c:	ea90 0f02 	teqeq	r0, r2
 8007130:	d005      	beq.n	800713e <__adddf3+0x212>
 8007132:	ea54 0c00 	orrs.w	ip, r4, r0
 8007136:	bf04      	itt	eq
 8007138:	4619      	moveq	r1, r3
 800713a:	4610      	moveq	r0, r2
 800713c:	bd30      	pop	{r4, r5, pc}
 800713e:	ea91 0f03 	teq	r1, r3
 8007142:	bf1e      	ittt	ne
 8007144:	2100      	movne	r1, #0
 8007146:	2000      	movne	r0, #0
 8007148:	bd30      	popne	{r4, r5, pc}
 800714a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800714e:	d105      	bne.n	800715c <__adddf3+0x230>
 8007150:	0040      	lsls	r0, r0, #1
 8007152:	4149      	adcs	r1, r1
 8007154:	bf28      	it	cs
 8007156:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800715a:	bd30      	pop	{r4, r5, pc}
 800715c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007160:	bf3c      	itt	cc
 8007162:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007166:	bd30      	popcc	{r4, r5, pc}
 8007168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800716c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007170:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007174:	f04f 0000 	mov.w	r0, #0
 8007178:	bd30      	pop	{r4, r5, pc}
 800717a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800717e:	bf1a      	itte	ne
 8007180:	4619      	movne	r1, r3
 8007182:	4610      	movne	r0, r2
 8007184:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007188:	bf1c      	itt	ne
 800718a:	460b      	movne	r3, r1
 800718c:	4602      	movne	r2, r0
 800718e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007192:	bf06      	itte	eq
 8007194:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007198:	ea91 0f03 	teqeq	r1, r3
 800719c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80071a0:	bd30      	pop	{r4, r5, pc}
 80071a2:	bf00      	nop

080071a4 <__aeabi_ui2d>:
 80071a4:	f090 0f00 	teq	r0, #0
 80071a8:	bf04      	itt	eq
 80071aa:	2100      	moveq	r1, #0
 80071ac:	4770      	bxeq	lr
 80071ae:	b530      	push	{r4, r5, lr}
 80071b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80071b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80071b8:	f04f 0500 	mov.w	r5, #0
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	e750      	b.n	8007064 <__adddf3+0x138>
 80071c2:	bf00      	nop

080071c4 <__aeabi_i2d>:
 80071c4:	f090 0f00 	teq	r0, #0
 80071c8:	bf04      	itt	eq
 80071ca:	2100      	moveq	r1, #0
 80071cc:	4770      	bxeq	lr
 80071ce:	b530      	push	{r4, r5, lr}
 80071d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80071d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80071d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80071dc:	bf48      	it	mi
 80071de:	4240      	negmi	r0, r0
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	e73e      	b.n	8007064 <__adddf3+0x138>
 80071e6:	bf00      	nop

080071e8 <__aeabi_f2d>:
 80071e8:	0042      	lsls	r2, r0, #1
 80071ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80071ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80071f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80071f6:	bf1f      	itttt	ne
 80071f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80071fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007200:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007204:	4770      	bxne	lr
 8007206:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800720a:	bf08      	it	eq
 800720c:	4770      	bxeq	lr
 800720e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007212:	bf04      	itt	eq
 8007214:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007218:	4770      	bxeq	lr
 800721a:	b530      	push	{r4, r5, lr}
 800721c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007228:	e71c      	b.n	8007064 <__adddf3+0x138>
 800722a:	bf00      	nop

0800722c <__aeabi_ul2d>:
 800722c:	ea50 0201 	orrs.w	r2, r0, r1
 8007230:	bf08      	it	eq
 8007232:	4770      	bxeq	lr
 8007234:	b530      	push	{r4, r5, lr}
 8007236:	f04f 0500 	mov.w	r5, #0
 800723a:	e00a      	b.n	8007252 <__aeabi_l2d+0x16>

0800723c <__aeabi_l2d>:
 800723c:	ea50 0201 	orrs.w	r2, r0, r1
 8007240:	bf08      	it	eq
 8007242:	4770      	bxeq	lr
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800724a:	d502      	bpl.n	8007252 <__aeabi_l2d+0x16>
 800724c:	4240      	negs	r0, r0
 800724e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007252:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007256:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800725a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800725e:	f43f aed8 	beq.w	8007012 <__adddf3+0xe6>
 8007262:	f04f 0203 	mov.w	r2, #3
 8007266:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800726a:	bf18      	it	ne
 800726c:	3203      	addne	r2, #3
 800726e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007272:	bf18      	it	ne
 8007274:	3203      	addne	r2, #3
 8007276:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800727a:	f1c2 0320 	rsb	r3, r2, #32
 800727e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007282:	fa20 f002 	lsr.w	r0, r0, r2
 8007286:	fa01 fe03 	lsl.w	lr, r1, r3
 800728a:	ea40 000e 	orr.w	r0, r0, lr
 800728e:	fa21 f102 	lsr.w	r1, r1, r2
 8007292:	4414      	add	r4, r2
 8007294:	e6bd      	b.n	8007012 <__adddf3+0xe6>
 8007296:	bf00      	nop

08007298 <__aeabi_frsub>:
 8007298:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800729c:	e002      	b.n	80072a4 <__addsf3>
 800729e:	bf00      	nop

080072a0 <__aeabi_fsub>:
 80072a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080072a4 <__addsf3>:
 80072a4:	0042      	lsls	r2, r0, #1
 80072a6:	bf1f      	itttt	ne
 80072a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80072ac:	ea92 0f03 	teqne	r2, r3
 80072b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80072b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80072b8:	d06a      	beq.n	8007390 <__addsf3+0xec>
 80072ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80072be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80072c2:	bfc1      	itttt	gt
 80072c4:	18d2      	addgt	r2, r2, r3
 80072c6:	4041      	eorgt	r1, r0
 80072c8:	4048      	eorgt	r0, r1
 80072ca:	4041      	eorgt	r1, r0
 80072cc:	bfb8      	it	lt
 80072ce:	425b      	neglt	r3, r3
 80072d0:	2b19      	cmp	r3, #25
 80072d2:	bf88      	it	hi
 80072d4:	4770      	bxhi	lr
 80072d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80072da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80072de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80072e2:	bf18      	it	ne
 80072e4:	4240      	negne	r0, r0
 80072e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80072ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80072ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80072f2:	bf18      	it	ne
 80072f4:	4249      	negne	r1, r1
 80072f6:	ea92 0f03 	teq	r2, r3
 80072fa:	d03f      	beq.n	800737c <__addsf3+0xd8>
 80072fc:	f1a2 0201 	sub.w	r2, r2, #1
 8007300:	fa41 fc03 	asr.w	ip, r1, r3
 8007304:	eb10 000c 	adds.w	r0, r0, ip
 8007308:	f1c3 0320 	rsb	r3, r3, #32
 800730c:	fa01 f103 	lsl.w	r1, r1, r3
 8007310:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007314:	d502      	bpl.n	800731c <__addsf3+0x78>
 8007316:	4249      	negs	r1, r1
 8007318:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800731c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007320:	d313      	bcc.n	800734a <__addsf3+0xa6>
 8007322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007326:	d306      	bcc.n	8007336 <__addsf3+0x92>
 8007328:	0840      	lsrs	r0, r0, #1
 800732a:	ea4f 0131 	mov.w	r1, r1, rrx
 800732e:	f102 0201 	add.w	r2, r2, #1
 8007332:	2afe      	cmp	r2, #254	; 0xfe
 8007334:	d251      	bcs.n	80073da <__addsf3+0x136>
 8007336:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800733a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800733e:	bf08      	it	eq
 8007340:	f020 0001 	biceq.w	r0, r0, #1
 8007344:	ea40 0003 	orr.w	r0, r0, r3
 8007348:	4770      	bx	lr
 800734a:	0049      	lsls	r1, r1, #1
 800734c:	eb40 0000 	adc.w	r0, r0, r0
 8007350:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007354:	f1a2 0201 	sub.w	r2, r2, #1
 8007358:	d1ed      	bne.n	8007336 <__addsf3+0x92>
 800735a:	fab0 fc80 	clz	ip, r0
 800735e:	f1ac 0c08 	sub.w	ip, ip, #8
 8007362:	ebb2 020c 	subs.w	r2, r2, ip
 8007366:	fa00 f00c 	lsl.w	r0, r0, ip
 800736a:	bfaa      	itet	ge
 800736c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007370:	4252      	neglt	r2, r2
 8007372:	4318      	orrge	r0, r3
 8007374:	bfbc      	itt	lt
 8007376:	40d0      	lsrlt	r0, r2
 8007378:	4318      	orrlt	r0, r3
 800737a:	4770      	bx	lr
 800737c:	f092 0f00 	teq	r2, #0
 8007380:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007384:	bf06      	itte	eq
 8007386:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800738a:	3201      	addeq	r2, #1
 800738c:	3b01      	subne	r3, #1
 800738e:	e7b5      	b.n	80072fc <__addsf3+0x58>
 8007390:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007394:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007398:	bf18      	it	ne
 800739a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800739e:	d021      	beq.n	80073e4 <__addsf3+0x140>
 80073a0:	ea92 0f03 	teq	r2, r3
 80073a4:	d004      	beq.n	80073b0 <__addsf3+0x10c>
 80073a6:	f092 0f00 	teq	r2, #0
 80073aa:	bf08      	it	eq
 80073ac:	4608      	moveq	r0, r1
 80073ae:	4770      	bx	lr
 80073b0:	ea90 0f01 	teq	r0, r1
 80073b4:	bf1c      	itt	ne
 80073b6:	2000      	movne	r0, #0
 80073b8:	4770      	bxne	lr
 80073ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80073be:	d104      	bne.n	80073ca <__addsf3+0x126>
 80073c0:	0040      	lsls	r0, r0, #1
 80073c2:	bf28      	it	cs
 80073c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80073c8:	4770      	bx	lr
 80073ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80073ce:	bf3c      	itt	cc
 80073d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80073d4:	4770      	bxcc	lr
 80073d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80073da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80073de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80073e2:	4770      	bx	lr
 80073e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80073e8:	bf16      	itet	ne
 80073ea:	4608      	movne	r0, r1
 80073ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80073f0:	4601      	movne	r1, r0
 80073f2:	0242      	lsls	r2, r0, #9
 80073f4:	bf06      	itte	eq
 80073f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80073fa:	ea90 0f01 	teqeq	r0, r1
 80073fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007402:	4770      	bx	lr

08007404 <__aeabi_ui2f>:
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e004      	b.n	8007414 <__aeabi_i2f+0x8>
 800740a:	bf00      	nop

0800740c <__aeabi_i2f>:
 800740c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007410:	bf48      	it	mi
 8007412:	4240      	negmi	r0, r0
 8007414:	ea5f 0c00 	movs.w	ip, r0
 8007418:	bf08      	it	eq
 800741a:	4770      	bxeq	lr
 800741c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007420:	4601      	mov	r1, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	e01c      	b.n	8007462 <__aeabi_l2f+0x2a>

08007428 <__aeabi_ul2f>:
 8007428:	ea50 0201 	orrs.w	r2, r0, r1
 800742c:	bf08      	it	eq
 800742e:	4770      	bxeq	lr
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	e00a      	b.n	800744c <__aeabi_l2f+0x14>
 8007436:	bf00      	nop

08007438 <__aeabi_l2f>:
 8007438:	ea50 0201 	orrs.w	r2, r0, r1
 800743c:	bf08      	it	eq
 800743e:	4770      	bxeq	lr
 8007440:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007444:	d502      	bpl.n	800744c <__aeabi_l2f+0x14>
 8007446:	4240      	negs	r0, r0
 8007448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800744c:	ea5f 0c01 	movs.w	ip, r1
 8007450:	bf02      	ittt	eq
 8007452:	4684      	moveq	ip, r0
 8007454:	4601      	moveq	r1, r0
 8007456:	2000      	moveq	r0, #0
 8007458:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800745c:	bf08      	it	eq
 800745e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007462:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007466:	fabc f28c 	clz	r2, ip
 800746a:	3a08      	subs	r2, #8
 800746c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007470:	db10      	blt.n	8007494 <__aeabi_l2f+0x5c>
 8007472:	fa01 fc02 	lsl.w	ip, r1, r2
 8007476:	4463      	add	r3, ip
 8007478:	fa00 fc02 	lsl.w	ip, r0, r2
 800747c:	f1c2 0220 	rsb	r2, r2, #32
 8007480:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007484:	fa20 f202 	lsr.w	r2, r0, r2
 8007488:	eb43 0002 	adc.w	r0, r3, r2
 800748c:	bf08      	it	eq
 800748e:	f020 0001 	biceq.w	r0, r0, #1
 8007492:	4770      	bx	lr
 8007494:	f102 0220 	add.w	r2, r2, #32
 8007498:	fa01 fc02 	lsl.w	ip, r1, r2
 800749c:	f1c2 0220 	rsb	r2, r2, #32
 80074a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80074a4:	fa21 f202 	lsr.w	r2, r1, r2
 80074a8:	eb43 0002 	adc.w	r0, r3, r2
 80074ac:	bf08      	it	eq
 80074ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80074b2:	4770      	bx	lr

080074b4 <__aeabi_uldivmod>:
 80074b4:	b953      	cbnz	r3, 80074cc <__aeabi_uldivmod+0x18>
 80074b6:	b94a      	cbnz	r2, 80074cc <__aeabi_uldivmod+0x18>
 80074b8:	2900      	cmp	r1, #0
 80074ba:	bf08      	it	eq
 80074bc:	2800      	cmpeq	r0, #0
 80074be:	bf1c      	itt	ne
 80074c0:	f04f 31ff 	movne.w	r1, #4294967295
 80074c4:	f04f 30ff 	movne.w	r0, #4294967295
 80074c8:	f000 b972 	b.w	80077b0 <__aeabi_idiv0>
 80074cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80074d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80074d4:	f000 f806 	bl	80074e4 <__udivmoddi4>
 80074d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80074dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074e0:	b004      	add	sp, #16
 80074e2:	4770      	bx	lr

080074e4 <__udivmoddi4>:
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	9e08      	ldr	r6, [sp, #32]
 80074ea:	4604      	mov	r4, r0
 80074ec:	4688      	mov	r8, r1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d14b      	bne.n	800758a <__udivmoddi4+0xa6>
 80074f2:	428a      	cmp	r2, r1
 80074f4:	4615      	mov	r5, r2
 80074f6:	d967      	bls.n	80075c8 <__udivmoddi4+0xe4>
 80074f8:	fab2 f282 	clz	r2, r2
 80074fc:	b14a      	cbz	r2, 8007512 <__udivmoddi4+0x2e>
 80074fe:	f1c2 0720 	rsb	r7, r2, #32
 8007502:	fa01 f302 	lsl.w	r3, r1, r2
 8007506:	fa20 f707 	lsr.w	r7, r0, r7
 800750a:	4095      	lsls	r5, r2
 800750c:	ea47 0803 	orr.w	r8, r7, r3
 8007510:	4094      	lsls	r4, r2
 8007512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007516:	0c23      	lsrs	r3, r4, #16
 8007518:	fbb8 f7fe 	udiv	r7, r8, lr
 800751c:	fa1f fc85 	uxth.w	ip, r5
 8007520:	fb0e 8817 	mls	r8, lr, r7, r8
 8007524:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007528:	fb07 f10c 	mul.w	r1, r7, ip
 800752c:	4299      	cmp	r1, r3
 800752e:	d909      	bls.n	8007544 <__udivmoddi4+0x60>
 8007530:	18eb      	adds	r3, r5, r3
 8007532:	f107 30ff 	add.w	r0, r7, #4294967295
 8007536:	f080 811b 	bcs.w	8007770 <__udivmoddi4+0x28c>
 800753a:	4299      	cmp	r1, r3
 800753c:	f240 8118 	bls.w	8007770 <__udivmoddi4+0x28c>
 8007540:	3f02      	subs	r7, #2
 8007542:	442b      	add	r3, r5
 8007544:	1a5b      	subs	r3, r3, r1
 8007546:	b2a4      	uxth	r4, r4
 8007548:	fbb3 f0fe 	udiv	r0, r3, lr
 800754c:	fb0e 3310 	mls	r3, lr, r0, r3
 8007550:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007554:	fb00 fc0c 	mul.w	ip, r0, ip
 8007558:	45a4      	cmp	ip, r4
 800755a:	d909      	bls.n	8007570 <__udivmoddi4+0x8c>
 800755c:	192c      	adds	r4, r5, r4
 800755e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007562:	f080 8107 	bcs.w	8007774 <__udivmoddi4+0x290>
 8007566:	45a4      	cmp	ip, r4
 8007568:	f240 8104 	bls.w	8007774 <__udivmoddi4+0x290>
 800756c:	3802      	subs	r0, #2
 800756e:	442c      	add	r4, r5
 8007570:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007574:	eba4 040c 	sub.w	r4, r4, ip
 8007578:	2700      	movs	r7, #0
 800757a:	b11e      	cbz	r6, 8007584 <__udivmoddi4+0xa0>
 800757c:	40d4      	lsrs	r4, r2
 800757e:	2300      	movs	r3, #0
 8007580:	e9c6 4300 	strd	r4, r3, [r6]
 8007584:	4639      	mov	r1, r7
 8007586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758a:	428b      	cmp	r3, r1
 800758c:	d909      	bls.n	80075a2 <__udivmoddi4+0xbe>
 800758e:	2e00      	cmp	r6, #0
 8007590:	f000 80eb 	beq.w	800776a <__udivmoddi4+0x286>
 8007594:	2700      	movs	r7, #0
 8007596:	e9c6 0100 	strd	r0, r1, [r6]
 800759a:	4638      	mov	r0, r7
 800759c:	4639      	mov	r1, r7
 800759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a2:	fab3 f783 	clz	r7, r3
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	d147      	bne.n	800763a <__udivmoddi4+0x156>
 80075aa:	428b      	cmp	r3, r1
 80075ac:	d302      	bcc.n	80075b4 <__udivmoddi4+0xd0>
 80075ae:	4282      	cmp	r2, r0
 80075b0:	f200 80fa 	bhi.w	80077a8 <__udivmoddi4+0x2c4>
 80075b4:	1a84      	subs	r4, r0, r2
 80075b6:	eb61 0303 	sbc.w	r3, r1, r3
 80075ba:	2001      	movs	r0, #1
 80075bc:	4698      	mov	r8, r3
 80075be:	2e00      	cmp	r6, #0
 80075c0:	d0e0      	beq.n	8007584 <__udivmoddi4+0xa0>
 80075c2:	e9c6 4800 	strd	r4, r8, [r6]
 80075c6:	e7dd      	b.n	8007584 <__udivmoddi4+0xa0>
 80075c8:	b902      	cbnz	r2, 80075cc <__udivmoddi4+0xe8>
 80075ca:	deff      	udf	#255	; 0xff
 80075cc:	fab2 f282 	clz	r2, r2
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	f040 808f 	bne.w	80076f4 <__udivmoddi4+0x210>
 80075d6:	1b49      	subs	r1, r1, r5
 80075d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80075dc:	fa1f f885 	uxth.w	r8, r5
 80075e0:	2701      	movs	r7, #1
 80075e2:	fbb1 fcfe 	udiv	ip, r1, lr
 80075e6:	0c23      	lsrs	r3, r4, #16
 80075e8:	fb0e 111c 	mls	r1, lr, ip, r1
 80075ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80075f0:	fb08 f10c 	mul.w	r1, r8, ip
 80075f4:	4299      	cmp	r1, r3
 80075f6:	d907      	bls.n	8007608 <__udivmoddi4+0x124>
 80075f8:	18eb      	adds	r3, r5, r3
 80075fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80075fe:	d202      	bcs.n	8007606 <__udivmoddi4+0x122>
 8007600:	4299      	cmp	r1, r3
 8007602:	f200 80cd 	bhi.w	80077a0 <__udivmoddi4+0x2bc>
 8007606:	4684      	mov	ip, r0
 8007608:	1a59      	subs	r1, r3, r1
 800760a:	b2a3      	uxth	r3, r4
 800760c:	fbb1 f0fe 	udiv	r0, r1, lr
 8007610:	fb0e 1410 	mls	r4, lr, r0, r1
 8007614:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007618:	fb08 f800 	mul.w	r8, r8, r0
 800761c:	45a0      	cmp	r8, r4
 800761e:	d907      	bls.n	8007630 <__udivmoddi4+0x14c>
 8007620:	192c      	adds	r4, r5, r4
 8007622:	f100 33ff 	add.w	r3, r0, #4294967295
 8007626:	d202      	bcs.n	800762e <__udivmoddi4+0x14a>
 8007628:	45a0      	cmp	r8, r4
 800762a:	f200 80b6 	bhi.w	800779a <__udivmoddi4+0x2b6>
 800762e:	4618      	mov	r0, r3
 8007630:	eba4 0408 	sub.w	r4, r4, r8
 8007634:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007638:	e79f      	b.n	800757a <__udivmoddi4+0x96>
 800763a:	f1c7 0c20 	rsb	ip, r7, #32
 800763e:	40bb      	lsls	r3, r7
 8007640:	fa22 fe0c 	lsr.w	lr, r2, ip
 8007644:	ea4e 0e03 	orr.w	lr, lr, r3
 8007648:	fa01 f407 	lsl.w	r4, r1, r7
 800764c:	fa20 f50c 	lsr.w	r5, r0, ip
 8007650:	fa21 f30c 	lsr.w	r3, r1, ip
 8007654:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007658:	4325      	orrs	r5, r4
 800765a:	fbb3 f9f8 	udiv	r9, r3, r8
 800765e:	0c2c      	lsrs	r4, r5, #16
 8007660:	fb08 3319 	mls	r3, r8, r9, r3
 8007664:	fa1f fa8e 	uxth.w	sl, lr
 8007668:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800766c:	fb09 f40a 	mul.w	r4, r9, sl
 8007670:	429c      	cmp	r4, r3
 8007672:	fa02 f207 	lsl.w	r2, r2, r7
 8007676:	fa00 f107 	lsl.w	r1, r0, r7
 800767a:	d90b      	bls.n	8007694 <__udivmoddi4+0x1b0>
 800767c:	eb1e 0303 	adds.w	r3, lr, r3
 8007680:	f109 30ff 	add.w	r0, r9, #4294967295
 8007684:	f080 8087 	bcs.w	8007796 <__udivmoddi4+0x2b2>
 8007688:	429c      	cmp	r4, r3
 800768a:	f240 8084 	bls.w	8007796 <__udivmoddi4+0x2b2>
 800768e:	f1a9 0902 	sub.w	r9, r9, #2
 8007692:	4473      	add	r3, lr
 8007694:	1b1b      	subs	r3, r3, r4
 8007696:	b2ad      	uxth	r5, r5
 8007698:	fbb3 f0f8 	udiv	r0, r3, r8
 800769c:	fb08 3310 	mls	r3, r8, r0, r3
 80076a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80076a4:	fb00 fa0a 	mul.w	sl, r0, sl
 80076a8:	45a2      	cmp	sl, r4
 80076aa:	d908      	bls.n	80076be <__udivmoddi4+0x1da>
 80076ac:	eb1e 0404 	adds.w	r4, lr, r4
 80076b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b4:	d26b      	bcs.n	800778e <__udivmoddi4+0x2aa>
 80076b6:	45a2      	cmp	sl, r4
 80076b8:	d969      	bls.n	800778e <__udivmoddi4+0x2aa>
 80076ba:	3802      	subs	r0, #2
 80076bc:	4474      	add	r4, lr
 80076be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80076c2:	fba0 8902 	umull	r8, r9, r0, r2
 80076c6:	eba4 040a 	sub.w	r4, r4, sl
 80076ca:	454c      	cmp	r4, r9
 80076cc:	46c2      	mov	sl, r8
 80076ce:	464b      	mov	r3, r9
 80076d0:	d354      	bcc.n	800777c <__udivmoddi4+0x298>
 80076d2:	d051      	beq.n	8007778 <__udivmoddi4+0x294>
 80076d4:	2e00      	cmp	r6, #0
 80076d6:	d069      	beq.n	80077ac <__udivmoddi4+0x2c8>
 80076d8:	ebb1 050a 	subs.w	r5, r1, sl
 80076dc:	eb64 0403 	sbc.w	r4, r4, r3
 80076e0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80076e4:	40fd      	lsrs	r5, r7
 80076e6:	40fc      	lsrs	r4, r7
 80076e8:	ea4c 0505 	orr.w	r5, ip, r5
 80076ec:	e9c6 5400 	strd	r5, r4, [r6]
 80076f0:	2700      	movs	r7, #0
 80076f2:	e747      	b.n	8007584 <__udivmoddi4+0xa0>
 80076f4:	f1c2 0320 	rsb	r3, r2, #32
 80076f8:	fa20 f703 	lsr.w	r7, r0, r3
 80076fc:	4095      	lsls	r5, r2
 80076fe:	fa01 f002 	lsl.w	r0, r1, r2
 8007702:	fa21 f303 	lsr.w	r3, r1, r3
 8007706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800770a:	4338      	orrs	r0, r7
 800770c:	0c01      	lsrs	r1, r0, #16
 800770e:	fbb3 f7fe 	udiv	r7, r3, lr
 8007712:	fa1f f885 	uxth.w	r8, r5
 8007716:	fb0e 3317 	mls	r3, lr, r7, r3
 800771a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800771e:	fb07 f308 	mul.w	r3, r7, r8
 8007722:	428b      	cmp	r3, r1
 8007724:	fa04 f402 	lsl.w	r4, r4, r2
 8007728:	d907      	bls.n	800773a <__udivmoddi4+0x256>
 800772a:	1869      	adds	r1, r5, r1
 800772c:	f107 3cff 	add.w	ip, r7, #4294967295
 8007730:	d22f      	bcs.n	8007792 <__udivmoddi4+0x2ae>
 8007732:	428b      	cmp	r3, r1
 8007734:	d92d      	bls.n	8007792 <__udivmoddi4+0x2ae>
 8007736:	3f02      	subs	r7, #2
 8007738:	4429      	add	r1, r5
 800773a:	1acb      	subs	r3, r1, r3
 800773c:	b281      	uxth	r1, r0
 800773e:	fbb3 f0fe 	udiv	r0, r3, lr
 8007742:	fb0e 3310 	mls	r3, lr, r0, r3
 8007746:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800774a:	fb00 f308 	mul.w	r3, r0, r8
 800774e:	428b      	cmp	r3, r1
 8007750:	d907      	bls.n	8007762 <__udivmoddi4+0x27e>
 8007752:	1869      	adds	r1, r5, r1
 8007754:	f100 3cff 	add.w	ip, r0, #4294967295
 8007758:	d217      	bcs.n	800778a <__udivmoddi4+0x2a6>
 800775a:	428b      	cmp	r3, r1
 800775c:	d915      	bls.n	800778a <__udivmoddi4+0x2a6>
 800775e:	3802      	subs	r0, #2
 8007760:	4429      	add	r1, r5
 8007762:	1ac9      	subs	r1, r1, r3
 8007764:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007768:	e73b      	b.n	80075e2 <__udivmoddi4+0xfe>
 800776a:	4637      	mov	r7, r6
 800776c:	4630      	mov	r0, r6
 800776e:	e709      	b.n	8007584 <__udivmoddi4+0xa0>
 8007770:	4607      	mov	r7, r0
 8007772:	e6e7      	b.n	8007544 <__udivmoddi4+0x60>
 8007774:	4618      	mov	r0, r3
 8007776:	e6fb      	b.n	8007570 <__udivmoddi4+0x8c>
 8007778:	4541      	cmp	r1, r8
 800777a:	d2ab      	bcs.n	80076d4 <__udivmoddi4+0x1f0>
 800777c:	ebb8 0a02 	subs.w	sl, r8, r2
 8007780:	eb69 020e 	sbc.w	r2, r9, lr
 8007784:	3801      	subs	r0, #1
 8007786:	4613      	mov	r3, r2
 8007788:	e7a4      	b.n	80076d4 <__udivmoddi4+0x1f0>
 800778a:	4660      	mov	r0, ip
 800778c:	e7e9      	b.n	8007762 <__udivmoddi4+0x27e>
 800778e:	4618      	mov	r0, r3
 8007790:	e795      	b.n	80076be <__udivmoddi4+0x1da>
 8007792:	4667      	mov	r7, ip
 8007794:	e7d1      	b.n	800773a <__udivmoddi4+0x256>
 8007796:	4681      	mov	r9, r0
 8007798:	e77c      	b.n	8007694 <__udivmoddi4+0x1b0>
 800779a:	3802      	subs	r0, #2
 800779c:	442c      	add	r4, r5
 800779e:	e747      	b.n	8007630 <__udivmoddi4+0x14c>
 80077a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80077a4:	442b      	add	r3, r5
 80077a6:	e72f      	b.n	8007608 <__udivmoddi4+0x124>
 80077a8:	4638      	mov	r0, r7
 80077aa:	e708      	b.n	80075be <__udivmoddi4+0xda>
 80077ac:	4637      	mov	r7, r6
 80077ae:	e6e9      	b.n	8007584 <__udivmoddi4+0xa0>

080077b0 <__aeabi_idiv0>:
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop

080077b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80077b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077bc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <SCB_EnableICache+0x3c>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80077c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <SCB_EnableICache+0x3c>)
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <SCB_EnableICache+0x3c>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80077dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80077fa:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <SCB_EnableDCache+0x7c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007802:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0b5b      	lsrs	r3, r3, #13
 8007812:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007816:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	08db      	lsrs	r3, r3, #3
 800781c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007820:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800782a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007830:	490f      	ldr	r1, [pc, #60]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1e5a      	subs	r2, r3, #1
 800783c:	60ba      	str	r2, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1ef      	bne.n	8007822 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	60fa      	str	r2, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <SCB_EnableDCache+0x24>
 800784c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	4a06      	ldr	r2, [pc, #24]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785a:	6153      	str	r3, [r2, #20]
 800785c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007860:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b0ea      	sub	sp, #424	; 0x1a8
 8007878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800787a:	f7ff ff9b 	bl	80077b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800787e:	f7ff ffb9 	bl	80077f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007882:	f000 fbaa 	bl	8007fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007886:	f000 f873 	bl	8007970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800788a:	f000 f9a1 	bl	8007bd0 <MX_GPIO_Init>
  MX_CRC_Init();
 800788e:	f000 f8ff 	bl	8007a90 <MX_CRC_Init>
  MX_TIM2_Init();
 8007892:	f000 f91f 	bl	8007ad4 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 8007896:	f005 fc43 	bl	800d120 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  float input[1][1][prj_AI_INPUT_NUMBER] = {{{
 800789a:	f107 030c 	add.w	r3, r7, #12
 800789e:	4a2c      	ldr	r2, [pc, #176]	; (8007950 <main+0xdc>)
 80078a0:	4618      	mov	r0, r3
 80078a2:	4611      	mov	r1, r2
 80078a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80078a8:	461a      	mov	r2, r3
 80078aa:	f008 fe54 	bl	8010556 <memcpy>
  }}};

  float output[1][1][prj_AI_OUTPUT_NUMBER];

  // Initialize the AI neural network
  prj_AI_init();
 80078ae:	f005 fb87 	bl	800cfc0 <prj_AI_init>

  // Starting the timer
  HAL_TIM_Base_Start(&htim2);
 80078b2:	4828      	ldr	r0, [pc, #160]	; (8007954 <main+0xe0>)
 80078b4:	f002 f8c8 	bl	8009a48 <HAL_TIM_Base_Start>

  // Values for time calculation and starts counting time
  printf("\r\n\r\nStarting the timer...");
 80078b8:	4827      	ldr	r0, [pc, #156]	; (8007958 <main+0xe4>)
 80078ba:	f009 fb41 	bl	8010f40 <iprintf>
  unsigned int counter_stop;
  unsigned int counter_start;
  counter_start = htim2.Instance->CNT;
 80078be:	4b25      	ldr	r3, [pc, #148]	; (8007954 <main+0xe0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

  // Processing the IA
  prj_AI_process(input, output, true);
 80078c8:	4639      	mov	r1, r7
 80078ca:	f107 030c 	add.w	r3, r7, #12
 80078ce:	2201      	movs	r2, #1
 80078d0:	4618      	mov	r0, r3
 80078d2:	f005 fb7b 	bl	800cfcc <prj_AI_process>

  // Stopping the timer
  counter_stop = htim2.Instance->CNT;
 80078d6:	4b1f      	ldr	r3, [pc, #124]	; (8007954 <main+0xe0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  printf("\r\nStopping the timer...");
 80078e0:	481e      	ldr	r0, [pc, #120]	; (800795c <main+0xe8>)
 80078e2:	f009 fb2d 	bl	8010f40 <iprintf>

  printf("\r\n");
 80078e6:	481e      	ldr	r0, [pc, #120]	; (8007960 <main+0xec>)
 80078e8:	f009 fb9e 	bl	8011028 <puts>
  for (int i = 0; i < prj_AI_OUTPUT_NUMBER; i++) {
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80078f2:	e014      	b.n	800791e <main+0xaa>
	  printf("\r\noutput[0][0][%d]: %f", i, output[0][0][i]);
 80078f4:	463a      	mov	r2, r7
 80078f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	edd3 7a00 	vldr	s15, [r3]
 8007902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007906:	ec53 2b17 	vmov	r2, r3, d7
 800790a:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 800790e:	4815      	ldr	r0, [pc, #84]	; (8007964 <main+0xf0>)
 8007910:	f009 fb16 	bl	8010f40 <iprintf>
  for (int i = 0; i < prj_AI_OUTPUT_NUMBER; i++) {
 8007914:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007918:	3301      	adds	r3, #1
 800791a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800791e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007922:	2b02      	cmp	r3, #2
 8007924:	dde6      	ble.n	80078f4 <main+0x80>
  }
  printf("\r\n");
 8007926:	480e      	ldr	r0, [pc, #56]	; (8007960 <main+0xec>)
 8007928:	f009 fb7e 	bl	8011028 <puts>
  printf("\r\nExecution time: %f microseconds\r\n",timerCounterDiff(counter_start, counter_stop, 54E6));
 800792c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007968 <main+0xf4>
 8007930:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8007934:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8007938:	f000 f98a 	bl	8007c50 <timerCounterDiff>
 800793c:	eef0 7a40 	vmov.f32	s15, s0
 8007940:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007944:	ec53 2b17 	vmov	r2, r3, d7
 8007948:	4808      	ldr	r0, [pc, #32]	; (800796c <main+0xf8>)
 800794a:	f009 faf9 	bl	8010f40 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800794e:	e7fe      	b.n	800794e <main+0xda>
 8007950:	0801579c 	.word	0x0801579c
 8007954:	20000c80 	.word	0x20000c80
 8007958:	08015728 	.word	0x08015728
 800795c:	08015744 	.word	0x08015744
 8007960:	0801575c 	.word	0x0801575c
 8007964:	08015760 	.word	0x08015760
 8007968:	4c4dfe60 	.word	0x4c4dfe60
 800796c:	08015778 	.word	0x08015778

08007970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b0b8      	sub	sp, #224	; 0xe0
 8007974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800797a:	2234      	movs	r2, #52	; 0x34
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f008 fdf4 	bl	801056c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007984:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	609a      	str	r2, [r3, #8]
 8007990:	60da      	str	r2, [r3, #12]
 8007992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007994:	f107 0308 	add.w	r3, r7, #8
 8007998:	2290      	movs	r2, #144	; 0x90
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f008 fde5 	bl	801056c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80079a2:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <SystemClock_Config+0x118>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	4a38      	ldr	r2, [pc, #224]	; (8007a88 <SystemClock_Config+0x118>)
 80079a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ac:	6413      	str	r3, [r2, #64]	; 0x40
 80079ae:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <SystemClock_Config+0x118>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	607b      	str	r3, [r7, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079ba:	4b34      	ldr	r3, [pc, #208]	; (8007a8c <SystemClock_Config+0x11c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a33      	ldr	r2, [pc, #204]	; (8007a8c <SystemClock_Config+0x11c>)
 80079c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4b31      	ldr	r3, [pc, #196]	; (8007a8c <SystemClock_Config+0x11c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80079d2:	2302      	movs	r3, #2
 80079d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80079d8:	2301      	movs	r3, #1
 80079da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80079de:	2310      	movs	r3, #16
 80079e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079e4:	2302      	movs	r3, #2
 80079e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80079f0:	2308      	movs	r3, #8
 80079f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80079f6:	23d8      	movs	r3, #216	; 0xd8
 80079f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80079fc:	2302      	movs	r3, #2
 80079fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007a02:	2302      	movs	r3, #2
 8007a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 ff49 	bl	80088a4 <HAL_RCC_OscConfig>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8007a18:	f000 f946 	bl	8007ca8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007a1c:	f000 fef2 	bl	8008804 <HAL_PWREx_EnableOverDrive>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8007a26:	f000 f93f 	bl	8007ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a2a:	230f      	movs	r3, #15
 8007a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a30:	2302      	movs	r3, #2
 8007a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007a4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a50:	2107      	movs	r1, #7
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 f9d4 	bl	8008e00 <HAL_RCC_ClockConfig>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007a5e:	f000 f923 	bl	8007ca8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a66:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a6c:	f107 0308 	add.w	r3, r7, #8
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fb97 	bl	80091a4 <HAL_RCCEx_PeriphCLKConfig>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8007a7c:	f000 f914 	bl	8007ca8 <Error_Handler>
  }
}
 8007a80:	bf00      	nop
 8007a82:	37e0      	adds	r7, #224	; 0xe0
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	40007000 	.word	0x40007000

08007a90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007a94:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <MX_CRC_Init+0x3c>)
 8007a96:	4a0e      	ldr	r2, [pc, #56]	; (8007ad0 <MX_CRC_Init+0x40>)
 8007a98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <MX_CRC_Init+0x3c>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <MX_CRC_Init+0x3c>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <MX_CRC_Init+0x3c>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <MX_CRC_Init+0x3c>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <MX_CRC_Init+0x3c>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007ab8:	4804      	ldr	r0, [pc, #16]	; (8007acc <MX_CRC_Init+0x3c>)
 8007aba:	f000 fbf5 	bl	80082a8 <HAL_CRC_Init>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8007ac4:	f000 f8f0 	bl	8007ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007ac8:	bf00      	nop
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20000c5c 	.word	0x20000c5c
 8007ad0:	40023000 	.word	0x40023000

08007ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ada:	f107 0310 	add.w	r3, r7, #16
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
 8007ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ae8:	1d3b      	adds	r3, r7, #4
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007af2:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8007afa:	4b1c      	ldr	r3, [pc, #112]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8007b06:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b0e:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b14:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007b1a:	4814      	ldr	r0, [pc, #80]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b1c:	f001 ff68 	bl	80099f0 <HAL_TIM_Base_Init>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007b26:	f000 f8bf 	bl	8007ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007b30:	f107 0310 	add.w	r3, r7, #16
 8007b34:	4619      	mov	r1, r3
 8007b36:	480d      	ldr	r0, [pc, #52]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b38:	f001 ffb0 	bl	8009a9c <HAL_TIM_ConfigClockSource>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007b42:	f000 f8b1 	bl	8007ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007b4e:	1d3b      	adds	r3, r7, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4806      	ldr	r0, [pc, #24]	; (8007b6c <MX_TIM2_Init+0x98>)
 8007b54:	f002 f996 	bl	8009e84 <HAL_TIMEx_MasterConfigSynchronization>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007b5e:	f000 f8a3 	bl	8007ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007b62:	bf00      	nop
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000c80 	.word	0x20000c80

08007b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007b74:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b76:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <MX_USART3_UART_Init+0x5c>)
 8007b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007b7a:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007b82:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007b88:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b96:	220c      	movs	r2, #12
 8007b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ba0:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007bb2:	4805      	ldr	r0, [pc, #20]	; (8007bc8 <MX_USART3_UART_Init+0x58>)
 8007bb4:	f002 f9f4 	bl	8009fa0 <HAL_UART_Init>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007bbe:	f000 f873 	bl	8007ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000bdc 	.word	0x20000bdc
 8007bcc:	40004800 	.word	0x40004800

08007bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	609a      	str	r2, [r3, #8]
 8007be2:	60da      	str	r2, [r3, #12]
 8007be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007be6:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <MX_GPIO_Init+0x78>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <MX_GPIO_Init+0x78>)
 8007bec:	f043 0302 	orr.w	r3, r3, #2
 8007bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <MX_GPIO_Init+0x78>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	60bb      	str	r3, [r7, #8]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bfe:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <MX_GPIO_Init+0x78>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <MX_GPIO_Init+0x78>)
 8007c04:	f043 0308 	orr.w	r3, r3, #8
 8007c08:	6313      	str	r3, [r2, #48]	; 0x30
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <MX_GPIO_Init+0x78>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8007c16:	2200      	movs	r2, #0
 8007c18:	f244 0181 	movw	r1, #16513	; 0x4081
 8007c1c:	480b      	ldr	r0, [pc, #44]	; (8007c4c <MX_GPIO_Init+0x7c>)
 8007c1e:	f000 fdd7 	bl	80087d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8007c22:	f244 0381 	movw	r3, #16513	; 0x4081
 8007c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4804      	ldr	r0, [pc, #16]	; (8007c4c <MX_GPIO_Init+0x7c>)
 8007c3c:	f000 fc1e 	bl	800847c <HAL_GPIO_Init>

}
 8007c40:	bf00      	nop
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	40020400 	.word	0x40020400

08007c50 <timerCounterDiff>:
 * @param start is the value obtained from timer startup, stop is the value gotten when we want to stop counting,
 * fosc is the timers frequency in Hz.
 * @return Returns a floating number that represents the microseconds (1E-6 sec) elapsed time.
 * The maximum time that can be measured is (E-3/fosckHz*(1<<31)) seconds
 */
float timerCounterDiff(unsigned int start, unsigned int stop, float foscHz) {
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float diff = stop - start;
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6c:	edc7 7a05 	vstr	s15, [r7, #20]
	return 1E6*diff/foscHz;
 8007c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007c78:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8007ca0 <timerCounterDiff+0x50>
 8007c7c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8007c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007c88:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007c8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8007c90:	eeb0 0a67 	vmov.f32	s0, s15
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	412e8480 	.word	0x412e8480

08007ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007cac:	bf00      	nop
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <HAL_MspInit+0x44>)
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	4a0e      	ldr	r2, [pc, #56]	; (8007cfc <HAL_MspInit+0x44>)
 8007cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8007cca:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <HAL_MspInit+0x44>)
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <HAL_MspInit+0x44>)
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	4a08      	ldr	r2, [pc, #32]	; (8007cfc <HAL_MspInit+0x44>)
 8007cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ce2:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <HAL_MspInit+0x44>)
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40023800 	.word	0x40023800

08007d00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <HAL_CRC_MspInit+0x38>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d10b      	bne.n	8007d2a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007d12:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <HAL_CRC_MspInit+0x3c>)
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <HAL_CRC_MspInit+0x3c>)
 8007d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <HAL_CRC_MspInit+0x3c>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40023000 	.word	0x40023000
 8007d3c:	40023800 	.word	0x40023800

08007d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d50:	d10b      	bne.n	8007d6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <HAL_TIM_Base_MspInit+0x38>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <HAL_TIM_Base_MspInit+0x38>)
 8007d58:	f043 0301 	orr.w	r3, r3, #1
 8007d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <HAL_TIM_Base_MspInit+0x38>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40023800 	.word	0x40023800

08007d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	605a      	str	r2, [r3, #4]
 8007d8e:	609a      	str	r2, [r3, #8]
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <HAL_UART_MspInit+0x7c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d128      	bne.n	8007df0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d9e:	4b17      	ldr	r3, [pc, #92]	; (8007dfc <HAL_UART_MspInit+0x80>)
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <HAL_UART_MspInit+0x80>)
 8007da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007da8:	6413      	str	r3, [r2, #64]	; 0x40
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <HAL_UART_MspInit+0x80>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <HAL_UART_MspInit+0x80>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <HAL_UART_MspInit+0x80>)
 8007dbc:	f043 0308 	orr.w	r3, r3, #8
 8007dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <HAL_UART_MspInit+0x80>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f003 0308 	and.w	r3, r3, #8
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007dce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007de0:	2307      	movs	r3, #7
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007de4:	f107 0314 	add.w	r3, r7, #20
 8007de8:	4619      	mov	r1, r3
 8007dea:	4805      	ldr	r0, [pc, #20]	; (8007e00 <HAL_UART_MspInit+0x84>)
 8007dec:	f000 fb46 	bl	800847c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007df0:	bf00      	nop
 8007df2:	3728      	adds	r7, #40	; 0x28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40004800 	.word	0x40004800
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	40020c00 	.word	0x40020c00

08007e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e12:	b480      	push	{r7}
 8007e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e16:	e7fe      	b.n	8007e16 <HardFault_Handler+0x4>

08007e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e1c:	e7fe      	b.n	8007e1c <MemManage_Handler+0x4>

08007e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e22:	e7fe      	b.n	8007e22 <BusFault_Handler+0x4>

08007e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e28:	e7fe      	b.n	8007e28 <UsageFault_Handler+0x4>

08007e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e46:	b480      	push	{r7}
 8007e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e4a:	bf00      	nop
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e58:	f000 f8fc 	bl	8008054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e5c:	bf00      	nop
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	e00a      	b.n	8007e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007e72:	f3af 8000 	nop.w
 8007e76:	4601      	mov	r1, r0
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	60ba      	str	r2, [r7, #8]
 8007e7e:	b2ca      	uxtb	r2, r1
 8007e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	3301      	adds	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	dbf0      	blt.n	8007e72 <_read+0x12>
	}

return len;
 8007e90:	687b      	ldr	r3, [r7, #4]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8007ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <_isatty>:

int _isatty(int file)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8007eda:	2301      	movs	r3, #1
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f0c:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <_sbrk+0x50>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <_sbrk+0x16>
		heap_end = &end;
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <_sbrk+0x50>)
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <_sbrk+0x54>)
 8007f18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <_sbrk+0x50>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007f20:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <_sbrk+0x50>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	466a      	mov	r2, sp
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d907      	bls.n	8007f3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007f2e:	f008 fac9 	bl	80104c4 <__errno>
 8007f32:	4602      	mov	r2, r0
 8007f34:	230c      	movs	r3, #12
 8007f36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	e006      	b.n	8007f4c <_sbrk+0x48>
	}

	heap_end += incr;
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <_sbrk+0x50>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	4a03      	ldr	r2, [pc, #12]	; (8007f54 <_sbrk+0x50>)
 8007f48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200008e0 	.word	0x200008e0
 8007f58:	20000e68 	.word	0x20000e68

08007f5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f60:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <SystemInit+0x28>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	4a07      	ldr	r2, [pc, #28]	; (8007f84 <SystemInit+0x28>)
 8007f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <SystemInit+0x28>)
 8007f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f76:	609a      	str	r2, [r3, #8]
#endif
}
 8007f78:	bf00      	nop
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	e000ed00 	.word	0xe000ed00

08007f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007f8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007f8e:	e003      	b.n	8007f98 <LoopCopyDataInit>

08007f90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007f92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007f94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007f96:	3104      	adds	r1, #4

08007f98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007f98:	480b      	ldr	r0, [pc, #44]	; (8007fc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007f9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007f9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007fa0:	d3f6      	bcc.n	8007f90 <CopyDataInit>
  ldr  r2, =_sbss
 8007fa2:	4a0b      	ldr	r2, [pc, #44]	; (8007fd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007fa4:	e002      	b.n	8007fac <LoopFillZerobss>

08007fa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007fa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007fa8:	f842 3b04 	str.w	r3, [r2], #4

08007fac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007fae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007fb0:	d3f9      	bcc.n	8007fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007fb2:	f7ff ffd3 	bl	8007f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fb6:	f008 fa8b 	bl	80104d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007fba:	f7ff fc5b 	bl	8007874 <main>
  bx  lr    
 8007fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007fc0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007fc4:	08017c80 	.word	0x08017c80
  ldr  r0, =_sdata
 8007fc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007fcc:	2000089c 	.word	0x2000089c
  ldr  r2, =_sbss
 8007fd0:	200008a0 	.word	0x200008a0
  ldr  r3, = _ebss
 8007fd4:	20000e64 	.word	0x20000e64

08007fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007fd8:	e7fe      	b.n	8007fd8 <ADC_IRQHandler>

08007fda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fde:	2003      	movs	r0, #3
 8007fe0:	f000 f92e 	bl	8008240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f000 f805 	bl	8007ff4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007fea:	f7ff fe65 	bl	8007cb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ffc:	4b12      	ldr	r3, [pc, #72]	; (8008048 <HAL_InitTick+0x54>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4b12      	ldr	r3, [pc, #72]	; (800804c <HAL_InitTick+0x58>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4619      	mov	r1, r3
 8008006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800800a:	fbb3 f3f1 	udiv	r3, r3, r1
 800800e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f93b 	bl	800828e <HAL_SYSTICK_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e00e      	b.n	8008040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b0f      	cmp	r3, #15
 8008026:	d80a      	bhi.n	800803e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008028:	2200      	movs	r2, #0
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	f000 f911 	bl	8008256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008034:	4a06      	ldr	r2, [pc, #24]	; (8008050 <HAL_InitTick+0x5c>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e000      	b.n	8008040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000008 	.word	0x20000008
 800804c:	20000010 	.word	0x20000010
 8008050:	2000000c 	.word	0x2000000c

08008054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <HAL_IncTick+0x20>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <HAL_IncTick+0x24>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4413      	add	r3, r2
 8008064:	4a04      	ldr	r2, [pc, #16]	; (8008078 <HAL_IncTick+0x24>)
 8008066:	6013      	str	r3, [r2, #0]
}
 8008068:	bf00      	nop
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000010 	.word	0x20000010
 8008078:	20000cc0 	.word	0x20000cc0

0800807c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  return uwTick;
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <HAL_GetTick+0x14>)
 8008082:	681b      	ldr	r3, [r3, #0]
}
 8008084:	4618      	mov	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000cc0 	.word	0x20000cc0

08008094 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <HAL_GetHalVersion+0x10>)
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	01020800 	.word	0x01020800

080080a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <HAL_GetREVID+0x14>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	0c1b      	lsrs	r3, r3, #16
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	e0042000 	.word	0xe0042000

080080c0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80080c4:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <HAL_GetDEVID+0x18>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	e0042000 	.word	0xe0042000

080080dc <__NVIC_SetPriorityGrouping>:
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080ec:	4b0b      	ldr	r3, [pc, #44]	; (800811c <__NVIC_SetPriorityGrouping+0x40>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80080f8:	4013      	ands	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <__NVIC_SetPriorityGrouping+0x44>)
 8008106:	4313      	orrs	r3, r2
 8008108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800810a:	4a04      	ldr	r2, [pc, #16]	; (800811c <__NVIC_SetPriorityGrouping+0x40>)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	60d3      	str	r3, [r2, #12]
}
 8008110:	bf00      	nop
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	e000ed00 	.word	0xe000ed00
 8008120:	05fa0000 	.word	0x05fa0000

08008124 <__NVIC_GetPriorityGrouping>:
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <__NVIC_GetPriorityGrouping+0x18>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	f003 0307 	and.w	r3, r3, #7
}
 8008132:	4618      	mov	r0, r3
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	e000ed00 	.word	0xe000ed00

08008140 <__NVIC_SetPriority>:
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800814c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008150:	2b00      	cmp	r3, #0
 8008152:	db0a      	blt.n	800816a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	490c      	ldr	r1, [pc, #48]	; (800818c <__NVIC_SetPriority+0x4c>)
 800815a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800815e:	0112      	lsls	r2, r2, #4
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	440b      	add	r3, r1
 8008164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008168:	e00a      	b.n	8008180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4908      	ldr	r1, [pc, #32]	; (8008190 <__NVIC_SetPriority+0x50>)
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	3b04      	subs	r3, #4
 8008178:	0112      	lsls	r2, r2, #4
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	440b      	add	r3, r1
 800817e:	761a      	strb	r2, [r3, #24]
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	e000e100 	.word	0xe000e100
 8008190:	e000ed00 	.word	0xe000ed00

08008194 <NVIC_EncodePriority>:
{
 8008194:	b480      	push	{r7}
 8008196:	b089      	sub	sp, #36	; 0x24
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f1c3 0307 	rsb	r3, r3, #7
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	bf28      	it	cs
 80081b2:	2304      	movcs	r3, #4
 80081b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	3304      	adds	r3, #4
 80081ba:	2b06      	cmp	r3, #6
 80081bc:	d902      	bls.n	80081c4 <NVIC_EncodePriority+0x30>
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	3b03      	subs	r3, #3
 80081c2:	e000      	b.n	80081c6 <NVIC_EncodePriority+0x32>
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081c8:	f04f 32ff 	mov.w	r2, #4294967295
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	43da      	mvns	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	401a      	ands	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081dc:	f04f 31ff 	mov.w	r1, #4294967295
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	fa01 f303 	lsl.w	r3, r1, r3
 80081e6:	43d9      	mvns	r1, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081ec:	4313      	orrs	r3, r2
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3724      	adds	r7, #36	; 0x24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3b01      	subs	r3, #1
 8008208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800820c:	d301      	bcc.n	8008212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800820e:	2301      	movs	r3, #1
 8008210:	e00f      	b.n	8008232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008212:	4a0a      	ldr	r2, [pc, #40]	; (800823c <SysTick_Config+0x40>)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3b01      	subs	r3, #1
 8008218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800821a:	210f      	movs	r1, #15
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	f7ff ff8e 	bl	8008140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <SysTick_Config+0x40>)
 8008226:	2200      	movs	r2, #0
 8008228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <SysTick_Config+0x40>)
 800822c:	2207      	movs	r2, #7
 800822e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	e000e010 	.word	0xe000e010

08008240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ff47 	bl	80080dc <__NVIC_SetPriorityGrouping>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	4603      	mov	r3, r0
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008268:	f7ff ff5c 	bl	8008124 <__NVIC_GetPriorityGrouping>
 800826c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	68b9      	ldr	r1, [r7, #8]
 8008272:	6978      	ldr	r0, [r7, #20]
 8008274:	f7ff ff8e 	bl	8008194 <NVIC_EncodePriority>
 8008278:	4602      	mov	r2, r0
 800827a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff ff5d 	bl	8008140 <__NVIC_SetPriority>
}
 8008286:	bf00      	nop
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff ffb0 	bl	80081fc <SysTick_Config>
 800829c:	4603      	mov	r3, r0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e054      	b.n	8008364 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7f5b      	ldrb	r3, [r3, #29]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fd18 	bl	8007d00 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	791b      	ldrb	r3, [r3, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10c      	bne.n	80082f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a22      	ldr	r2, [pc, #136]	; (800836c <HAL_CRC_Init+0xc4>)
 80082e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0218 	bic.w	r2, r2, #24
 80082f4:	609a      	str	r2, [r3, #8]
 80082f6:	e00c      	b.n	8008312 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6899      	ldr	r1, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	461a      	mov	r2, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f834 	bl	8008370 <HAL_CRCEx_Polynomial_Set>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e028      	b.n	8008364 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	795b      	ldrb	r3, [r3, #5]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d105      	bne.n	8008326 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f04f 32ff 	mov.w	r2, #4294967295
 8008322:	611a      	str	r2, [r3, #16]
 8008324:	e004      	b.n	8008330 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6912      	ldr	r2, [r2, #16]
 800832e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699a      	ldr	r2, [r3, #24]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	04c11db7 	.word	0x04c11db7

08008370 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008380:	231f      	movs	r3, #31
 8008382:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008384:	bf00      	nop
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1e5a      	subs	r2, r3, #1
 800838a:	613a      	str	r2, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f0      	beq.n	8008386 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b18      	cmp	r3, #24
 80083a8:	d846      	bhi.n	8008438 <HAL_CRCEx_Polynomial_Set+0xc8>
 80083aa:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	0800843f 	.word	0x0800843f
 80083b4:	08008439 	.word	0x08008439
 80083b8:	08008439 	.word	0x08008439
 80083bc:	08008439 	.word	0x08008439
 80083c0:	08008439 	.word	0x08008439
 80083c4:	08008439 	.word	0x08008439
 80083c8:	08008439 	.word	0x08008439
 80083cc:	08008439 	.word	0x08008439
 80083d0:	0800842d 	.word	0x0800842d
 80083d4:	08008439 	.word	0x08008439
 80083d8:	08008439 	.word	0x08008439
 80083dc:	08008439 	.word	0x08008439
 80083e0:	08008439 	.word	0x08008439
 80083e4:	08008439 	.word	0x08008439
 80083e8:	08008439 	.word	0x08008439
 80083ec:	08008439 	.word	0x08008439
 80083f0:	08008421 	.word	0x08008421
 80083f4:	08008439 	.word	0x08008439
 80083f8:	08008439 	.word	0x08008439
 80083fc:	08008439 	.word	0x08008439
 8008400:	08008439 	.word	0x08008439
 8008404:	08008439 	.word	0x08008439
 8008408:	08008439 	.word	0x08008439
 800840c:	08008439 	.word	0x08008439
 8008410:	08008415 	.word	0x08008415
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	2b06      	cmp	r3, #6
 8008418:	d913      	bls.n	8008442 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800841e:	e010      	b.n	8008442 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	2b07      	cmp	r3, #7
 8008424:	d90f      	bls.n	8008446 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800842a:	e00c      	b.n	8008446 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b0f      	cmp	r3, #15
 8008430:	d90b      	bls.n	800844a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008436:	e008      	b.n	800844a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
      break;
 800843c:	e006      	b.n	800844c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800843e:	bf00      	nop
 8008440:	e004      	b.n	800844c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008442:	bf00      	nop
 8008444:	e002      	b.n	800844c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008446:	bf00      	nop
 8008448:	e000      	b.n	800844c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800844a:	bf00      	nop
  }
  if (status == HAL_OK)
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10d      	bne.n	800846e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f023 0118 	bic.w	r1, r3, #24
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008470:	4618      	mov	r0, r3
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	; 0x24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800848e:	2300      	movs	r3, #0
 8008490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	e175      	b.n	8008788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800849c:	2201      	movs	r2, #1
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4013      	ands	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	f040 8164 	bne.w	8008782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d00b      	beq.n	80084da <HAL_GPIO_Init+0x5e>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d007      	beq.n	80084da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ce:	2b11      	cmp	r3, #17
 80084d0:	d003      	beq.n	80084da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b12      	cmp	r3, #18
 80084d8:	d130      	bne.n	800853c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	2203      	movs	r2, #3
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	43db      	mvns	r3, r3
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	4013      	ands	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	4313      	orrs	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008510:	2201      	movs	r2, #1
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 0201 	and.w	r2, r3, #1
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	fa02 f303 	lsl.w	r3, r2, r3
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	4313      	orrs	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	2203      	movs	r2, #3
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	43db      	mvns	r3, r3
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	4013      	ands	r3, r2
 8008552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	4313      	orrs	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d003      	beq.n	800857c <HAL_GPIO_Init+0x100>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b12      	cmp	r3, #18
 800857a:	d123      	bne.n	80085c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	08da      	lsrs	r2, r3, #3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3208      	adds	r2, #8
 8008584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	220f      	movs	r2, #15
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	43db      	mvns	r3, r3
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	4013      	ands	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	08da      	lsrs	r2, r3, #3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3208      	adds	r2, #8
 80085be:	69b9      	ldr	r1, [r7, #24]
 80085c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	2203      	movs	r2, #3
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	43db      	mvns	r3, r3
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	4013      	ands	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f003 0203 	and.w	r2, r3, #3
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 80be 	beq.w	8008782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008606:	4b65      	ldr	r3, [pc, #404]	; (800879c <HAL_GPIO_Init+0x320>)
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	4a64      	ldr	r2, [pc, #400]	; (800879c <HAL_GPIO_Init+0x320>)
 800860c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008610:	6453      	str	r3, [r2, #68]	; 0x44
 8008612:	4b62      	ldr	r3, [pc, #392]	; (800879c <HAL_GPIO_Init+0x320>)
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800861e:	4a60      	ldr	r2, [pc, #384]	; (80087a0 <HAL_GPIO_Init+0x324>)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	3302      	adds	r3, #2
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	220f      	movs	r2, #15
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a57      	ldr	r2, [pc, #348]	; (80087a4 <HAL_GPIO_Init+0x328>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d037      	beq.n	80086ba <HAL_GPIO_Init+0x23e>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a56      	ldr	r2, [pc, #344]	; (80087a8 <HAL_GPIO_Init+0x32c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d031      	beq.n	80086b6 <HAL_GPIO_Init+0x23a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a55      	ldr	r2, [pc, #340]	; (80087ac <HAL_GPIO_Init+0x330>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d02b      	beq.n	80086b2 <HAL_GPIO_Init+0x236>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a54      	ldr	r2, [pc, #336]	; (80087b0 <HAL_GPIO_Init+0x334>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d025      	beq.n	80086ae <HAL_GPIO_Init+0x232>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a53      	ldr	r2, [pc, #332]	; (80087b4 <HAL_GPIO_Init+0x338>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01f      	beq.n	80086aa <HAL_GPIO_Init+0x22e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a52      	ldr	r2, [pc, #328]	; (80087b8 <HAL_GPIO_Init+0x33c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d019      	beq.n	80086a6 <HAL_GPIO_Init+0x22a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a51      	ldr	r2, [pc, #324]	; (80087bc <HAL_GPIO_Init+0x340>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <HAL_GPIO_Init+0x226>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a50      	ldr	r2, [pc, #320]	; (80087c0 <HAL_GPIO_Init+0x344>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00d      	beq.n	800869e <HAL_GPIO_Init+0x222>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a4f      	ldr	r2, [pc, #316]	; (80087c4 <HAL_GPIO_Init+0x348>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d007      	beq.n	800869a <HAL_GPIO_Init+0x21e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a4e      	ldr	r2, [pc, #312]	; (80087c8 <HAL_GPIO_Init+0x34c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d101      	bne.n	8008696 <HAL_GPIO_Init+0x21a>
 8008692:	2309      	movs	r3, #9
 8008694:	e012      	b.n	80086bc <HAL_GPIO_Init+0x240>
 8008696:	230a      	movs	r3, #10
 8008698:	e010      	b.n	80086bc <HAL_GPIO_Init+0x240>
 800869a:	2308      	movs	r3, #8
 800869c:	e00e      	b.n	80086bc <HAL_GPIO_Init+0x240>
 800869e:	2307      	movs	r3, #7
 80086a0:	e00c      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086a2:	2306      	movs	r3, #6
 80086a4:	e00a      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086a6:	2305      	movs	r3, #5
 80086a8:	e008      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086aa:	2304      	movs	r3, #4
 80086ac:	e006      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086ae:	2303      	movs	r3, #3
 80086b0:	e004      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e002      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <HAL_GPIO_Init+0x240>
 80086ba:	2300      	movs	r3, #0
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	f002 0203 	and.w	r2, r2, #3
 80086c2:	0092      	lsls	r2, r2, #2
 80086c4:	4093      	lsls	r3, r2
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80086cc:	4934      	ldr	r1, [pc, #208]	; (80087a0 <HAL_GPIO_Init+0x324>)
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	089b      	lsrs	r3, r3, #2
 80086d2:	3302      	adds	r3, #2
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086da:	4b3c      	ldr	r3, [pc, #240]	; (80087cc <HAL_GPIO_Init+0x350>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086fe:	4a33      	ldr	r2, [pc, #204]	; (80087cc <HAL_GPIO_Init+0x350>)
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008704:	4b31      	ldr	r3, [pc, #196]	; (80087cc <HAL_GPIO_Init+0x350>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	43db      	mvns	r3, r3
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	4013      	ands	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008728:	4a28      	ldr	r2, [pc, #160]	; (80087cc <HAL_GPIO_Init+0x350>)
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800872e:	4b27      	ldr	r3, [pc, #156]	; (80087cc <HAL_GPIO_Init+0x350>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	43db      	mvns	r3, r3
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	4013      	ands	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008752:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <HAL_GPIO_Init+0x350>)
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008758:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <HAL_GPIO_Init+0x350>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	43db      	mvns	r3, r3
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	4013      	ands	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4313      	orrs	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800877c:	4a13      	ldr	r2, [pc, #76]	; (80087cc <HAL_GPIO_Init+0x350>)
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	f67f ae86 	bls.w	800849c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008790:	bf00      	nop
 8008792:	3724      	adds	r7, #36	; 0x24
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40023800 	.word	0x40023800
 80087a0:	40013800 	.word	0x40013800
 80087a4:	40020000 	.word	0x40020000
 80087a8:	40020400 	.word	0x40020400
 80087ac:	40020800 	.word	0x40020800
 80087b0:	40020c00 	.word	0x40020c00
 80087b4:	40021000 	.word	0x40021000
 80087b8:	40021400 	.word	0x40021400
 80087bc:	40021800 	.word	0x40021800
 80087c0:	40021c00 	.word	0x40021c00
 80087c4:	40022000 	.word	0x40022000
 80087c8:	40022400 	.word	0x40022400
 80087cc:	40013c00 	.word	0x40013c00

080087d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
 80087dc:	4613      	mov	r3, r2
 80087de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087e0:	787b      	ldrb	r3, [r7, #1]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087e6:	887a      	ldrh	r2, [r7, #2]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80087ec:	e003      	b.n	80087f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80087ee:	887b      	ldrh	r3, [r7, #2]
 80087f0:	041a      	lsls	r2, r3, #16
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	619a      	str	r2, [r3, #24]
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800880e:	4b23      	ldr	r3, [pc, #140]	; (800889c <HAL_PWREx_EnableOverDrive+0x98>)
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	4a22      	ldr	r2, [pc, #136]	; (800889c <HAL_PWREx_EnableOverDrive+0x98>)
 8008814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008818:	6413      	str	r3, [r2, #64]	; 0x40
 800881a:	4b20      	ldr	r3, [pc, #128]	; (800889c <HAL_PWREx_EnableOverDrive+0x98>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008826:	4b1e      	ldr	r3, [pc, #120]	; (80088a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1d      	ldr	r2, [pc, #116]	; (80088a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800882c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008830:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008832:	f7ff fc23 	bl	800807c <HAL_GetTick>
 8008836:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008838:	e009      	b.n	800884e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800883a:	f7ff fc1f 	bl	800807c <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008848:	d901      	bls.n	800884e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e022      	b.n	8008894 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800884e:	4b14      	ldr	r3, [pc, #80]	; (80088a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885a:	d1ee      	bne.n	800883a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800885c:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008866:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008868:	f7ff fc08 	bl	800807c <HAL_GetTick>
 800886c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800886e:	e009      	b.n	8008884 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008870:	f7ff fc04 	bl	800807c <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800887e:	d901      	bls.n	8008884 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e007      	b.n	8008894 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008890:	d1ee      	bne.n	8008870 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40023800 	.word	0x40023800
 80088a0:	40007000 	.word	0x40007000

080088a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e29b      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 8087 	beq.w	80089d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088c8:	4b96      	ldr	r3, [pc, #600]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f003 030c 	and.w	r3, r3, #12
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d00c      	beq.n	80088ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088d4:	4b93      	ldr	r3, [pc, #588]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f003 030c 	and.w	r3, r3, #12
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d112      	bne.n	8008906 <HAL_RCC_OscConfig+0x62>
 80088e0:	4b90      	ldr	r3, [pc, #576]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ec:	d10b      	bne.n	8008906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ee:	4b8d      	ldr	r3, [pc, #564]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d06c      	beq.n	80089d4 <HAL_RCC_OscConfig+0x130>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d168      	bne.n	80089d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e275      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800890e:	d106      	bne.n	800891e <HAL_RCC_OscConfig+0x7a>
 8008910:	4b84      	ldr	r3, [pc, #528]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a83      	ldr	r2, [pc, #524]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	e02e      	b.n	800897c <HAL_RCC_OscConfig+0xd8>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10c      	bne.n	8008940 <HAL_RCC_OscConfig+0x9c>
 8008926:	4b7f      	ldr	r3, [pc, #508]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a7e      	ldr	r2, [pc, #504]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 800892c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	4b7c      	ldr	r3, [pc, #496]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a7b      	ldr	r2, [pc, #492]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	e01d      	b.n	800897c <HAL_RCC_OscConfig+0xd8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008948:	d10c      	bne.n	8008964 <HAL_RCC_OscConfig+0xc0>
 800894a:	4b76      	ldr	r3, [pc, #472]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a75      	ldr	r2, [pc, #468]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	4b73      	ldr	r3, [pc, #460]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a72      	ldr	r2, [pc, #456]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 800895c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	e00b      	b.n	800897c <HAL_RCC_OscConfig+0xd8>
 8008964:	4b6f      	ldr	r3, [pc, #444]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a6e      	ldr	r2, [pc, #440]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 800896a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	4b6c      	ldr	r3, [pc, #432]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a6b      	ldr	r2, [pc, #428]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800897a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d013      	beq.n	80089ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008984:	f7ff fb7a 	bl	800807c <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800898c:	f7ff fb76 	bl	800807c <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b64      	cmp	r3, #100	; 0x64
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e229      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800899e:	4b61      	ldr	r3, [pc, #388]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f0      	beq.n	800898c <HAL_RCC_OscConfig+0xe8>
 80089aa:	e014      	b.n	80089d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7ff fb66 	bl	800807c <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089b4:	f7ff fb62 	bl	800807c <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b64      	cmp	r3, #100	; 0x64
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e215      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089c6:	4b57      	ldr	r3, [pc, #348]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f0      	bne.n	80089b4 <HAL_RCC_OscConfig+0x110>
 80089d2:	e000      	b.n	80089d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d069      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089e2:	4b50      	ldr	r3, [pc, #320]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 030c 	and.w	r3, r3, #12
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00b      	beq.n	8008a06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089ee:	4b4d      	ldr	r3, [pc, #308]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 030c 	and.w	r3, r3, #12
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	d11c      	bne.n	8008a34 <HAL_RCC_OscConfig+0x190>
 80089fa:	4b4a      	ldr	r3, [pc, #296]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d116      	bne.n	8008a34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a06:	4b47      	ldr	r3, [pc, #284]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <HAL_RCC_OscConfig+0x17a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d001      	beq.n	8008a1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e1e9      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1e:	4b41      	ldr	r3, [pc, #260]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	493d      	ldr	r1, [pc, #244]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a32:	e040      	b.n	8008ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d023      	beq.n	8008a84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a3c:	4b39      	ldr	r3, [pc, #228]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a38      	ldr	r2, [pc, #224]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a42:	f043 0301 	orr.w	r3, r3, #1
 8008a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a48:	f7ff fb18 	bl	800807c <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a4e:	e008      	b.n	8008a62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a50:	f7ff fb14 	bl	800807c <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d901      	bls.n	8008a62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e1c7      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a62:	4b30      	ldr	r3, [pc, #192]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0f0      	beq.n	8008a50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a6e:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	4929      	ldr	r1, [pc, #164]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	600b      	str	r3, [r1, #0]
 8008a82:	e018      	b.n	8008ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a84:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008a8a:	f023 0301 	bic.w	r3, r3, #1
 8008a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a90:	f7ff faf4 	bl	800807c <HAL_GetTick>
 8008a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a98:	f7ff faf0 	bl	800807c <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e1a3      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1f0      	bne.n	8008a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d038      	beq.n	8008b34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d019      	beq.n	8008afe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aca:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ace:	4a15      	ldr	r2, [pc, #84]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008ad0:	f043 0301 	orr.w	r3, r3, #1
 8008ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad6:	f7ff fad1 	bl	800807c <HAL_GetTick>
 8008ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008adc:	e008      	b.n	8008af0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ade:	f7ff facd 	bl	800807c <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e180      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008af0:	4b0c      	ldr	r3, [pc, #48]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0f0      	beq.n	8008ade <HAL_RCC_OscConfig+0x23a>
 8008afc:	e01a      	b.n	8008b34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b02:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <HAL_RCC_OscConfig+0x280>)
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0a:	f7ff fab7 	bl	800807c <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b10:	e00a      	b.n	8008b28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b12:	f7ff fab3 	bl	800807c <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d903      	bls.n	8008b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e166      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
 8008b24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b28:	4b92      	ldr	r3, [pc, #584]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1ee      	bne.n	8008b12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80a4 	beq.w	8008c8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b42:	4b8c      	ldr	r3, [pc, #560]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10d      	bne.n	8008b6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b4e:	4b89      	ldr	r3, [pc, #548]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	4a88      	ldr	r2, [pc, #544]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b58:	6413      	str	r3, [r2, #64]	; 0x40
 8008b5a:	4b86      	ldr	r3, [pc, #536]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b62:	60bb      	str	r3, [r7, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b6a:	4b83      	ldr	r3, [pc, #524]	; (8008d78 <HAL_RCC_OscConfig+0x4d4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d118      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b76:	4b80      	ldr	r3, [pc, #512]	; (8008d78 <HAL_RCC_OscConfig+0x4d4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a7f      	ldr	r2, [pc, #508]	; (8008d78 <HAL_RCC_OscConfig+0x4d4>)
 8008b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b82:	f7ff fa7b 	bl	800807c <HAL_GetTick>
 8008b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b88:	e008      	b.n	8008b9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b8a:	f7ff fa77 	bl	800807c <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b64      	cmp	r3, #100	; 0x64
 8008b96:	d901      	bls.n	8008b9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e12a      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b9c:	4b76      	ldr	r3, [pc, #472]	; (8008d78 <HAL_RCC_OscConfig+0x4d4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0f0      	beq.n	8008b8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d106      	bne.n	8008bbe <HAL_RCC_OscConfig+0x31a>
 8008bb0:	4b70      	ldr	r3, [pc, #448]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	4a6f      	ldr	r2, [pc, #444]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	6713      	str	r3, [r2, #112]	; 0x70
 8008bbc:	e02d      	b.n	8008c1a <HAL_RCC_OscConfig+0x376>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10c      	bne.n	8008be0 <HAL_RCC_OscConfig+0x33c>
 8008bc6:	4b6b      	ldr	r3, [pc, #428]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bca:	4a6a      	ldr	r2, [pc, #424]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bcc:	f023 0301 	bic.w	r3, r3, #1
 8008bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd2:	4b68      	ldr	r3, [pc, #416]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd6:	4a67      	ldr	r2, [pc, #412]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bd8:	f023 0304 	bic.w	r3, r3, #4
 8008bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bde:	e01c      	b.n	8008c1a <HAL_RCC_OscConfig+0x376>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b05      	cmp	r3, #5
 8008be6:	d10c      	bne.n	8008c02 <HAL_RCC_OscConfig+0x35e>
 8008be8:	4b62      	ldr	r3, [pc, #392]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bec:	4a61      	ldr	r2, [pc, #388]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bee:	f043 0304 	orr.w	r3, r3, #4
 8008bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf4:	4b5f      	ldr	r3, [pc, #380]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	4a5e      	ldr	r2, [pc, #376]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008c00:	e00b      	b.n	8008c1a <HAL_RCC_OscConfig+0x376>
 8008c02:	4b5c      	ldr	r3, [pc, #368]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	4a5b      	ldr	r2, [pc, #364]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c08:	f023 0301 	bic.w	r3, r3, #1
 8008c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c0e:	4b59      	ldr	r3, [pc, #356]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c12:	4a58      	ldr	r2, [pc, #352]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c14:	f023 0304 	bic.w	r3, r3, #4
 8008c18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d015      	beq.n	8008c4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c22:	f7ff fa2b 	bl	800807c <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c28:	e00a      	b.n	8008c40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c2a:	f7ff fa27 	bl	800807c <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d901      	bls.n	8008c40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e0d8      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c40:	4b4c      	ldr	r3, [pc, #304]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0ee      	beq.n	8008c2a <HAL_RCC_OscConfig+0x386>
 8008c4c:	e014      	b.n	8008c78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c4e:	f7ff fa15 	bl	800807c <HAL_GetTick>
 8008c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c54:	e00a      	b.n	8008c6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c56:	f7ff fa11 	bl	800807c <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d901      	bls.n	8008c6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e0c2      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c6c:	4b41      	ldr	r3, [pc, #260]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1ee      	bne.n	8008c56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d105      	bne.n	8008c8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c7e:	4b3d      	ldr	r3, [pc, #244]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	4a3c      	ldr	r2, [pc, #240]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 80ae 	beq.w	8008df0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c94:	4b37      	ldr	r3, [pc, #220]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 030c 	and.w	r3, r3, #12
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d06d      	beq.n	8008d7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d14b      	bne.n	8008d40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca8:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a31      	ldr	r2, [pc, #196]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb4:	f7ff f9e2 	bl	800807c <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbc:	f7ff f9de 	bl	800807c <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e091      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cce:	4b29      	ldr	r3, [pc, #164]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f0      	bne.n	8008cbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	69da      	ldr	r2, [r3, #28]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	019b      	lsls	r3, r3, #6
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	041b      	lsls	r3, r3, #16
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	061b      	lsls	r3, r3, #24
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	071b      	lsls	r3, r3, #28
 8008d06:	491b      	ldr	r1, [pc, #108]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d0c:	4b19      	ldr	r3, [pc, #100]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7ff f9b0 	bl	800807c <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d20:	f7ff f9ac 	bl	800807c <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e05f      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d32:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0f0      	beq.n	8008d20 <HAL_RCC_OscConfig+0x47c>
 8008d3e:	e057      	b.n	8008df0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a0b      	ldr	r2, [pc, #44]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7ff f996 	bl	800807c <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d54:	f7ff f992 	bl	800807c <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e045      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d66:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <HAL_RCC_OscConfig+0x4d0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1f0      	bne.n	8008d54 <HAL_RCC_OscConfig+0x4b0>
 8008d72:	e03d      	b.n	8008df0 <HAL_RCC_OscConfig+0x54c>
 8008d74:	40023800 	.word	0x40023800
 8008d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d7c:	4b1f      	ldr	r3, [pc, #124]	; (8008dfc <HAL_RCC_OscConfig+0x558>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d030      	beq.n	8008dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d129      	bne.n	8008dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d122      	bne.n	8008dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008dac:	4013      	ands	r3, r2
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008db2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d119      	bne.n	8008dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d10f      	bne.n	8008dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d107      	bne.n	8008dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d001      	beq.n	8008df0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	40023800 	.word	0x40023800

08008e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0d0      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e18:	4b6a      	ldr	r3, [pc, #424]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d910      	bls.n	8008e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e26:	4b67      	ldr	r3, [pc, #412]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f023 020f 	bic.w	r2, r3, #15
 8008e2e:	4965      	ldr	r1, [pc, #404]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e36:	4b63      	ldr	r3, [pc, #396]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d001      	beq.n	8008e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e0b8      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d020      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e60:	4b59      	ldr	r3, [pc, #356]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	4a58      	ldr	r2, [pc, #352]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0308 	and.w	r3, r3, #8
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e78:	4b53      	ldr	r3, [pc, #332]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	4a52      	ldr	r2, [pc, #328]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e84:	4b50      	ldr	r3, [pc, #320]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	494d      	ldr	r1, [pc, #308]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d040      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d107      	bne.n	8008eba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eaa:	4b47      	ldr	r3, [pc, #284]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d115      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e07f      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d107      	bne.n	8008ed2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ec2:	4b41      	ldr	r3, [pc, #260]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e073      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ed2:	4b3d      	ldr	r3, [pc, #244]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e06b      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ee2:	4b39      	ldr	r3, [pc, #228]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f023 0203 	bic.w	r2, r3, #3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	4936      	ldr	r1, [pc, #216]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ef4:	f7ff f8c2 	bl	800807c <HAL_GetTick>
 8008ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008efa:	e00a      	b.n	8008f12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008efc:	f7ff f8be 	bl	800807c <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d901      	bls.n	8008f12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e053      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f12:	4b2d      	ldr	r3, [pc, #180]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 020c 	and.w	r2, r3, #12
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d1eb      	bne.n	8008efc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f24:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 030f 	and.w	r3, r3, #15
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d210      	bcs.n	8008f54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f32:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f023 020f 	bic.w	r2, r3, #15
 8008f3a:	4922      	ldr	r1, [pc, #136]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f42:	4b20      	ldr	r3, [pc, #128]	; (8008fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d001      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e032      	b.n	8008fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f60:	4b19      	ldr	r3, [pc, #100]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	4916      	ldr	r1, [pc, #88]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f7e:	4b12      	ldr	r3, [pc, #72]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	490e      	ldr	r1, [pc, #56]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f92:	f000 f821 	bl	8008fd8 <HAL_RCC_GetSysClockFreq>
 8008f96:	4601      	mov	r1, r0
 8008f98:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	091b      	lsrs	r3, r3, #4
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <HAL_RCC_ClockConfig+0x1cc>)
 8008fa4:	5cd3      	ldrb	r3, [r2, r3]
 8008fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8008faa:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8008fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <HAL_RCC_ClockConfig+0x1d4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff f81e 	bl	8007ff4 <HAL_InitTick>

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	40023c00 	.word	0x40023c00
 8008fc8:	40023800 	.word	0x40023800
 8008fcc:	080164b4 	.word	0x080164b4
 8008fd0:	20000008 	.word	0x20000008
 8008fd4:	2000000c 	.word	0x2000000c

08008fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fee:	4b50      	ldr	r3, [pc, #320]	; (8009130 <HAL_RCC_GetSysClockFreq+0x158>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f003 030c 	and.w	r3, r3, #12
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d007      	beq.n	800900a <HAL_RCC_GetSysClockFreq+0x32>
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d008      	beq.n	8009010 <HAL_RCC_GetSysClockFreq+0x38>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 808d 	bne.w	800911e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009004:	4b4b      	ldr	r3, [pc, #300]	; (8009134 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009006:	60bb      	str	r3, [r7, #8]
      break;
 8009008:	e08c      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800900a:	4b4b      	ldr	r3, [pc, #300]	; (8009138 <HAL_RCC_GetSysClockFreq+0x160>)
 800900c:	60bb      	str	r3, [r7, #8]
      break;
 800900e:	e089      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009010:	4b47      	ldr	r3, [pc, #284]	; (8009130 <HAL_RCC_GetSysClockFreq+0x158>)
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009018:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800901a:	4b45      	ldr	r3, [pc, #276]	; (8009130 <HAL_RCC_GetSysClockFreq+0x158>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d023      	beq.n	800906e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009026:	4b42      	ldr	r3, [pc, #264]	; (8009130 <HAL_RCC_GetSysClockFreq+0x158>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	099b      	lsrs	r3, r3, #6
 800902c:	f04f 0400 	mov.w	r4, #0
 8009030:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	ea03 0501 	and.w	r5, r3, r1
 800903c:	ea04 0602 	and.w	r6, r4, r2
 8009040:	4a3d      	ldr	r2, [pc, #244]	; (8009138 <HAL_RCC_GetSysClockFreq+0x160>)
 8009042:	fb02 f106 	mul.w	r1, r2, r6
 8009046:	2200      	movs	r2, #0
 8009048:	fb02 f205 	mul.w	r2, r2, r5
 800904c:	440a      	add	r2, r1
 800904e:	493a      	ldr	r1, [pc, #232]	; (8009138 <HAL_RCC_GetSysClockFreq+0x160>)
 8009050:	fba5 0101 	umull	r0, r1, r5, r1
 8009054:	1853      	adds	r3, r2, r1
 8009056:	4619      	mov	r1, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f04f 0400 	mov.w	r4, #0
 800905e:	461a      	mov	r2, r3
 8009060:	4623      	mov	r3, r4
 8009062:	f7fe fa27 	bl	80074b4 <__aeabi_uldivmod>
 8009066:	4603      	mov	r3, r0
 8009068:	460c      	mov	r4, r1
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e049      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800906e:	4b30      	ldr	r3, [pc, #192]	; (8009130 <HAL_RCC_GetSysClockFreq+0x158>)
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	099b      	lsrs	r3, r3, #6
 8009074:	f04f 0400 	mov.w	r4, #0
 8009078:	f240 11ff 	movw	r1, #511	; 0x1ff
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	ea03 0501 	and.w	r5, r3, r1
 8009084:	ea04 0602 	and.w	r6, r4, r2
 8009088:	4629      	mov	r1, r5
 800908a:	4632      	mov	r2, r6
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	f04f 0400 	mov.w	r4, #0
 8009094:	0154      	lsls	r4, r2, #5
 8009096:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800909a:	014b      	lsls	r3, r1, #5
 800909c:	4619      	mov	r1, r3
 800909e:	4622      	mov	r2, r4
 80090a0:	1b49      	subs	r1, r1, r5
 80090a2:	eb62 0206 	sbc.w	r2, r2, r6
 80090a6:	f04f 0300 	mov.w	r3, #0
 80090aa:	f04f 0400 	mov.w	r4, #0
 80090ae:	0194      	lsls	r4, r2, #6
 80090b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80090b4:	018b      	lsls	r3, r1, #6
 80090b6:	1a5b      	subs	r3, r3, r1
 80090b8:	eb64 0402 	sbc.w	r4, r4, r2
 80090bc:	f04f 0100 	mov.w	r1, #0
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	00e2      	lsls	r2, r4, #3
 80090c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80090ca:	00d9      	lsls	r1, r3, #3
 80090cc:	460b      	mov	r3, r1
 80090ce:	4614      	mov	r4, r2
 80090d0:	195b      	adds	r3, r3, r5
 80090d2:	eb44 0406 	adc.w	r4, r4, r6
 80090d6:	f04f 0100 	mov.w	r1, #0
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	02a2      	lsls	r2, r4, #10
 80090e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80090e4:	0299      	lsls	r1, r3, #10
 80090e6:	460b      	mov	r3, r1
 80090e8:	4614      	mov	r4, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	4621      	mov	r1, r4
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f04f 0400 	mov.w	r4, #0
 80090f4:	461a      	mov	r2, r3
 80090f6:	4623      	mov	r3, r4
 80090f8:	f7fe f9dc 	bl	80074b4 <__aeabi_uldivmod>
 80090fc:	4603      	mov	r3, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009102:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <HAL_RCC_GetSysClockFreq+0x158>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	3301      	adds	r3, #1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	60bb      	str	r3, [r7, #8]
      break;
 800911c:	e002      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009120:	60bb      	str	r3, [r7, #8]
      break;
 8009122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009124:	68bb      	ldr	r3, [r7, #8]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912e:	bf00      	nop
 8009130:	40023800 	.word	0x40023800
 8009134:	00f42400 	.word	0x00f42400
 8009138:	017d7840 	.word	0x017d7840

0800913c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009140:	4b03      	ldr	r3, [pc, #12]	; (8009150 <HAL_RCC_GetHCLKFreq+0x14>)
 8009142:	681b      	ldr	r3, [r3, #0]
}
 8009144:	4618      	mov	r0, r3
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000008 	.word	0x20000008

08009154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009158:	f7ff fff0 	bl	800913c <HAL_RCC_GetHCLKFreq>
 800915c:	4601      	mov	r1, r0
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	0a9b      	lsrs	r3, r3, #10
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	4a03      	ldr	r2, [pc, #12]	; (8009178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800916a:	5cd3      	ldrb	r3, [r2, r3]
 800916c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009170:	4618      	mov	r0, r3
 8009172:	bd80      	pop	{r7, pc}
 8009174:	40023800 	.word	0x40023800
 8009178:	080164c4 	.word	0x080164c4

0800917c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009180:	f7ff ffdc 	bl	800913c <HAL_RCC_GetHCLKFreq>
 8009184:	4601      	mov	r1, r0
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	0b5b      	lsrs	r3, r3, #13
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	4a03      	ldr	r2, [pc, #12]	; (80091a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009192:	5cd3      	ldrb	r3, [r2, r3]
 8009194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	bd80      	pop	{r7, pc}
 800919c:	40023800 	.word	0x40023800
 80091a0:	080164c4 	.word	0x080164c4

080091a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d012      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80091cc:	4b69      	ldr	r3, [pc, #420]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4a68      	ldr	r2, [pc, #416]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80091d6:	6093      	str	r3, [r2, #8]
 80091d8:	4b66      	ldr	r3, [pc, #408]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	4964      	ldr	r1, [pc, #400]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80091ee:	2301      	movs	r3, #1
 80091f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d017      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091fe:	4b5d      	ldr	r3, [pc, #372]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920c:	4959      	ldr	r1, [pc, #356]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800920e:	4313      	orrs	r3, r2
 8009210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800921c:	d101      	bne.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800921e:	2301      	movs	r3, #1
 8009220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800922a:	2301      	movs	r3, #1
 800922c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d017      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800923a:	4b4e      	ldr	r3, [pc, #312]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800923c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	494a      	ldr	r1, [pc, #296]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009258:	d101      	bne.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800925a:	2301      	movs	r3, #1
 800925c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009266:	2301      	movs	r3, #1
 8009268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009276:	2301      	movs	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 808b 	beq.w	800939e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009288:	4b3a      	ldr	r3, [pc, #232]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800928a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928c:	4a39      	ldr	r2, [pc, #228]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800928e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009292:	6413      	str	r3, [r2, #64]	; 0x40
 8009294:	4b37      	ldr	r3, [pc, #220]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800929c:	60bb      	str	r3, [r7, #8]
 800929e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092a0:	4b35      	ldr	r3, [pc, #212]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a34      	ldr	r2, [pc, #208]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ac:	f7fe fee6 	bl	800807c <HAL_GetTick>
 80092b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092b2:	e008      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092b4:	f7fe fee2 	bl	800807c <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b64      	cmp	r3, #100	; 0x64
 80092c0:	d901      	bls.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e38d      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092c6:	4b2c      	ldr	r3, [pc, #176]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0f0      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092d2:	4b28      	ldr	r3, [pc, #160]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d035      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d02e      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092f0:	4b20      	ldr	r3, [pc, #128]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80092fa:	4b1e      	ldr	r3, [pc, #120]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fe:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009304:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009306:	4b1b      	ldr	r3, [pc, #108]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	4a1a      	ldr	r2, [pc, #104]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800930c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009312:	4a18      	ldr	r2, [pc, #96]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009318:	4b16      	ldr	r3, [pc, #88]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800931a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b01      	cmp	r3, #1
 8009322:	d114      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009324:	f7fe feaa 	bl	800807c <HAL_GetTick>
 8009328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800932a:	e00a      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800932c:	f7fe fea6 	bl	800807c <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	f241 3288 	movw	r2, #5000	; 0x1388
 800933a:	4293      	cmp	r3, r2
 800933c:	d901      	bls.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e34f      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009342:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0ee      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800935a:	d111      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009368:	4b04      	ldr	r3, [pc, #16]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800936a:	400b      	ands	r3, r1
 800936c:	4901      	ldr	r1, [pc, #4]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936e:	4313      	orrs	r3, r2
 8009370:	608b      	str	r3, [r1, #8]
 8009372:	e00b      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009374:	40023800 	.word	0x40023800
 8009378:	40007000 	.word	0x40007000
 800937c:	0ffffcff 	.word	0x0ffffcff
 8009380:	4bb3      	ldr	r3, [pc, #716]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	4ab2      	ldr	r2, [pc, #712]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009386:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800938a:	6093      	str	r3, [r2, #8]
 800938c:	4bb0      	ldr	r3, [pc, #704]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800938e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009398:	49ad      	ldr	r1, [pc, #692]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800939a:	4313      	orrs	r3, r2
 800939c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0310 	and.w	r3, r3, #16
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d010      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093aa:	4ba9      	ldr	r3, [pc, #676]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b0:	4aa7      	ldr	r2, [pc, #668]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80093ba:	4ba5      	ldr	r3, [pc, #660]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	49a2      	ldr	r1, [pc, #648]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80093d8:	4b9d      	ldr	r3, [pc, #628]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e6:	499a      	ldr	r1, [pc, #616]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80093fa:	4b95      	ldr	r3, [pc, #596]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009408:	4991      	ldr	r1, [pc, #580]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800940a:	4313      	orrs	r3, r2
 800940c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800941c:	4b8c      	ldr	r3, [pc, #560]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800941e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942a:	4989      	ldr	r1, [pc, #548]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800942c:	4313      	orrs	r3, r2
 800942e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800943e:	4b84      	ldr	r3, [pc, #528]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944c:	4980      	ldr	r1, [pc, #512]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800944e:	4313      	orrs	r3, r2
 8009450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009460:	4b7b      	ldr	r3, [pc, #492]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009466:	f023 0203 	bic.w	r2, r3, #3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	4978      	ldr	r1, [pc, #480]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009470:	4313      	orrs	r3, r2
 8009472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009482:	4b73      	ldr	r3, [pc, #460]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009488:	f023 020c 	bic.w	r2, r3, #12
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009490:	496f      	ldr	r1, [pc, #444]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009492:	4313      	orrs	r3, r2
 8009494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094a4:	4b6a      	ldr	r3, [pc, #424]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80094a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b2:	4967      	ldr	r1, [pc, #412]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094c6:	4b62      	ldr	r3, [pc, #392]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d4:	495e      	ldr	r1, [pc, #376]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094e8:	4b59      	ldr	r3, [pc, #356]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f6:	4956      	ldr	r1, [pc, #344]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800950a:	4b51      	ldr	r3, [pc, #324]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800950c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009510:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	494d      	ldr	r1, [pc, #308]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800951a:	4313      	orrs	r3, r2
 800951c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800952c:	4b48      	ldr	r3, [pc, #288]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800952e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009532:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953a:	4945      	ldr	r1, [pc, #276]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800953c:	4313      	orrs	r3, r2
 800953e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800954e:	4b40      	ldr	r3, [pc, #256]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800955c:	493c      	ldr	r1, [pc, #240]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800955e:	4313      	orrs	r3, r2
 8009560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009570:	4b37      	ldr	r3, [pc, #220]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009576:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800957e:	4934      	ldr	r1, [pc, #208]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009580:	4313      	orrs	r3, r2
 8009582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009592:	4b2f      	ldr	r3, [pc, #188]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009598:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a0:	492b      	ldr	r1, [pc, #172]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b0:	d101      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80095b2:	2301      	movs	r3, #1
 80095b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0308 	and.w	r3, r3, #8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095d2:	4b1f      	ldr	r3, [pc, #124]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80095d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e0:	491b      	ldr	r1, [pc, #108]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80095f4:	4b16      	ldr	r3, [pc, #88]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009604:	4912      	ldr	r1, [pc, #72]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009606:	4313      	orrs	r3, r2
 8009608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009618:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800961a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009628:	4909      	ldr	r1, [pc, #36]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800962a:	4313      	orrs	r3, r2
 800962c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800963e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009642:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800964c:	e002      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800964e:	bf00      	nop
 8009650:	40023800 	.word	0x40023800
 8009654:	4985      	ldr	r1, [pc, #532]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009656:	4313      	orrs	r3, r2
 8009658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009668:	4b80      	ldr	r3, [pc, #512]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800966a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009678:	497c      	ldr	r1, [pc, #496]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d005      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800968e:	f040 80d6 	bne.w	800983e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009692:	4b76      	ldr	r3, [pc, #472]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a75      	ldr	r2, [pc, #468]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800969c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969e:	f7fe fced 	bl	800807c <HAL_GetTick>
 80096a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096a4:	e008      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096a6:	f7fe fce9 	bl	800807c <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b64      	cmp	r3, #100	; 0x64
 80096b2:	d901      	bls.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e194      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096b8:	4b6c      	ldr	r3, [pc, #432]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1f0      	bne.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d021      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11d      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096d8:	4b64      	ldr	r3, [pc, #400]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80096da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	f003 0303 	and.w	r3, r3, #3
 80096e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096e6:	4b61      	ldr	r3, [pc, #388]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80096e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ec:	0e1b      	lsrs	r3, r3, #24
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	019a      	lsls	r2, r3, #6
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	041b      	lsls	r3, r3, #16
 80096fe:	431a      	orrs	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	061b      	lsls	r3, r3, #24
 8009704:	431a      	orrs	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	071b      	lsls	r3, r3, #28
 800970c:	4957      	ldr	r1, [pc, #348]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800970e:	4313      	orrs	r3, r2
 8009710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d004      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009728:	d00a      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009732:	2b00      	cmp	r3, #0
 8009734:	d02e      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800973e:	d129      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009740:	4b4a      	ldr	r3, [pc, #296]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	f003 0303 	and.w	r3, r3, #3
 800974c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800974e:	4b47      	ldr	r3, [pc, #284]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009754:	0f1b      	lsrs	r3, r3, #28
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	019a      	lsls	r2, r3, #6
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	041b      	lsls	r3, r3, #16
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	431a      	orrs	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	071b      	lsls	r3, r3, #28
 8009774:	493d      	ldr	r1, [pc, #244]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009776:	4313      	orrs	r3, r2
 8009778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800977c:	4b3b      	ldr	r3, [pc, #236]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800977e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009782:	f023 021f 	bic.w	r2, r3, #31
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	3b01      	subs	r3, #1
 800978c:	4937      	ldr	r1, [pc, #220]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800978e:	4313      	orrs	r3, r2
 8009790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01d      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80097a0:	4b32      	ldr	r3, [pc, #200]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80097a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a6:	0e1b      	lsrs	r3, r3, #24
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097ae:	4b2f      	ldr	r3, [pc, #188]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80097b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b4:	0f1b      	lsrs	r3, r3, #28
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	019a      	lsls	r2, r3, #6
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	041b      	lsls	r3, r3, #16
 80097c8:	431a      	orrs	r2, r3
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	061b      	lsls	r3, r3, #24
 80097ce:	431a      	orrs	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	071b      	lsls	r3, r3, #28
 80097d4:	4925      	ldr	r1, [pc, #148]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d011      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	019a      	lsls	r2, r3, #6
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	041b      	lsls	r3, r3, #16
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	061b      	lsls	r3, r3, #24
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	071b      	lsls	r3, r3, #28
 8009804:	4919      	ldr	r1, [pc, #100]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009806:	4313      	orrs	r3, r2
 8009808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a16      	ldr	r2, [pc, #88]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009818:	f7fe fc30 	bl	800807c <HAL_GetTick>
 800981c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800981e:	e008      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009820:	f7fe fc2c 	bl	800807c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b64      	cmp	r3, #100	; 0x64
 800982c:	d901      	bls.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e0d7      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009832:	4b0e      	ldr	r3, [pc, #56]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0f0      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b01      	cmp	r3, #1
 8009842:	f040 80cd 	bne.w	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009846:	4b09      	ldr	r3, [pc, #36]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a08      	ldr	r2, [pc, #32]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800984c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009852:	f7fe fc13 	bl	800807c <HAL_GetTick>
 8009856:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009858:	e00a      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800985a:	f7fe fc0f 	bl	800807c <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b64      	cmp	r3, #100	; 0x64
 8009866:	d903      	bls.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e0ba      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800986c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009870:	4b5e      	ldr	r3, [pc, #376]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800987c:	d0ed      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d009      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800989a:	2b00      	cmp	r3, #0
 800989c:	d02e      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d12a      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80098a6:	4b51      	ldr	r3, [pc, #324]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	0c1b      	lsrs	r3, r3, #16
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098b4:	4b4d      	ldr	r3, [pc, #308]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80098b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ba:	0f1b      	lsrs	r3, r3, #28
 80098bc:	f003 0307 	and.w	r3, r3, #7
 80098c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	019a      	lsls	r2, r3, #6
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	041b      	lsls	r3, r3, #16
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	061b      	lsls	r3, r3, #24
 80098d4:	431a      	orrs	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	071b      	lsls	r3, r3, #28
 80098da:	4944      	ldr	r1, [pc, #272]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098e2:	4b42      	ldr	r3, [pc, #264]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80098e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	3b01      	subs	r3, #1
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	493d      	ldr	r1, [pc, #244]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d022      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009910:	d11d      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009912:	4b36      	ldr	r3, [pc, #216]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	0e1b      	lsrs	r3, r3, #24
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009920:	4b32      	ldr	r3, [pc, #200]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009926:	0f1b      	lsrs	r3, r3, #28
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	019a      	lsls	r2, r3, #6
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	431a      	orrs	r2, r3
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	061b      	lsls	r3, r3, #24
 8009940:	431a      	orrs	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	071b      	lsls	r3, r3, #28
 8009946:	4929      	ldr	r1, [pc, #164]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009948:	4313      	orrs	r3, r2
 800994a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d028      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800995a:	4b24      	ldr	r3, [pc, #144]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800995c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009960:	0e1b      	lsrs	r3, r3, #24
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009968:	4b20      	ldr	r3, [pc, #128]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	f003 0303 	and.w	r3, r3, #3
 8009974:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	019a      	lsls	r2, r3, #6
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	431a      	orrs	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	061b      	lsls	r3, r3, #24
 8009986:	431a      	orrs	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	071b      	lsls	r3, r3, #28
 800998e:	4917      	ldr	r1, [pc, #92]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009990:	4313      	orrs	r3, r2
 8009992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009996:	4b15      	ldr	r3, [pc, #84]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800999c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	4911      	ldr	r1, [pc, #68]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80099ac:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a0e      	ldr	r2, [pc, #56]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80099b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099b8:	f7fe fb60 	bl	800807c <HAL_GetTick>
 80099bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099be:	e008      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099c0:	f7fe fb5c 	bl	800807c <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b64      	cmp	r3, #100	; 0x64
 80099cc:	d901      	bls.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e007      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099de:	d1ef      	bne.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	40023800 	.word	0x40023800

080099f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e01d      	b.n	8009a3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7fe f992 	bl	8007d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4610      	mov	r0, r2
 8009a30:	f000 f8ee 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689a      	ldr	r2, [r3, #8]
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <HAL_TIM_Base_Start+0x50>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b06      	cmp	r3, #6
 8009a68:	d00b      	beq.n	8009a82 <HAL_TIM_Base_Start+0x3a>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a70:	d007      	beq.n	8009a82 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f042 0201 	orr.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	00010007 	.word	0x00010007

08009a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_TIM_ConfigClockSource+0x18>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e0a6      	b.n	8009c02 <HAL_TIM_ConfigClockSource+0x166>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4b4f      	ldr	r3, [pc, #316]	; (8009c0c <HAL_TIM_ConfigClockSource+0x170>)
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	d067      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0x120>
 8009aec:	2b40      	cmp	r3, #64	; 0x40
 8009aee:	d80b      	bhi.n	8009b08 <HAL_TIM_ConfigClockSource+0x6c>
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d073      	beq.n	8009bdc <HAL_TIM_ConfigClockSource+0x140>
 8009af4:	2b10      	cmp	r3, #16
 8009af6:	d802      	bhi.n	8009afe <HAL_TIM_ConfigClockSource+0x62>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d06f      	beq.n	8009bdc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009afc:	e078      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d06c      	beq.n	8009bdc <HAL_TIM_ConfigClockSource+0x140>
 8009b02:	2b30      	cmp	r3, #48	; 0x30
 8009b04:	d06a      	beq.n	8009bdc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009b06:	e073      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009b08:	2b70      	cmp	r3, #112	; 0x70
 8009b0a:	d00d      	beq.n	8009b28 <HAL_TIM_ConfigClockSource+0x8c>
 8009b0c:	2b70      	cmp	r3, #112	; 0x70
 8009b0e:	d804      	bhi.n	8009b1a <HAL_TIM_ConfigClockSource+0x7e>
 8009b10:	2b50      	cmp	r3, #80	; 0x50
 8009b12:	d033      	beq.n	8009b7c <HAL_TIM_ConfigClockSource+0xe0>
 8009b14:	2b60      	cmp	r3, #96	; 0x60
 8009b16:	d041      	beq.n	8009b9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009b18:	e06a      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1e:	d066      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0x152>
 8009b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b24:	d017      	beq.n	8009b56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009b26:	e063      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	6899      	ldr	r1, [r3, #8]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f000 f984 	bl	8009e44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	609a      	str	r2, [r3, #8]
      break;
 8009b54:	e04c      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6899      	ldr	r1, [r3, #8]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f000 f96d 	bl	8009e44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b78:	609a      	str	r2, [r3, #8]
      break;
 8009b7a:	e039      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6859      	ldr	r1, [r3, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f000 f8e1 	bl	8009d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2150      	movs	r1, #80	; 0x50
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 f93a 	bl	8009e0e <TIM_ITRx_SetConfig>
      break;
 8009b9a:	e029      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	6859      	ldr	r1, [r3, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f000 f900 	bl	8009dae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2160      	movs	r1, #96	; 0x60
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f92a 	bl	8009e0e <TIM_ITRx_SetConfig>
      break;
 8009bba:	e019      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6859      	ldr	r1, [r3, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f000 f8c1 	bl	8009d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2140      	movs	r1, #64	; 0x40
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f91a 	bl	8009e0e <TIM_ITRx_SetConfig>
      break;
 8009bda:	e009      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f000 f911 	bl	8009e0e <TIM_ITRx_SetConfig>
      break;
 8009bec:	e000      	b.n	8009bf0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	fffeff88 	.word	0xfffeff88

08009c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a40      	ldr	r2, [pc, #256]	; (8009d24 <TIM_Base_SetConfig+0x114>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d013      	beq.n	8009c50 <TIM_Base_SetConfig+0x40>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2e:	d00f      	beq.n	8009c50 <TIM_Base_SetConfig+0x40>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a3d      	ldr	r2, [pc, #244]	; (8009d28 <TIM_Base_SetConfig+0x118>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00b      	beq.n	8009c50 <TIM_Base_SetConfig+0x40>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a3c      	ldr	r2, [pc, #240]	; (8009d2c <TIM_Base_SetConfig+0x11c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d007      	beq.n	8009c50 <TIM_Base_SetConfig+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3b      	ldr	r2, [pc, #236]	; (8009d30 <TIM_Base_SetConfig+0x120>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d003      	beq.n	8009c50 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a3a      	ldr	r2, [pc, #232]	; (8009d34 <TIM_Base_SetConfig+0x124>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d108      	bne.n	8009c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a2f      	ldr	r2, [pc, #188]	; (8009d24 <TIM_Base_SetConfig+0x114>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d02b      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c70:	d027      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a2c      	ldr	r2, [pc, #176]	; (8009d28 <TIM_Base_SetConfig+0x118>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d023      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a2b      	ldr	r2, [pc, #172]	; (8009d2c <TIM_Base_SetConfig+0x11c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d01f      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2a      	ldr	r2, [pc, #168]	; (8009d30 <TIM_Base_SetConfig+0x120>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d01b      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a29      	ldr	r2, [pc, #164]	; (8009d34 <TIM_Base_SetConfig+0x124>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d017      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a28      	ldr	r2, [pc, #160]	; (8009d38 <TIM_Base_SetConfig+0x128>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a27      	ldr	r2, [pc, #156]	; (8009d3c <TIM_Base_SetConfig+0x12c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00f      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a26      	ldr	r2, [pc, #152]	; (8009d40 <TIM_Base_SetConfig+0x130>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00b      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a25      	ldr	r2, [pc, #148]	; (8009d44 <TIM_Base_SetConfig+0x134>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d007      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a24      	ldr	r2, [pc, #144]	; (8009d48 <TIM_Base_SetConfig+0x138>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a23      	ldr	r2, [pc, #140]	; (8009d4c <TIM_Base_SetConfig+0x13c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d108      	bne.n	8009cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a0a      	ldr	r2, [pc, #40]	; (8009d24 <TIM_Base_SetConfig+0x114>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <TIM_Base_SetConfig+0xf8>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a0c      	ldr	r2, [pc, #48]	; (8009d34 <TIM_Base_SetConfig+0x124>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d103      	bne.n	8009d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	691a      	ldr	r2, [r3, #16]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	615a      	str	r2, [r3, #20]
}
 8009d16:	bf00      	nop
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	40010000 	.word	0x40010000
 8009d28:	40000400 	.word	0x40000400
 8009d2c:	40000800 	.word	0x40000800
 8009d30:	40000c00 	.word	0x40000c00
 8009d34:	40010400 	.word	0x40010400
 8009d38:	40014000 	.word	0x40014000
 8009d3c:	40014400 	.word	0x40014400
 8009d40:	40014800 	.word	0x40014800
 8009d44:	40001800 	.word	0x40001800
 8009d48:	40001c00 	.word	0x40001c00
 8009d4c:	40002000 	.word	0x40002000

08009d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	f023 0201 	bic.w	r2, r3, #1
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f023 030a 	bic.w	r3, r3, #10
 8009d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	f023 0210 	bic.w	r2, r3, #16
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	031b      	lsls	r3, r3, #12
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	011b      	lsls	r3, r3, #4
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	621a      	str	r2, [r3, #32]
}
 8009e02:	bf00      	nop
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	f043 0307 	orr.w	r3, r3, #7
 8009e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	609a      	str	r2, [r3, #8]
}
 8009e38:	bf00      	nop
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	021a      	lsls	r2, r3, #8
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	609a      	str	r2, [r3, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	371c      	adds	r7, #28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d101      	bne.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e06d      	b.n	8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a30      	ldr	r2, [pc, #192]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d004      	beq.n	8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a2f      	ldr	r2, [pc, #188]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d108      	bne.n	8009ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a20      	ldr	r2, [pc, #128]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d022      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f0e:	d01d      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1d      	ldr	r2, [pc, #116]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d018      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1c      	ldr	r2, [pc, #112]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d013      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d00e      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a15      	ldr	r2, [pc, #84]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d009      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a16      	ldr	r2, [pc, #88]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d004      	beq.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a15      	ldr	r2, [pc, #84]	; (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d10c      	bne.n	8009f66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40010400 	.word	0x40010400
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	40001800 	.word	0x40001800

08009fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e040      	b.n	800a034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7fd feda 	bl	8007d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2224      	movs	r2, #36	; 0x24
 8009fcc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0201 	bic.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f98a 	bl	800a2f8 <UART_SetConfig>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e022      	b.n	800a034 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fc28 	bl	800a84c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a00a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a01a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fcaf 	bl	800a990 <UART_CheckIdleState>
 800a032:	4603      	mov	r3, r0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af02      	add	r7, sp, #8
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	4613      	mov	r3, r2
 800a04a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a050:	2b20      	cmp	r3, #32
 800a052:	d17f      	bne.n	800a154 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <HAL_UART_Transmit+0x24>
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e078      	b.n	800a156 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_UART_Transmit+0x36>
 800a06e:	2302      	movs	r3, #2
 800a070:	e071      	b.n	800a156 <HAL_UART_Transmit+0x11a>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2221      	movs	r2, #33	; 0x21
 800a084:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a086:	f7fd fff9 	bl	800807c <HAL_GetTick>
 800a08a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	88fa      	ldrh	r2, [r7, #6]
 800a090:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	88fa      	ldrh	r2, [r7, #6]
 800a098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a4:	d108      	bne.n	800a0b8 <HAL_UART_Transmit+0x7c>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d104      	bne.n	800a0b8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	61bb      	str	r3, [r7, #24]
 800a0b6:	e003      	b.n	800a0c0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a0c8:	e02c      	b.n	800a124 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2180      	movs	r1, #128	; 0x80
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fca0 	bl	800aa1a <UART_WaitOnFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e038      	b.n	800a156 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	3302      	adds	r3, #2
 800a0fe:	61bb      	str	r3, [r7, #24]
 800a100:	e007      	b.n	800a112 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	781a      	ldrb	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1cc      	bne.n	800a0ca <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2200      	movs	r2, #0
 800a138:	2140      	movs	r1, #64	; 0x40
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 fc6d 	bl	800aa1a <UART_WaitOnFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e005      	b.n	800a156 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2220      	movs	r2, #32
 800a14e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	e000      	b.n	800a156 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a154:	2302      	movs	r3, #2
  }
}
 800a156:	4618      	mov	r0, r3
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b08a      	sub	sp, #40	; 0x28
 800a162:	af02      	add	r7, sp, #8
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	603b      	str	r3, [r7, #0]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a172:	2b20      	cmp	r3, #32
 800a174:	f040 80ba 	bne.w	800a2ec <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <HAL_UART_Receive+0x26>
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e0b2      	b.n	800a2ee <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_UART_Receive+0x38>
 800a192:	2302      	movs	r3, #2
 800a194:	e0ab      	b.n	800a2ee <HAL_UART_Receive+0x190>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2222      	movs	r2, #34	; 0x22
 800a1a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a1aa:	f7fd ff67 	bl	800807c <HAL_GetTick>
 800a1ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	88fa      	ldrh	r2, [r7, #6]
 800a1bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c8:	d10e      	bne.n	800a1e8 <HAL_UART_Receive+0x8a>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d105      	bne.n	800a1de <HAL_UART_Receive+0x80>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a1d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1dc:	e02d      	b.n	800a23a <HAL_UART_Receive+0xdc>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	22ff      	movs	r2, #255	; 0xff
 800a1e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1e6:	e028      	b.n	800a23a <HAL_UART_Receive+0xdc>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10d      	bne.n	800a20c <HAL_UART_Receive+0xae>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <HAL_UART_Receive+0xa4>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	22ff      	movs	r2, #255	; 0xff
 800a1fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a200:	e01b      	b.n	800a23a <HAL_UART_Receive+0xdc>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	227f      	movs	r2, #127	; 0x7f
 800a206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a20a:	e016      	b.n	800a23a <HAL_UART_Receive+0xdc>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a214:	d10d      	bne.n	800a232 <HAL_UART_Receive+0xd4>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <HAL_UART_Receive+0xca>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	227f      	movs	r2, #127	; 0x7f
 800a222:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a226:	e008      	b.n	800a23a <HAL_UART_Receive+0xdc>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	223f      	movs	r2, #63	; 0x3f
 800a22c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a230:	e003      	b.n	800a23a <HAL_UART_Receive+0xdc>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a240:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24a:	d108      	bne.n	800a25e <HAL_UART_Receive+0x100>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	61bb      	str	r3, [r7, #24]
 800a25c:	e003      	b.n	800a266 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a26e:	e032      	b.n	800a2d6 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2200      	movs	r2, #0
 800a278:	2120      	movs	r1, #32
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 fbcd 	bl	800aa1a <UART_WaitOnFlagUntilTimeout>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e031      	b.n	800a2ee <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10c      	bne.n	800a2aa <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	b29a      	uxth	r2, r3
 800a298:	8a7b      	ldrh	r3, [r7, #18]
 800a29a:	4013      	ands	r3, r2
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	61bb      	str	r3, [r7, #24]
 800a2a8:	e00c      	b.n	800a2c4 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	8a7b      	ldrh	r3, [r7, #18]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1c6      	bne.n	800a270 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e000      	b.n	800a2ee <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800a2ec:	2302      	movs	r3, #2
  }
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a300:	2300      	movs	r3, #0
 800a302:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	4bb1      	ldr	r3, [pc, #708]	; (800a5ec <UART_SetConfig+0x2f4>)
 800a328:	4013      	ands	r3, r2
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6812      	ldr	r2, [r2, #0]
 800a32e:	6939      	ldr	r1, [r7, #16]
 800a330:	430b      	orrs	r3, r1
 800a332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a9f      	ldr	r2, [pc, #636]	; (800a5f0 <UART_SetConfig+0x2f8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d121      	bne.n	800a3bc <UART_SetConfig+0xc4>
 800a378:	4b9e      	ldr	r3, [pc, #632]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	2b03      	cmp	r3, #3
 800a384:	d816      	bhi.n	800a3b4 <UART_SetConfig+0xbc>
 800a386:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <UART_SetConfig+0x94>)
 800a388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a3a9 	.word	0x0800a3a9
 800a394:	0800a3a3 	.word	0x0800a3a3
 800a398:	0800a3af 	.word	0x0800a3af
 800a39c:	2301      	movs	r3, #1
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e151      	b.n	800a646 <UART_SetConfig+0x34e>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e14e      	b.n	800a646 <UART_SetConfig+0x34e>
 800a3a8:	2304      	movs	r3, #4
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e14b      	b.n	800a646 <UART_SetConfig+0x34e>
 800a3ae:	2308      	movs	r3, #8
 800a3b0:	77fb      	strb	r3, [r7, #31]
 800a3b2:	e148      	b.n	800a646 <UART_SetConfig+0x34e>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	77fb      	strb	r3, [r7, #31]
 800a3b8:	bf00      	nop
 800a3ba:	e144      	b.n	800a646 <UART_SetConfig+0x34e>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a8d      	ldr	r2, [pc, #564]	; (800a5f8 <UART_SetConfig+0x300>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d134      	bne.n	800a430 <UART_SetConfig+0x138>
 800a3c6:	4b8b      	ldr	r3, [pc, #556]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3cc:	f003 030c 	and.w	r3, r3, #12
 800a3d0:	2b0c      	cmp	r3, #12
 800a3d2:	d829      	bhi.n	800a428 <UART_SetConfig+0x130>
 800a3d4:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <UART_SetConfig+0xe4>)
 800a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3da:	bf00      	nop
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a429 	.word	0x0800a429
 800a3e4:	0800a429 	.word	0x0800a429
 800a3e8:	0800a429 	.word	0x0800a429
 800a3ec:	0800a41d 	.word	0x0800a41d
 800a3f0:	0800a429 	.word	0x0800a429
 800a3f4:	0800a429 	.word	0x0800a429
 800a3f8:	0800a429 	.word	0x0800a429
 800a3fc:	0800a417 	.word	0x0800a417
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a429 	.word	0x0800a429
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a423 	.word	0x0800a423
 800a410:	2300      	movs	r3, #0
 800a412:	77fb      	strb	r3, [r7, #31]
 800a414:	e117      	b.n	800a646 <UART_SetConfig+0x34e>
 800a416:	2302      	movs	r3, #2
 800a418:	77fb      	strb	r3, [r7, #31]
 800a41a:	e114      	b.n	800a646 <UART_SetConfig+0x34e>
 800a41c:	2304      	movs	r3, #4
 800a41e:	77fb      	strb	r3, [r7, #31]
 800a420:	e111      	b.n	800a646 <UART_SetConfig+0x34e>
 800a422:	2308      	movs	r3, #8
 800a424:	77fb      	strb	r3, [r7, #31]
 800a426:	e10e      	b.n	800a646 <UART_SetConfig+0x34e>
 800a428:	2310      	movs	r3, #16
 800a42a:	77fb      	strb	r3, [r7, #31]
 800a42c:	bf00      	nop
 800a42e:	e10a      	b.n	800a646 <UART_SetConfig+0x34e>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a71      	ldr	r2, [pc, #452]	; (800a5fc <UART_SetConfig+0x304>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d120      	bne.n	800a47c <UART_SetConfig+0x184>
 800a43a:	4b6e      	ldr	r3, [pc, #440]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a440:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a444:	2b10      	cmp	r3, #16
 800a446:	d00f      	beq.n	800a468 <UART_SetConfig+0x170>
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d802      	bhi.n	800a452 <UART_SetConfig+0x15a>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <UART_SetConfig+0x164>
 800a450:	e010      	b.n	800a474 <UART_SetConfig+0x17c>
 800a452:	2b20      	cmp	r3, #32
 800a454:	d005      	beq.n	800a462 <UART_SetConfig+0x16a>
 800a456:	2b30      	cmp	r3, #48	; 0x30
 800a458:	d009      	beq.n	800a46e <UART_SetConfig+0x176>
 800a45a:	e00b      	b.n	800a474 <UART_SetConfig+0x17c>
 800a45c:	2300      	movs	r3, #0
 800a45e:	77fb      	strb	r3, [r7, #31]
 800a460:	e0f1      	b.n	800a646 <UART_SetConfig+0x34e>
 800a462:	2302      	movs	r3, #2
 800a464:	77fb      	strb	r3, [r7, #31]
 800a466:	e0ee      	b.n	800a646 <UART_SetConfig+0x34e>
 800a468:	2304      	movs	r3, #4
 800a46a:	77fb      	strb	r3, [r7, #31]
 800a46c:	e0eb      	b.n	800a646 <UART_SetConfig+0x34e>
 800a46e:	2308      	movs	r3, #8
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e0e8      	b.n	800a646 <UART_SetConfig+0x34e>
 800a474:	2310      	movs	r3, #16
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	bf00      	nop
 800a47a:	e0e4      	b.n	800a646 <UART_SetConfig+0x34e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a5f      	ldr	r2, [pc, #380]	; (800a600 <UART_SetConfig+0x308>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d120      	bne.n	800a4c8 <UART_SetConfig+0x1d0>
 800a486:	4b5b      	ldr	r3, [pc, #364]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d00f      	beq.n	800a4b4 <UART_SetConfig+0x1bc>
 800a494:	2b40      	cmp	r3, #64	; 0x40
 800a496:	d802      	bhi.n	800a49e <UART_SetConfig+0x1a6>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <UART_SetConfig+0x1b0>
 800a49c:	e010      	b.n	800a4c0 <UART_SetConfig+0x1c8>
 800a49e:	2b80      	cmp	r3, #128	; 0x80
 800a4a0:	d005      	beq.n	800a4ae <UART_SetConfig+0x1b6>
 800a4a2:	2bc0      	cmp	r3, #192	; 0xc0
 800a4a4:	d009      	beq.n	800a4ba <UART_SetConfig+0x1c2>
 800a4a6:	e00b      	b.n	800a4c0 <UART_SetConfig+0x1c8>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	77fb      	strb	r3, [r7, #31]
 800a4ac:	e0cb      	b.n	800a646 <UART_SetConfig+0x34e>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	77fb      	strb	r3, [r7, #31]
 800a4b2:	e0c8      	b.n	800a646 <UART_SetConfig+0x34e>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	77fb      	strb	r3, [r7, #31]
 800a4b8:	e0c5      	b.n	800a646 <UART_SetConfig+0x34e>
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	77fb      	strb	r3, [r7, #31]
 800a4be:	e0c2      	b.n	800a646 <UART_SetConfig+0x34e>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	77fb      	strb	r3, [r7, #31]
 800a4c4:	bf00      	nop
 800a4c6:	e0be      	b.n	800a646 <UART_SetConfig+0x34e>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a4d      	ldr	r2, [pc, #308]	; (800a604 <UART_SetConfig+0x30c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d124      	bne.n	800a51c <UART_SetConfig+0x224>
 800a4d2:	4b48      	ldr	r3, [pc, #288]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e0:	d012      	beq.n	800a508 <UART_SetConfig+0x210>
 800a4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e6:	d802      	bhi.n	800a4ee <UART_SetConfig+0x1f6>
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <UART_SetConfig+0x204>
 800a4ec:	e012      	b.n	800a514 <UART_SetConfig+0x21c>
 800a4ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4f2:	d006      	beq.n	800a502 <UART_SetConfig+0x20a>
 800a4f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4f8:	d009      	beq.n	800a50e <UART_SetConfig+0x216>
 800a4fa:	e00b      	b.n	800a514 <UART_SetConfig+0x21c>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	77fb      	strb	r3, [r7, #31]
 800a500:	e0a1      	b.n	800a646 <UART_SetConfig+0x34e>
 800a502:	2302      	movs	r3, #2
 800a504:	77fb      	strb	r3, [r7, #31]
 800a506:	e09e      	b.n	800a646 <UART_SetConfig+0x34e>
 800a508:	2304      	movs	r3, #4
 800a50a:	77fb      	strb	r3, [r7, #31]
 800a50c:	e09b      	b.n	800a646 <UART_SetConfig+0x34e>
 800a50e:	2308      	movs	r3, #8
 800a510:	77fb      	strb	r3, [r7, #31]
 800a512:	e098      	b.n	800a646 <UART_SetConfig+0x34e>
 800a514:	2310      	movs	r3, #16
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	bf00      	nop
 800a51a:	e094      	b.n	800a646 <UART_SetConfig+0x34e>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a39      	ldr	r2, [pc, #228]	; (800a608 <UART_SetConfig+0x310>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d124      	bne.n	800a570 <UART_SetConfig+0x278>
 800a526:	4b33      	ldr	r3, [pc, #204]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a534:	d012      	beq.n	800a55c <UART_SetConfig+0x264>
 800a536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a53a:	d802      	bhi.n	800a542 <UART_SetConfig+0x24a>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <UART_SetConfig+0x258>
 800a540:	e012      	b.n	800a568 <UART_SetConfig+0x270>
 800a542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a546:	d006      	beq.n	800a556 <UART_SetConfig+0x25e>
 800a548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a54c:	d009      	beq.n	800a562 <UART_SetConfig+0x26a>
 800a54e:	e00b      	b.n	800a568 <UART_SetConfig+0x270>
 800a550:	2301      	movs	r3, #1
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e077      	b.n	800a646 <UART_SetConfig+0x34e>
 800a556:	2302      	movs	r3, #2
 800a558:	77fb      	strb	r3, [r7, #31]
 800a55a:	e074      	b.n	800a646 <UART_SetConfig+0x34e>
 800a55c:	2304      	movs	r3, #4
 800a55e:	77fb      	strb	r3, [r7, #31]
 800a560:	e071      	b.n	800a646 <UART_SetConfig+0x34e>
 800a562:	2308      	movs	r3, #8
 800a564:	77fb      	strb	r3, [r7, #31]
 800a566:	e06e      	b.n	800a646 <UART_SetConfig+0x34e>
 800a568:	2310      	movs	r3, #16
 800a56a:	77fb      	strb	r3, [r7, #31]
 800a56c:	bf00      	nop
 800a56e:	e06a      	b.n	800a646 <UART_SetConfig+0x34e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a25      	ldr	r2, [pc, #148]	; (800a60c <UART_SetConfig+0x314>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d124      	bne.n	800a5c4 <UART_SetConfig+0x2cc>
 800a57a:	4b1e      	ldr	r3, [pc, #120]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a580:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a588:	d012      	beq.n	800a5b0 <UART_SetConfig+0x2b8>
 800a58a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a58e:	d802      	bhi.n	800a596 <UART_SetConfig+0x29e>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <UART_SetConfig+0x2ac>
 800a594:	e012      	b.n	800a5bc <UART_SetConfig+0x2c4>
 800a596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a59a:	d006      	beq.n	800a5aa <UART_SetConfig+0x2b2>
 800a59c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5a0:	d009      	beq.n	800a5b6 <UART_SetConfig+0x2be>
 800a5a2:	e00b      	b.n	800a5bc <UART_SetConfig+0x2c4>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	77fb      	strb	r3, [r7, #31]
 800a5a8:	e04d      	b.n	800a646 <UART_SetConfig+0x34e>
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e04a      	b.n	800a646 <UART_SetConfig+0x34e>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e047      	b.n	800a646 <UART_SetConfig+0x34e>
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e044      	b.n	800a646 <UART_SetConfig+0x34e>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	bf00      	nop
 800a5c2:	e040      	b.n	800a646 <UART_SetConfig+0x34e>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a11      	ldr	r2, [pc, #68]	; (800a610 <UART_SetConfig+0x318>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d139      	bne.n	800a642 <UART_SetConfig+0x34a>
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <UART_SetConfig+0x2fc>)
 800a5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5dc:	d027      	beq.n	800a62e <UART_SetConfig+0x336>
 800a5de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e2:	d817      	bhi.n	800a614 <UART_SetConfig+0x31c>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01c      	beq.n	800a622 <UART_SetConfig+0x32a>
 800a5e8:	e027      	b.n	800a63a <UART_SetConfig+0x342>
 800a5ea:	bf00      	nop
 800a5ec:	efff69f3 	.word	0xefff69f3
 800a5f0:	40011000 	.word	0x40011000
 800a5f4:	40023800 	.word	0x40023800
 800a5f8:	40004400 	.word	0x40004400
 800a5fc:	40004800 	.word	0x40004800
 800a600:	40004c00 	.word	0x40004c00
 800a604:	40005000 	.word	0x40005000
 800a608:	40011400 	.word	0x40011400
 800a60c:	40007800 	.word	0x40007800
 800a610:	40007c00 	.word	0x40007c00
 800a614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a618:	d006      	beq.n	800a628 <UART_SetConfig+0x330>
 800a61a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a61e:	d009      	beq.n	800a634 <UART_SetConfig+0x33c>
 800a620:	e00b      	b.n	800a63a <UART_SetConfig+0x342>
 800a622:	2300      	movs	r3, #0
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e00e      	b.n	800a646 <UART_SetConfig+0x34e>
 800a628:	2302      	movs	r3, #2
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e00b      	b.n	800a646 <UART_SetConfig+0x34e>
 800a62e:	2304      	movs	r3, #4
 800a630:	77fb      	strb	r3, [r7, #31]
 800a632:	e008      	b.n	800a646 <UART_SetConfig+0x34e>
 800a634:	2308      	movs	r3, #8
 800a636:	77fb      	strb	r3, [r7, #31]
 800a638:	e005      	b.n	800a646 <UART_SetConfig+0x34e>
 800a63a:	2310      	movs	r3, #16
 800a63c:	77fb      	strb	r3, [r7, #31]
 800a63e:	bf00      	nop
 800a640:	e001      	b.n	800a646 <UART_SetConfig+0x34e>
 800a642:	2310      	movs	r3, #16
 800a644:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64e:	d17f      	bne.n	800a750 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a650:	7ffb      	ldrb	r3, [r7, #31]
 800a652:	2b08      	cmp	r3, #8
 800a654:	d85c      	bhi.n	800a710 <UART_SetConfig+0x418>
 800a656:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <UART_SetConfig+0x364>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a6a1 	.word	0x0800a6a1
 800a664:	0800a6c1 	.word	0x0800a6c1
 800a668:	0800a711 	.word	0x0800a711
 800a66c:	0800a6d9 	.word	0x0800a6d9
 800a670:	0800a711 	.word	0x0800a711
 800a674:	0800a711 	.word	0x0800a711
 800a678:	0800a711 	.word	0x0800a711
 800a67c:	0800a6f9 	.word	0x0800a6f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a680:	f7fe fd68 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800a684:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	005a      	lsls	r2, r3, #1
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	441a      	add	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	61bb      	str	r3, [r7, #24]
        break;
 800a69e:	e03a      	b.n	800a716 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6a0:	f7fe fd6c 	bl	800917c <HAL_RCC_GetPCLK2Freq>
 800a6a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	005a      	lsls	r2, r3, #1
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	441a      	add	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	61bb      	str	r3, [r7, #24]
        break;
 800a6be:	e02a      	b.n	800a716 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	085a      	lsrs	r2, r3, #1
 800a6c6:	4b5f      	ldr	r3, [pc, #380]	; (800a844 <UART_SetConfig+0x54c>)
 800a6c8:	4413      	add	r3, r2
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	6852      	ldr	r2, [r2, #4]
 800a6ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	61bb      	str	r3, [r7, #24]
        break;
 800a6d6:	e01e      	b.n	800a716 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6d8:	f7fe fc7e 	bl	8008fd8 <HAL_RCC_GetSysClockFreq>
 800a6dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	005a      	lsls	r2, r3, #1
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	441a      	add	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	61bb      	str	r3, [r7, #24]
        break;
 800a6f6:	e00e      	b.n	800a716 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	085b      	lsrs	r3, r3, #1
 800a6fe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	61bb      	str	r3, [r7, #24]
        break;
 800a70e:	e002      	b.n	800a716 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]
        break;
 800a714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	2b0f      	cmp	r3, #15
 800a71a:	d916      	bls.n	800a74a <UART_SetConfig+0x452>
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a722:	d212      	bcs.n	800a74a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	b29b      	uxth	r3, r3
 800a728:	f023 030f 	bic.w	r3, r3, #15
 800a72c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	b29b      	uxth	r3, r3
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	b29a      	uxth	r2, r3
 800a73a:	897b      	ldrh	r3, [r7, #10]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	897a      	ldrh	r2, [r7, #10]
 800a746:	60da      	str	r2, [r3, #12]
 800a748:	e070      	b.n	800a82c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
 800a74e:	e06d      	b.n	800a82c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a750:	7ffb      	ldrb	r3, [r7, #31]
 800a752:	2b08      	cmp	r3, #8
 800a754:	d859      	bhi.n	800a80a <UART_SetConfig+0x512>
 800a756:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <UART_SetConfig+0x464>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a781 	.word	0x0800a781
 800a760:	0800a79f 	.word	0x0800a79f
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a80b 	.word	0x0800a80b
 800a76c:	0800a7d5 	.word	0x0800a7d5
 800a770:	0800a80b 	.word	0x0800a80b
 800a774:	0800a80b 	.word	0x0800a80b
 800a778:	0800a80b 	.word	0x0800a80b
 800a77c:	0800a7f3 	.word	0x0800a7f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a780:	f7fe fce8 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800a784:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	085a      	lsrs	r2, r3, #1
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	441a      	add	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	fbb2 f3f3 	udiv	r3, r2, r3
 800a798:	b29b      	uxth	r3, r3
 800a79a:	61bb      	str	r3, [r7, #24]
        break;
 800a79c:	e038      	b.n	800a810 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a79e:	f7fe fced 	bl	800917c <HAL_RCC_GetPCLK2Freq>
 800a7a2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	085a      	lsrs	r2, r3, #1
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	441a      	add	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	61bb      	str	r3, [r7, #24]
        break;
 800a7ba:	e029      	b.n	800a810 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	085a      	lsrs	r2, r3, #1
 800a7c2:	4b21      	ldr	r3, [pc, #132]	; (800a848 <UART_SetConfig+0x550>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	6852      	ldr	r2, [r2, #4]
 800a7ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	61bb      	str	r3, [r7, #24]
        break;
 800a7d2:	e01d      	b.n	800a810 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7d4:	f7fe fc00 	bl	8008fd8 <HAL_RCC_GetSysClockFreq>
 800a7d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	085a      	lsrs	r2, r3, #1
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	441a      	add	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	61bb      	str	r3, [r7, #24]
        break;
 800a7f0:	e00e      	b.n	800a810 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	fbb2 f3f3 	udiv	r3, r2, r3
 800a804:	b29b      	uxth	r3, r3
 800a806:	61bb      	str	r3, [r7, #24]
        break;
 800a808:	e002      	b.n	800a810 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	75fb      	strb	r3, [r7, #23]
        break;
 800a80e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2b0f      	cmp	r3, #15
 800a814:	d908      	bls.n	800a828 <UART_SetConfig+0x530>
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81c:	d204      	bcs.n	800a828 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	60da      	str	r2, [r3, #12]
 800a826:	e001      	b.n	800a82c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a838:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	01e84800 	.word	0x01e84800
 800a848:	00f42400 	.word	0x00f42400

0800a84c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00a      	beq.n	800a876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00a      	beq.n	800a898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00a      	beq.n	800a8ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	f003 0308 	and.w	r3, r3, #8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01a      	beq.n	800a962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a94a:	d10a      	bne.n	800a962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	605a      	str	r2, [r3, #4]
  }
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af02      	add	r7, sp, #8
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a99e:	f7fd fb6d 	bl	800807c <HAL_GetTick>
 800a9a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0308 	and.w	r3, r3, #8
 800a9ae:	2b08      	cmp	r3, #8
 800a9b0:	d10e      	bne.n	800a9d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f82a 	bl	800aa1a <UART_WaitOnFlagUntilTimeout>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e020      	b.n	800aa12 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	d10e      	bne.n	800a9fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f814 	bl	800aa1a <UART_WaitOnFlagUntilTimeout>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e00a      	b.n	800aa12 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2220      	movs	r2, #32
 800aa06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	603b      	str	r3, [r7, #0]
 800aa26:	4613      	mov	r3, r2
 800aa28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2a:	e05d      	b.n	800aae8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa32:	d059      	beq.n	800aae8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa34:	f7fd fb22 	bl	800807c <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d302      	bcc.n	800aa4a <UART_WaitOnFlagUntilTimeout+0x30>
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d11b      	bne.n	800aa82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2220      	movs	r2, #32
 800aa74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e042      	b.n	800ab08 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d02b      	beq.n	800aae8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa9e:	d123      	bne.n	800aae8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaa8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aab8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0201 	bic.w	r2, r2, #1
 800aac8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2220      	movs	r2, #32
 800aace:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2220      	movs	r2, #32
 800aad4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2220      	movs	r2, #32
 800aada:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e00f      	b.n	800ab08 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	69da      	ldr	r2, [r3, #28]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	bf0c      	ite	eq
 800aaf8:	2301      	moveq	r3, #1
 800aafa:	2300      	movne	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	461a      	mov	r2, r3
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d092      	beq.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <aiPbMgrInit>:
    const aiPbCmdFunc *funcs;
    uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 800ab10:	b5b0      	push	{r4, r5, r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6178      	str	r0, [r7, #20]
    const aiPbCmdFunc *cfunc;
    pbContextMgr.input = pb_istream_from_uart(0);
 800ab18:	4c1a      	ldr	r4, [pc, #104]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f001 fc9a 	bl	800c458 <pb_istream_from_uart>
 800ab24:	463b      	mov	r3, r7
 800ab26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 800ab2c:	4c15      	ldr	r4, [pc, #84]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab2e:	463b      	mov	r3, r7
 800ab30:	2100      	movs	r1, #0
 800ab32:	4618      	mov	r0, r3
 800ab34:	f001 fc6c 	bl	800c410 <pb_ostream_to_uart>
 800ab38:	3410      	adds	r4, #16
 800ab3a:	463d      	mov	r5, r7
 800ab3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	6023      	str	r3, [r4, #0]

    pbContextMgr.n_func = 0;
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	629a      	str	r2, [r3, #40]	; 0x28
    pbContextMgr.funcs = NULL;
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	625a      	str	r2, [r3, #36]	; 0x24

    if (funcs) {
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d011      	beq.n	800ab7a <aiPbMgrInit+0x6a>
        cfunc = funcs;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800ab5a:	e007      	b.n	800ab6c <aiPbMgrInit+0x5c>
            pbContextMgr.n_func++;
 800ab5c:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	3301      	adds	r3, #1
 800ab62:	4a08      	ldr	r2, [pc, #32]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab64:	6293      	str	r3, [r2, #40]	; 0x28
            cfunc++;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	330c      	adds	r3, #12
 800ab6a:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1f3      	bne.n	800ab5c <aiPbMgrInit+0x4c>
        }
        pbContextMgr.funcs = funcs;
 800ab74:	4a03      	ldr	r2, [pc, #12]	; (800ab84 <aiPbMgrInit+0x74>)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 800ab7a:	bf00      	nop
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bdb0      	pop	{r4, r5, r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200008e4 	.word	0x200008e4

0800ab88 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
        EnumState state)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	4613      	mov	r3, r2
 800ab94:	71fb      	strb	r3, [r7, #7]
    resp->reqid = req->reqid;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	601a      	str	r2, [r3, #0]
    resp->state = state;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	79fa      	ldrb	r2, [r7, #7]
 800aba2:	711a      	strb	r2, [r3, #4]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	4905      	ldr	r1, [pc, #20]	; (800abbc <aiPbMgrSendResp+0x34>)
 800aba8:	4805      	ldr	r0, [pc, #20]	; (800abc0 <aiPbMgrSendResp+0x38>)
 800abaa:	f005 f83d 	bl	800fc28 <pb_encode>
    ioFlushWrite();
 800abae:	f001 fb4f 	bl	800c250 <ioFlushWrite>
}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	0801716c 	.word	0x0801716c
 800abc0:	200008f4 	.word	0x200008f4

0800abc4 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
        EnumState state, uint32_t param, EnumError error)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	4613      	mov	r3, r2
 800abd2:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ack_tag;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	220c      	movs	r2, #12
 800abd8:	80da      	strh	r2, [r3, #6]
    resp->payload.ack.param = param;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	609a      	str	r2, [r3, #8]
    resp->payload.ack.error = error;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	7e3a      	ldrb	r2, [r7, #24]
 800abe4:	731a      	strb	r2, [r3, #12]
    aiPbMgrSendResp(req, resp, state);
 800abe6:	79fb      	ldrb	r3, [r7, #7]
 800abe8:	461a      	mov	r2, r3
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff ffcb 	bl	800ab88 <aiPbMgrSendResp>
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
    bool res;
    ackMsg ack = ackMsg_init_default;
 800ac02:	2300      	movs	r3, #0
 800ac04:	607b      	str	r3, [r7, #4]
 800ac06:	2300      	movs	r3, #0
 800ac08:	723b      	strb	r3, [r7, #8]
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800ac0a:	1d3b      	adds	r3, r7, #4
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4906      	ldr	r1, [pc, #24]	; (800ac28 <aiPbMgrWaitAck+0x2c>)
 800ac10:	4806      	ldr	r0, [pc, #24]	; (800ac2c <aiPbMgrWaitAck+0x30>)
 800ac12:	f003 ffbf 	bl	800eb94 <pb_decode_delimited>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
    ioFlushRead();
 800ac1a:	f001 fb87 	bl	800c32c <ioFlushRead>
    return res;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	080170c0 	.word	0x080170c0
 800ac2c:	200008e4 	.word	0x200008e4

0800ac30 <aiPbAiBufferSize>:
    uint32_t err;
    void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
    if (!buffer)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <aiPbAiBufferSize+0x12>
        return 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e00d      	b.n	800ac5e <aiPbAiBufferSize+0x2e>
    else
        return buffer->channels * buffer->height
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	88d2      	ldrh	r2, [r2, #6]
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
                * buffer->width * buffer->n_batches;
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	8912      	ldrh	r2, [r2, #8]
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	8892      	ldrh	r2, [r2, #4]
 800ac5a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b083      	sub	sp, #12
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
    return (ai_buffer_format)msgFmt;
 800ac72:	687b      	ldr	r3, [r7, #4]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
    return (uint32_t)aiFmt;
 800ac88:	687b      	ldr	r3, [r7, #4]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
    return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	11db      	asrs	r3, r3, #7
 800aca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca6:	3304      	adds	r3, #4
 800aca8:	10db      	asrs	r3, r3, #3
}
 800acaa:	4618      	mov	r0, r3
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
        void **arg)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b08c      	sub	sp, #48	; 0x30
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	627b      	str	r3, [r7, #36]	; 0x24
    ai_buffer_format format;
    size_t itsize;

    UNUSED(field);

    int maxr = bm->n_max;
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg = (aiBufferByteMsg *)bm->msg;
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	623b      	str	r3, [r7, #32]
    format = aiPbMsgFmtToAiFmt(msg->shape.format);
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff ffc6 	bl	800ac6a <aiPbMsgFmtToAiFmt>
 800acde:	61f8      	str	r0, [r7, #28]

    /* todo(jmd) - adding scale/zeropoint values */

    /* Check shape/format */
    bm->err = EnumError_E_NONE;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	2200      	movs	r2, #0
 800ace4:	60da      	str	r2, [r3, #12]
    if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	2b40      	cmp	r3, #64	; 0x40
 800acea:	d005      	beq.n	800acf8 <aiPbBuffer_read_cb3+0x42>
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d005      	beq.n	800ad04 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	2202      	movs	r2, #2
 800ad00:	60da      	str	r2, [r3, #12]
 800ad02:	e020      	b.n	800ad46 <aiPbBuffer_read_cb3+0x90>
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	691a      	ldr	r2, [r3, #16]
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d114      	bne.n	800ad3c <aiPbBuffer_read_cb3+0x86>
            (msg->shape.height != bm->buffer->height) ||
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad18:	6812      	ldr	r2, [r2, #0]
 800ad1a:	88d2      	ldrh	r2, [r2, #6]
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d10d      	bne.n	800ad3c <aiPbBuffer_read_cb3+0x86>
            (msg->shape.width != bm->buffer->width) ||
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad26:	6812      	ldr	r2, [r2, #0]
 800ad28:	8912      	ldrh	r2, [r2, #8]
            (msg->shape.height != bm->buffer->height) ||
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d106      	bne.n	800ad3c <aiPbBuffer_read_cb3+0x86>
            (msg->shape.n_batches != bm->buffer->n_batches)) {
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad34:	6812      	ldr	r2, [r2, #0]
 800ad36:	8892      	ldrh	r2, [r2, #4]
            (msg->shape.width != bm->buffer->width) ||
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d004      	beq.n	800ad46 <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	2205      	movs	r2, #5
 800ad44:	60da      	str	r2, [r3, #12]
    }

    itsize = aiPbBufferGetItemSize(format);
 800ad46:	69f8      	ldr	r0, [r7, #28]
 800ad48:	f7ff ffa5 	bl	800ac96 <aiPbBufferGetItemSize>
 800ad4c:	61b8      	str	r0, [r7, #24]

    /* Read data */
    uint8_t *pw = (uint8_t *)bm->buffer->data;
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
    while (stream->bytes_left) {
 800ad56:	e027      	b.n	800ada8 <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 800ad58:	f107 0310 	add.w	r3, r7, #16
 800ad5c:	69ba      	ldr	r2, [r7, #24]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f002 feef 	bl	800db44 <pb_read>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f083 0301 	eor.w	r3, r3, #1
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <aiPbBuffer_read_cb3+0xc0>
            return false;
 800ad72:	2300      	movs	r3, #0
 800ad74:	e02a      	b.n	800adcc <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dd10      	ble.n	800ad9e <aiPbBuffer_read_cb3+0xe8>
            if (pw) {
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <aiPbBuffer_read_cb3+0xe2>
                memcpy(pw, &number, itsize);
 800ad82:	f107 0310 	add.w	r3, r7, #16
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8c:	f005 fbe3 	bl	8010556 <memcpy>
                pw += itsize;
 800ad90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	4413      	add	r3, r2
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            maxr--;
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	609a      	str	r2, [r3, #8]
    while (stream->bytes_left) {
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1d3      	bne.n	800ad58 <aiPbBuffer_read_cb3+0xa2>
    }

    /* Check nb_op */
    if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <aiPbBuffer_read_cb3+0x114>
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d002      	beq.n	800adca <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	2201      	movs	r2, #1
 800adc8:	60da      	str	r2, [r3, #12]

    return true;
 800adca:	2301      	movs	r3, #1
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3730      	adds	r7, #48	; 0x30
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b08a      	sub	sp, #40	; 0x28
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t itsize;

    int maxw = bm->n_max;
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	623b      	str	r3, [r7, #32]
    ai_buffer_format format;

    if ((maxw == 0) || (!bm->buffer))
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <aiPbBuffer_write_cb3+0x26>
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <aiPbBuffer_write_cb3+0x2a>
        return true;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e02c      	b.n	800ae58 <aiPbBuffer_write_cb3+0x84>

    format = bm->buffer->format;
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	61fb      	str	r3, [r7, #28]

    itsize = aiPbBufferGetItemSize(format);
 800ae06:	69f8      	ldr	r0, [r7, #28]
 800ae08:	f7ff ff45 	bl	800ac96 <aiPbBufferGetItemSize>
 800ae0c:	61b8      	str	r0, [r7, #24]

    /* Write data */
    pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	617b      	str	r3, [r7, #20]

    if (!pb_encode_tag_for_field(stream, field))
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f005 f875 	bl	800ff08 <pb_encode_tag_for_field>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f083 0301 	eor.w	r3, r3, #1
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <aiPbBuffer_write_cb3+0x5a>
        return false;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e014      	b.n	800ae58 <aiPbBuffer_write_cb3+0x84>

    if (!pb_encode_string(stream, pr, itsize * maxw))
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	fb02 f303 	mul.w	r3, r2, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f005 f8ae 	bl	800ff9c <pb_encode_string>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f083 0301 	eor.w	r3, r3, #1
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <aiPbBuffer_write_cb3+0x7c>
        return false;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e003      	b.n	800ae58 <aiPbBuffer_write_cb3+0x84>

    bm->n_ops = maxw;
 800ae50:	6a3a      	ldr	r2, [r7, #32]
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	609a      	str	r2, [r3, #8]

    return true;
 800ae56:	2301      	movs	r3, #1
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3728      	adds	r7, #40	; 0x28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
        EnumState state, ai_buffer *buffer)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b096      	sub	sp, #88	; 0x58
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	71fb      	strb	r3, [r7, #7]
    aiBufferByteMsg msg;
    struct aiPbMgrBuffer hdlb;
    bool res = true;
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    hdlb.n_ops = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
    hdlb.buffer = buffer;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	617b      	str	r3, [r7, #20]
    hdlb.err = EnumError_E_NONE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	623b      	str	r3, [r7, #32]
    hdlb.n_max = aiPbAiBufferSize(buffer);
 800ae82:	6838      	ldr	r0, [r7, #0]
 800ae84:	f7ff fed4 	bl	800ac30 <aiPbAiBufferSize>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	61bb      	str	r3, [r7, #24]
    hdlb.msg = &msg;
 800ae8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24

    msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 800ae92:	4b1b      	ldr	r3, [pc, #108]	; (800af00 <aiPbMgrReceiveAiBuffer3+0xa0>)
 800ae94:	647b      	str	r3, [r7, #68]	; 0x44
    msg.datas.arg = &hdlb;
 800ae96:	f107 0314 	add.w	r3, r7, #20
 800ae9a:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Waiting buffer message */
    pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 800ae9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aea0:	461a      	mov	r2, r3
 800aea2:	4918      	ldr	r1, [pc, #96]	; (800af04 <aiPbMgrReceiveAiBuffer3+0xa4>)
 800aea4:	4818      	ldr	r0, [pc, #96]	; (800af08 <aiPbMgrReceiveAiBuffer3+0xa8>)
 800aea6:	f003 fe75 	bl	800eb94 <pb_decode_delimited>
    ioFlushRead();
 800aeaa:	f001 fa3f 	bl	800c32c <ioFlushRead>

    /* Send ACK and wait ACK (or send ACK only if error) */
    if (hdlb.err) {
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00d      	beq.n	800aed0 <aiPbMgrReceiveAiBuffer3+0x70>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800aeb4:	6a3a      	ldr	r2, [r7, #32]
                (EnumError)hdlb.err);
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	2204      	movs	r2, #4
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7ff fe7e 	bl	800abc4 <aiPbMgrSendAck>
        res = false;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aece:	e010      	b.n	800aef2 <aiPbMgrReceiveAiBuffer3+0x92>
    } else {
        aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 800aed0:	69f9      	ldr	r1, [r7, #28]
 800aed2:	79fa      	ldrb	r2, [r7, #7]
 800aed4:	2300      	movs	r3, #0
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	460b      	mov	r3, r1
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7ff fe71 	bl	800abc4 <aiPbMgrSendAck>
        if ((state == EnumState_S_WAITING) ||
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d002      	beq.n	800aeee <aiPbMgrReceiveAiBuffer3+0x8e>
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d101      	bne.n	800aef2 <aiPbMgrReceiveAiBuffer3+0x92>
                (state == EnumState_S_PROCESSING))
            aiPbMgrWaitAck();
 800aeee:	f7ff fe85 	bl	800abfc <aiPbMgrWaitAck>
    }

    return res;
 800aef2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3750      	adds	r7, #80	; 0x50
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	0800acb7 	.word	0x0800acb7
 800af04:	08017014 	.word	0x08017014
 800af08:	200008e4 	.word	0x200008e4

0800af0c <aiPbMgrSetMetaInfo>:

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
		aiBufferShapeMsg *shape)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
	shape->scale = 0.0f;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	615a      	str	r2, [r3, #20]
	shape->zeropoint = 0;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	619a      	str	r2, [r3, #24]
	if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 811e 	beq.w	800b16a <aiPbMgrSetMetaInfo+0x25e>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 8117 	beq.w	800b16a <aiPbMgrSetMetaInfo+0x25e>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 8112 	beq.w	800b16a <aiPbMgrSetMetaInfo+0x25e>
		shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d04f      	beq.n	800afec <aiPbMgrSetMetaInfo+0xe0>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d049      	beq.n	800afec <aiPbMgrSetMetaInfo+0xe0>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d045      	beq.n	800afec <aiPbMgrSetMetaInfo+0xe0>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d03f      	beq.n	800afe6 <aiPbMgrSetMetaInfo+0xda>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d039      	beq.n	800afe6 <aiPbMgrSetMetaInfo+0xda>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d035      	beq.n	800afe6 <aiPbMgrSetMetaInfo+0xda>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d008      	beq.n	800af92 <aiPbMgrSetMetaInfo+0x86>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <aiPbMgrSetMetaInfo+0x86>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	e000      	b.n	800af94 <aiPbMgrSetMetaInfo+0x88>
 800af92:	2300      	movs	r3, #0
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d025      	beq.n	800afe6 <aiPbMgrSetMetaInfo+0xda>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <aiPbMgrSetMetaInfo+0xa6>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <aiPbMgrSetMetaInfo+0xa6>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	e000      	b.n	800afb4 <aiPbMgrSetMetaInfo+0xa8>
 800afb2:	2300      	movs	r3, #0
 800afb4:	885b      	ldrh	r3, [r3, #2]
 800afb6:	461a      	mov	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4293      	cmp	r3, r2
 800afbc:	da13      	bge.n	800afe6 <aiPbMgrSetMetaInfo+0xda>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d008      	beq.n	800afd6 <aiPbMgrSetMetaInfo+0xca>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <aiPbMgrSetMetaInfo+0xca>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	e000      	b.n	800afd8 <aiPbMgrSetMetaInfo+0xcc>
 800afd6:	2300      	movs	r3, #0
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	e004      	b.n	800aff0 <aiPbMgrSetMetaInfo+0xe4>
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	e001      	b.n	800aff0 <aiPbMgrSetMetaInfo+0xe4>
 800afec:	f04f 0300 	mov.w	r3, #0
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	6153      	str	r3, [r2, #20]
		shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 80b4 	beq.w	800b164 <aiPbMgrSetMetaInfo+0x258>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 80ad 	beq.w	800b164 <aiPbMgrSetMetaInfo+0x258>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 80a8 	beq.w	800b164 <aiPbMgrSetMetaInfo+0x258>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05f      	beq.n	800b0da <aiPbMgrSetMetaInfo+0x1ce>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d059      	beq.n	800b0da <aiPbMgrSetMetaInfo+0x1ce>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d055      	beq.n	800b0da <aiPbMgrSetMetaInfo+0x1ce>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d008      	beq.n	800b046 <aiPbMgrSetMetaInfo+0x13a>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <aiPbMgrSetMetaInfo+0x13a>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	e000      	b.n	800b048 <aiPbMgrSetMetaInfo+0x13c>
 800b046:	2300      	movs	r3, #0
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d043      	beq.n	800b0da <aiPbMgrSetMetaInfo+0x1ce>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d03e      	beq.n	800b0d6 <aiPbMgrSetMetaInfo+0x1ca>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d038      	beq.n	800b0d6 <aiPbMgrSetMetaInfo+0x1ca>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d034      	beq.n	800b0d6 <aiPbMgrSetMetaInfo+0x1ca>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d008      	beq.n	800b084 <aiPbMgrSetMetaInfo+0x178>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <aiPbMgrSetMetaInfo+0x178>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	e000      	b.n	800b086 <aiPbMgrSetMetaInfo+0x17a>
 800b084:	2300      	movs	r3, #0
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d024      	beq.n	800b0d6 <aiPbMgrSetMetaInfo+0x1ca>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d008      	beq.n	800b0a4 <aiPbMgrSetMetaInfo+0x198>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <aiPbMgrSetMetaInfo+0x198>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	e000      	b.n	800b0a6 <aiPbMgrSetMetaInfo+0x19a>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	885b      	ldrh	r3, [r3, #2]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	da12      	bge.n	800b0d6 <aiPbMgrSetMetaInfo+0x1ca>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <aiPbMgrSetMetaInfo+0x1bc>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <aiPbMgrSetMetaInfo+0x1bc>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	e000      	b.n	800b0ca <aiPbMgrSetMetaInfo+0x1be>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	e047      	b.n	800b166 <aiPbMgrSetMetaInfo+0x25a>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e045      	b.n	800b166 <aiPbMgrSetMetaInfo+0x25a>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d03f      	beq.n	800b160 <aiPbMgrSetMetaInfo+0x254>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d039      	beq.n	800b160 <aiPbMgrSetMetaInfo+0x254>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d035      	beq.n	800b160 <aiPbMgrSetMetaInfo+0x254>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d008      	beq.n	800b10c <aiPbMgrSetMetaInfo+0x200>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <aiPbMgrSetMetaInfo+0x200>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	e000      	b.n	800b10e <aiPbMgrSetMetaInfo+0x202>
 800b10c:	2300      	movs	r3, #0
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d025      	beq.n	800b160 <aiPbMgrSetMetaInfo+0x254>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <aiPbMgrSetMetaInfo+0x220>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <aiPbMgrSetMetaInfo+0x220>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	e000      	b.n	800b12e <aiPbMgrSetMetaInfo+0x222>
 800b12c:	2300      	movs	r3, #0
 800b12e:	885b      	ldrh	r3, [r3, #2]
 800b130:	461a      	mov	r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	4293      	cmp	r3, r2
 800b136:	da13      	bge.n	800b160 <aiPbMgrSetMetaInfo+0x254>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d008      	beq.n	800b150 <aiPbMgrSetMetaInfo+0x244>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <aiPbMgrSetMetaInfo+0x244>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	e000      	b.n	800b152 <aiPbMgrSetMetaInfo+0x246>
 800b150:	2300      	movs	r3, #0
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	4413      	add	r3, r2
 800b15a:	f993 3000 	ldrsb.w	r3, [r3]
 800b15e:	e002      	b.n	800b166 <aiPbMgrSetMetaInfo+0x25a>
 800b160:	2300      	movs	r3, #0
 800b162:	e000      	b.n	800b166 <aiPbMgrSetMetaInfo+0x25a>
 800b164:	2300      	movs	r3, #0
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	6193      	str	r3, [r2, #24]
	}
}
 800b16a:	bf00      	nop
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
	...

0800b178 <aiPbMgrSendAiBuffer3>:

bool aiPbMgrSendAiBuffer3(const reqMsg *req, respMsg *resp, EnumState state,
        uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08c      	sub	sp, #48	; 0x30
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6178      	str	r0, [r7, #20]
 800b180:	6139      	str	r1, [r7, #16]
 800b182:	60bb      	str	r3, [r7, #8]
 800b184:	ed87 0a01 	vstr	s0, [r7, #4]
 800b188:	4613      	mov	r3, r2
 800b18a:	73fb      	strb	r3, [r7, #15]
    struct aiPbMgrBuffer hdlb;
    const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 800b18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
    const int is_io = AI_BUFFER_FMT_FLAG_IS_IO & buffer->format;
#endif

    hdlb.n_ops = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	623b      	str	r3, [r7, #32]
    hdlb.buffer = (ai_buffer *)buffer;
 800b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b198:	61bb      	str	r3, [r7, #24]
    hdlb.err = EnumError_E_NONE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
    hdlb.n_max = aiPbAiBufferSize(buffer);
 800b19e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1a0:	f7ff fd46 	bl	800ac30 <aiPbAiBufferSize>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	61fb      	str	r3, [r7, #28]
    hdlb.msg = NULL;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
    if ((type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) && (!is_io)) {
        hdlb.n_max  = 0;
    }
#else
    if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da01      	bge.n	800b1b6 <aiPbMgrSendAiBuffer3+0x3e>
        hdlb.n_max  = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61fb      	str	r3, [r7, #28]
    }
#endif
    type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1bc:	60bb      	str	r3, [r7, #8]

    /* Fill Node sub-message */
    resp->which_payload = respMsg_node_tag;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	220e      	movs	r2, #14
 800b1c2:	80da      	strh	r2, [r3, #6]
    resp->payload.node.type = type;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	609a      	str	r2, [r3, #8]
    resp->payload.node.id = id;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1ce:	60da      	str	r2, [r3, #12]
    resp->payload.node.duration = dur_ms;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	611a      	str	r2, [r3, #16]
    resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 800b1d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fd50 	bl	800ac80 <aiPbAiFmtToMsgFmt>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	615a      	str	r2, [r3, #20]
    resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 800b1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e8:	889b      	ldrh	r3, [r3, #4]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	619a      	str	r2, [r3, #24]
    resp->payload.node.buffer.shape.height = buffer->height;
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f2:	88db      	ldrh	r3, [r3, #6]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	61da      	str	r2, [r3, #28]
    resp->payload.node.buffer.shape.width = buffer->width;
 800b1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fc:	891b      	ldrh	r3, [r3, #8]
 800b1fe:	461a      	mov	r2, r3
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	621a      	str	r2, [r3, #32]
    resp->payload.node.buffer.shape.channels = buffer->channels;
 800b204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	625a      	str	r2, [r3, #36]	; 0x24
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3314      	adds	r3, #20
 800b210:	461a      	mov	r2, r3
 800b212:	2100      	movs	r1, #0
 800b214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b216:	f7ff fe79 	bl	800af0c <aiPbMgrSetMetaInfo>

    resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	4a0b      	ldr	r2, [pc, #44]	; (800b24c <aiPbMgrSendAiBuffer3+0xd4>)
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30
    resp->payload.node.buffer.datas.arg = &hdlb;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f107 0218 	add.w	r2, r7, #24
 800b226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send msg */
    aiPbMgrSendResp(req, resp, state);
 800b228:	7bfb      	ldrb	r3, [r7, #15]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6939      	ldr	r1, [r7, #16]
 800b22e:	6978      	ldr	r0, [r7, #20]
 800b230:	f7ff fcaa 	bl	800ab88 <aiPbMgrSendResp>

    /* Waiting ACK */
    if (state == EnumState_S_PROCESSING)
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d103      	bne.n	800b242 <aiPbMgrSendAiBuffer3+0xca>
        return aiPbMgrWaitAck();
 800b23a:	f7ff fcdf 	bl	800abfc <aiPbMgrWaitAck>
 800b23e:	4603      	mov	r3, r0
 800b240:	e000      	b.n	800b244 <aiPbMgrSendAiBuffer3+0xcc>
    else
        return true;
 800b242:	2301      	movs	r3, #1
}
 800b244:	4618      	mov	r0, r3
 800b246:	3730      	adds	r7, #48	; 0x30
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	0800add5 	.word	0x0800add5

0800b250 <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
    resp->which_payload = respMsg_sync_tag;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	220a      	movs	r2, #10
 800b260:	80da      	strh	r2, [r3, #6]
    resp->payload.sync.version =
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	f240 2201 	movw	r2, #513	; 0x201
 800b268:	609a      	str	r2, [r3, #8]
            EnumVersion_P_VERSION_MAJOR << 8 |
            EnumVersion_P_VERSION_MINOR;

    resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2202      	movs	r2, #2
 800b26e:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
    resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

    if (param)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <aiPbCmdSync+0x32>
        resp->payload.sync.capability |= (uint32_t)param;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	60da      	str	r2, [r3, #12]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800b282:	2200      	movs	r2, #0
 800b284:	68b9      	ldr	r1, [r7, #8]
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f7ff fc7e 	bl	800ab88 <aiPbMgrSendResp>
}
 800b28c:	bf00      	nop
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
    UNUSED(param);
    resp->which_payload = respMsg_sinfo_tag;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	220b      	movs	r2, #11
 800b2a4:	80da      	strh	r2, [r3, #6]
    resp->payload.sinfo.devid = HAL_GetDEVID();
 800b2a6:	f7fc ff0b 	bl	80080c0 <HAL_GetDEVID>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	609a      	str	r2, [r3, #8]
    resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 800b2b0:	f7fd fe92 	bl	8008fd8 <HAL_RCC_GetSysClockFreq>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	60da      	str	r2, [r3, #12]
    resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 800b2ba:	f7fd ff3f 	bl	800913c <HAL_RCC_GetHCLKFreq>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	611a      	str	r2, [r3, #16]
    resp->payload.sinfo.cache = getFlashCacheConf();
 800b2c4:	f000 fb74 	bl	800b9b0 <getFlashCacheConf>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	615a      	str	r2, [r3, #20]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff fc58 	bl	800ab88 <aiPbMgrSendResp>
}
 800b2d8:	bf00      	nop
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
    if ((!aibuffer) || (!msg))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d026      	beq.n	800b33e <init_aibuffer_msg+0x5e>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d023      	beq.n	800b33e <init_aibuffer_msg+0x5e>
        return;

    const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	60fb      	str	r3, [r7, #12]

    msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fcbd 	bl	800ac80 <aiPbAiFmtToMsgFmt>
 800b306:	4602      	mov	r2, r0
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	601a      	str	r2, [r3, #0]
    msg->channels = aibuffer->channels;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	611a      	str	r2, [r3, #16]
    msg->height = aibuffer->height;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	88db      	ldrh	r3, [r3, #6]
 800b318:	461a      	mov	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	609a      	str	r2, [r3, #8]
    msg->width = aibuffer->width;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	891b      	ldrh	r3, [r3, #8]
 800b322:	461a      	mov	r2, r3
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	60da      	str	r2, [r3, #12]
    msg->n_batches = aibuffer->n_batches;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	889b      	ldrh	r3, [r3, #4]
 800b32c:	461a      	mov	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	605a      	str	r2, [r3, #4]
    aiPbMgrSetMetaInfo(meta_info, 0, msg);
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	2100      	movs	r1, #0
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff fde8 	bl	800af0c <aiPbMgrSetMetaInfo>
 800b33c:	e000      	b.n	800b340 <init_aibuffer_msg+0x60>
        return;
 800b33e:	bf00      	nop
}
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        const ai_buffer *aibuffer, int maxw)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08c      	sub	sp, #48	; 0x30
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
    aiBufferShapeMsg msg;

    for (int i = 0; i < maxw; i++) {
 800b356:	2300      	movs	r3, #0
 800b358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b35a:	e02b      	b.n	800b3b4 <nn_shape_w_cb+0x6c>
        if (!pb_encode_tag_for_field(stream, field))
 800b35c:	68b9      	ldr	r1, [r7, #8]
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f004 fdd2 	bl	800ff08 <pb_encode_tag_for_field>
 800b364:	4603      	mov	r3, r0
 800b366:	f083 0301 	eor.w	r3, r3, #1
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <nn_shape_w_cb+0x2c>
            return false;
 800b370:	2300      	movs	r3, #0
 800b372:	e024      	b.n	800b3be <nn_shape_w_cb+0x76>

        init_aibuffer_msg(&aibuffer[i], &msg);
 800b374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b376:	4613      	mov	r3, r2
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	4413      	add	r3, r2
 800b37c:	00db      	lsls	r3, r3, #3
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4413      	add	r3, r2
 800b384:	f107 0210 	add.w	r2, r7, #16
 800b388:	4611      	mov	r1, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff ffa8 	bl	800b2e0 <init_aibuffer_msg>

        if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 800b390:	f107 0310 	add.w	r3, r7, #16
 800b394:	461a      	mov	r2, r3
 800b396:	490c      	ldr	r1, [pc, #48]	; (800b3c8 <nn_shape_w_cb+0x80>)
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f004 fe1f 	bl	800ffdc <pb_encode_submessage>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f083 0301 	eor.w	r3, r3, #1
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <nn_shape_w_cb+0x66>
            return false;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e007      	b.n	800b3be <nn_shape_w_cb+0x76>
    for (int i = 0; i < maxw; i++) {
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	dbcf      	blt.n	800b35c <nn_shape_w_cb+0x14>
    }
    return true;
 800b3bc:	2301      	movs	r3, #1
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3730      	adds	r7, #48	; 0x30
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	08016e60 	.word	0x08016e60

0800b3cc <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	617b      	str	r3, [r7, #20]

    if (!report)
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <nn_inputs_w_cb+0x1c>
        return true;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e008      	b.n	800b3fa <nn_inputs_w_cb+0x2e>

    return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b3f0:	68b9      	ldr	r1, [r7, #8]
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7ff ffa8 	bl	800b348 <nn_shape_w_cb>
 800b3f8:	4603      	mov	r3, r0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	617b      	str	r3, [r7, #20]

    if (!report)
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <nn_outputs_w_cb+0x1c>
        return true;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e008      	b.n	800b430 <nn_outputs_w_cb+0x2e>

    return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b426:	68b9      	ldr	r1, [r7, #8]
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7ff ff8d 	bl	800b348 <nn_shape_w_cb>
 800b42e:	4603      	mov	r3, r0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
    const char undef[] = "UNDEFINED";
 800b444:	4a19      	ldr	r2, [pc, #100]	; (800b4ac <aiPbStrCopy+0x74>)
 800b446:	f107 0310 	add.w	r3, r7, #16
 800b44a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b44c:	c303      	stmia	r3!, {r0, r1}
 800b44e:	801a      	strh	r2, [r3, #0]
    size_t l = strlen(src);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7fb fd08 	bl	8006e66 <strlen>
 800b456:	61f8      	str	r0, [r7, #28]

    if (l > max)
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d902      	bls.n	800b466 <aiPbStrCopy+0x2e>
        l = max-1;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3b01      	subs	r3, #1
 800b464:	61fb      	str	r3, [r7, #28]

    if (!dst)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01b      	beq.n	800b4a4 <aiPbStrCopy+0x6c>
        return;

    if (src && l)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00a      	beq.n	800b488 <aiPbStrCopy+0x50>
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d007      	beq.n	800b488 <aiPbStrCopy+0x50>
        memcpy(dst, src, l+1);
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	3301      	adds	r3, #1
 800b47c:	461a      	mov	r2, r3
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f005 f868 	bl	8010556 <memcpy>
 800b486:	e00e      	b.n	800b4a6 <aiPbStrCopy+0x6e>
    else
        memcpy(dst, undef, strlen(undef)+1);
 800b488:	f107 0310 	add.w	r3, r7, #16
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fb fcea 	bl	8006e66 <strlen>
 800b492:	4603      	mov	r3, r0
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	f107 0310 	add.w	r3, r7, #16
 800b49a:	4619      	mov	r1, r3
 800b49c:	68b8      	ldr	r0, [r7, #8]
 800b49e:	f005 f85a 	bl	8010556 <memcpy>
 800b4a2:	e000      	b.n	800b4a6 <aiPbStrCopy+0x6e>
        return;
 800b4a4:	bf00      	nop
}
 800b4a6:	3720      	adds	r7, #32
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	0801592c 	.word	0x0801592c

0800b4b0 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    if (!ver)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <aiPbVersionToUint32+0x12>
        return 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e00d      	b.n	800b4de <aiPbVersionToUint32+0x2e>

    return ver->major << 24 | ver->minor << 16
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	061a      	lsls	r2, r3, #24
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	041b      	lsls	r3, r3, #16
 800b4ce:	431a      	orrs	r2, r3
            | ver->micro << 8 | ver->reserved;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	789b      	ldrb	r3, [r3, #2]
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	78d2      	ldrb	r2, [r2, #3]
 800b4dc:	4313      	orrs	r3, r2
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
	...

0800b4ec <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
        EnumState state, const ai_network_report *nn)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ninfo_tag;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2214      	movs	r2, #20
 800b500:	80da      	strh	r2, [r3, #6]

    aiPbStrCopy(nn->model_name,
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	3308      	adds	r3, #8
 800b50a:	2240      	movs	r2, #64	; 0x40
 800b50c:	4619      	mov	r1, r3
 800b50e:	f7ff ff93 	bl	800b438 <aiPbStrCopy>
            &resp->payload.ninfo.model_name[0],
            sizeof(resp->payload.ninfo.model_name));
    aiPbStrCopy(nn->model_signature,
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	6858      	ldr	r0, [r3, #4]
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	3348      	adds	r3, #72	; 0x48
 800b51a:	2240      	movs	r2, #64	; 0x40
 800b51c:	4619      	mov	r1, r3
 800b51e:	f7ff ff8b 	bl	800b438 <aiPbStrCopy>
            &resp->payload.ninfo.model_signature[0],
            sizeof(resp->payload.ninfo.model_signature));
    aiPbStrCopy(nn->model_datetime,
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6898      	ldr	r0, [r3, #8]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	3388      	adds	r3, #136	; 0x88
 800b52a:	2240      	movs	r2, #64	; 0x40
 800b52c:	4619      	mov	r1, r3
 800b52e:	f7ff ff83 	bl	800b438 <aiPbStrCopy>
            &resp->payload.ninfo.model_datetime[0],
            sizeof(resp->payload.ninfo.model_datetime));
    aiPbStrCopy(nn->compile_datetime,
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68d8      	ldr	r0, [r3, #12]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	33c8      	adds	r3, #200	; 0xc8
 800b53a:	2240      	movs	r2, #64	; 0x40
 800b53c:	4619      	mov	r1, r3
 800b53e:	f7ff ff7b 	bl	800b438 <aiPbStrCopy>
            &resp->payload.ninfo.compile_datetime[0],
            sizeof(resp->payload.ninfo.compile_datetime));
    aiPbStrCopy(nn->runtime_revision,
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	6918      	ldr	r0, [r3, #16]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b54c:	2240      	movs	r2, #64	; 0x40
 800b54e:	4619      	mov	r1, r3
 800b550:	f7ff ff72 	bl	800b438 <aiPbStrCopy>
            &resp->payload.ninfo.runtime_revision[0],
            sizeof(resp->payload.ninfo.runtime_revision));
    aiPbStrCopy(nn->tool_revision,
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	6998      	ldr	r0, [r3, #24]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800b55e:	2240      	movs	r2, #64	; 0x40
 800b560:	4619      	mov	r1, r3
 800b562:	f7ff ff69 	bl	800b438 <aiPbStrCopy>
            &resp->payload.ninfo.tool_revision[0],
            sizeof(resp->payload.ninfo.tool_revision));

    resp->payload.ninfo.n_inputs = nn->n_inputs;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b56a:	461a      	mov	r2, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    resp->payload.ninfo.n_outputs = nn->n_outputs;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b576:	461a      	mov	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    resp->payload.ninfo.n_nodes = nn->n_nodes;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    resp->payload.ninfo.n_macc = nn->n_macc;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    resp->payload.ninfo.signature = nn->signature;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    resp->payload.ninfo.api_version =
            aiPbVersionToUint32(&nn->api_version);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	3324      	adds	r3, #36	; 0x24
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7ff ff85 	bl	800b4b0 <aiPbVersionToUint32>
 800b5a6:	4602      	mov	r2, r0
    resp->payload.ninfo.api_version =
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    resp->payload.ninfo.interface_api_version =
            aiPbVersionToUint32(&nn->interface_api_version);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	3328      	adds	r3, #40	; 0x28
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff ff7c 	bl	800b4b0 <aiPbVersionToUint32>
 800b5b8:	4602      	mov	r2, r0
    resp->payload.ninfo.interface_api_version =
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    resp->payload.ninfo.runtime_version =
            aiPbVersionToUint32(&nn->runtime_version);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	3314      	adds	r3, #20
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff ff73 	bl	800b4b0 <aiPbVersionToUint32>
 800b5ca:	4602      	mov	r2, r0
    resp->payload.ninfo.runtime_version =
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    resp->payload.ninfo.tool_version =
            aiPbVersionToUint32(&nn->tool_version);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	331c      	adds	r3, #28
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff ff6a 	bl	800b4b0 <aiPbVersionToUint32>
 800b5dc:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_version =
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    resp->payload.ninfo.tool_api_version =
            aiPbVersionToUint32(&nn->tool_api_version);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	3320      	adds	r3, #32
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7ff ff61 	bl	800b4b0 <aiPbVersionToUint32>
 800b5ee:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_api_version =
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b602:	4619      	mov	r1, r3
 800b604:	4610      	mov	r0, r2
 800b606:	f7ff fe6b 	bl	800b2e0 <init_aibuffer_msg>
    init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b616:	4619      	mov	r1, r3
 800b618:	4610      	mov	r0, r2
 800b61a:	f7ff fe61 	bl	800b2e0 <init_aibuffer_msg>

    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	4a0c      	ldr	r2, [pc, #48]	; (800b654 <aiPbMgrSendNNInfo+0x168>)
 800b622:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    resp->payload.ninfo.inputs.arg = (void *)nn;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	4a09      	ldr	r2, [pc, #36]	; (800b658 <aiPbMgrSendNNInfo+0x16c>)
 800b632:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    resp->payload.ninfo.outputs.arg = (void *)nn;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

    aiPbMgrSendResp(req, resp, state);
 800b63e:	79fb      	ldrb	r3, [r7, #7]
 800b640:	461a      	mov	r2, r3
 800b642:	68b9      	ldr	r1, [r7, #8]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f7ff fa9f 	bl	800ab88 <aiPbMgrSendResp>
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	0800b3cd 	.word	0x0800b3cd
 800b658:	0800b403 	.word	0x0800b403

0800b65c <crcIpInit>:
#error Only STM32H7, STM32F7, STM32F4, STM32L4, STM32L5 or STM32F3 device are supported
#endif
#endif

void crcIpInit(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#else
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800b662:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <crcIpInit+0x38>)
 800b664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d102      	bne.n	800b674 <crcIpInit+0x18>
        printf("W: CRC IP clock is NOT enabled\r\n");
 800b66e:	480a      	ldr	r0, [pc, #40]	; (800b698 <crcIpInit+0x3c>)
 800b670:	f005 fcda 	bl	8011028 <puts>

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b674:	4b07      	ldr	r3, [pc, #28]	; (800b694 <crcIpInit+0x38>)
 800b676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b678:	4a06      	ldr	r2, [pc, #24]	; (800b694 <crcIpInit+0x38>)
 800b67a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b67e:	6313      	str	r3, [r2, #48]	; 0x30
 800b680:	4b04      	ldr	r3, [pc, #16]	; (800b694 <crcIpInit+0x38>)
 800b682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
#endif
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	40023800 	.word	0x40023800
 800b698:	08015938 	.word	0x08015938

0800b69c <dwtIpInit>:

void dwtIpInit(void)
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800b6a0:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <dwtIpInit+0x34>)
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <dwtIpInit+0x34>)
 800b6a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6aa:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
 800b6ac:	4b09      	ldr	r3, [pc, #36]	; (800b6d4 <dwtIpInit+0x38>)
 800b6ae:	4a0a      	ldr	r2, [pc, #40]	; (800b6d8 <dwtIpInit+0x3c>)
 800b6b0:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif

    DWT->CYCCNT = 0;
 800b6b4:	4b07      	ldr	r3, [pc, #28]	; (800b6d4 <dwtIpInit+0x38>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800b6ba:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <dwtIpInit+0x38>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	4905      	ldr	r1, [pc, #20]	; (800b6d4 <dwtIpInit+0x38>)
 800b6c0:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <dwtIpInit+0x40>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	600b      	str	r3, [r1, #0]
}
 800b6c6:	bf00      	nop
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	e000edf0 	.word	0xe000edf0
 800b6d4:	e0001000 	.word	0xe0001000
 800b6d8:	c5acce55 	.word	0xc5acce55
 800b6dc:	00020001 	.word	0x00020001

0800b6e0 <dwtReset>:

void dwtReset(void)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800b6e4:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <dwtReset+0x14>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	605a      	str	r2, [r3, #4]
}
 800b6ea:	bf00      	nop
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	e0001000 	.word	0xe0001000

0800b6f8 <dwtGetCycles>:

uint32_t dwtGetCycles(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800b6fc:	4b03      	ldr	r3, [pc, #12]	; (800b70c <dwtGetCycles+0x14>)
 800b6fe:	685b      	ldr	r3, [r3, #4]
}
 800b700:	4618      	mov	r0, r3
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	e0001000 	.word	0xe0001000

0800b710 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0
#if !defined(STM32H7)
    return HAL_RCC_GetHCLKFreq();
 800b714:	f7fd fd12 	bl	800913c <HAL_RCC_GetHCLKFreq>
 800b718:	4603      	mov	r3, r0
#else
    return HAL_RCC_GetSysClockFreq();
#endif
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <dwtCyclesToFloatMs>:
    return 0;
}


float dwtCyclesToFloatMs(uint64_t clks)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	e9c7 0100 	strd	r0, r1, [r7]
    float res;
    float fcpu = (float)systemCoreClock();
 800b72a:	f7ff fff1 	bl	800b710 <systemCoreClock>
 800b72e:	ee07 0a90 	vmov	s15, r0
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	edc7 7a03 	vstr	s15, [r7, #12]
    res = ((float)clks * (float)1000.0) / fcpu;
 800b73a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b73e:	f7fb fe73 	bl	8007428 <__aeabi_ul2f>
 800b742:	ee07 0a10 	vmov	s14, r0
 800b746:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b76c <dwtCyclesToFloatMs+0x4c>
 800b74a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b74e:	ed97 7a03 	vldr	s14, [r7, #12]
 800b752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b756:	edc7 7a02 	vstr	s15, [r7, #8]
    return res;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	ee07 3a90 	vmov	s15, r3
}
 800b760:	eeb0 0a67 	vmov.f32	s0, s15
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	447a0000 	.word	0x447a0000

0800b770 <devIdToStr>:


__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	80fb      	strh	r3, [r7, #6]
	/* DEV_ID field from DBGMCU register */
    const char *str;
    switch (dev_id) {
 800b77a:	88fb      	ldrh	r3, [r7, #6]
 800b77c:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 800b780:	2b5d      	cmp	r3, #93	; 0x5d
 800b782:	f200 80e0 	bhi.w	800b946 <devIdToStr+0x1d6>
 800b786:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <devIdToStr+0x1c>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b929 	.word	0x0800b929
 800b790:	0800b947 	.word	0x0800b947
 800b794:	0800b947 	.word	0x0800b947
 800b798:	0800b947 	.word	0x0800b947
 800b79c:	0800b947 	.word	0x0800b947
 800b7a0:	0800b947 	.word	0x0800b947
 800b7a4:	0800b947 	.word	0x0800b947
 800b7a8:	0800b947 	.word	0x0800b947
 800b7ac:	0800b947 	.word	0x0800b947
 800b7b0:	0800b947 	.word	0x0800b947
 800b7b4:	0800b947 	.word	0x0800b947
 800b7b8:	0800b947 	.word	0x0800b947
 800b7bc:	0800b947 	.word	0x0800b947
 800b7c0:	0800b905 	.word	0x0800b905
 800b7c4:	0800b947 	.word	0x0800b947
 800b7c8:	0800b947 	.word	0x0800b947
 800b7cc:	0800b947 	.word	0x0800b947
 800b7d0:	0800b947 	.word	0x0800b947
 800b7d4:	0800b947 	.word	0x0800b947
 800b7d8:	0800b947 	.word	0x0800b947
 800b7dc:	0800b947 	.word	0x0800b947
 800b7e0:	0800b947 	.word	0x0800b947
 800b7e4:	0800b947 	.word	0x0800b947
 800b7e8:	0800b947 	.word	0x0800b947
 800b7ec:	0800b947 	.word	0x0800b947
 800b7f0:	0800b947 	.word	0x0800b947
 800b7f4:	0800b947 	.word	0x0800b947
 800b7f8:	0800b947 	.word	0x0800b947
 800b7fc:	0800b917 	.word	0x0800b917
 800b800:	0800b947 	.word	0x0800b947
 800b804:	0800b947 	.word	0x0800b947
 800b808:	0800b947 	.word	0x0800b947
 800b80c:	0800b91d 	.word	0x0800b91d
 800b810:	0800b947 	.word	0x0800b947
 800b814:	0800b947 	.word	0x0800b947
 800b818:	0800b90b 	.word	0x0800b90b
 800b81c:	0800b947 	.word	0x0800b947
 800b820:	0800b947 	.word	0x0800b947
 800b824:	0800b947 	.word	0x0800b947
 800b828:	0800b947 	.word	0x0800b947
 800b82c:	0800b947 	.word	0x0800b947
 800b830:	0800b947 	.word	0x0800b947
 800b834:	0800b947 	.word	0x0800b947
 800b838:	0800b947 	.word	0x0800b947
 800b83c:	0800b947 	.word	0x0800b947
 800b840:	0800b947 	.word	0x0800b947
 800b844:	0800b947 	.word	0x0800b947
 800b848:	0800b947 	.word	0x0800b947
 800b84c:	0800b947 	.word	0x0800b947
 800b850:	0800b911 	.word	0x0800b911
 800b854:	0800b947 	.word	0x0800b947
 800b858:	0800b947 	.word	0x0800b947
 800b85c:	0800b93b 	.word	0x0800b93b
 800b860:	0800b947 	.word	0x0800b947
 800b864:	0800b947 	.word	0x0800b947
 800b868:	0800b947 	.word	0x0800b947
 800b86c:	0800b947 	.word	0x0800b947
 800b870:	0800b947 	.word	0x0800b947
 800b874:	0800b947 	.word	0x0800b947
 800b878:	0800b941 	.word	0x0800b941
 800b87c:	0800b947 	.word	0x0800b947
 800b880:	0800b947 	.word	0x0800b947
 800b884:	0800b947 	.word	0x0800b947
 800b888:	0800b947 	.word	0x0800b947
 800b88c:	0800b947 	.word	0x0800b947
 800b890:	0800b947 	.word	0x0800b947
 800b894:	0800b947 	.word	0x0800b947
 800b898:	0800b947 	.word	0x0800b947
 800b89c:	0800b947 	.word	0x0800b947
 800b8a0:	0800b947 	.word	0x0800b947
 800b8a4:	0800b947 	.word	0x0800b947
 800b8a8:	0800b947 	.word	0x0800b947
 800b8ac:	0800b947 	.word	0x0800b947
 800b8b0:	0800b947 	.word	0x0800b947
 800b8b4:	0800b947 	.word	0x0800b947
 800b8b8:	0800b947 	.word	0x0800b947
 800b8bc:	0800b947 	.word	0x0800b947
 800b8c0:	0800b923 	.word	0x0800b923
 800b8c4:	0800b947 	.word	0x0800b947
 800b8c8:	0800b947 	.word	0x0800b947
 800b8cc:	0800b947 	.word	0x0800b947
 800b8d0:	0800b947 	.word	0x0800b947
 800b8d4:	0800b947 	.word	0x0800b947
 800b8d8:	0800b947 	.word	0x0800b947
 800b8dc:	0800b947 	.word	0x0800b947
 800b8e0:	0800b947 	.word	0x0800b947
 800b8e4:	0800b947 	.word	0x0800b947
 800b8e8:	0800b947 	.word	0x0800b947
 800b8ec:	0800b947 	.word	0x0800b947
 800b8f0:	0800b947 	.word	0x0800b947
 800b8f4:	0800b947 	.word	0x0800b947
 800b8f8:	0800b92f 	.word	0x0800b92f
 800b8fc:	0800b947 	.word	0x0800b947
 800b900:	0800b935 	.word	0x0800b935
    case 0x422: str = "STM32F303xB/C"; break;
 800b904:	4b14      	ldr	r3, [pc, #80]	; (800b958 <devIdToStr+0x1e8>)
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	e01f      	b.n	800b94a <devIdToStr+0x1da>
    case 0x438: str = "STM32F303x6/8"; break;
 800b90a:	4b14      	ldr	r3, [pc, #80]	; (800b95c <devIdToStr+0x1ec>)
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	e01c      	b.n	800b94a <devIdToStr+0x1da>
    case 0x446: str = "STM32F303xD/E"; break;
 800b910:	4b13      	ldr	r3, [pc, #76]	; (800b960 <devIdToStr+0x1f0>)
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	e019      	b.n	800b94a <devIdToStr+0x1da>
    case 0x431: str = "STM32F411xC/E"; break;
 800b916:	4b13      	ldr	r3, [pc, #76]	; (800b964 <devIdToStr+0x1f4>)
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	e016      	b.n	800b94a <devIdToStr+0x1da>
    case 0x435: str = "STM32L43xxx"; break;
 800b91c:	4b12      	ldr	r3, [pc, #72]	; (800b968 <devIdToStr+0x1f8>)
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	e013      	b.n	800b94a <devIdToStr+0x1da>
    case 0x462: str = "STM32L45xxx"; break;
 800b922:	4b12      	ldr	r3, [pc, #72]	; (800b96c <devIdToStr+0x1fc>)
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	e010      	b.n	800b94a <devIdToStr+0x1da>
    case 0x415: str = "STM32L4x6xx"; break;
 800b928:	4b11      	ldr	r3, [pc, #68]	; (800b970 <devIdToStr+0x200>)
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e00d      	b.n	800b94a <devIdToStr+0x1da>
    case 0x470: str = "STM32L4Rxxx"; break;
 800b92e:	4b11      	ldr	r3, [pc, #68]	; (800b974 <devIdToStr+0x204>)
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e00a      	b.n	800b94a <devIdToStr+0x1da>
    case 0x472: str = "STM32L5[5,6]2xx"; break;
 800b934:	4b10      	ldr	r3, [pc, #64]	; (800b978 <devIdToStr+0x208>)
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e007      	b.n	800b94a <devIdToStr+0x1da>
    case 0x449: str = "STM32F74xxx"; break;
 800b93a:	4b10      	ldr	r3, [pc, #64]	; (800b97c <devIdToStr+0x20c>)
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	e004      	b.n	800b94a <devIdToStr+0x1da>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 800b940:	4b0f      	ldr	r3, [pc, #60]	; (800b980 <devIdToStr+0x210>)
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	e001      	b.n	800b94a <devIdToStr+0x1da>
    default:    str = "UNKNOWN";
 800b946:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <devIdToStr+0x214>)
 800b948:	60fb      	str	r3, [r7, #12]
    }
    return str;
 800b94a:	68fb      	ldr	r3, [r7, #12]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	08015958 	.word	0x08015958
 800b95c:	08015968 	.word	0x08015968
 800b960:	08015978 	.word	0x08015978
 800b964:	08015988 	.word	0x08015988
 800b968:	08015998 	.word	0x08015998
 800b96c:	080159a4 	.word	0x080159a4
 800b970:	080159b0 	.word	0x080159b0
 800b974:	080159bc 	.word	0x080159bc
 800b978:	080159c8 	.word	0x080159c8
 800b97c:	080159d8 	.word	0x080159d8
 800b980:	080159e4 	.word	0x080159e4
 800b984:	08015a00 	.word	0x08015a00

0800b988 <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
    if (val)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <bitToStr+0x12>
        return "True";
 800b996:	4b04      	ldr	r3, [pc, #16]	; (800b9a8 <bitToStr+0x20>)
 800b998:	e000      	b.n	800b99c <bitToStr+0x14>
    else
        return "False";
 800b99a:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <bitToStr+0x24>)
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	08015a08 	.word	0x08015a08
 800b9ac:	08015a10 	.word	0x08015a10

0800b9b0 <getFlashCacheConf>:


static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0
    return mconf;
 800b9b4:	4b03      	ldr	r3, [pc, #12]	; (800b9c4 <getFlashCacheConf+0x14>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	20000910 	.word	0x20000910

0800b9c8 <logDeviceConf>:

void logDeviceConf(void)
{
 800b9c8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af02      	add	r7, sp, #8
#if !defined(STM32L5)
    uint32_t acr = FLASH->ACR ;
 800b9ce:	4b53      	ldr	r3, [pc, #332]	; (800bb1c <logDeviceConf+0x154>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	607b      	str	r3, [r7, #4]
#endif
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 800b9d4:	4852      	ldr	r0, [pc, #328]	; (800bb20 <logDeviceConf+0x158>)
 800b9d6:	f005 fb27 	bl	8011028 <puts>

    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
            (int)HAL_GetDEVID(),
 800b9da:	f7fc fb71 	bl	80080c0 <HAL_GetDEVID>
 800b9de:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800b9e0:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 800b9e2:	f7fc fb6d 	bl	80080c0 <HAL_GetDEVID>
 800b9e6:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff fec0 	bl	800b770 <devIdToStr>
 800b9f0:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 800b9f2:	f7fc fb59 	bl	80080a8 <HAL_GetREVID>
 800b9f6:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4849      	ldr	r0, [pc, #292]	; (800bb24 <logDeviceConf+0x15c>)
 800b9fe:	f005 fa9f 	bl	8010f40 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 800ba02:	4b49      	ldr	r3, [pc, #292]	; (800bb28 <logDeviceConf+0x160>)
 800ba04:	4a49      	ldr	r2, [pc, #292]	; (800bb2c <logDeviceConf+0x164>)
 800ba06:	2107      	movs	r1, #7
 800ba08:	4849      	ldr	r0, [pc, #292]	; (800bb30 <logDeviceConf+0x168>)
 800ba0a:	f005 fa99 	bl	8010f40 <iprintf>
            ""
#endif
    );

#if (__FPU_PRESENT == 1) && __FPU_USED
    mconf = (1 << 16);  /* FPU present and used */
 800ba0e:	4b49      	ldr	r3, [pc, #292]	; (800bb34 <logDeviceConf+0x16c>)
 800ba10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba14:	601a      	str	r2, [r3, #0]
#endif

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 800ba16:	f7fc fb3d 	bl	8008094 <HAL_GetHalVersion>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4846      	ldr	r0, [pc, #280]	; (800bb38 <logDeviceConf+0x170>)
 800ba20:	f005 fa8e 	bl	8010f40 <iprintf>

    val = systemCoreClock()/1000000;
 800ba24:	f7ff fe74 	bl	800b710 <systemCoreClock>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	4b44      	ldr	r3, [pc, #272]	; (800bb3c <logDeviceConf+0x174>)
 800ba2c:	fba3 2302 	umull	r2, r3, r3, r2
 800ba30:	0c9b      	lsrs	r3, r3, #18
 800ba32:	603b      	str	r3, [r7, #0]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4841      	ldr	r0, [pc, #260]	; (800bb40 <logDeviceConf+0x178>)
 800ba3a:	f005 fa81 	bl	8010f40 <iprintf>
    printf(" SYSCLK clock : %u MHz\r\n", (int)val);
    printf(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);
#endif

#if defined(STM32F7) || defined(STM32H7)
    val = SCB->CCR;
 800ba3e:	4b41      	ldr	r3, [pc, #260]	; (800bb44 <logDeviceConf+0x17c>)
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	603b      	str	r3, [r7, #0]
#if !defined(STM32H7)
    mconf |= (2 << 24);  /* F7 conf. */
 800ba44:	4b3b      	ldr	r3, [pc, #236]	; (800bb34 <logDeviceConf+0x16c>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ba4c:	4a39      	ldr	r2, [pc, #228]	; (800bb34 <logDeviceConf+0x16c>)
 800ba4e:	6013      	str	r3, [r2, #0]
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f003 020f 	and.w	r2, r3, #15
 800ba56:	4b37      	ldr	r3, [pc, #220]	; (800bb34 <logDeviceConf+0x16c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	4a35      	ldr	r2, [pc, #212]	; (800bb34 <logDeviceConf+0x16c>)
 800ba5e:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <logDeviceConf+0xae>
        mconf |= (1 << 8);
 800ba6a:	4b32      	ldr	r3, [pc, #200]	; (800bb34 <logDeviceConf+0x16c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba72:	4a30      	ldr	r2, [pc, #192]	; (800bb34 <logDeviceConf+0x16c>)
 800ba74:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d005      	beq.n	800ba8c <logDeviceConf+0xc4>
        mconf |= (1 << 9);
 800ba80:	4b2c      	ldr	r3, [pc, #176]	; (800bb34 <logDeviceConf+0x16c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba88:	4a2a      	ldr	r2, [pc, #168]	; (800bb34 <logDeviceConf+0x16c>)
 800ba8a:	6013      	str	r3, [r2, #0]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800ba8c:	687c      	ldr	r4, [r7, #4]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	0a1b      	lsrs	r3, r3, #8
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff ff76 	bl	800b988 <bitToStr>
 800ba9c:	4605      	mov	r5, r0
            bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	0a5b      	lsrs	r3, r3, #9
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff ff6e 	bl	800b988 <bitToStr>
 800baac:	4602      	mov	r2, r0
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 800baae:	687b      	ldr	r3, [r7, #4]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800bab0:	f003 030f 	and.w	r3, r3, #15
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	4613      	mov	r3, r2
 800bab8:	462a      	mov	r2, r5
 800baba:	4621      	mov	r1, r4
 800babc:	4822      	ldr	r0, [pc, #136]	; (800bb48 <logDeviceConf+0x180>)
 800babe:	f005 fa3f 	bl	8010f40 <iprintf>
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
            (int)acr,
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#endif
#if !defined(CORE_M4)
    if (val & SCB_CCR_IC_Msk)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <logDeviceConf+0x110>
        mconf |= (1 << 10);
 800bacc:	4b19      	ldr	r3, [pc, #100]	; (800bb34 <logDeviceConf+0x16c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bad4:	4a17      	ldr	r2, [pc, #92]	; (800bb34 <logDeviceConf+0x16c>)
 800bad6:	6013      	str	r3, [r2, #0]
    if (val & SCB_CCR_DC_Msk)
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d005      	beq.n	800baee <logDeviceConf+0x126>
        mconf |= (1 << 11);
 800bae2:	4b14      	ldr	r3, [pc, #80]	; (800bb34 <logDeviceConf+0x16c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800baea:	4a12      	ldr	r2, [pc, #72]	; (800bb34 <logDeviceConf+0x16c>)
 800baec:	6013      	str	r3, [r2, #0]
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff ff47 	bl	800b988 <bitToStr>
 800bafa:	4604      	mov	r4, r0
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff ff40 	bl	800b988 <bitToStr>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	480f      	ldr	r0, [pc, #60]	; (800bb4c <logDeviceConf+0x184>)
 800bb10:	f005 fa16 	bl	8010f40 <iprintf>
#endif
#if defined(STM32L5)
    printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb1c:	40023c00 	.word	0x40023c00
 800bb20:	08015a18 	.word	0x08015a18
 800bb24:	08015a38 	.word	0x08015a38
 800bb28:	08015a6c 	.word	0x08015a6c
 800bb2c:	08015a78 	.word	0x08015a78
 800bb30:	08015a84 	.word	0x08015a84
 800bb34:	20000910 	.word	0x20000910
 800bb38:	08015aa4 	.word	0x08015aa4
 800bb3c:	431bde83 	.word	0x431bde83
 800bb40:	08015ac0 	.word	0x08015ac0
 800bb44:	e000ed00 	.word	0xe000ed00
 800bb48:	08015adc 	.word	0x08015adc
 800bb4c:	08015b1c 	.word	0x08015b1c

0800bb50 <disableInts>:

uint32_t disableInts(void)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb56:	f3ef 8310 	mrs	r3, PRIMASK
 800bb5a:	603b      	str	r3, [r7, #0]
  return(result);
 800bb5c:	683b      	ldr	r3, [r7, #0]
    uint32_t state;

    state = __get_PRIMASK();
 800bb5e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb60:	b672      	cpsid	i
    __disable_irq();

    return state;
 800bb62:	687b      	ldr	r3, [r7, #4]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <restoreInts>:

void restoreInts(uint32_t state)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f383 8810 	msr	PRIMASK, r3
   __set_PRIMASK(state);
}
 800bb82:	bf00      	nop
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
	...

0800bb90 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	da0d      	bge.n	800bbbe <_write+0x2e>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d00a      	beq.n	800bbbe <_write+0x2e>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d007      	beq.n	800bbbe <_write+0x2e>
        errno = EBADF;
 800bbae:	f004 fc89 	bl	80104c4 <__errno>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	2309      	movs	r3, #9
 800bbb6:	6013      	str	r3, [r2, #0]
        return -1;
 800bbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbbc:	e016      	b.n	800bbec <_write+0x5c>
    }

    if (_ioWriteAllowed)
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	; (800bbf4 <_write+0x64>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <_write+0x4c>
        status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	f04f 33ff 	mov.w	r3, #4294967295
 800bbce:	68b9      	ldr	r1, [r7, #8]
 800bbd0:	4809      	ldr	r0, [pc, #36]	; (800bbf8 <_write+0x68>)
 800bbd2:	f7fe fa33 	bl	800a03c <HAL_UART_Transmit>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	75fb      	strb	r3, [r7, #23]
 800bbda:	e001      	b.n	800bbe0 <_write+0x50>
                HAL_MAX_DELAY);
    else
        status = HAL_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK ? count : 0);
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <_write+0x5a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	e000      	b.n	800bbec <_write+0x5c>
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20000011 	.word	0x20000011
 800bbf8:	20000bdc 	.word	0x20000bdc

0800bbfc <aiLogErr>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

void aiLogErr(const ai_error err, const char *fct)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
    if (fct)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d009      	beq.n	800bc20 <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 800bc0c:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800bc0e:	461a      	mov	r2, r3
                err.type, err.code);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	4808      	ldr	r0, [pc, #32]	; (800bc3c <aiLogErr+0x40>)
 800bc1a:	f005 f991 	bl	8010f40 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 800bc1e:	e008      	b.n	800bc32 <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 800bc20:	793b      	ldrb	r3, [r7, #4]
 800bc22:	4619      	mov	r1, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	4804      	ldr	r0, [pc, #16]	; (800bc40 <aiLogErr+0x44>)
 800bc2e:	f005 f987 	bl	8010f40 <iprintf>
}
 800bc32:	bf00      	nop
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	08015b3c 	.word	0x08015b3c
 800bc40:	08015b64 	.word	0x08015b64

0800bc44 <aiBufferSize>:

ai_u32 aiBufferSize(const ai_buffer* buffer)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
    return buffer->height * buffer->width * buffer->channels;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	88db      	ldrh	r3, [r3, #6]
 800bc50:	461a      	mov	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	891b      	ldrh	r3, [r3, #8]
 800bc56:	fb03 f302 	mul.w	r3, r3, r2
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	fb03 f302 	mul.w	r3, r3, r2
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b08a      	sub	sp, #40	; 0x28
 800bc74:	af02      	add	r7, sp, #8
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	145b      	asrs	r3, r3, #17
 800bc82:	f003 030f 	and.w	r3, r3, #15
 800bc86:	61fb      	str	r3, [r7, #28]
    printf("%s[%d] ",msg, idx);
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	68f9      	ldr	r1, [r7, #12]
 800bc8c:	4897      	ldr	r0, [pc, #604]	; (800beec <aiPrintLayoutBuffer+0x27c>)
 800bc8e:	f005 f957 	bl	8010f40 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	f040 818c 	bne.w	800bfb2 <aiPrintLayoutBuffer+0x342>
        printf(" %s%d,",
        		AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf(" %s%d,",
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <aiPrintLayoutBuffer+0x3a>
 800bca6:	4992      	ldr	r1, [pc, #584]	; (800bef0 <aiPrintLayoutBuffer+0x280>)
 800bca8:	e000      	b.n	800bcac <aiPrintLayoutBuffer+0x3c>
 800bcaa:	4992      	ldr	r1, [pc, #584]	; (800bef4 <aiPrintLayoutBuffer+0x284>)
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	11db      	asrs	r3, r3, #7
        printf(" %s%d,",
 800bcb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	488f      	ldr	r0, [pc, #572]	; (800bef8 <aiPrintLayoutBuffer+0x288>)
 800bcba:	f005 f941 	bl	8010f40 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8157 	beq.w	800bf76 <aiPrintLayoutBuffer+0x306>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 814f 	beq.w	800bf76 <aiPrintLayoutBuffer+0x306>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 8149 	beq.w	800bf76 <aiPrintLayoutBuffer+0x306>
    		ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d058      	beq.n	800bd9e <aiPrintLayoutBuffer+0x12e>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d051      	beq.n	800bd9e <aiPrintLayoutBuffer+0x12e>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d04c      	beq.n	800bd9e <aiPrintLayoutBuffer+0x12e>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d045      	beq.n	800bd98 <aiPrintLayoutBuffer+0x128>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d03e      	beq.n	800bd98 <aiPrintLayoutBuffer+0x128>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d039      	beq.n	800bd98 <aiPrintLayoutBuffer+0x128>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00a      	beq.n	800bd42 <aiPrintLayoutBuffer+0xd2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <aiPrintLayoutBuffer+0xd2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	e000      	b.n	800bd44 <aiPrintLayoutBuffer+0xd4>
 800bd42:	2300      	movs	r3, #0
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d026      	beq.n	800bd98 <aiPrintLayoutBuffer+0x128>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00a      	beq.n	800bd68 <aiPrintLayoutBuffer+0xf8>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0301 	and.w	r3, r3, #1
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <aiPrintLayoutBuffer+0xf8>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	e000      	b.n	800bd6a <aiPrintLayoutBuffer+0xfa>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	885b      	ldrh	r3, [r3, #2]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d013      	beq.n	800bd98 <aiPrintLayoutBuffer+0x128>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00a      	beq.n	800bd8e <aiPrintLayoutBuffer+0x11e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <aiPrintLayoutBuffer+0x11e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	e000      	b.n	800bd90 <aiPrintLayoutBuffer+0x120>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	e004      	b.n	800bda2 <aiPrintLayoutBuffer+0x132>
 800bd98:	f04f 0300 	mov.w	r3, #0
 800bd9c:	e001      	b.n	800bda2 <aiPrintLayoutBuffer+0x132>
 800bd9e:	f04f 0300 	mov.w	r3, #0
 800bda2:	61bb      	str	r3, [r7, #24]
    		int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 80d6 	beq.w	800bf5a <aiPrintLayoutBuffer+0x2ea>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 80ce 	beq.w	800bf5a <aiPrintLayoutBuffer+0x2ea>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 80c8 	beq.w	800bf5a <aiPrintLayoutBuffer+0x2ea>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d06c      	beq.n	800beac <aiPrintLayoutBuffer+0x23c>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	695b      	ldr	r3, [r3, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d065      	beq.n	800beac <aiPrintLayoutBuffer+0x23c>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d060      	beq.n	800beac <aiPrintLayoutBuffer+0x23c>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <aiPrintLayoutBuffer+0x198>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <aiPrintLayoutBuffer+0x198>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	e000      	b.n	800be0a <aiPrintLayoutBuffer+0x19a>
 800be08:	2300      	movs	r3, #0
 800be0a:	881b      	ldrh	r3, [r3, #0]
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d04b      	beq.n	800beac <aiPrintLayoutBuffer+0x23c>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d045      	beq.n	800bea8 <aiPrintLayoutBuffer+0x238>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d03e      	beq.n	800bea8 <aiPrintLayoutBuffer+0x238>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d039      	beq.n	800bea8 <aiPrintLayoutBuffer+0x238>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <aiPrintLayoutBuffer+0x1e2>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <aiPrintLayoutBuffer+0x1e2>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	e000      	b.n	800be54 <aiPrintLayoutBuffer+0x1e4>
 800be52:	2300      	movs	r3, #0
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d026      	beq.n	800bea8 <aiPrintLayoutBuffer+0x238>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <aiPrintLayoutBuffer+0x208>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <aiPrintLayoutBuffer+0x208>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	e000      	b.n	800be7a <aiPrintLayoutBuffer+0x20a>
 800be78:	2300      	movs	r3, #0
 800be7a:	885b      	ldrh	r3, [r3, #2]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d013      	beq.n	800bea8 <aiPrintLayoutBuffer+0x238>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00a      	beq.n	800be9e <aiPrintLayoutBuffer+0x22e>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <aiPrintLayoutBuffer+0x22e>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	e000      	b.n	800bea0 <aiPrintLayoutBuffer+0x230>
 800be9e:	2300      	movs	r3, #0
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	e057      	b.n	800bf58 <aiPrintLayoutBuffer+0x2e8>
 800bea8:	2300      	movs	r3, #0
 800beaa:	e055      	b.n	800bf58 <aiPrintLayoutBuffer+0x2e8>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d04f      	beq.n	800bf54 <aiPrintLayoutBuffer+0x2e4>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d048      	beq.n	800bf54 <aiPrintLayoutBuffer+0x2e4>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d043      	beq.n	800bf54 <aiPrintLayoutBuffer+0x2e4>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d013      	beq.n	800befc <aiPrintLayoutBuffer+0x28c>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00c      	beq.n	800befc <aiPrintLayoutBuffer+0x28c>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	e009      	b.n	800befe <aiPrintLayoutBuffer+0x28e>
 800beea:	bf00      	nop
 800beec:	08015b84 	.word	0x08015b84
 800bef0:	08015b8c 	.word	0x08015b8c
 800bef4:	08015b90 	.word	0x08015b90
 800bef8:	08015b94 	.word	0x08015b94
 800befc:	2300      	movs	r3, #0
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d027      	beq.n	800bf54 <aiPrintLayoutBuffer+0x2e4>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <aiPrintLayoutBuffer+0x2b2>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	695b      	ldr	r3, [r3, #20]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <aiPrintLayoutBuffer+0x2b2>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	e000      	b.n	800bf24 <aiPrintLayoutBuffer+0x2b4>
 800bf22:	2300      	movs	r3, #0
 800bf24:	885b      	ldrh	r3, [r3, #2]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d014      	beq.n	800bf54 <aiPrintLayoutBuffer+0x2e4>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <aiPrintLayoutBuffer+0x2d8>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d003      	beq.n	800bf48 <aiPrintLayoutBuffer+0x2d8>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	e000      	b.n	800bf4a <aiPrintLayoutBuffer+0x2da>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f993 3000 	ldrsb.w	r3, [r3]
 800bf52:	e001      	b.n	800bf58 <aiPrintLayoutBuffer+0x2e8>
 800bf54:	2300      	movs	r3, #0
 800bf56:	e001      	b.n	800bf5c <aiPrintLayoutBuffer+0x2ec>
 800bf58:	e000      	b.n	800bf5c <aiPrintLayoutBuffer+0x2ec>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]
    		printf(" scale=%f, zero=%d,", (float)scale, (int)zero_point);
 800bf5e:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	ec53 2b17 	vmov	r2, r3, d7
 800bf6e:	4833      	ldr	r0, [pc, #204]	; (800c03c <aiPrintLayoutBuffer+0x3cc>)
 800bf70:	f004 ffe6 	bl	8010f40 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800bf74:	e02d      	b.n	800bfd2 <aiPrintLayoutBuffer+0x362>
    	} else {
    		printf("Q%d.%d,",
    				(int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	11db      	asrs	r3, r3, #7
 800bf7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
					- ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
					(int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	15db      	asrs	r3, r3, #23
 800bf94:	f003 0301 	and.w	r3, r3, #1
					- ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800bf98:	440b      	add	r3, r1
    		printf("Q%d.%d,",
 800bf9a:	1ad1      	subs	r1, r2, r3
					AI_BUFFER_FMT_GET_FBITS(buffer->format));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    		printf("Q%d.%d,",
 800bfa6:	3b40      	subs	r3, #64	; 0x40
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	4825      	ldr	r0, [pc, #148]	; (800c040 <aiPrintLayoutBuffer+0x3d0>)
 800bfac:	f004 ffc8 	bl	8010f40 <iprintf>
 800bfb0:	e00f      	b.n	800bfd2 <aiPrintLayoutBuffer+0x362>
    	}
    }
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d109      	bne.n	800bfcc <aiPrintLayoutBuffer+0x35c>
        printf(" float%d,",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	11db      	asrs	r3, r3, #7
        printf(" float%d,",
 800bfbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	481f      	ldr	r0, [pc, #124]	; (800c044 <aiPrintLayoutBuffer+0x3d4>)
 800bfc6:	f004 ffbb 	bl	8010f40 <iprintf>
 800bfca:	e002      	b.n	800bfd2 <aiPrintLayoutBuffer+0x362>
    else
        printf("NONE");
 800bfcc:	481e      	ldr	r0, [pc, #120]	; (800c048 <aiPrintLayoutBuffer+0x3d8>)
 800bfce:	f004 ffb7 	bl	8010f40 <iprintf>
    printf(" %ld bytes, shape=(%d,%d,%ld)",
    		AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	891b      	ldrh	r3, [r3, #8]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	88db      	ldrh	r3, [r3, #6]
 800bfdc:	fb03 f302 	mul.w	r3, r3, r2
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	fb03 f302 	mul.w	r3, r3, r2
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6812      	ldr	r2, [r2, #0]
 800bfee:	11d2      	asrs	r2, r2, #7
 800bff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bff4:	fb02 f303 	mul.w	r3, r2, r3
 800bff8:	3304      	adds	r3, #4
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800bffa:	08d9      	lsrs	r1, r3, #3
			buffer->height, buffer->width, buffer->channels);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	88db      	ldrh	r3, [r3, #6]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800c000:	461a      	mov	r2, r3
			buffer->height, buffer->width, buffer->channels);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	891b      	ldrh	r3, [r3, #8]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800c006:	4618      	mov	r0, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	4603      	mov	r3, r0
 800c010:	480e      	ldr	r0, [pc, #56]	; (800c04c <aiPrintLayoutBuffer+0x3dc>)
 800c012:	f004 ff95 	bl	8010f40 <iprintf>
    if (buffer->data)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d006      	beq.n	800c02c <aiPrintLayoutBuffer+0x3bc>
    	printf(" (@0x%08x)\r\n", (int)buffer->data);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	4619      	mov	r1, r3
 800c024:	480a      	ldr	r0, [pc, #40]	; (800c050 <aiPrintLayoutBuffer+0x3e0>)
 800c026:	f004 ff8b 	bl	8010f40 <iprintf>
    else
    	printf("\r\n");
}
 800c02a:	e002      	b.n	800c032 <aiPrintLayoutBuffer+0x3c2>
    	printf("\r\n");
 800c02c:	4809      	ldr	r0, [pc, #36]	; (800c054 <aiPrintLayoutBuffer+0x3e4>)
 800c02e:	f004 fffb 	bl	8011028 <puts>
}
 800c032:	bf00      	nop
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	08015b9c 	.word	0x08015b9c
 800c040:	08015bb0 	.word	0x08015bb0
 800c044:	08015bb8 	.word	0x08015bb8
 800c048:	08015bc4 	.word	0x08015bc4
 800c04c:	08015bcc 	.word	0x08015bcc
 800c050:	08015bec 	.word	0x08015bec
 800c054:	08015bfc 	.word	0x08015bfc

0800c058 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network configuration...\r\n");
 800c060:	484d      	ldr	r0, [pc, #308]	; (800c198 <aiPrintNetworkInfo+0x140>)
 800c062:	f004 ffe1 	bl	8011028 <puts>
    printf(" Model name         : %s\r\n", report->model_name);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4619      	mov	r1, r3
 800c06c:	484b      	ldr	r0, [pc, #300]	; (800c19c <aiPrintNetworkInfo+0x144>)
 800c06e:	f004 ff67 	bl	8010f40 <iprintf>
    printf(" Model signature    : %s\r\n", report->model_signature);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	4619      	mov	r1, r3
 800c078:	4849      	ldr	r0, [pc, #292]	; (800c1a0 <aiPrintNetworkInfo+0x148>)
 800c07a:	f004 ff61 	bl	8010f40 <iprintf>
    printf(" Model datetime     : %s\r\n", report->model_datetime);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	4619      	mov	r1, r3
 800c084:	4847      	ldr	r0, [pc, #284]	; (800c1a4 <aiPrintNetworkInfo+0x14c>)
 800c086:	f004 ff5b 	bl	8010f40 <iprintf>
    printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	4619      	mov	r1, r3
 800c090:	4845      	ldr	r0, [pc, #276]	; (800c1a8 <aiPrintNetworkInfo+0x150>)
 800c092:	f004 ff55 	bl	8010f40 <iprintf>
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6919      	ldr	r1, [r3, #16]
            report->runtime_version.major,
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	7d1b      	ldrb	r3, [r3, #20]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c09e:	461a      	mov	r2, r3
            report->runtime_version.minor,
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	7d5b      	ldrb	r3, [r3, #21]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c0a4:	4618      	mov	r0, r3
            report->runtime_version.micro);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7d9b      	ldrb	r3, [r3, #22]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	483f      	ldr	r0, [pc, #252]	; (800c1ac <aiPrintNetworkInfo+0x154>)
 800c0b0:	f004 ff46 	bl	8010f40 <iprintf>
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6999      	ldr	r1, [r3, #24]
            report->tool_version.major,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7f1b      	ldrb	r3, [r3, #28]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c0bc:	461a      	mov	r2, r3
            report->tool_version.minor,
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	7f5b      	ldrb	r3, [r3, #29]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c0c2:	4618      	mov	r0, r3
            report->tool_version.micro);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	7f9b      	ldrb	r3, [r3, #30]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4838      	ldr	r0, [pc, #224]	; (800c1b0 <aiPrintNetworkInfo+0x158>)
 800c0ce:	f004 ff37 	bl	8010f40 <iprintf>
    printf("Network info...\r\n");
 800c0d2:	4838      	ldr	r0, [pc, #224]	; (800c1b4 <aiPrintNetworkInfo+0x15c>)
 800c0d4:	f004 ffa8 	bl	8011028 <puts>
    printf("  nodes             : %ld\r\n", report->n_nodes);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4836      	ldr	r0, [pc, #216]	; (800c1b8 <aiPrintNetworkInfo+0x160>)
 800c0e0:	f004 ff2e 	bl	8010f40 <iprintf>
    printf("  complexity        : %ld MACC\r\n", report->n_macc);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4834      	ldr	r0, [pc, #208]	; (800c1bc <aiPrintNetworkInfo+0x164>)
 800c0ec:	f004 ff28 	bl	8010f40 <iprintf>
    printf("  activation        : %ld bytes\r\n",
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	333c      	adds	r3, #60	; 0x3c
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fda5 	bl	800bc44 <aiBufferSize>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4830      	ldr	r0, [pc, #192]	; (800c1c0 <aiPrintNetworkInfo+0x168>)
 800c100:	f004 ff1e 	bl	8010f40 <iprintf>
            aiBufferSize(&report->activations));
    printf("  params            : %ld bytes\r\n",
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3354      	adds	r3, #84	; 0x54
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff fd9b 	bl	800bc44 <aiBufferSize>
 800c10e:	4603      	mov	r3, r0
 800c110:	4619      	mov	r1, r3
 800c112:	482c      	ldr	r0, [pc, #176]	; (800c1c4 <aiPrintNetworkInfo+0x16c>)
 800c114:	f004 ff14 	bl	8010f40 <iprintf>
            aiBufferSize(&report->params));
    printf("  inputs/outputs    : %u/%u\r\n",
            report->n_inputs, report->n_outputs);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    printf("  inputs/outputs    : %u/%u\r\n",
 800c11c:	4619      	mov	r1, r3
            report->n_inputs, report->n_outputs);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf("  inputs/outputs    : %u/%u\r\n",
 800c122:	461a      	mov	r2, r3
 800c124:	4828      	ldr	r0, [pc, #160]	; (800c1c8 <aiPrintNetworkInfo+0x170>)
 800c126:	f004 ff0b 	bl	8010f40 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e00f      	b.n	800c150 <aiPrintNetworkInfo+0xf8>
        aiPrintLayoutBuffer("   I", i, &report->inputs[i]);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4613      	mov	r3, r2
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	4413      	add	r3, r2
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	440b      	add	r3, r1
 800c140:	461a      	mov	r2, r3
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	4821      	ldr	r0, [pc, #132]	; (800c1cc <aiPrintNetworkInfo+0x174>)
 800c146:	f7ff fd93 	bl	800bc70 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3301      	adds	r3, #1
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c154:	461a      	mov	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	4293      	cmp	r3, r2
 800c15a:	dbe9      	blt.n	800c130 <aiPrintNetworkInfo+0xd8>
    for (i=0; i<report->n_outputs; i++)
 800c15c:	2300      	movs	r3, #0
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	e00f      	b.n	800c182 <aiPrintNetworkInfo+0x12a>
        aiPrintLayoutBuffer("   O", i, &report->outputs[i]);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	4613      	mov	r3, r2
 800c16a:	005b      	lsls	r3, r3, #1
 800c16c:	4413      	add	r3, r2
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	440b      	add	r3, r1
 800c172:	461a      	mov	r2, r3
 800c174:	68f9      	ldr	r1, [r7, #12]
 800c176:	4816      	ldr	r0, [pc, #88]	; (800c1d0 <aiPrintNetworkInfo+0x178>)
 800c178:	f7ff fd7a 	bl	800bc70 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3301      	adds	r3, #1
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c186:	461a      	mov	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4293      	cmp	r3, r2
 800c18c:	dbe9      	blt.n	800c162 <aiPrintNetworkInfo+0x10a>
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	08015c00 	.word	0x08015c00
 800c19c:	08015c1c 	.word	0x08015c1c
 800c1a0:	08015c38 	.word	0x08015c38
 800c1a4:	08015c54 	.word	0x08015c54
 800c1a8:	08015c70 	.word	0x08015c70
 800c1ac:	08015c8c 	.word	0x08015c8c
 800c1b0:	08015cb4 	.word	0x08015cb4
 800c1b4:	08015cdc 	.word	0x08015cdc
 800c1b8:	08015cf0 	.word	0x08015cf0
 800c1bc:	08015d0c 	.word	0x08015d0c
 800c1c0:	08015d30 	.word	0x08015d30
 800c1c4:	08015d54 	.word	0x08015d54
 800c1c8:	08015d78 	.word	0x08015d78
 800c1cc:	08015d98 	.word	0x08015d98
 800c1d0:	08015da0 	.word	0x08015da0

0800c1d4 <aiTestHeader>:
 * Test-related functions
 * -----------------------------------------------------------------------------
 */

void aiTestHeader(const char* tname, int major, int minor)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
    printf("\r\n#\r\n");
 800c1e0:	480a      	ldr	r0, [pc, #40]	; (800c20c <aiTestHeader+0x38>)
 800c1e2:	f004 ff21 	bl	8011028 <puts>
    printf("# %s %d.%d\r\n", tname , major, minor);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	68f9      	ldr	r1, [r7, #12]
 800c1ec:	4808      	ldr	r0, [pc, #32]	; (800c210 <aiTestHeader+0x3c>)
 800c1ee:	f004 fea7 	bl	8010f40 <iprintf>
    printf("#\r\n");
 800c1f2:	4808      	ldr	r0, [pc, #32]	; (800c214 <aiTestHeader+0x40>)
 800c1f4:	f004 ff18 	bl	8011028 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	2203      	movs	r2, #3
 800c1fc:	2107      	movs	r1, #7
 800c1fe:	4806      	ldr	r0, [pc, #24]	; (800c218 <aiTestHeader+0x44>)
 800c200:	f004 fe9e 	bl	8010f40 <iprintf>
            __BUILD_NUMBER__
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif
}
 800c204:	bf00      	nop
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	08015da8 	.word	0x08015da8
 800c210:	08015db0 	.word	0x08015db0
 800c214:	08015dc0 	.word	0x08015dc0
 800c218:	08015dc4 	.word	0x08015dc4

0800c21c <write_packet>:
static struct o_packet {
    uint8_t pw;
    uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)&o_packet,
 800c222:	f04f 33ff 	mov.w	r3, #4294967295
 800c226:	2221      	movs	r2, #33	; 0x21
 800c228:	4907      	ldr	r1, [pc, #28]	; (800c248 <write_packet+0x2c>)
 800c22a:	4808      	ldr	r0, [pc, #32]	; (800c24c <write_packet+0x30>)
 800c22c:	f7fd ff06 	bl	800a03c <HAL_UART_Transmit>
 800c230:	4603      	mov	r3, r0
 800c232:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_IN_SIZE + 1,
            HAL_MAX_DELAY);

    return (status == HAL_OK);
 800c234:	79fb      	ldrb	r3, [r7, #7]
 800c236:	2b00      	cmp	r3, #0
 800c238:	bf0c      	ite	eq
 800c23a:	2301      	moveq	r3, #1
 800c23c:	2300      	movne	r3, #0
 800c23e:	b2db      	uxtb	r3, r3
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20000914 	.word	0x20000914
 800c24c:	20000bdc 	.word	0x20000bdc

0800c250 <ioFlushWrite>:

void ioFlushWrite(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
    o_packet.pw |= (1 << 7); /* Indicate last packet */
 800c254:	4b06      	ldr	r3, [pc, #24]	; (800c270 <ioFlushWrite+0x20>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	4b04      	ldr	r3, [pc, #16]	; (800c270 <ioFlushWrite+0x20>)
 800c260:	701a      	strb	r2, [r3, #0]
    write_packet();
 800c262:	f7ff ffdb 	bl	800c21c <write_packet>
    o_packet.pw = 0;
 800c266:	4b02      	ldr	r3, [pc, #8]	; (800c270 <ioFlushWrite+0x20>)
 800c268:	2200      	movs	r2, #0
 800c26a:	701a      	strb	r2, [r3, #0]
}
 800c26c:	bf00      	nop
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20000914 	.word	0x20000914

0800c274 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
        size_t count)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
    bool res = true;
 800c280:	2301      	movs	r3, #1
 800c282:	75fb      	strb	r3, [r7, #23]
    uint8_t *pr = (uint8_t *)buf;
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	613b      	str	r3, [r7, #16]

    UNUSED(stream);

    while (count) {
 800c288:	e025      	b.n	800c2d6 <write_callback+0x62>
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
            o_packet.payload[o_packet.pw] = *pr;
 800c28a:	4b17      	ldr	r3, [pc, #92]	; (800c2e8 <write_callback+0x74>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	4619      	mov	r1, r3
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	781a      	ldrb	r2, [r3, #0]
 800c294:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <write_callback+0x74>)
 800c296:	440b      	add	r3, r1
 800c298:	705a      	strb	r2, [r3, #1]
            pr++;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	3301      	adds	r3, #1
 800c29e:	613b      	str	r3, [r7, #16]
            count--;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	607b      	str	r3, [r7, #4]
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <write_callback+0x74>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	4b0e      	ldr	r3, [pc, #56]	; (800c2e8 <write_callback+0x74>)
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <write_callback+0x74>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	2b1f      	cmp	r3, #31
 800c2b8:	d802      	bhi.n	800c2c0 <write_callback+0x4c>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e4      	bne.n	800c28a <write_callback+0x16>
        }
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 800c2c0:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <write_callback+0x74>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b20      	cmp	r3, #32
 800c2c6:	d106      	bne.n	800c2d6 <write_callback+0x62>
                res = write_packet();
 800c2c8:	f7ff ffa8 	bl	800c21c <write_packet>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	75fb      	strb	r3, [r7, #23]
                o_packet.pw = 0;
 800c2d0:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <write_callback+0x74>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	701a      	strb	r2, [r3, #0]
    while (count) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1ea      	bne.n	800c2b2 <write_callback+0x3e>
        }
    }
    return res;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20000914 	.word	0x20000914

0800c2ec <read_packet>:
    uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)&i_packet,
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f6:	2221      	movs	r2, #33	; 0x21
 800c2f8:	4909      	ldr	r1, [pc, #36]	; (800c320 <read_packet+0x34>)
 800c2fa:	480a      	ldr	r0, [pc, #40]	; (800c324 <read_packet+0x38>)
 800c2fc:	f7fd ff2f 	bl	800a15e <HAL_UART_Receive>
 800c300:	4603      	mov	r3, r0
 800c302:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_OUT_SIZE + 1,
            HAL_MAX_DELAY);

    i_ridx = 0;
 800c304:	4b08      	ldr	r3, [pc, #32]	; (800c328 <read_packet+0x3c>)
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]

    return (status == HAL_OK);
 800c30a:	79fb      	ldrb	r3, [r7, #7]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bf0c      	ite	eq
 800c310:	2301      	moveq	r3, #1
 800c312:	2300      	movne	r3, #0
 800c314:	b2db      	uxtb	r3, r3
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	20000938 	.word	0x20000938
 800c324:	20000bdc 	.word	0x20000bdc
 800c328:	2000095c 	.word	0x2000095c

0800c32c <ioFlushRead>:

void ioFlushRead(void)
{
 800c32c:	b480      	push	{r7}
 800c32e:	af00      	add	r7, sp, #0
    i_packet.pr = 0xFF;
 800c330:	4b05      	ldr	r3, [pc, #20]	; (800c348 <ioFlushRead+0x1c>)
 800c332:	22ff      	movs	r2, #255	; 0xff
 800c334:	701a      	strb	r2, [r3, #0]
    i_ridx = 0;
 800c336:	4b05      	ldr	r3, [pc, #20]	; (800c34c <ioFlushRead+0x20>)
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]
}
 800c33c:	bf00      	nop
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20000938 	.word	0x20000938
 800c34c:	2000095c 	.word	0x2000095c

0800c350 <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b088      	sub	sp, #32
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
    bool res = true;
 800c35c:	2301      	movs	r3, #1
 800c35e:	77fb      	strb	r3, [r7, #31]
    uint8_t *pw = (uint8_t *)buf;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	61bb      	str	r3, [r7, #24]

    UNUSED(stream);

    if (count == 0)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <read_callback+0x1e>
        return true;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e045      	b.n	800c3fa <read_callback+0xaa>

    if (i_packet.pr == 0xFF)
 800c36e:	4b25      	ldr	r3, [pc, #148]	; (800c404 <read_callback+0xb4>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2bff      	cmp	r3, #255	; 0xff
 800c374:	d103      	bne.n	800c37e <read_callback+0x2e>
        res = read_packet();
 800c376:	f7ff ffb9 	bl	800c2ec <read_packet>
 800c37a:	4603      	mov	r3, r0
 800c37c:	77fb      	strb	r3, [r7, #31]

    if (res == false)
 800c37e:	7ffb      	ldrb	r3, [r7, #31]
 800c380:	f083 0301 	eor.w	r3, r3, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d033      	beq.n	800c3f2 <read_callback+0xa2>
        return res;
 800c38a:	7ffb      	ldrb	r3, [r7, #31]
 800c38c:	e035      	b.n	800c3fa <read_callback+0xaa>

    while (count) {
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
            *pw = i_packet.payload[i_ridx];
 800c38e:	4b1e      	ldr	r3, [pc, #120]	; (800c408 <read_callback+0xb8>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a1c      	ldr	r2, [pc, #112]	; (800c404 <read_callback+0xb4>)
 800c394:	4413      	add	r3, r2
 800c396:	785a      	ldrb	r2, [r3, #1]
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	701a      	strb	r2, [r3, #0]
            pw++;
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	61bb      	str	r3, [r7, #24]
            count--;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	607b      	str	r3, [r7, #4]
            i_ridx++;
 800c3a8:	4b17      	ldr	r3, [pc, #92]	; (800c408 <read_callback+0xb8>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	4a16      	ldr	r2, [pc, #88]	; (800c408 <read_callback+0xb8>)
 800c3b0:	6013      	str	r3, [r2, #0]
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800c3b2:	4b14      	ldr	r3, [pc, #80]	; (800c404 <read_callback+0xb4>)
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	4b12      	ldr	r3, [pc, #72]	; (800c404 <read_callback+0xb4>)
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	4b11      	ldr	r3, [pc, #68]	; (800c404 <read_callback+0xb4>)
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <read_callback+0x7c>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e0      	bne.n	800c38e <read_callback+0x3e>
        }
        if (count && i_packet.pr == 0) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00f      	beq.n	800c3f2 <read_callback+0xa2>
 800c3d2:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <read_callback+0xb4>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10b      	bne.n	800c3f2 <read_callback+0xa2>
            uint8_t sync = 0xAA;
 800c3da:	23aa      	movs	r3, #170	; 0xaa
 800c3dc:	75fb      	strb	r3, [r7, #23]
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 800c3de:	f107 0117 	add.w	r1, r7, #23
 800c3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	4808      	ldr	r0, [pc, #32]	; (800c40c <read_callback+0xbc>)
 800c3ea:	f7fd fe27 	bl	800a03c <HAL_UART_Transmit>
                        HAL_MAX_DELAY);
            read_packet();
 800c3ee:	f7ff ff7d 	bl	800c2ec <read_packet>
    while (count) {
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e2      	bne.n	800c3be <read_callback+0x6e>
        }
    }

    return res;
 800c3f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3720      	adds	r7, #32
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20000938 	.word	0x20000938
 800c408:	2000095c 	.word	0x2000095c
 800c40c:	20000bdc 	.word	0x20000bdc

0800c410 <pb_ostream_to_uart>:
}
#endif


pb_ostream_t pb_ostream_to_uart(int fd)
{
 800c410:	b4b0      	push	{r4, r5, r7}
 800c412:	b089      	sub	sp, #36	; 0x24
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 800c41a:	f107 030c 	add.w	r3, r7, #12
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	605a      	str	r2, [r3, #4]
 800c424:	609a      	str	r2, [r3, #8]
 800c426:	60da      	str	r2, [r3, #12]
 800c428:	611a      	str	r2, [r3, #16]
 800c42a:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <pb_ostream_to_uart+0x44>)
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	f04f 33ff 	mov.w	r3, #4294967295
 800c436:	617b      	str	r3, [r7, #20]
    return stream;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	461d      	mov	r5, r3
 800c43c:	f107 040c 	add.w	r4, r7, #12
 800c440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	602b      	str	r3, [r5, #0]
}
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	3724      	adds	r7, #36	; 0x24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bcb0      	pop	{r4, r5, r7}
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	0800c275 	.word	0x0800c275

0800c458 <pb_istream_from_uart>:

pb_istream_t pb_istream_from_uart(int fd)
{
 800c458:	b490      	push	{r4, r7}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 800c462:	f107 0308 	add.w	r3, r7, #8
 800c466:	2200      	movs	r2, #0
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	605a      	str	r2, [r3, #4]
 800c46c:	609a      	str	r2, [r3, #8]
 800c46e:	60da      	str	r2, [r3, #12]
 800c470:	4b09      	ldr	r3, [pc, #36]	; (800c498 <pb_istream_from_uart+0x40>)
 800c472:	60bb      	str	r3, [r7, #8]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	f04f 33ff 	mov.w	r3, #4294967295
 800c47c:	613b      	str	r3, [r7, #16]
    return stream;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	461c      	mov	r4, r3
 800c482:	f107 0308 	add.w	r3, r7, #8
 800c486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	3718      	adds	r7, #24
 800c490:	46bd      	mov	sp, r7
 800c492:	bc90      	pop	{r4, r7}
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	0800c351 	.word	0x0800c351

0800c49c <aiOnExecNode_cb>:
DEF_DATA_OUT;

#ifdef HAS_INSPECTOR
static void aiOnExecNode_cb(const ai_handle cookie,
        const ai_inspect_node_info* node_info,
        ai_node_exec_stage stage) {
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	b08a      	sub	sp, #40	; 0x28
 800c4a2:	af02      	add	r7, sp, #8
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	71fb      	strb	r3, [r7, #7]

    struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	61bb      	str	r3, [r7, #24]

    if (stage == AI_NODE_EXEC_PRE_FORWARD_STAGE) {
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d117      	bne.n	800c4e6 <aiOnExecNode_cb+0x4a>
        ctx->n_cb_in++;
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c4bc:	1c5a      	adds	r2, r3, #1
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        ctx->tcom += dwtGetCycles();
 800c4c4:	f7ff f918 	bl	800b6f8 <dwtGetCycles>
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	e9d3 123a 	ldrd	r1, r2, [r3, #232]	; 0xe8
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	f04f 0600 	mov.w	r6, #0
 800c4d4:	186b      	adds	r3, r5, r1
 800c4d6:	eb46 0402 	adc.w	r4, r6, r2
 800c4da:	69ba      	ldr	r2, [r7, #24]
 800c4dc:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
        dwtReset();
 800c4e0:	f7ff f8fe 	bl	800b6e0 <dwtReset>
                type | node_info->type,
                node_info->id,
                dwtCyclesToFloatMs(dur),
                &node_info->out[0]);
    }
}
 800c4e4:	e058      	b.n	800c598 <aiOnExecNode_cb+0xfc>
    } else if (stage == AI_NODE_EXEC_POST_FORWARD_STAGE) {
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d155      	bne.n	800c598 <aiOnExecNode_cb+0xfc>
        uint32_t dur = dwtGetCycles();
 800c4ec:	f7ff f904 	bl	800b6f8 <dwtGetCycles>
 800c4f0:	6178      	str	r0, [r7, #20]
        dwtReset();
 800c4f2:	f7ff f8f5 	bl	800b6e0 <dwtReset>
        ctx->tnodes += dur;
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	e9d3 123c 	ldrd	r1, r2, [r3, #240]	; 0xf0
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	461d      	mov	r5, r3
 800c500:	f04f 0600 	mov.w	r6, #0
 800c504:	186b      	adds	r3, r5, r1
 800c506:	eb46 0402 	adc.w	r4, r6, r2
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
        ctx->n_cb_out++;
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        if (ctx->n_cb_out == ctx->report.n_nodes)
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c528:	429a      	cmp	r2, r3
 800c52a:	d102      	bne.n	800c532 <aiOnExecNode_cb+0x96>
            type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 800c52c:	2302      	movs	r3, #2
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	e001      	b.n	800c536 <aiOnExecNode_cb+0x9a>
            type = EnumLayerType_LAYER_TYPE_INTERNAL;
 800c532:	2301      	movs	r3, #1
 800c534:	61fb      	str	r3, [r7, #28]
        type = type << 16;
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	041b      	lsls	r3, r3, #16
 800c53a:	61fb      	str	r3, [r7, #28]
        if (ctx->no_data)
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <aiOnExecNode_cb+0xb2>
            type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c54c:	61fb      	str	r3, [r7, #28]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	f8d3 50d8 	ldr.w	r5, [r3, #216]	; 0xd8
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	f8d3 60dc 	ldr.w	r6, [r3, #220]	; 0xdc
                type | node_info->type,
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	ea42 0803 	orr.w	r8, r2, r3
                node_info->id,
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	885b      	ldrh	r3, [r3, #2]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800c56a:	603b      	str	r3, [r7, #0]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f04f 0400 	mov.w	r4, #0
 800c572:	4618      	mov	r0, r3
 800c574:	4621      	mov	r1, r4
 800c576:	f7ff f8d3 	bl	800b720 <dwtCyclesToFloatMs>
 800c57a:	eef0 7a40 	vmov.f32	s15, s0
                &node_info->out[0]);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	695b      	ldr	r3, [r3, #20]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	eeb0 0a67 	vmov.f32	s0, s15
 800c58c:	4643      	mov	r3, r8
 800c58e:	2202      	movs	r2, #2
 800c590:	4631      	mov	r1, r6
 800c592:	4628      	mov	r0, r5
 800c594:	f7fe fdf0 	bl	800b178 <aiPbMgrSendAiBuffer3>
}
 800c598:	bf00      	nop
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c5a4 <aiExecCtx>:
#endif


static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
    struct ai_network_exec_ctx *cur = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]

    if (!nn_name)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <aiExecCtx+0x18>
        return NULL;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e048      	b.n	800c64e <aiExecCtx+0xaa>

    if (!nn_name[0]) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10e      	bne.n	800c5e2 <aiExecCtx+0x3e>
        if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER))
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	db40      	blt.n	800c64c <aiExecCtx+0xa8>
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	dc3d      	bgt.n	800c64c <aiExecCtx+0xa8>
            cur = &net_exec_ctx[pos];
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	015b      	lsls	r3, r3, #5
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	4a1f      	ldr	r2, [pc, #124]	; (800c658 <aiExecCtx+0xb4>)
 800c5dc:	4413      	add	r3, r2
 800c5de:	60fb      	str	r3, [r7, #12]
 800c5e0:	e034      	b.n	800c64c <aiExecCtx+0xa8>
    } else {
        int idx;
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60bb      	str	r3, [r7, #8]
 800c5e6:	e02c      	b.n	800c642 <aiExecCtx+0x9e>
            cur = &net_exec_ctx[idx];
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	015b      	lsls	r3, r3, #5
 800c5ee:	1a9b      	subs	r3, r3, r2
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	4a19      	ldr	r2, [pc, #100]	; (800c658 <aiExecCtx+0xb4>)
 800c5f4:	4413      	add	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]
            if (cur->network &&
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d01b      	beq.n	800c638 <aiExecCtx+0x94>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	4618      	mov	r0, r3
 800c606:	f7fa fc2e 	bl	8006e66 <strlen>
 800c60a:	4604      	mov	r4, r0
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7fa fc2a 	bl	8006e66 <strlen>
 800c612:	4603      	mov	r3, r0
            if (cur->network &&
 800c614:	429c      	cmp	r4, r3
 800c616:	d10f      	bne.n	800c638 <aiExecCtx+0x94>
                    (strncmp(cur->report.model_name, nn_name,
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	685c      	ldr	r4, [r3, #4]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	4618      	mov	r0, r3
 800c622:	f7fa fc20 	bl	8006e66 <strlen>
 800c626:	4603      	mov	r3, r0
 800c628:	461a      	mov	r2, r3
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	4620      	mov	r0, r4
 800c62e:	f004 fd1b 	bl	8011068 <strncmp>
 800c632:	4603      	mov	r3, r0
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800c634:	2b00      	cmp	r3, #0
 800c636:	d008      	beq.n	800c64a <aiExecCtx+0xa6>
                            strlen(cur->report.model_name)) == 0)) {
                break;
            }
            cur = NULL;
 800c638:	2300      	movs	r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	3301      	adds	r3, #1
 800c640:	60bb      	str	r3, [r7, #8]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	ddcf      	ble.n	800c5e8 <aiExecCtx+0x44>
 800c648:	e000      	b.n	800c64c <aiExecCtx+0xa8>
                break;
 800c64a:	bf00      	nop
        }
    }
    return cur;
 800c64c:	68fb      	ldr	r3, [r7, #12]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	bd90      	pop	{r4, r7, pc}
 800c656:	bf00      	nop
 800c658:	20000960 	.word	0x20000960

0800c65c <aiSetPbContext>:

__STATIC_INLINE
void aiSetPbContext(struct ai_network_exec_ctx *ctx,
        const reqMsg *creq, respMsg *cresp)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d008      	beq.n	800c680 <aiSetPbContext+0x24>
        return;

    ctx->creq = creq;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    ctx->cresp = cresp;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c67e:	e000      	b.n	800c682 <aiSetPbContext+0x26>
        return;
 800c680:	bf00      	nop
#endif
}
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b092      	sub	sp, #72	; 0x48
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
    ai_error err;
    ai_u32 ext_addr, sz;

    /* Creating the network */
    printf("Creating the network \"%s\"..\r\n", nn_name);
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	4879      	ldr	r0, [pc, #484]	; (800c880 <aiBootstrap+0x1f4>)
 800c69a:	f004 fc51 	bl	8010f40 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].network, NULL);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	015b      	lsls	r3, r3, #5
 800c6a4:	1a9b      	subs	r3, r3, r2
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	4a76      	ldr	r2, [pc, #472]	; (800c884 <aiBootstrap+0x1f8>)
 800c6aa:	4413      	add	r3, r2
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fdff 	bl	800d2b4 <ai_mnetwork_create>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	647b      	str	r3, [r7, #68]	; 0x44
    if (err.type) {
 800c6ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d006      	beq.n	800c6d0 <aiBootstrap+0x44>
        aiLogErr(err, "ai_mnetwork_create");
 800c6c2:	4971      	ldr	r1, [pc, #452]	; (800c888 <aiBootstrap+0x1fc>)
 800c6c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c6c6:	f7ff fa99 	bl	800bbfc <aiLogErr>
        return -1;
 800c6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ce:	e0d2      	b.n	800c876 <aiBootstrap+0x1ea>
    }

    /* Initialize the instance */
    printf("Initializing the network\r\n");
 800c6d0:	486e      	ldr	r0, [pc, #440]	; (800c88c <aiBootstrap+0x200>)
 800c6d2:	f004 fca9 	bl	8011028 <puts>
#if !defined(AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE)
    const ai_network_params params = {
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };
#else
    ai_network_params params = {
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	2230      	movs	r2, #48	; 0x30
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f003 ff44 	bl	801056c <memset>
 800c6e4:	4b6a      	ldr	r3, [pc, #424]	; (800c890 <aiBootstrap+0x204>)
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	4b69      	ldr	r3, [pc, #420]	; (800c890 <aiBootstrap+0x204>)
 800c6ea:	627b      	str	r3, [r7, #36]	; 0x24
                AI_BUFFER_NULL(NULL),
                AI_BUFFER_NULL(NULL) };

    if (ai_mnetwork_get_ext_data_activations(net_exec_ctx[idx].network, &ext_addr, &sz) == 0) {
 800c6ec:	4965      	ldr	r1, [pc, #404]	; (800c884 <aiBootstrap+0x1f8>)
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	015b      	lsls	r3, r3, #5
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	440b      	add	r3, r1
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c700:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c704:	4618      	mov	r0, r3
 800c706:	f000 ff37 	bl	800d578 <ai_mnetwork_get_ext_data_activations>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d12c      	bne.n	800c76a <aiBootstrap+0xde>
    	if (ext_addr == 0xFFFFFFFF) {
 800c710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c716:	d126      	bne.n	800c766 <aiBootstrap+0xda>
    		params.activations.data = (ai_handle)activations;
 800c718:	4b5e      	ldr	r3, [pc, #376]	; (800c894 <aiBootstrap+0x208>)
 800c71a:	637b      	str	r3, [r7, #52]	; 0x34
    		ext_addr = (ai_u32)activations;
 800c71c:	4b5d      	ldr	r3, [pc, #372]	; (800c894 <aiBootstrap+0x208>)
 800c71e:	643b      	str	r3, [r7, #64]	; 0x40
    		sz = (ai_u32)AI_BUFFER_SIZE(&net_exec_ctx[idx].report.activations);
 800c720:	4958      	ldr	r1, [pc, #352]	; (800c884 <aiBootstrap+0x1f8>)
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	4613      	mov	r3, r2
 800c726:	015b      	lsls	r3, r3, #5
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	440b      	add	r3, r1
 800c72e:	3348      	adds	r3, #72	; 0x48
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	4618      	mov	r0, r3
 800c734:	4953      	ldr	r1, [pc, #332]	; (800c884 <aiBootstrap+0x1f8>)
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4613      	mov	r3, r2
 800c73a:	015b      	lsls	r3, r3, #5
 800c73c:	1a9b      	subs	r3, r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	440b      	add	r3, r1
 800c742:	3346      	adds	r3, #70	; 0x46
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	fb03 f300 	mul.w	r3, r3, r0
 800c74a:	4618      	mov	r0, r3
 800c74c:	494d      	ldr	r1, [pc, #308]	; (800c884 <aiBootstrap+0x1f8>)
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	4613      	mov	r3, r2
 800c752:	015b      	lsls	r3, r3, #5
 800c754:	1a9b      	subs	r3, r3, r2
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	440b      	add	r3, r1
 800c75a:	334c      	adds	r3, #76	; 0x4c
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	fb03 f300 	mul.w	r3, r3, r0
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c764:	e001      	b.n	800c76a <aiBootstrap+0xde>
    	}
    	else {
    		params.activations.data = (ai_handle)ext_addr;
 800c766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c768:	637b      	str	r3, [r7, #52]	; 0x34
    	}
    }
#endif

    if (!ai_mnetwork_init(net_exec_ctx[idx].network, &params)) {
 800c76a:	4946      	ldr	r1, [pc, #280]	; (800c884 <aiBootstrap+0x1f8>)
 800c76c:	683a      	ldr	r2, [r7, #0]
 800c76e:	4613      	mov	r3, r2
 800c770:	015b      	lsls	r3, r3, #5
 800c772:	1a9b      	subs	r3, r3, r2
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	440b      	add	r3, r1
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f107 020c 	add.w	r2, r7, #12
 800c77e:	4611      	mov	r1, r2
 800c780:	4618      	mov	r0, r3
 800c782:	f000 fe60 	bl	800d446 <ai_mnetwork_init>
 800c786:	4603      	mov	r3, r0
 800c788:	f083 0301 	eor.w	r3, r3, #1
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d027      	beq.n	800c7e2 <aiBootstrap+0x156>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800c792:	493c      	ldr	r1, [pc, #240]	; (800c884 <aiBootstrap+0x1f8>)
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	4613      	mov	r3, r2
 800c798:	015b      	lsls	r3, r3, #5
 800c79a:	1a9b      	subs	r3, r3, r2
 800c79c:	00db      	lsls	r3, r3, #3
 800c79e:	440b      	add	r3, r1
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fe2f 	bl	800d406 <ai_mnetwork_get_error>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_init");
 800c7ac:	493a      	ldr	r1, [pc, #232]	; (800c898 <aiBootstrap+0x20c>)
 800c7ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c7b0:	f7ff fa24 	bl	800bbfc <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800c7b4:	4933      	ldr	r1, [pc, #204]	; (800c884 <aiBootstrap+0x1f8>)
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	015b      	lsls	r3, r3, #5
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	440b      	add	r3, r1
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 fde1 	bl	800d38c <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800c7ca:	492e      	ldr	r1, [pc, #184]	; (800c884 <aiBootstrap+0x1f8>)
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	015b      	lsls	r3, r3, #5
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	440b      	add	r3, r1
 800c7d8:	2200      	movs	r2, #0
 800c7da:	601a      	str	r2, [r3, #0]
        return -4;
 800c7dc:	f06f 0303 	mvn.w	r3, #3
 800c7e0:	e049      	b.n	800c876 <aiBootstrap+0x1ea>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].network,
 800c7e2:	4928      	ldr	r1, [pc, #160]	; (800c884 <aiBootstrap+0x1f8>)
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	015b      	lsls	r3, r3, #5
 800c7ea:	1a9b      	subs	r3, r3, r2
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	440b      	add	r3, r1
 800c7f0:	6818      	ldr	r0, [r3, #0]
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	015b      	lsls	r3, r3, #5
 800c7f8:	1a9b      	subs	r3, r3, r2
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	4a21      	ldr	r2, [pc, #132]	; (800c884 <aiBootstrap+0x1f8>)
 800c7fe:	4413      	add	r3, r2
 800c800:	3304      	adds	r3, #4
 800c802:	4619      	mov	r1, r3
 800c804:	f000 fde4 	bl	800d3d0 <ai_mnetwork_get_info>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00c      	beq.n	800c828 <aiBootstrap+0x19c>
            &net_exec_ctx[idx].report)) {
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	4613      	mov	r3, r2
 800c812:	015b      	lsls	r3, r3, #5
 800c814:	1a9b      	subs	r3, r3, r2
 800c816:	00db      	lsls	r3, r3, #3
 800c818:	4a1a      	ldr	r2, [pc, #104]	; (800c884 <aiBootstrap+0x1f8>)
 800c81a:	4413      	add	r3, r2
 800c81c:	3304      	adds	r3, #4
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff fc1a 	bl	800c058 <aiPrintNetworkInfo>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
        return -2;
    }

    return 0;
 800c824:	2300      	movs	r3, #0
 800c826:	e026      	b.n	800c876 <aiBootstrap+0x1ea>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800c828:	4916      	ldr	r1, [pc, #88]	; (800c884 <aiBootstrap+0x1f8>)
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	4613      	mov	r3, r2
 800c82e:	015b      	lsls	r3, r3, #5
 800c830:	1a9b      	subs	r3, r3, r2
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	440b      	add	r3, r1
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 fde4 	bl	800d406 <ai_mnetwork_get_error>
 800c83e:	4603      	mov	r3, r0
 800c840:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_get_info");
 800c842:	4916      	ldr	r1, [pc, #88]	; (800c89c <aiBootstrap+0x210>)
 800c844:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c846:	f7ff f9d9 	bl	800bbfc <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800c84a:	490e      	ldr	r1, [pc, #56]	; (800c884 <aiBootstrap+0x1f8>)
 800c84c:	683a      	ldr	r2, [r7, #0]
 800c84e:	4613      	mov	r3, r2
 800c850:	015b      	lsls	r3, r3, #5
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fd96 	bl	800d38c <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800c860:	4908      	ldr	r1, [pc, #32]	; (800c884 <aiBootstrap+0x1f8>)
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	4613      	mov	r3, r2
 800c866:	015b      	lsls	r3, r3, #5
 800c868:	1a9b      	subs	r3, r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	440b      	add	r3, r1
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]
        return -2;
 800c872:	f06f 0301 	mvn.w	r3, #1
}
 800c876:	4618      	mov	r0, r3
 800c878:	3748      	adds	r7, #72	; 0x48
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	08015de4 	.word	0x08015de4
 800c884:	20000960 	.word	0x20000960
 800c888:	08015e04 	.word	0x08015e04
 800c88c:	08015e18 	.word	0x08015e18
 800c890:	40000040 	.word	0x40000040
 800c894:	20000a58 	.word	0x20000a58
 800c898:	08015e34 	.word	0x08015e34
 800c89c:	08015e48 	.word	0x08015e48

0800c8a0 <aiInspectorGetReport>:

#ifdef HAS_INSPECTOR
static int aiInspectorGetReport(struct ai_network_exec_ctx *ctx)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
    int res = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60fb      	str	r3, [r7, #12]
    if (!ctx)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d102      	bne.n	800c8b8 <aiInspectorGetReport+0x18>
        return -1;
 800c8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b6:	e01c      	b.n	800c8f2 <aiInspectorGetReport+0x52>

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d017      	beq.n	800c8f0 <aiInspectorGetReport+0x50>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d012      	beq.n	800c8f0 <aiInspectorGetReport+0x50>
    {
        if (ai_inspector_get_report(ctx->inspector,
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3380      	adds	r3, #128	; 0x80
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f7f3 fdab 	bl	8000434 <ai_inspector_get_report>
 800c8de:	4603      	mov	r3, r0
                ctx->net_id, &ctx->inspector_report) != true)
 800c8e0:	f083 0301 	eor.w	r3, r3, #1
 800c8e4:	b2db      	uxtb	r3, r3
        if (ai_inspector_get_report(ctx->inspector,
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <aiInspectorGetReport+0x50>
            res = -2;
 800c8ea:	f06f 0301 	mvn.w	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
    }
    return res;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <aiInspectorSendReport>:


static void aiInspectorSendReport(const reqMsg *req, respMsg *resp,
        EnumState state, struct ai_network_exec_ctx *ctx,
        const ai_float dur_ms)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b088      	sub	sp, #32
 800c8fe:	af02      	add	r7, sp, #8
 800c900:	6178      	str	r0, [r7, #20]
 800c902:	6139      	str	r1, [r7, #16]
 800c904:	60bb      	str	r3, [r7, #8]
 800c906:	ed87 0a01 	vstr	s0, [r7, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_INSPECTOR
    if (aiInspectorGetReport(ctx) == 0) {
 800c90e:	68b8      	ldr	r0, [r7, #8]
 800c910:	f7ff ffc6 	bl	800c8a0 <aiInspectorGetReport>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d122      	bne.n	800c960 <aiInspectorSendReport+0x66>
        resp->which_payload = respMsg_report_tag;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2215      	movs	r2, #21
 800c91e:	80da      	strh	r2, [r3, #6]
        resp->payload.report.id = ctx->inspector_report.id;
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	609a      	str	r2, [r3, #8]
        resp->payload.report.elapsed_ms = dur_ms;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	619a      	str	r2, [r3, #24]
        resp->payload.report.n_nodes = ctx->inspector_report.n_nodes;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	615a      	str	r2, [r3, #20]
        resp->payload.report.signature = ctx->inspector_report.signature;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	60da      	str	r2, [r3, #12]
        resp->payload.report.num_inferences = ctx->inspector_report.num_inferences;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	611a      	str	r2, [r3, #16]
        aiPbMgrSendResp(req, resp, state);
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	461a      	mov	r2, r3
 800c952:	6939      	ldr	r1, [r7, #16]
 800c954:	6978      	ldr	r0, [r7, #20]
 800c956:	f7fe f917 	bl	800ab88 <aiPbMgrSendResp>
        aiPbMgrWaitAck();
 800c95a:	f7fe f94f 	bl	800abfc <aiPbMgrWaitAck>
    } else {
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_GENERIC, EnumError_E_GENERIC);
    }
#endif
}
 800c95e:	e007      	b.n	800c970 <aiInspectorSendReport+0x76>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800c960:	230a      	movs	r3, #10
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	230a      	movs	r3, #10
 800c966:	2204      	movs	r2, #4
 800c968:	6939      	ldr	r1, [r7, #16]
 800c96a:	6978      	ldr	r0, [r7, #20]
 800c96c:	f7fe f92a 	bl	800abc4 <aiPbMgrSendAck>
}
 800c970:	bf00      	nop
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <aiInspectorUnBind>:


static void aiInspectorUnBind(struct ai_network_exec_ctx *ctx)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d016      	beq.n	800c9b4 <aiInspectorUnBind+0x3c>
        return;

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00d      	beq.n	800c9aa <aiInspectorUnBind+0x32>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c994:	2b00      	cmp	r3, #0
 800c996:	d008      	beq.n	800c9aa <aiInspectorUnBind+0x32>
        ai_inspector_unbind_network(ctx->inspector,
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	f7f3 fcfe 	bl	80003a6 <ai_inspector_unbind_network>
                ctx->net_id);

    ctx->net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800c9b2:	e000      	b.n	800c9b6 <aiInspectorUnBind+0x3e>
        return;
 800c9b4:	bf00      	nop
#endif
}
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <aiInspectorBind>:

static int aiInspectorBind(struct ai_network_exec_ctx *ctx)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    int res = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60fb      	str	r3, [r7, #12]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <aiInspectorBind+0x16>
        return 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e024      	b.n	800ca1c <aiInspectorBind+0x60>

    aiInspectorUnBind(ctx);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff ffd0 	bl	800c978 <aiInspectorUnBind>

    ctx->n_cb_in  = 0;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ctx->n_cb_out = 0;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if (ctx->inspector) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d014      	beq.n	800ca1a <aiInspectorBind+0x5e>
        ctx->net_id = ai_inspector_bind_network(
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                ctx->inspector,
                &ctx->entry);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3398      	adds	r3, #152	; 0x98
        ctx->net_id = ai_inspector_bind_network(
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	4610      	mov	r0, r2
 800c9fc:	f7f3 fc93 	bl	8000326 <ai_inspector_bind_network>
 800ca00:	4603      	mov	r3, r0
 800ca02:	461a      	mov	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

        if (ctx->net_id == AI_INSPECTOR_NETWORK_BIND_FAILED)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <aiInspectorBind+0x5e>
            res = -1;
 800ca14:	f04f 33ff 	mov.w	r3, #4294967295
 800ca18:	60fb      	str	r3, [r7, #12]
    }

#endif
    return res;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <aiInspectorInitAndBind>:

static int aiInspectorInitAndBind(struct ai_network_exec_ctx *ctx)
{
 800ca24:	b5b0      	push	{r4, r5, r7, lr}
 800ca26:	b094      	sub	sp, #80	; 0x50
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    ctx->n_cb_in  = 0;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ctx->n_cb_out = 0;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    ai_inspector_config cfg = ai_inspector_default_config();
 800ca3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7f3 fbfd 	bl	8000240 <ai_inspector_default_config>

    cfg.log_level = LOG_SUDO;
 800ca46:	2300      	movs	r3, #0
 800ca48:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    cfg.log_quiet = false;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    cfg.on_report_destroy = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	647b      	str	r3, [r7, #68]	; 0x44
    cfg.on_exec_node = &aiOnExecNode_cb;
 800ca56:	4b1d      	ldr	r3, [pc, #116]	; (800cacc <aiInspectorInitAndBind+0xa8>)
 800ca58:	64bb      	str	r3, [r7, #72]	; 0x48
    cfg.cookie = NULL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    ai_handle phandle;
    ai_network_params pparams;

    if (ctx->network == AI_HANDLE_NULL)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d102      	bne.n	800ca6c <aiInspectorInitAndBind+0x48>
        return -1;
 800ca66:	f04f 33ff 	mov.w	r3, #4294967295
 800ca6a:	e02a      	b.n	800cac2 <aiInspectorInitAndBind+0x9e>

    ai_mnetwork_get_private_handle(ctx->network,
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f107 020c 	add.w	r2, r7, #12
 800ca74:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fd51 	bl	800d520 <ai_mnetwork_get_private_handle>
            &phandle,
            &pparams);

    cfg.cookie = (ai_handle)ctx;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (ai_inspector_create(&ctx->inspector, &cfg) )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3378      	adds	r3, #120	; 0x78
 800ca86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7f3 fbed 	bl	800026c <ai_inspector_create>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d013      	beq.n	800cac0 <aiInspectorInitAndBind+0x9c>
    {
        ctx->entry.handle = phandle;
 800ca98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        ctx->entry.params = pparams;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800caa6:	f107 050c 	add.w	r5, r7, #12
 800caaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cab2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aiInspectorBind(ctx);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff ff7e 	bl	800c9bc <aiInspectorBind>
    }


#endif
    return 0;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3750      	adds	r7, #80	; 0x50
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bdb0      	pop	{r4, r5, r7, pc}
 800caca:	bf00      	nop
 800cacc:	0800c49d 	.word	0x0800c49d

0800cad0 <aiInspectorUnbindAndDestroy>:

static int aiInspectorUnbindAndDestroy(struct ai_network_exec_ctx *ctx)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    aiInspectorUnBind(ctx);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff ff4d 	bl	800c978 <aiInspectorUnBind>
    if (ctx->inspector != AI_HANDLE_NULL)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d004      	beq.n	800caf0 <aiInspectorUnbindAndDestroy+0x20>
        ai_inspector_destroy(ctx->inspector);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caea:	4618      	mov	r0, r3
 800caec:	f7f3 fbf0 	bl	80002d0 <ai_inspector_destroy>
    ctx->inspector = AI_HANDLE_NULL;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	679a      	str	r2, [r3, #120]	; 0x78
#endif
    return 0;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <aiInit>:


static int aiInit(void)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af04      	add	r7, sp, #16
    int res = -1;
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0a:	60fb      	str	r3, [r7, #12]
    const char *nn_name;
    int idx;

    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9302      	str	r3, [sp, #8]
 800cb10:	2301      	movs	r3, #1
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	2304      	movs	r3, #4
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	4826      	ldr	r0, [pc, #152]	; (800cbb8 <aiInit+0xb8>)
 800cb20:	f004 fa0e 	bl	8010f40 <iprintf>
            AI_PLATFORM_RUNTIME_MAJOR,
            AI_PLATFORM_RUNTIME_MINOR,
            AI_PLATFORM_RUNTIME_MICRO);

    /* Clean all network exec context */
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800cb24:	2300      	movs	r3, #0
 800cb26:	607b      	str	r3, [r7, #4]
 800cb28:	e01f      	b.n	800cb6a <aiInit+0x6a>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800cb2a:	4924      	ldr	r1, [pc, #144]	; (800cbbc <aiInit+0xbc>)
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	015b      	lsls	r3, r3, #5
 800cb32:	1a9b      	subs	r3, r3, r2
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	440b      	add	r3, r1
 800cb38:	2200      	movs	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]
#ifdef HAS_INSPECTOR
        net_exec_ctx[idx].inspector = AI_HANDLE_NULL;
 800cb3c:	491f      	ldr	r1, [pc, #124]	; (800cbbc <aiInit+0xbc>)
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4613      	mov	r3, r2
 800cb42:	015b      	lsls	r3, r3, #5
 800cb44:	1a9b      	subs	r3, r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	440b      	add	r3, r1
 800cb4a:	3378      	adds	r3, #120	; 0x78
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800cb50:	491a      	ldr	r1, [pc, #104]	; (800cbbc <aiInit+0xbc>)
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	4613      	mov	r3, r2
 800cb56:	015b      	lsls	r3, r3, #5
 800cb58:	1a9b      	subs	r3, r3, r2
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	440b      	add	r3, r1
 800cb5e:	337c      	adds	r3, #124	; 0x7c
 800cb60:	2200      	movs	r2, #0
 800cb62:	801a      	strh	r2, [r3, #0]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3301      	adds	r3, #1
 800cb68:	607b      	str	r3, [r7, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	dddc      	ble.n	800cb2a <aiInit+0x2a>
#endif
    }

    /* Discover and init the embedded network */
    idx = 0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	2000      	movs	r0, #0
 800cb78:	f000 fb6c 	bl	800d254 <ai_mnetwork_find>
 800cb7c:	60b8      	str	r0, [r7, #8]
        if (nn_name) {
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00d      	beq.n	800cba0 <aiInit+0xa0>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	480e      	ldr	r0, [pc, #56]	; (800cbc0 <aiInit+0xc0>)
 800cb88:	f004 f9da 	bl	8010f40 <iprintf>
            res = aiBootstrap(nn_name, idx);
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f7ff fd7c 	bl	800c68c <aiBootstrap>
 800cb94:	60f8      	str	r0, [r7, #12]
            if (res)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <aiInit+0xa0>
                nn_name = NULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60bb      	str	r3, [r7, #8]
        }
        idx++;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3301      	adds	r3, #1
 800cba4:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e3      	bne.n	800cb74 <aiInit+0x74>

    return res;
 800cbac:	68fb      	ldr	r3, [r7, #12]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	08015e60 	.word	0x08015e60
 800cbbc:	20000960 	.word	0x20000960
 800cbc0:	08015e94 	.word	0x08015e94

0800cbc4 <aiPbCmdNNInfo>:
 * Specific APP/test functions
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af02      	add	r7, sp, #8
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
    struct ai_network_exec_ctx *ctx;

    UNUSED(param);

    ctx = aiExecCtx(req->name, req->param);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f103 020c 	add.w	r2, r3, #12
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	4610      	mov	r0, r2
 800cbde:	f7ff fce1 	bl	800c5a4 <aiExecCtx>
 800cbe2:	6178      	str	r0, [r7, #20]
    if (ctx)
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d007      	beq.n	800cbfa <aiPbCmdNNInfo+0x36>
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
                &ctx->report);
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	3304      	adds	r3, #4
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 800cbee:	2200      	movs	r2, #0
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7fe fc7a 	bl	800b4ec <aiPbMgrSendNNInfo>
    else
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 800cbf8:	e007      	b.n	800cc0a <aiPbCmdNNInfo+0x46>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800cbfa:	2304      	movs	r3, #4
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	2304      	movs	r3, #4
 800cc00:	2204      	movs	r2, #4
 800cc02:	68b9      	ldr	r1, [r7, #8]
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f7fd ffdd 	bl	800abc4 <aiPbMgrSendAck>
}
 800cc0a:	bf00      	nop
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 800cc14:	b5b0      	push	{r4, r5, r7, lr}
 800cc16:	b09e      	sub	sp, #120	; 0x78
 800cc18:	af02      	add	r7, sp, #8
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
    ai_i32 batch;
    uint32_t tend;
    bool res;
    struct ai_network_exec_ctx *ctx;
    bool inspector_mode = false;
 800cc20:	2300      	movs	r3, #0
 800cc22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    ai_buffer ai_input[AI_MNETWORK_IN_NUM];
    ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

    UNUSED(param);

    ctx = aiExecCtx(req->name, -1);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	330c      	adds	r3, #12
 800cc2a:	f04f 31ff 	mov.w	r1, #4294967295
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7ff fcb8 	bl	800c5a4 <aiExecCtx>
 800cc34:	6538      	str	r0, [r7, #80]	; 0x50
    if (!ctx) {
 800cc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d108      	bne.n	800cc4e <aiPbCmdNNRun+0x3a>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2304      	movs	r3, #4
 800cc42:	2204      	movs	r2, #4
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7fd ffbc 	bl	800abc4 <aiPbMgrSendAck>
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        return;
 800cc4c:	e196      	b.n	800cf7c <aiPbCmdNNRun+0x368>
    }

#ifdef HAS_INSPECTOR
    ctx->no_data = false;
 800cc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <aiPbCmdNNRun+0x54>
            EnumRunParam_P_RUN_MODE_INSPECTOR)
        inspector_mode = true;
 800cc62:	2301      	movs	r3, #1
 800cc64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	f003 0302 	and.w	r3, r3, #2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d006      	beq.n	800cc82 <aiPbCmdNNRun+0x6e>
            EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
        inspector_mode = true;
 800cc74:	2301      	movs	r3, #1
 800cc76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        ctx->no_data = true;
 800cc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    }

    ctx->tcom = 0ULL;
 800cc82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc84:	f04f 0300 	mov.w	r3, #0
 800cc88:	f04f 0400 	mov.w	r4, #0
 800cc8c:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
    ctx->tnodes = 0ULL;
 800cc90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc92:	f04f 0300 	mov.w	r3, #0
 800cc96:	f04f 0400 	mov.w	r4, #0
 800cc9a:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
#endif

    /* Fill the input tensor descriptors */
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800cc9e:	2300      	movs	r3, #0
 800cca0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cca2:	e053      	b.n	800cd4c <aiPbCmdNNRun+0x138>
        ai_input[i] = ctx->report.inputs[i];
 800cca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cca8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccaa:	4613      	mov	r3, r2
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4413      	add	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	4419      	add	r1, r3
 800ccb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	4413      	add	r3, r2
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ccc2:	4413      	add	r3, r2
 800ccc4:	3b48      	subs	r3, #72	; 0x48
 800ccc6:	461c      	mov	r4, r3
 800ccc8:	460d      	mov	r5, r1
 800ccca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccd2:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_input[i].n_batches  = 1;
 800ccd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccd8:	4613      	mov	r3, r2
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cce4:	4413      	add	r3, r2
 800cce6:	3b44      	subs	r3, #68	; 0x44
 800cce8:	2201      	movs	r2, #1
 800ccea:	801a      	strh	r2, [r3, #0]
        if (ctx->report.inputs[i].data)
 800ccec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ccf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	4413      	add	r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	440b      	add	r3, r1
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d013      	beq.n	800cd2a <aiPbCmdNNRun+0x116>
        	ai_input[i].data = AI_HANDLE_PTR(ctx->report.inputs[i].data);
 800cd02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd04:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cd06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd08:	4613      	mov	r3, r2
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	4413      	add	r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	440b      	add	r3, r1
 800cd12:	6919      	ldr	r1, [r3, #16]
 800cd14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd16:	4613      	mov	r3, r2
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	4413      	add	r3, r2
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cd22:	4413      	add	r3, r2
 800cd24:	3b38      	subs	r3, #56	; 0x38
 800cd26:	6019      	str	r1, [r3, #0]
 800cd28:	e00d      	b.n	800cd46 <aiPbCmdNNRun+0x132>
        else
        	ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 800cd2a:	4a96      	ldr	r2, [pc, #600]	; (800cf84 <aiPbCmdNNRun+0x370>)
 800cd2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cd32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd34:	4613      	mov	r3, r2
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	4413      	add	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cd40:	4413      	add	r3, r2
 800cd42:	3b38      	subs	r3, #56	; 0x38
 800cd44:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800cd46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd48:	3301      	adds	r3, #1
 800cd4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800cd50:	461a      	mov	r2, r3
 800cd52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd54:	4293      	cmp	r3, r2
 800cd56:	dba5      	blt.n	800cca4 <aiPbCmdNNRun+0x90>
    }

    /* Fill the output tensor descriptors */
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800cd58:	2300      	movs	r3, #0
 800cd5a:	667b      	str	r3, [r7, #100]	; 0x64
 800cd5c:	e034      	b.n	800cdc8 <aiPbCmdNNRun+0x1b4>
    	ai_output[i] = ctx->report.outputs[i];
 800cd5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cd62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd64:	4613      	mov	r3, r2
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	4413      	add	r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	4419      	add	r1, r3
 800cd6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd70:	4613      	mov	r3, r2
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	4413      	add	r3, r2
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cd7c:	4413      	add	r3, r2
 800cd7e:	3b60      	subs	r3, #96	; 0x60
 800cd80:	461c      	mov	r4, r3
 800cd82:	460d      	mov	r5, r1
 800cd84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd88:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cd8c:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_output[i].n_batches = 1;
 800cd90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd92:	4613      	mov	r3, r2
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	4413      	add	r3, r2
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cd9e:	4413      	add	r3, r2
 800cda0:	3b5c      	subs	r3, #92	; 0x5c
 800cda2:	2201      	movs	r2, #1
 800cda4:	801a      	strh	r2, [r3, #0]
        ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 800cda6:	4a78      	ldr	r2, [pc, #480]	; (800cf88 <aiPbCmdNNRun+0x374>)
 800cda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cdae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	4413      	add	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cdbc:	4413      	add	r3, r2
 800cdbe:	3b50      	subs	r3, #80	; 0x50
 800cdc0:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800cdc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	667b      	str	r3, [r7, #100]	; 0x64
 800cdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdcc:	461a      	mov	r2, r3
 800cdce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	dbc4      	blt.n	800cd5e <aiPbCmdNNRun+0x14a>
    }

    /* 1 - Send a ACK (ready to receive a buffer) */
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800cdd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fd ff29 	bl	800ac30 <aiPbAiBufferSize>
 800cdde:	4602      	mov	r2, r0
 800cde0:	2300      	movs	r3, #0
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	4613      	mov	r3, r2
 800cde6:	2201      	movs	r2, #1
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f7fd feea 	bl	800abc4 <aiPbMgrSendAck>
            aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

    /* 2 - Receive all input tensors */
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	663b      	str	r3, [r7, #96]	; 0x60
 800cdf4:	e027      	b.n	800ce46 <aiPbCmdNNRun+0x232>
    	/* upload a buffer */
    	EnumState state = EnumState_S_WAITING;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    	if ((i + 1) == ctx->report.n_inputs)
 800cdfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdfe:	3301      	adds	r3, #1
 800ce00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce02:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d102      	bne.n	800ce0e <aiPbCmdNNRun+0x1fa>
    		state = EnumState_S_PROCESSING;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 800ce0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ce12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	440b      	add	r3, r1
 800ce1e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f7fe f81b 	bl	800ae60 <aiPbMgrReceiveAiBuffer3>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        if (res != true)
 800ce30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce34:	f083 0301 	eor.w	r3, r3, #1
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f040 809d 	bne.w	800cf7a <aiPbCmdNNRun+0x366>
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800ce40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce42:	3301      	adds	r3, #1
 800ce44:	663b      	str	r3, [r7, #96]	; 0x60
 800ce46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce48:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	dbd1      	blt.n	800cdf6 <aiPbCmdNNRun+0x1e2>
            return;
    }

    ints = disableInts();
 800ce52:	f7fe fe7d 	bl	800bb50 <disableInts>
 800ce56:	64f8      	str	r0, [r7, #76]	; 0x4c

    /* Update the PN context for inspector callbacks */
    aiSetPbContext(ctx, req, resp);
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ce5e:	f7ff fbfd 	bl	800c65c <aiSetPbContext>

    if (inspector_mode)
 800ce62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <aiPbCmdNNRun+0x25c>
        aiInspectorInitAndBind(ctx);
 800ce6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ce6c:	f7ff fdda 	bl	800ca24 <aiInspectorInitAndBind>

    /* Processing */
    dwtReset();
 800ce70:	f7fe fc36 	bl	800b6e0 <dwtReset>

    batch = ai_mnetwork_run(ctx->network, ai_input, ai_output);
 800ce74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f107 0210 	add.w	r2, r7, #16
 800ce7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fb31 	bl	800d4e8 <ai_mnetwork_run>
 800ce86:	64b8      	str	r0, [r7, #72]	; 0x48
    if (batch != 1) {
 800ce88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d012      	beq.n	800ceb4 <aiPbCmdNNRun+0x2a0>
        aiLogErr(ai_mnetwork_get_error(ctx->network),
 800ce8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fab7 	bl	800d406 <ai_mnetwork_get_error>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	493c      	ldr	r1, [pc, #240]	; (800cf8c <aiPbCmdNNRun+0x378>)
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fead 	bl	800bbfc <aiLogErr>
                "ai_mnetwork_run");
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800cea2:	230a      	movs	r3, #10
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	230a      	movs	r3, #10
 800cea8:	2204      	movs	r2, #4
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7fd fe89 	bl	800abc4 <aiPbMgrSendAck>
                EnumError_E_GENERIC, EnumError_E_GENERIC);
        return;
 800ceb2:	e063      	b.n	800cf7c <aiPbCmdNNRun+0x368>
    }
    tend = dwtGetCycles();
 800ceb4:	f7fe fc20 	bl	800b6f8 <dwtGetCycles>
 800ceb8:	6478      	str	r0, [r7, #68]	; 0x44

#ifdef HAS_INSPECTOR
    tend = ctx->tcom + ctx->tnodes + tend;
 800ceba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cebc:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 800cec0:	461a      	mov	r2, r3
 800cec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cec4:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800cec8:	4413      	add	r3, r2
 800ceca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cecc:	4413      	add	r3, r2
 800cece:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    if (inspector_mode)
 800ced0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d010      	beq.n	800cefa <aiPbCmdNNRun+0x2e6>
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800ced8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceda:	f04f 0400 	mov.w	r4, #0
 800cede:	4618      	mov	r0, r3
 800cee0:	4621      	mov	r1, r4
 800cee2:	f7fe fc1d 	bl	800b720 <dwtCyclesToFloatMs>
 800cee6:	eef0 7a40 	vmov.f32	s15, s0
 800ceea:	eeb0 0a67 	vmov.f32	s0, s15
 800ceee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef0:	2202      	movs	r2, #2
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7ff fd00 	bl	800c8fa <aiInspectorSendReport>
                dwtCyclesToFloatMs(tend));

    /* 3 - Send all output tensors */
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800cefa:	2300      	movs	r3, #0
 800cefc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cefe:	e02b      	b.n	800cf58 <aiPbCmdNNRun+0x344>
    	/* download a buffer */
    	EnumState state = EnumState_S_PROCESSING;
 800cf00:	2302      	movs	r3, #2
 800cf02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    	if ((i + 1) == ctx->report.n_outputs)
 800cf06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf08:	3301      	adds	r3, #1
 800cf0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf0c:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d102      	bne.n	800cf18 <aiPbCmdNNRun+0x304>
    		state = EnumState_S_DONE;
 800cf12:	2303      	movs	r3, #3
 800cf14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        aiPbMgrSendAiBuffer3(req, resp, state,
 800cf18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf1a:	f04f 0400 	mov.w	r4, #0
 800cf1e:	4618      	mov	r0, r3
 800cf20:	4621      	mov	r1, r4
 800cf22:	f7fe fbfd 	bl	800b720 <dwtCyclesToFloatMs>
 800cf26:	eef0 7a40 	vmov.f32	s15, s0
                EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
                0, dwtCyclesToFloatMs(tend),
                &ai_output[i]);
 800cf2a:	f107 0110 	add.w	r1, r7, #16
 800cf2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf30:	4613      	mov	r3, r2
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	440b      	add	r3, r1
        aiPbMgrSendAiBuffer3(req, resp, state,
 800cf3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	2300      	movs	r3, #0
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	eeb0 0a67 	vmov.f32	s0, s15
 800cf48:	2300      	movs	r3, #0
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7fe f913 	bl	800b178 <aiPbMgrSendAiBuffer3>
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800cf52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf54:	3301      	adds	r3, #1
 800cf56:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf60:	4293      	cmp	r3, r2
 800cf62:	dbcd      	blt.n	800cf00 <aiPbCmdNNRun+0x2ec>
    }

    if (inspector_mode)
 800cf64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <aiPbCmdNNRun+0x35e>
        aiInspectorUnbindAndDestroy(ctx);
 800cf6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cf6e:	f7ff fdaf 	bl	800cad0 <aiInspectorUnbindAndDestroy>

    restoreInts(ints);
 800cf72:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf74:	f7fe fdfc 	bl	800bb70 <restoreInts>
 800cf78:	e000      	b.n	800cf7c <aiPbCmdNNRun+0x368>
            return;
 800cf7a:	bf00      	nop
}
 800cf7c:	3770      	adds	r7, #112	; 0x70
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bdb0      	pop	{r4, r5, r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20000014 	.word	0x20000014
 800cf88:	20000018 	.word	0x20000018
 800cf8c:	08015ee0 	.word	0x08015ee0

0800cf90 <aiValidationInit>:
#endif
        AI_PB_CMD_END,
};

int aiValidationInit(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0
    aiPbMgrInit(pbCmdFuncTab);
 800cf94:	4808      	ldr	r0, [pc, #32]	; (800cfb8 <aiValidationInit+0x28>)
 800cf96:	f7fd fdbb 	bl	800ab10 <aiPbMgrInit>

    aiTestHeader(_APP_NAME_, _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	2103      	movs	r1, #3
 800cf9e:	4807      	ldr	r0, [pc, #28]	; (800cfbc <aiValidationInit+0x2c>)
 800cfa0:	f7ff f918 	bl	800c1d4 <aiTestHeader>

    dwtIpInit();
 800cfa4:	f7fe fb7a 	bl	800b69c <dwtIpInit>
    crcIpInit();
 800cfa8:	f7fe fb58 	bl	800b65c <crcIpInit>
    logDeviceConf();
 800cfac:	f7fe fd0c 	bl	800b9c8 <logDeviceConf>

    return 0;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000001c 	.word	0x2000001c
 800cfbc:	08015ef0 	.word	0x08015ef0

0800cfc0 <prj_AI_init>:
    printf("bye bye ...\r\n");
}

// CUSTOM USER CODE - PROJET

void prj_AI_init(void) {
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
	aiInit();
 800cfc4:	f7ff fd9c 	bl	800cb00 <aiInit>
}
 800cfc8:	bf00      	nop
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <prj_AI_process>:

bool prj_AI_process(float p_input[1][1][prj_AI_INPUT_NUMBER], float p_output[1][1][prj_AI_OUTPUT_NUMBER], bool acceleration) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b094      	sub	sp, #80	; 0x50
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	71fb      	strb	r3, [r7, #7]

	ai_buffer input = {
 800cfda:	4b43      	ldr	r3, [pc, #268]	; (800d0e8 <prj_AI_process+0x11c>)
 800cfdc:	633b      	str	r3, [r7, #48]	; 0x30
 800cfde:	2301      	movs	r3, #1
 800cfe0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	873b      	strh	r3, [r7, #56]	; 0x38
 800cfea:	2364      	movs	r3, #100	; 0x64
 800cfec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	643b      	str	r3, [r7, #64]	; 0x40
 800cff2:	2300      	movs	r3, #0
 800cff4:	647b      	str	r3, [r7, #68]	; 0x44
		1, 1, 1, 100,
		(ai_handle)p_input,
	NULL
    };

    ai_buffer output = {
 800cff6:	4b3c      	ldr	r3, [pc, #240]	; (800d0e8 <prj_AI_process+0x11c>)
 800cff8:	61bb      	str	r3, [r7, #24]
 800cffa:	2301      	movs	r3, #1
 800cffc:	83bb      	strh	r3, [r7, #28]
 800cffe:	2301      	movs	r3, #1
 800d000:	83fb      	strh	r3, [r7, #30]
 800d002:	2301      	movs	r3, #1
 800d004:	843b      	strh	r3, [r7, #32]
 800d006:	2303      	movs	r3, #3
 800d008:	627b      	str	r3, [r7, #36]	; 0x24
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d00e:	2300      	movs	r3, #0
 800d010:	62fb      	str	r3, [r7, #44]	; 0x2c
    	1, 1, 1, 3,
		(ai_handle)p_output,
	NULL
    };

    if (acceleration) {
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <prj_AI_process+0x62>
    	ai_mnetwork_run(net_exec_ctx[0].network, &input, &output);
 800d018:	4b34      	ldr	r3, [pc, #208]	; (800d0ec <prj_AI_process+0x120>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f107 0218 	add.w	r2, r7, #24
 800d020:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fa5f 	bl	800d4e8 <ai_mnetwork_run>
    	return true;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e057      	b.n	800d0de <prj_AI_process+0x112>
    }
    else {
    	printf("\r\n\r\n\r\nprj_AI_process messages :\r\n");
 800d02e:	4830      	ldr	r0, [pc, #192]	; (800d0f0 <prj_AI_process+0x124>)
 800d030:	f003 fffa 	bl	8011028 <puts>
    	printf("\r\nExisting neural network ? %s", net_exec_ctx[0].network ? "true" : "false");
 800d034:	4b2d      	ldr	r3, [pc, #180]	; (800d0ec <prj_AI_process+0x120>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <prj_AI_process+0x74>
 800d03c:	4b2d      	ldr	r3, [pc, #180]	; (800d0f4 <prj_AI_process+0x128>)
 800d03e:	e000      	b.n	800d042 <prj_AI_process+0x76>
 800d040:	4b2d      	ldr	r3, [pc, #180]	; (800d0f8 <prj_AI_process+0x12c>)
 800d042:	4619      	mov	r1, r3
 800d044:	482d      	ldr	r0, [pc, #180]	; (800d0fc <prj_AI_process+0x130>)
 800d046:	f003 ff7b 	bl	8010f40 <iprintf>
    	printf("\r\nProcessing the IA...");
 800d04a:	482d      	ldr	r0, [pc, #180]	; (800d100 <prj_AI_process+0x134>)
 800d04c:	f003 ff78 	bl	8010f40 <iprintf>
    	int res = ai_mnetwork_run(net_exec_ctx[0].network, &input, &output);
 800d050:	4b26      	ldr	r3, [pc, #152]	; (800d0ec <prj_AI_process+0x120>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f107 0218 	add.w	r2, r7, #24
 800d058:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 fa43 	bl	800d4e8 <ai_mnetwork_run>
 800d062:	64b8      	str	r0, [r7, #72]	; 0x48
    	printf("\r\nProcessing complete! %s", res ? "Everything went fine!" : "Something wrong happened.");
 800d064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <prj_AI_process+0xa2>
 800d06a:	4b26      	ldr	r3, [pc, #152]	; (800d104 <prj_AI_process+0x138>)
 800d06c:	e000      	b.n	800d070 <prj_AI_process+0xa4>
 800d06e:	4b26      	ldr	r3, [pc, #152]	; (800d108 <prj_AI_process+0x13c>)
 800d070:	4619      	mov	r1, r3
 800d072:	4826      	ldr	r0, [pc, #152]	; (800d10c <prj_AI_process+0x140>)
 800d074:	f003 ff64 	bl	8010f40 <iprintf>
    	if (!res) {
 800d078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d111      	bne.n	800d0a2 <prj_AI_process+0xd6>
    		ai_error errors = ai_mnetwork_get_error(net_exec_ctx[0].network);
 800d07e:	4b1b      	ldr	r3, [pc, #108]	; (800d0ec <prj_AI_process+0x120>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4618      	mov	r0, r3
 800d084:	f000 f9bf 	bl	800d406 <ai_mnetwork_get_error>
 800d088:	4603      	mov	r3, r0
 800d08a:	617b      	str	r3, [r7, #20]
    		printf("\t\r\nError - type: 0x%02X, code: 0x%02X", errors.type, errors.code);
 800d08c:	7d3b      	ldrb	r3, [r7, #20]
 800d08e:	4619      	mov	r1, r3
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d096:	461a      	mov	r2, r3
 800d098:	481d      	ldr	r0, [pc, #116]	; (800d110 <prj_AI_process+0x144>)
 800d09a:	f003 ff51 	bl	8010f40 <iprintf>
    		return false;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e01d      	b.n	800d0de <prj_AI_process+0x112>
    	}
    	printf("\r\nOutput:");
 800d0a2:	481c      	ldr	r0, [pc, #112]	; (800d114 <prj_AI_process+0x148>)
 800d0a4:	f003 ff4c 	bl	8010f40 <iprintf>
    	for (int i = 0; i < prj_AI_OUTPUT_NUMBER; i++) {
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0ac:	e010      	b.n	800d0d0 <prj_AI_process+0x104>
    		printf("\t\r\ndense_%d: %f", i, p_output[0][0][i]);
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	edd3 7a00 	vldr	s15, [r3]
 800d0ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0be:	ec53 2b17 	vmov	r2, r3, d7
 800d0c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d0c4:	4814      	ldr	r0, [pc, #80]	; (800d118 <prj_AI_process+0x14c>)
 800d0c6:	f003 ff3b 	bl	8010f40 <iprintf>
    	for (int i = 0; i < prj_AI_OUTPUT_NUMBER; i++) {
 800d0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	ddeb      	ble.n	800d0ae <prj_AI_process+0xe2>
    	}
    	printf("\r\n\r\nEnd of prj_AI_process messages.\r\n");
 800d0d6:	4811      	ldr	r0, [pc, #68]	; (800d11c <prj_AI_process+0x150>)
 800d0d8:	f003 ffa6 	bl	8011028 <puts>
    }

    return true;
 800d0dc:	2301      	movs	r3, #1
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3750      	adds	r7, #80	; 0x50
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	01821040 	.word	0x01821040
 800d0ec:	20000960 	.word	0x20000960
 800d0f0:	08016040 	.word	0x08016040
 800d0f4:	08016064 	.word	0x08016064
 800d0f8:	0801606c 	.word	0x0801606c
 800d0fc:	08016074 	.word	0x08016074
 800d100:	08016094 	.word	0x08016094
 800d104:	080160ac 	.word	0x080160ac
 800d108:	080160c4 	.word	0x080160c4
 800d10c:	080160e0 	.word	0x080160e0
 800d110:	080160fc 	.word	0x080160fc
 800d114:	08016124 	.word	0x08016124
 800d118:	08016130 	.word	0x08016130
 800d11c:	08016140 	.word	0x08016140

0800d120 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800d124:	f7fa fd24 	bl	8007b70 <MX_USART3_UART_Init>
    aiValidationInit();
 800d128:	f7ff ff32 	bl	800cf90 <aiValidationInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 800d12c:	bf00      	nop
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 800d130:	b590      	push	{r4, r7, lr}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01d      	beq.n	800d17c <ai_mnetwork_is_valid+0x4c>
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4618      	mov	r0, r3
 800d146:	f7f9 fe8e 	bl	8006e66 <strlen>
 800d14a:	4604      	mov	r4, r0
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7f9 fe8a 	bl	8006e66 <strlen>
 800d152:	4603      	mov	r3, r0
 800d154:	429c      	cmp	r4, r3
 800d156:	d111      	bne.n	800d17c <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681c      	ldr	r4, [r3, #0]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f7f9 fe80 	bl	8006e66 <strlen>
 800d166:	4603      	mov	r3, r0
 800d168:	461a      	mov	r2, r3
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	4620      	mov	r0, r4
 800d16e:	f003 ff7b 	bl	8011068 <strncmp>
 800d172:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <ai_mnetwork_is_valid+0x4c>
        return true;
 800d178:	2301      	movs	r3, #1
 800d17a:	e000      	b.n	800d17e <ai_mnetwork_is_valid+0x4e>
    return false;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	bd90      	pop	{r4, r7, pc}
	...

0800d188 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d190:	2300      	movs	r3, #0
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	e026      	b.n	800d1e4 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <ai_mnetwork_handle+0x2c>
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	1a9b      	subs	r3, r3, r2
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	4a14      	ldr	r2, [pc, #80]	; (800d1f8 <ai_mnetwork_handle+0x70>)
 800d1a8:	4413      	add	r3, r2
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d101      	bne.n	800d1b4 <ai_mnetwork_handle+0x2c>
            return inst;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	e01b      	b.n	800d1ec <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d111      	bne.n	800d1de <ai_mnetwork_handle+0x56>
 800d1ba:	490f      	ldr	r1, [pc, #60]	; (800d1f8 <ai_mnetwork_handle+0x70>)
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	00db      	lsls	r3, r3, #3
 800d1c6:	440b      	add	r3, r1
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d107      	bne.n	800d1de <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	4a07      	ldr	r2, [pc, #28]	; (800d1f8 <ai_mnetwork_handle+0x70>)
 800d1da:	4413      	add	r3, r2
 800d1dc:	e006      	b.n	800d1ec <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	ddd5      	ble.n	800d196 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	20000b18 	.word	0x20000b18

0800d1fc <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d204:	2300      	movs	r3, #0
 800d206:	60fb      	str	r3, [r7, #12]
 800d208:	e019      	b.n	800d23e <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d013      	beq.n	800d238 <ai_mnetwork_release_handle+0x3c>
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	4613      	mov	r3, r2
 800d214:	00db      	lsls	r3, r3, #3
 800d216:	1a9b      	subs	r3, r3, r2
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	4a0d      	ldr	r2, [pc, #52]	; (800d250 <ai_mnetwork_release_handle+0x54>)
 800d21c:	4413      	add	r3, r2
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	429a      	cmp	r2, r3
 800d222:	d109      	bne.n	800d238 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 800d224:	490a      	ldr	r1, [pc, #40]	; (800d250 <ai_mnetwork_release_handle+0x54>)
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	4613      	mov	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	1a9b      	subs	r3, r3, r2
 800d22e:	00db      	lsls	r3, r3, #3
 800d230:	440b      	add	r3, r1
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
            return;
 800d236:	e005      	b.n	800d244 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	3301      	adds	r3, #1
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	dde2      	ble.n	800d20a <ai_mnetwork_release_handle+0xe>
        }
    }
}
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	20000b18 	.word	0x20000b18

0800d254 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d25e:	2300      	movs	r3, #0
 800d260:	60fb      	str	r3, [r7, #12]
 800d262:	e01c      	b.n	800d29e <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	4613      	mov	r3, r2
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	4413      	add	r3, r2
 800d26c:	015b      	lsls	r3, r3, #5
 800d26e:	4a10      	ldr	r2, [pc, #64]	; (800d2b0 <ai_mnetwork_find+0x5c>)
 800d270:	4413      	add	r3, r2
 800d272:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff ff5a 	bl	800d130 <ai_mnetwork_is_valid>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <ai_mnetwork_find+0x34>
            return entry->name;
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	e00e      	b.n	800d2a6 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	1e5a      	subs	r2, r3, #1
 800d28c:	603a      	str	r2, [r7, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d102      	bne.n	800d298 <ai_mnetwork_find+0x44>
                return entry->name;
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	e006      	b.n	800d2a6 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	3301      	adds	r3, #1
 800d29c:	60fb      	str	r3, [r7, #12]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dddf      	ble.n	800d264 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	080164cc 	.word	0x080164cc

0800d2b4 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08a      	sub	sp, #40	; 0x28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	f7ff ff5f 	bl	800d188 <ai_mnetwork_handle>
 800d2ca:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d108      	bne.n	800d2e4 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 800d2d2:	2331      	movs	r3, #49	; 0x31
 800d2d4:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2210      	movs	r2, #16
 800d2da:	f362 231f 	bfi	r3, r2, #8, #24
 800d2de:	617b      	str	r3, [r7, #20]
        return err;
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	e04d      	b.n	800d380 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	623b      	str	r3, [r7, #32]
 800d2e8:	e014      	b.n	800d314 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800d2ea:	6a3a      	ldr	r2, [r7, #32]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	005b      	lsls	r3, r3, #1
 800d2f0:	4413      	add	r3, r2
 800d2f2:	015b      	lsls	r3, r3, #5
 800d2f4:	4a24      	ldr	r2, [pc, #144]	; (800d388 <ai_mnetwork_create+0xd4>)
 800d2f6:	4413      	add	r3, r2
 800d2f8:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800d2fa:	69b9      	ldr	r1, [r7, #24]
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7ff ff17 	bl	800d130 <ai_mnetwork_is_valid>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <ai_mnetwork_create+0x5a>
            found = entry;
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d30c:	e005      	b.n	800d31a <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	3301      	adds	r3, #1
 800d312:	623b      	str	r3, [r7, #32]
 800d314:	6a3b      	ldr	r3, [r7, #32]
 800d316:	2b00      	cmp	r3, #0
 800d318:	dde7      	ble.n	800d2ea <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d108      	bne.n	800d332 <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 800d320:	2314      	movs	r3, #20
 800d322:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2210      	movs	r2, #16
 800d328:	f362 231f 	bfi	r3, r2, #8, #24
 800d32c:	617b      	str	r3, [r7, #20]
        return err;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	e026      	b.n	800d380 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d109      	bne.n	800d34c <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d33e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d340:	4611      	mov	r1, r2
 800d342:	68b8      	ldr	r0, [r7, #8]
 800d344:	4798      	blx	r3
 800d346:	4603      	mov	r3, r0
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	e006      	b.n	800d35a <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	68b8      	ldr	r0, [r7, #8]
 800d354:	4798      	blx	r3
 800d356:	4603      	mov	r3, r0
 800d358:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10c      	bne.n	800d37e <ai_mnetwork_create+0xca>
 800d364:	7d3b      	ldrb	r3, [r7, #20]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d109      	bne.n	800d37e <ai_mnetwork_create+0xca>
        inst->entry = found;
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d36e:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	69fa      	ldr	r2, [r7, #28]
 800d37c:	601a      	str	r2, [r3, #0]
    }

    return err;
 800d37e:	697b      	ldr	r3, [r7, #20]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3728      	adds	r7, #40	; 0x28
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	080164cc 	.word	0x080164cc

0800d38c <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff fef7 	bl	800d188 <ai_mnetwork_handle>
 800d39a:	60f8      	str	r0, [r7, #12]
    if (inn) {
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d011      	beq.n	800d3c6 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	6852      	ldr	r2, [r2, #4]
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	4798      	blx	r3
 800d3b0:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d004      	beq.n	800d3c6 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7ff ff1d 	bl	800d1fc <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 800d3c6:	687b      	ldr	r3, [r7, #4]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff fed4 	bl	800d188 <ai_mnetwork_handle>
 800d3e0:	60f8      	str	r0, [r7, #12]
    if (inn)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d009      	beq.n	800d3fc <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	6852      	ldr	r2, [r2, #4]
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	4798      	blx	r3
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	e000      	b.n	800d3fe <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800d40e:	2314      	movs	r3, #20
 800d410:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	2210      	movs	r2, #16
 800d416:	f362 231f 	bfi	r3, r2, #8, #24
 800d41a:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff feb3 	bl	800d188 <ai_mnetwork_handle>
 800d422:	60f8      	str	r0, [r7, #12]
    if (inn)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d008      	beq.n	800d43c <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	6852      	ldr	r2, [r2, #4]
 800d434:	4610      	mov	r0, r2
 800d436:	4798      	blx	r3
 800d438:	4603      	mov	r3, r0
 800d43a:	e000      	b.n	800d43e <ai_mnetwork_get_error+0x38>
    else
        return err;
 800d43c:	68bb      	ldr	r3, [r7, #8]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 800d446:	b5b0      	push	{r4, r5, r7, lr}
 800d448:	b090      	sub	sp, #64	; 0x40
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
 800d44e:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff fe99 	bl	800d188 <ai_mnetwork_handle>
 800d456:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 800d458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d03f      	beq.n	800d4de <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 800d45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f107 040c 	add.w	r4, r7, #12
 800d466:	1d1d      	adds	r5, r3, #4
 800d468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d470:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	8b9b      	ldrh	r3, [r3, #28]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00b      	beq.n	800d498 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800d486:	f103 0518 	add.w	r5, r3, #24
 800d48a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d48c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d48e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d492:	e884 0003 	stmia.w	r4, {r0, r1}
 800d496:	e002      	b.n	800d49e <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	889b      	ldrh	r3, [r3, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00a      	beq.n	800d4bc <ai_mnetwork_init+0x76>
            par.params = params->params;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	f107 040c 	add.w	r4, r7, #12
 800d4ac:	461d      	mov	r5, r3
 800d4ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d4b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800d4ba:	e005      	b.n	800d4c8 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 800d4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	4798      	blx	r3
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 800d4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4d0:	6852      	ldr	r2, [r2, #4]
 800d4d2:	f107 010c 	add.w	r1, r7, #12
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	4798      	blx	r3
 800d4da:	4603      	mov	r3, r0
 800d4dc:	e000      	b.n	800d4e0 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3740      	adds	r7, #64	; 0x40
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bdb0      	pop	{r4, r5, r7, pc}

0800d4e8 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff fe47 	bl	800d188 <ai_mnetwork_handle>
 800d4fa:	6178      	str	r0, [r7, #20]
    if (inn)
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d009      	beq.n	800d516 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	6850      	ldr	r0, [r2, #4]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	4798      	blx	r3
 800d512:	4603      	mov	r3, r0
 800d514:	e000      	b.n	800d518 <ai_mnetwork_run+0x30>
    else
        return 0;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 800d520:	b5b0      	push	{r4, r5, r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7ff fe2b 	bl	800d188 <ai_mnetwork_handle>
 800d532:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d018      	beq.n	800d56c <ai_mnetwork_get_private_handle+0x4c>
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d015      	beq.n	800d56c <ai_mnetwork_get_private_handle+0x4c>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d012      	beq.n	800d56c <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	4615      	mov	r5, r2
 800d554:	f103 0408 	add.w	r4, r3, #8
 800d558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d55a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d55c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d55e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d560:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d564:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 800d568:	2300      	movs	r3, #0
 800d56a:	e001      	b.n	800d570 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 800d56c:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800d570:	4618      	mov	r0, r3
 800d572:	3718      	adds	r7, #24
 800d574:	46bd      	mov	sp, r7
 800d576:	bdb0      	pop	{r4, r5, r7, pc}

0800d578 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff fdff 	bl	800d188 <ai_mnetwork_handle>
 800d58a:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d011      	beq.n	800d5b6 <ai_mnetwork_get_ext_data_activations+0x3e>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00e      	beq.n	800d5b6 <ai_mnetwork_get_ext_data_activations+0x3e>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00b      	beq.n	800d5b6 <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	601a      	str	r2, [r3, #0]
         return 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	e001      	b.n	800d5ba <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 800d5b6:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3718      	adds	r7, #24
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	3303      	adds	r3, #3
 800d5d4:	f023 0303 	bic.w	r3, r3, #3
 800d5d8:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800d5da:	4b1a      	ldr	r3, [pc, #104]	; (800d644 <network_configure_activations+0x80>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800d5e0:	4b18      	ldr	r3, [pc, #96]	; (800d644 <network_configure_activations+0x80>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800d5e6:	4a18      	ldr	r2, [pc, #96]	; (800d648 <network_configure_activations+0x84>)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800d5ec:	4a16      	ldr	r2, [pc, #88]	; (800d648 <network_configure_activations+0x84>)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800d5f2:	4a16      	ldr	r2, [pc, #88]	; (800d64c <network_configure_activations+0x88>)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800d5f8:	4a14      	ldr	r2, [pc, #80]	; (800d64c <network_configure_activations+0x88>)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 96);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3360      	adds	r3, #96	; 0x60
 800d602:	4a13      	ldr	r2, [pc, #76]	; (800d650 <network_configure_activations+0x8c>)
 800d604:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 96);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	3360      	adds	r3, #96	; 0x60
 800d60a:	4a11      	ldr	r2, [pc, #68]	; (800d650 <network_configure_activations+0x8c>)
 800d60c:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 96);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3360      	adds	r3, #96	; 0x60
 800d612:	4a10      	ldr	r2, [pc, #64]	; (800d654 <network_configure_activations+0x90>)
 800d614:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 96);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3360      	adds	r3, #96	; 0x60
 800d61a:	4a0e      	ldr	r2, [pc, #56]	; (800d654 <network_configure_activations+0x90>)
 800d61c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 800d61e:	4a0e      	ldr	r2, [pc, #56]	; (800d658 <network_configure_activations+0x94>)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 800d624:	4a0c      	ldr	r2, [pc, #48]	; (800d658 <network_configure_activations+0x94>)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 800d62a:	4b0c      	ldr	r3, [pc, #48]	; (800d65c <network_configure_activations+0x98>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 800d630:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <network_configure_activations+0x98>)
 800d632:	2200      	movs	r2, #0
 800d634:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800d636:	2301      	movs	r3, #1
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr
 800d644:	20000110 	.word	0x20000110
 800d648:	20000120 	.word	0x20000120
 800d64c:	20000130 	.word	0x20000130
 800d650:	20000140 	.word	0x20000140
 800d654:	20000150 	.word	0x20000150
 800d658:	20000160 	.word	0x20000160
 800d65c:	20000170 	.word	0x20000170

0800d660 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800d670:	4b31      	ldr	r3, [pc, #196]	; (800d738 <network_configure_weights+0xd8>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d678:	4a2f      	ldr	r2, [pc, #188]	; (800d738 <network_configure_weights+0xd8>)
 800d67a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 2096);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800d682:	4a2d      	ldr	r2, [pc, #180]	; (800d738 <network_configure_weights+0xd8>)
 800d684:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 2096);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800d68c:	4a2a      	ldr	r2, [pc, #168]	; (800d738 <network_configure_weights+0xd8>)
 800d68e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800d690:	4b2a      	ldr	r3, [pc, #168]	; (800d73c <network_configure_weights+0xdc>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d698:	4a28      	ldr	r2, [pc, #160]	; (800d73c <network_configure_weights+0xdc>)
 800d69a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1808);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800d6a2:	4a26      	ldr	r2, [pc, #152]	; (800d73c <network_configure_weights+0xdc>)
 800d6a4:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1808);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800d6ac:	4a23      	ldr	r2, [pc, #140]	; (800d73c <network_configure_weights+0xdc>)
 800d6ae:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800d6b0:	4b23      	ldr	r3, [pc, #140]	; (800d740 <network_configure_weights+0xe0>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6b8:	4a21      	ldr	r2, [pc, #132]	; (800d740 <network_configure_weights+0xe0>)
 800d6ba:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1712);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 800d6c2:	4a1f      	ldr	r2, [pc, #124]	; (800d740 <network_configure_weights+0xe0>)
 800d6c4:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1712);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 800d6cc:	4a1c      	ldr	r2, [pc, #112]	; (800d740 <network_configure_weights+0xe0>)
 800d6ce:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800d6d0:	4b1c      	ldr	r3, [pc, #112]	; (800d744 <network_configure_weights+0xe4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6d8:	4a1a      	ldr	r2, [pc, #104]	; (800d744 <network_configure_weights+0xe4>)
 800d6da:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 1424);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800d6e2:	4a18      	ldr	r2, [pc, #96]	; (800d744 <network_configure_weights+0xe4>)
 800d6e4:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 1360);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800d6ec:	4a15      	ldr	r2, [pc, #84]	; (800d744 <network_configure_weights+0xe4>)
 800d6ee:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800d6f0:	4b15      	ldr	r3, [pc, #84]	; (800d748 <network_configure_weights+0xe8>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6f8:	4a13      	ldr	r2, [pc, #76]	; (800d748 <network_configure_weights+0xe8>)
 800d6fa:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 1264);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800d702:	4a11      	ldr	r2, [pc, #68]	; (800d748 <network_configure_weights+0xe8>)
 800d704:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 1264);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800d70c:	4a0e      	ldr	r2, [pc, #56]	; (800d748 <network_configure_weights+0xe8>)
 800d70e:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800d710:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <network_configure_weights+0xec>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d718:	4a0c      	ldr	r2, [pc, #48]	; (800d74c <network_configure_weights+0xec>)
 800d71a:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 64);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3340      	adds	r3, #64	; 0x40
 800d720:	4a0a      	ldr	r2, [pc, #40]	; (800d74c <network_configure_weights+0xec>)
 800d722:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800d724:	4a09      	ldr	r2, [pc, #36]	; (800d74c <network_configure_weights+0xec>)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800d72a:	2301      	movs	r3, #1
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	200000b0 	.word	0x200000b0
 800d73c:	200000c0 	.word	0x200000c0
 800d740:	200000d0 	.word	0x200000d0
 800d744:	200000e0 	.word	0x200000e0
 800d748:	200000f0 	.word	0x200000f0
 800d74c:	20000100 	.word	0x20000100

0800d750 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b0a0      	sub	sp, #128	; 0x80
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7f3 f8e1 	bl	8000922 <ai_platform_context_acquire>
 800d760:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d047      	beq.n	800d7f8 <ai_network_get_info+0xa8>
 800d768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d044      	beq.n	800d7f8 <ai_network_get_info+0xa8>
  {
    ai_network_report r = {
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	2274      	movs	r2, #116	; 0x74
 800d774:	2100      	movs	r1, #0
 800d776:	4618      	mov	r0, r3
 800d778:	f002 fef8 	bl	801056c <memset>
 800d77c:	4b21      	ldr	r3, [pc, #132]	; (800d804 <ai_network_get_info+0xb4>)
 800d77e:	60bb      	str	r3, [r7, #8]
 800d780:	4b21      	ldr	r3, [pc, #132]	; (800d808 <ai_network_get_info+0xb8>)
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	4b21      	ldr	r3, [pc, #132]	; (800d80c <ai_network_get_info+0xbc>)
 800d786:	613b      	str	r3, [r7, #16]
 800d788:	4b21      	ldr	r3, [pc, #132]	; (800d810 <ai_network_get_info+0xc0>)
 800d78a:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800d78c:	f7f2 ff8f 	bl	80006ae <ai_platform_runtime_get_revision>
 800d790:	4603      	mov	r3, r0
    ai_network_report r = {
 800d792:	61bb      	str	r3, [r7, #24]
 800d794:	f7f2 ffd8 	bl	8000748 <ai_platform_runtime_get_version>
 800d798:	4603      	mov	r3, r0
 800d79a:	61fb      	str	r3, [r7, #28]
 800d79c:	4b1d      	ldr	r3, [pc, #116]	; (800d814 <ai_network_get_info+0xc4>)
 800d79e:	623b      	str	r3, [r7, #32]
 800d7a0:	2305      	movs	r3, #5
 800d7a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800d7b2:	f7f3 f818 	bl	80007e6 <ai_platform_api_get_version>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7ba:	f7f3 f863 	bl	8000884 <ai_platform_interface_api_get_version>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800d7c2:	f640 4336 	movw	r3, #3126	; 0xc36
 800d7c6:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 800d7c8:	f107 0308 	add.w	r3, r7, #8
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7f3 f965 	bl	8000a9e <ai_platform_api_get_network_report>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	f083 0301 	eor.w	r3, r3, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <ai_network_get_info+0x94>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	e00a      	b.n	800d7fa <ai_network_get_info+0xaa>

    *report = r;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f107 0308 	add.w	r3, r7, #8
 800d7ec:	2274      	movs	r2, #116	; 0x74
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	f002 feb1 	bl	8010556 <memcpy>
    return true;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e000      	b.n	800d7fa <ai_network_get_info+0xaa>
  }

  return false;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3780      	adds	r7, #128	; 0x80
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	08016170 	.word	0x08016170
 800d808:	08016178 	.word	0x08016178
 800d80c:	0801619c 	.word	0x0801619c
 800d810:	080161b8 	.word	0x080161b8
 800d814:	080161d0 	.word	0x080161d0

0800d818 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7f3 f8d9 	bl	80009d8 <ai_platform_network_get_error>
 800d826:	4603      	mov	r3, r0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af02      	add	r7, sp, #8
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800d83a:	2300      	movs	r3, #0
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	2303      	movs	r3, #3
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	2301      	movs	r3, #1
 800d844:	4a04      	ldr	r2, [pc, #16]	; (800d858 <ai_network_create+0x28>)
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7f3 f9e5 	bl	8000c18 <ai_platform_network_create>
 800d84e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20000058 	.word	0x20000058

0800d85c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7f3 fa0d 	bl	8000c84 <ai_platform_network_destroy>
 800d86a:	4603      	mov	r3, r0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7f3 fa4f 	bl	8000d24 <ai_platform_network_init>
 800d886:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <ai_network_init+0x1e>
 800d88e:	2300      	movs	r3, #0
 800d890:	e01f      	b.n	800d8d2 <ai_network_init+0x5e>

  ai_bool ok = true;
 800d892:	2301      	movs	r3, #1
 800d894:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	4619      	mov	r1, r3
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f7ff fee0 	bl	800d660 <network_configure_weights>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	7afb      	ldrb	r3, [r7, #11]
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	bf14      	ite	ne
 800d8ac:	2301      	movne	r3, #1
 800d8ae:	2300      	moveq	r3, #0
 800d8b0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	3318      	adds	r3, #24
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f7ff fe83 	bl	800d5c4 <network_configure_activations>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	7afb      	ldrb	r3, [r7, #11]
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bf14      	ite	ne
 800d8ca:	2301      	movne	r3, #1
 800d8cc:	2300      	moveq	r3, #0
 800d8ce:	72fb      	strb	r3, [r7, #11]

  return ok;
 800d8d0:	7afb      	ldrb	r3, [r7, #11]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b084      	sub	sp, #16
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	60f8      	str	r0, [r7, #12]
 800d8e2:	60b9      	str	r1, [r7, #8]
 800d8e4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7f3 fab2 	bl	8000e54 <ai_platform_network_process>
 800d8f0:	4603      	mov	r3, r0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 800d904:	2200      	movs	r2, #0
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7f3 faa3 	bl	8000e54 <ai_platform_network_process>
 800d90e:	4603      	mov	r3, r0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
    0x32, 0x6b, 0x1d, 0x3f, 0xd7, 0x67, 0xe1, 0x3d, 0x42, 0x4d,
    0x23, 0x3f, 0x64, 0xcb, 0xe2, 0xbe, 0x93, 0xf2, 0x24,
    0x3e, 0x12, 0x74, 0x6b, 0xbe, 0xe3, 0x47, 0xcc, 0xbc
  };

  return AI_HANDLE_PTR(s_network_weights);
 800d91c:	4b02      	ldr	r3, [pc, #8]	; (800d928 <ai_network_data_weights_get+0x10>)

}
 800d91e:	4618      	mov	r0, r3
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	0801655c 	.word	0x0801655c

0800d92c <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	461a      	mov	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	441a      	add	r2, r3
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	6852      	ldr	r2, [r2, #4]
 800d96c:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800d970:	b212      	sxth	r2, r2
 800d972:	441a      	add	r2, r3
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	bf14      	ite	ne
 800d984:	2301      	movne	r3, #1
 800d986:	2300      	moveq	r3, #0
 800d988:	b2db      	uxtb	r3, r3
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e073      	b.n	800da9a <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f103 020f 	add.w	r2, r3, #15
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	881b      	ldrh	r3, [r3, #0]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d109      	bne.n	800d9de <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6819      	ldr	r1, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff ffa9 	bl	800d92c <pb_field_iter_begin>
        return false;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e05d      	b.n	800da9a <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	789b      	ldrb	r3, [r3, #2]
 800d9ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d9f0:	2b30      	cmp	r3, #48	; 0x30
 800d9f2:	d111      	bne.n	800da18 <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	789b      	ldrb	r3, [r3, #2]
 800d9fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800d9fe:	2b30      	cmp	r3, #48	; 0x30
 800da00:	d10a      	bne.n	800da18 <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800da0a:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800da0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da10:	4293      	cmp	r3, r2
 800da12:	d101      	bne.n	800da18 <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 800da14:	2301      	movs	r3, #1
 800da16:	e040      	b.n	800da9a <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	789b      	ldrb	r3, [r3, #2]
 800da1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10f      	bne.n	800da44 <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	789b      	ldrb	r3, [r3, #2]
 800da28:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800da2c:	2b20      	cmp	r3, #32
 800da2e:	d109      	bne.n	800da44 <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800da36:	b29b      	uxth	r3, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	fb02 f303 	mul.w	r3, r2, r3
 800da40:	60fb      	str	r3, [r7, #12]
 800da42:	e007      	b.n	800da54 <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	789b      	ldrb	r3, [r3, #2]
 800da48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800da4c:	2b80      	cmp	r3, #128	; 0x80
 800da4e:	d101      	bne.n	800da54 <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 800da50:	2304      	movs	r3, #4
 800da52:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	789b      	ldrb	r3, [r3, #2]
 800da58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d104      	bne.n	800da6a <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	691a      	ldr	r2, [r3, #16]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800da76:	b29b      	uxth	r3, r3
 800da78:	4619      	mov	r1, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	440b      	add	r3, r1
 800da7e:	441a      	add	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	6852      	ldr	r2, [r2, #4]
 800da8c:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800da90:	b212      	sxth	r2, r2
 800da92:	441a      	add	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	615a      	str	r2, [r3, #20]
        return true;
 800da98:	2301      	movs	r3, #1
    }
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	461a      	mov	r2, r3
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d108      	bne.n	800dad4 <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	789b      	ldrb	r3, [r3, #2]
 800dac8:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 800dacc:	2b08      	cmp	r3, #8
 800dace:	d001      	beq.n	800dad4 <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 800dad0:	2301      	movs	r3, #1
 800dad2:	e008      	b.n	800dae6 <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff ff5e 	bl	800d996 <pb_field_iter_next>
    } while (iter->pos != start);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d1e6      	bne.n	800dab2 <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800daee:	b480      	push	{r7}
 800daf0:	b087      	sub	sp, #28
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	60f8      	str	r0, [r7, #12]
 800daf6:	60b9      	str	r1, [r7, #8]
 800daf8:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	685a      	ldr	r2, [r3, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	441a      	add	r2, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d011      	beq.n	800db36 <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 800db12:	2300      	movs	r3, #0
 800db14:	617b      	str	r3, [r7, #20]
 800db16:	e00a      	b.n	800db2e <buf_read+0x40>
            buf[i] = source[i];
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	441a      	add	r2, r3
 800db1e:	68b9      	ldr	r1, [r7, #8]
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	440b      	add	r3, r1
 800db24:	7812      	ldrb	r2, [r2, #0]
 800db26:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	3301      	adds	r3, #1
 800db2c:	617b      	str	r3, [r7, #20]
 800db2e:	697a      	ldr	r2, [r7, #20]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	429a      	cmp	r2, r3
 800db34:	d3f0      	bcc.n	800db18 <buf_read+0x2a>
    }
    
    return true;
 800db36:	2301      	movs	r3, #1
}
 800db38:	4618      	mov	r0, r3
 800db3a:	371c      	adds	r7, #28
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b088      	sub	sp, #32
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d123      	bne.n	800db9e <pb_read+0x5a>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a2b      	ldr	r2, [pc, #172]	; (800dc08 <pb_read+0xc4>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d01e      	beq.n	800db9e <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800db60:	e011      	b.n	800db86 <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 800db62:	f107 0310 	add.w	r3, r7, #16
 800db66:	2210      	movs	r2, #16
 800db68:	4619      	mov	r1, r3
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f7ff ffea 	bl	800db44 <pb_read>
 800db70:	4603      	mov	r3, r0
 800db72:	f083 0301 	eor.w	r3, r3, #1
 800db76:	b2db      	uxtb	r3, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d001      	beq.n	800db80 <pb_read+0x3c>
				return false;
 800db7c:	2300      	movs	r3, #0
 800db7e:	e03e      	b.n	800dbfe <pb_read+0xba>
			
			count -= 16;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3b10      	subs	r3, #16
 800db84:	607b      	str	r3, [r7, #4]
		while (count > 16)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2b10      	cmp	r3, #16
 800db8a:	d8ea      	bhi.n	800db62 <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 800db8c:	f107 0310 	add.w	r3, r7, #16
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	4619      	mov	r1, r3
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7ff ffd5 	bl	800db44 <pb_read>
 800db9a:	4603      	mov	r3, r0
 800db9c:	e02f      	b.n	800dbfe <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d90b      	bls.n	800dbc0 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <pb_read+0x72>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	e000      	b.n	800dbb8 <pb_read+0x74>
 800dbb6:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <pb_read+0xc8>)
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	60d3      	str	r3, [r2, #12]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	e01e      	b.n	800dbfe <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	4798      	blx	r3
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f083 0301 	eor.w	r3, r3, #1
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00b      	beq.n	800dbf0 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <pb_read+0xa2>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	e000      	b.n	800dbe8 <pb_read+0xa4>
 800dbe6:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <pb_read+0xcc>)
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	60d3      	str	r3, [r2, #12]
 800dbec:	2300      	movs	r3, #0
 800dbee:	e006      	b.n	800dbfe <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	689a      	ldr	r2, [r3, #8]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	1ad2      	subs	r2, r2, r3
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	609a      	str	r2, [r3, #8]
    return true;
 800dbfc:	2301      	movs	r3, #1
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3720      	adds	r7, #32
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	0800daef 	.word	0x0800daef
 800dc0c:	080161dc 	.word	0x080161dc
 800dc10:	080161ec 	.word	0x080161ec

0800dc14 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10b      	bne.n	800dc3e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <pb_readbyte+0x20>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	e000      	b.n	800dc36 <pb_readbyte+0x22>
 800dc34:	4b13      	ldr	r3, [pc, #76]	; (800dc84 <pb_readbyte+0x70>)
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	60d3      	str	r3, [r2, #12]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	e01d      	b.n	800dc7a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2201      	movs	r2, #1
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	4798      	blx	r3
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f083 0301 	eor.w	r3, r3, #1
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <pb_readbyte+0x50>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	e000      	b.n	800dc66 <pb_readbyte+0x52>
 800dc64:	4b08      	ldr	r3, [pc, #32]	; (800dc88 <pb_readbyte+0x74>)
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	60d3      	str	r3, [r2, #12]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e005      	b.n	800dc7a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	1e5a      	subs	r2, r3, #1
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	609a      	str	r2, [r3, #8]
    
    return true;    
 800dc78:	2301      	movs	r3, #1
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	080161dc 	.word	0x080161dc
 800dc88:	080161ec 	.word	0x080161ec

0800dc8c <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 800dc8c:	b490      	push	{r4, r7}
 800dc8e:	b08a      	sub	sp, #40	; 0x28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800dc98:	4b0a      	ldr	r3, [pc, #40]	; (800dcc4 <pb_istream_from_buffer+0x38>)
 800dc9a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	461c      	mov	r4, r3
 800dcb0:	f107 0318 	add.w	r3, r7, #24
 800dcb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	3728      	adds	r7, #40	; 0x28
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bc90      	pop	{r4, r7}
 800dcc2:	4770      	bx	lr
 800dcc4:	0800daef 	.word	0x0800daef

0800dcc8 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800dcd4:	f107 0316 	add.w	r3, r7, #22
 800dcd8:	4619      	mov	r1, r3
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7ff ff9a 	bl	800dc14 <pb_readbyte>
 800dce0:	4603      	mov	r3, r0
 800dce2:	f083 0301 	eor.w	r3, r3, #1
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00b      	beq.n	800dd04 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d105      	bne.n	800dd00 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 800dd00:	2300      	movs	r3, #0
 800dd02:	e064      	b.n	800ddce <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 800dd04:	7dbb      	ldrb	r3, [r7, #22]
 800dd06:	b25b      	sxtb	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	db02      	blt.n	800dd12 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800dd0c:	7dbb      	ldrb	r3, [r7, #22]
 800dd0e:	61fb      	str	r3, [r7, #28]
 800dd10:	e059      	b.n	800ddc6 <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800dd12:	2307      	movs	r3, #7
 800dd14:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800dd16:	7dbb      	ldrb	r3, [r7, #22]
 800dd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd1c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800dd1e:	f107 0316 	add.w	r3, r7, #22
 800dd22:	4619      	mov	r1, r3
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff ff75 	bl	800dc14 <pb_readbyte>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	f083 0301 	eor.w	r3, r3, #1
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <pb_decode_varint32_eof+0x72>
                return false;
 800dd36:	2300      	movs	r3, #0
 800dd38:	e049      	b.n	800ddce <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	2b1f      	cmp	r3, #31
 800dd3e:	d91e      	bls.n	800dd7e <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	2b3e      	cmp	r3, #62	; 0x3e
 800dd44:	d801      	bhi.n	800dd4a <pb_decode_varint32_eof+0x82>
 800dd46:	23ff      	movs	r3, #255	; 0xff
 800dd48:	e000      	b.n	800dd4c <pb_decode_varint32_eof+0x84>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800dd4e:	7dbb      	ldrb	r3, [r7, #22]
 800dd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d01b      	beq.n	800dd90 <pb_decode_varint32_eof+0xc8>
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	da03      	bge.n	800dd66 <pb_decode_varint32_eof+0x9e>
 800dd5e:	7dbb      	ldrb	r3, [r7, #22]
 800dd60:	7dfa      	ldrb	r2, [r7, #23]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d014      	beq.n	800dd90 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <pb_decode_varint32_eof+0xac>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	e000      	b.n	800dd76 <pb_decode_varint32_eof+0xae>
 800dd74:	4b18      	ldr	r3, [pc, #96]	; (800ddd8 <pb_decode_varint32_eof+0x110>)
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	60d3      	str	r3, [r2, #12]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e027      	b.n	800ddce <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800dd7e:	7dbb      	ldrb	r3, [r7, #22]
 800dd80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	fa02 f303 	lsl.w	r3, r2, r3
 800dd8a:	69fa      	ldr	r2, [r7, #28]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	3307      	adds	r3, #7
 800dd94:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800dd96:	7dbb      	ldrb	r3, [r7, #22]
 800dd98:	b25b      	sxtb	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	dbbf      	blt.n	800dd1e <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	2b23      	cmp	r3, #35	; 0x23
 800dda2:	d110      	bne.n	800ddc6 <pb_decode_varint32_eof+0xfe>
 800dda4:	7dbb      	ldrb	r3, [r7, #22]
 800dda6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00b      	beq.n	800ddc6 <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <pb_decode_varint32_eof+0xf4>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	e000      	b.n	800ddbe <pb_decode_varint32_eof+0xf6>
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <pb_decode_varint32_eof+0x110>)
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	60d3      	str	r3, [r2, #12]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e003      	b.n	800ddce <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	69fa      	ldr	r2, [r7, #28]
 800ddca:	601a      	str	r2, [r3, #0]
   return true;
 800ddcc:	2301      	movs	r3, #1
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3720      	adds	r7, #32
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	080161f8 	.word	0x080161f8

0800dddc <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800dde6:	2200      	movs	r2, #0
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff ff6c 	bl	800dcc8 <pb_decode_varint32_eof>
 800ddf0:	4603      	mov	r3, r0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
	...

0800ddfc <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800ddfc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800de00:	b088      	sub	sp, #32
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 800de0c:	f04f 0200 	mov.w	r2, #0
 800de10:	f04f 0300 	mov.w	r3, #0
 800de14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	2b3f      	cmp	r3, #63	; 0x3f
 800de1c:	d90b      	bls.n	800de36 <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d002      	beq.n	800de2c <pb_decode_varint+0x30>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	e000      	b.n	800de2e <pb_decode_varint+0x32>
 800de2c:	4b23      	ldr	r3, [pc, #140]	; (800debc <pb_decode_varint+0xc0>)
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	60d3      	str	r3, [r2, #12]
 800de32:	2300      	movs	r3, #0
 800de34:	e03d      	b.n	800deb2 <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 800de36:	f107 030f 	add.w	r3, r7, #15
 800de3a:	4619      	mov	r1, r3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff fee9 	bl	800dc14 <pb_readbyte>
 800de42:	4603      	mov	r3, r0
 800de44:	f083 0301 	eor.w	r3, r3, #1
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <pb_decode_varint+0x56>
            return false;
 800de4e:	2300      	movs	r3, #0
 800de50:	e02f      	b.n	800deb2 <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	b2da      	uxtb	r2, r3
 800de56:	f04f 0300 	mov.w	r3, #0
 800de5a:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800de5e:	f04f 0100 	mov.w	r1, #0
 800de62:	ea02 0b00 	and.w	fp, r2, r0
 800de66:	ea03 0c01 	and.w	ip, r3, r1
 800de6a:	69f9      	ldr	r1, [r7, #28]
 800de6c:	f1a1 0620 	sub.w	r6, r1, #32
 800de70:	f1c1 0020 	rsb	r0, r1, #32
 800de74:	fa0c f501 	lsl.w	r5, ip, r1
 800de78:	fa0b f606 	lsl.w	r6, fp, r6
 800de7c:	4335      	orrs	r5, r6
 800de7e:	fa2b f000 	lsr.w	r0, fp, r0
 800de82:	4305      	orrs	r5, r0
 800de84:	fa0b f401 	lsl.w	r4, fp, r1
 800de88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de8c:	ea42 0004 	orr.w	r0, r2, r4
 800de90:	ea43 0105 	orr.w	r1, r3, r5
 800de94:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	3307      	adds	r3, #7
 800de9c:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
 800dea0:	b25b      	sxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	dbb8      	blt.n	800de18 <pb_decode_varint+0x1c>
    
    *dest = result;
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800deac:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 800deb0:	2301      	movs	r3, #1
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3720      	adds	r7, #32
 800deb6:	46bd      	mov	sp, r7
 800deb8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800debc:	080161f8 	.word	0x080161f8

0800dec0 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 800dec8:	f107 030f 	add.w	r3, r7, #15
 800decc:	2201      	movs	r2, #1
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff fe37 	bl	800db44 <pb_read>
 800ded6:	4603      	mov	r3, r0
 800ded8:	f083 0301 	eor.w	r3, r3, #1
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <pb_skip_varint+0x26>
            return false;
 800dee2:	2300      	movs	r3, #0
 800dee4:	e004      	b.n	800def0 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
 800dee8:	b25b      	sxtb	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	dbec      	blt.n	800dec8 <pb_skip_varint+0x8>
    return true;
 800deee:	2301      	movs	r3, #1
}
 800def0:	4618      	mov	r0, r3
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800df00:	f107 030c 	add.w	r3, r7, #12
 800df04:	4619      	mov	r1, r3
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7ff ff68 	bl	800dddc <pb_decode_varint32>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f083 0301 	eor.w	r3, r3, #1
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <pb_skip_string+0x24>
        return false;
 800df18:	2300      	movs	r3, #0
 800df1a:	e006      	b.n	800df2a <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	461a      	mov	r2, r3
 800df20:	2100      	movs	r1, #0
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7ff fe0e 	bl	800db44 <pb_read>
 800df28:	4603      	mov	r3, r0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b086      	sub	sp, #24
 800df36:	af00      	add	r7, sp, #0
 800df38:	60f8      	str	r0, [r7, #12]
 800df3a:	60b9      	str	r1, [r7, #8]
 800df3c:	607a      	str	r2, [r7, #4]
 800df3e:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2200      	movs	r2, #0
 800df44:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2200      	movs	r2, #0
 800df4a:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800df52:	f107 0314 	add.w	r3, r7, #20
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	4619      	mov	r1, r3
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff feb4 	bl	800dcc8 <pb_decode_varint32_eof>
 800df60:	4603      	mov	r3, r0
 800df62:	f083 0301 	eor.w	r3, r3, #1
 800df66:	b2db      	uxtb	r3, r3
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <pb_decode_tag+0x3e>
    {
        return false;
 800df6c:	2300      	movs	r3, #0
 800df6e:	e013      	b.n	800df98 <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d104      	bne.n	800df80 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2201      	movs	r2, #1
 800df7a:	701a      	strb	r2, [r3, #0]
        return false;
 800df7c:	2300      	movs	r3, #0
 800df7e:	e00b      	b.n	800df98 <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	08da      	lsrs	r2, r3, #3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	f003 0307 	and.w	r3, r3, #7
 800df90:	b2da      	uxtb	r2, r3
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	701a      	strb	r2, [r3, #0]
    return true;
 800df96:	2301      	movs	r3, #1
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800dfac:	78fb      	ldrb	r3, [r7, #3]
 800dfae:	2b05      	cmp	r3, #5
 800dfb0:	d826      	bhi.n	800e000 <pb_skip_field+0x60>
 800dfb2:	a201      	add	r2, pc, #4	; (adr r2, 800dfb8 <pb_skip_field+0x18>)
 800dfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb8:	0800dfd1 	.word	0x0800dfd1
 800dfbc:	0800dfdb 	.word	0x0800dfdb
 800dfc0:	0800dfe9 	.word	0x0800dfe9
 800dfc4:	0800e001 	.word	0x0800e001
 800dfc8:	0800e001 	.word	0x0800e001
 800dfcc:	0800dff3 	.word	0x0800dff3
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff ff75 	bl	800dec0 <pb_skip_varint>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	e01d      	b.n	800e016 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800dfda:	2208      	movs	r2, #8
 800dfdc:	2100      	movs	r1, #0
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fdb0 	bl	800db44 <pb_read>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	e016      	b.n	800e016 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f7ff ff85 	bl	800def8 <pb_skip_string>
 800dfee:	4603      	mov	r3, r0
 800dff0:	e011      	b.n	800e016 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800dff2:	2204      	movs	r2, #4
 800dff4:	2100      	movs	r1, #0
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff fda4 	bl	800db44 <pb_read>
 800dffc:	4603      	mov	r3, r0
 800dffe:	e00a      	b.n	800e016 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <pb_skip_field+0x6e>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	e000      	b.n	800e010 <pb_skip_field+0x70>
 800e00e:	4b04      	ldr	r3, [pc, #16]	; (800e020 <pb_skip_field+0x80>)
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	60d3      	str	r3, [r2, #12]
 800e014:	2300      	movs	r3, #0
    }
}
 800e016:	4618      	mov	r0, r3
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	08016208 	.word	0x08016208

0800e024 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	607a      	str	r2, [r7, #4]
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	460b      	mov	r3, r1
 800e032:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800e03a:	7afb      	ldrb	r3, [r7, #11]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d028      	beq.n	800e092 <read_raw_value+0x6e>
 800e040:	2b05      	cmp	r3, #5
 800e042:	d030      	beq.n	800e0a6 <read_raw_value+0x82>
 800e044:	2b00      	cmp	r3, #0
 800e046:	d138      	bne.n	800e0ba <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	2200      	movs	r2, #0
 800e04c:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	697a      	ldr	r2, [r7, #20]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d201      	bcs.n	800e066 <read_raw_value+0x42>
 800e062:	2300      	movs	r3, #0
 800e064:	e034      	b.n	800e0d0 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800e066:	2201      	movs	r2, #1
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7ff fd6a 	bl	800db44 <pb_read>
 800e070:	4603      	mov	r3, r0
 800e072:	f083 0301 	eor.w	r3, r3, #1
 800e076:	b2db      	uxtb	r3, r3
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <read_raw_value+0x5c>
 800e07c:	2300      	movs	r3, #0
 800e07e:	e027      	b.n	800e0d0 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	607a      	str	r2, [r7, #4]
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	b25b      	sxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	dbdf      	blt.n	800e04e <read_raw_value+0x2a>
            return true;
 800e08e:	2301      	movs	r3, #1
 800e090:	e01e      	b.n	800e0d0 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2208      	movs	r2, #8
 800e096:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800e098:	2208      	movs	r2, #8
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff fd51 	bl	800db44 <pb_read>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	e014      	b.n	800e0d0 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	2204      	movs	r2, #4
 800e0aa:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800e0ac:	2204      	movs	r2, #4
 800e0ae:	6879      	ldr	r1, [r7, #4]
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f7ff fd47 	bl	800db44 <pb_read>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	e00a      	b.n	800e0d0 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <read_raw_value+0xa4>
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	e000      	b.n	800e0ca <read_raw_value+0xa6>
 800e0c8:	4b03      	ldr	r3, [pc, #12]	; (800e0d8 <read_raw_value+0xb4>)
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	60d3      	str	r3, [r2, #12]
 800e0ce:	2300      	movs	r3, #0
    }
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	08016208 	.word	0x08016208

0800e0dc <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800e0dc:	b590      	push	{r4, r7, lr}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800e0e6:	f107 030c 	add.w	r3, r7, #12
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7ff fe75 	bl	800dddc <pb_decode_varint32>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	f083 0301 	eor.w	r3, r3, #1
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d001      	beq.n	800e102 <pb_make_string_substream+0x26>
        return false;
 800e0fe:	2300      	movs	r3, #0
 800e100:	e020      	b.n	800e144 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4614      	mov	r4, r2
 800e108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e10a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	689a      	ldr	r2, [r3, #8]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	429a      	cmp	r2, r3
 800e116:	d20b      	bcs.n	800e130 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <pb_make_string_substream+0x4a>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	e000      	b.n	800e128 <pb_make_string_substream+0x4c>
 800e126:	4b09      	ldr	r3, [pc, #36]	; (800e14c <pb_make_string_substream+0x70>)
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	60d3      	str	r3, [r2, #12]
 800e12c:	2300      	movs	r3, #0
 800e12e:	e009      	b.n	800e144 <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	689a      	ldr	r2, [r3, #8]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1ad2      	subs	r2, r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	609a      	str	r2, [r3, #8]
    return true;
 800e142:	2301      	movs	r3, #1
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd90      	pop	{r4, r7, pc}
 800e14c:	0801621c 	.word	0x0801621c

0800e150 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00e      	beq.n	800e180 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	461a      	mov	r2, r3
 800e168:	2100      	movs	r1, #0
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f7ff fcea 	bl	800db44 <pb_read>
 800e170:	4603      	mov	r3, r0
 800e172:	f083 0301 	eor.w	r3, r3, #1
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <pb_close_string_substream+0x30>
            return false;
 800e17c:	2300      	movs	r3, #0
 800e17e:	e008      	b.n	800e192 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	68da      	ldr	r2, [r3, #12]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800e190:	2301      	movs	r3, #1
}
 800e192:	4618      	mov	r0, r3
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
	...

0800e19c <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08e      	sub	sp, #56	; 0x38
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	789b      	ldrb	r3, [r3, #2]
 800e1b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 800e1b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1b8:	f003 030f 	and.w	r3, r3, #15
 800e1bc:	4a85      	ldr	r2, [pc, #532]	; (800e3d4 <decode_static_field+0x238>)
 800e1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 800e1c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e1cc:	2b10      	cmp	r3, #16
 800e1ce:	d013      	beq.n	800e1f8 <decode_static_field+0x5c>
 800e1d0:	2b10      	cmp	r3, #16
 800e1d2:	dc02      	bgt.n	800e1da <decode_static_field+0x3e>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d006      	beq.n	800e1e6 <decode_static_field+0x4a>
 800e1d8:	e0ec      	b.n	800e3b4 <decode_static_field+0x218>
 800e1da:	2b20      	cmp	r3, #32
 800e1dc:	d01f      	beq.n	800e21e <decode_static_field+0x82>
 800e1de:	2b30      	cmp	r3, #48	; 0x30
 800e1e0:	f000 80bd 	beq.w	800e35e <decode_static_field+0x1c2>
 800e1e4:	e0e6      	b.n	800e3b4 <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6859      	ldr	r1, [r3, #4]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	691a      	ldr	r2, [r3, #16]
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	4798      	blx	r3
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	e0e8      	b.n	800e3ca <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	695a      	ldr	r2, [r3, #20]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	429a      	cmp	r2, r3
 800e202:	d003      	beq.n	800e20c <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	2201      	movs	r2, #1
 800e20a:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6859      	ldr	r1, [r3, #4]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691a      	ldr	r2, [r3, #16]
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	4798      	blx	r3
 800e21a:	4603      	mov	r3, r0
 800e21c:	e0d5      	b.n	800e3ca <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800e21e:	7afb      	ldrb	r3, [r7, #11]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d16a      	bne.n	800e2fa <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800e224:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e228:	f003 030f 	and.w	r3, r3, #15
 800e22c:	2b04      	cmp	r3, #4
 800e22e:	dc64      	bgt.n	800e2fa <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 800e230:	2301      	movs	r3, #1
 800e232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 800e23c:	f107 0310 	add.w	r3, r7, #16
 800e240:	4619      	mov	r1, r3
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7ff ff4a 	bl	800e0dc <pb_make_string_substream>
 800e248:	4603      	mov	r3, r0
 800e24a:	f083 0301 	eor.w	r3, r3, #1
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b00      	cmp	r3, #0
 800e252:	d026      	beq.n	800e2a2 <decode_static_field+0x106>
                    return false;
 800e254:	2300      	movs	r3, #0
 800e256:	e0b8      	b.n	800e3ca <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	6852      	ldr	r2, [r2, #4]
 800e260:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800e264:	b292      	uxth	r2, r2
 800e266:	4611      	mov	r1, r2
 800e268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e26a:	8812      	ldrh	r2, [r2, #0]
 800e26c:	fb02 f201 	mul.w	r2, r2, r1
 800e270:	4413      	add	r3, r2
 800e272:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6859      	ldr	r1, [r3, #4]
 800e278:	f107 0010 	add.w	r0, r7, #16
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e280:	4798      	blx	r3
 800e282:	4603      	mov	r3, r0
 800e284:	f083 0301 	eor.w	r3, r3, #1
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d003      	beq.n	800e296 <decode_static_field+0xfa>
                    {
                        status = false;
 800e28e:	2300      	movs	r3, #0
 800e290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 800e294:	e011      	b.n	800e2ba <decode_static_field+0x11e>
                    }
                    (*size)++;
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	881b      	ldrh	r3, [r3, #0]
 800e29a:	3301      	adds	r3, #1
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d008      	beq.n	800e2ba <decode_static_field+0x11e>
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	881a      	ldrh	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d3ce      	bcc.n	800e258 <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <decode_static_field+0x132>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	e000      	b.n	800e2d0 <decode_static_field+0x134>
 800e2ce:	4b42      	ldr	r3, [pc, #264]	; (800e3d8 <decode_static_field+0x23c>)
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	60d3      	str	r3, [r2, #12]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e078      	b.n	800e3ca <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 800e2d8:	f107 0310 	add.w	r3, r7, #16
 800e2dc:	4619      	mov	r1, r3
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7ff ff36 	bl	800e150 <pb_close_string_substream>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	f083 0301 	eor.w	r3, r3, #1
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <decode_static_field+0x158>
                    return false;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	e06a      	b.n	800e3ca <decode_static_field+0x22e>

                return status;
 800e2f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2f8:	e067      	b.n	800e3ca <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	6852      	ldr	r2, [r2, #4]
 800e308:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800e30c:	b292      	uxth	r2, r2
 800e30e:	4611      	mov	r1, r2
 800e310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e312:	8812      	ldrh	r2, [r2, #0]
 800e314:	fb02 f201 	mul.w	r2, r2, r1
 800e318:	4413      	add	r3, r2
 800e31a:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	b291      	uxth	r1, r2
 800e324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e326:	8011      	strh	r1, [r2, #0]
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	6852      	ldr	r2, [r2, #4]
 800e32c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800e330:	b292      	uxth	r2, r2
 800e332:	4293      	cmp	r3, r2
 800e334:	d30b      	bcc.n	800e34e <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <decode_static_field+0x1a8>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	e000      	b.n	800e346 <decode_static_field+0x1aa>
 800e344:	4b24      	ldr	r3, [pc, #144]	; (800e3d8 <decode_static_field+0x23c>)
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	60d3      	str	r3, [r2, #12]
 800e34a:	2300      	movs	r3, #0
 800e34c:	e03d      	b.n	800e3ca <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6859      	ldr	r1, [r3, #4]
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	6a3a      	ldr	r2, [r7, #32]
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	4798      	blx	r3
 800e35a:	4603      	mov	r3, r0
 800e35c:	e035      	b.n	800e3ca <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	8812      	ldrh	r2, [r2, #0]
 800e368:	b292      	uxth	r2, r2
 800e36a:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800e36c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e370:	f003 030f 	and.w	r3, r3, #15
 800e374:	2b07      	cmp	r3, #7
 800e376:	d114      	bne.n	800e3a2 <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6918      	ldr	r0, [r3, #16]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e384:	b29b      	uxth	r3, r3
 800e386:	461a      	mov	r2, r3
 800e388:	2100      	movs	r1, #0
 800e38a:	f002 f8ef 	bl	801056c <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	691b      	ldr	r3, [r3, #16]
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f000 fa55 	bl	800e84c <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6859      	ldr	r1, [r3, #4]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	691a      	ldr	r2, [r3, #16]
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	4798      	blx	r3
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	e00a      	b.n	800e3ca <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <decode_static_field+0x226>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	e000      	b.n	800e3c4 <decode_static_field+0x228>
 800e3c2:	4b06      	ldr	r3, [pc, #24]	; (800e3dc <decode_static_field+0x240>)
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	60d3      	str	r3, [r2, #12]
 800e3c8:	2300      	movs	r3, #0
    }
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3738      	adds	r7, #56	; 0x38
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	08016d98 	.word	0x08016d98
 800e3d8:	08016234 	.word	0x08016234
 800e3dc:	08016244 	.word	0x08016244

0800e3e0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <decode_pointer_field+0x1c>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	e000      	b.n	800e3fe <decode_pointer_field+0x1e>
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <decode_pointer_field+0x30>)
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	60d3      	str	r3, [r2, #12]
 800e402:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800e404:	4618      	mov	r0, r3
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	08016258 	.word	0x08016258

0800e414 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b097      	sub	sp, #92	; 0x5c
 800e418:	af00      	add	r7, sp, #0
 800e41a:	61f8      	str	r0, [r7, #28]
 800e41c:	460b      	mov	r3, r1
 800e41e:	617a      	str	r2, [r7, #20]
 800e420:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 800e428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e42a:	3304      	adds	r3, #4
 800e42c:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800e42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <decode_callback_field+0x28>
 800e434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d106      	bne.n	800e44a <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 800e43c:	7efb      	ldrb	r3, [r7, #27]
 800e43e:	4619      	mov	r1, r3
 800e440:	69f8      	ldr	r0, [r7, #28]
 800e442:	f7ff fdad 	bl	800dfa0 <pb_skip_field>
 800e446:	4603      	mov	r3, r0
 800e448:	e065      	b.n	800e516 <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 800e44a:	7efb      	ldrb	r3, [r7, #27]
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d13a      	bne.n	800e4c6 <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 800e450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e454:	4619      	mov	r1, r3
 800e456:	69f8      	ldr	r0, [r7, #28]
 800e458:	f7ff fe40 	bl	800e0dc <pb_make_string_substream>
 800e45c:	4603      	mov	r3, r0
 800e45e:	f083 0301 	eor.w	r3, r3, #1
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <decode_callback_field+0x58>
            return false;
 800e468:	2300      	movs	r3, #0
 800e46a:	e054      	b.n	800e516 <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800e46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	6851      	ldr	r1, [r2, #4]
 800e474:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800e478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e47a:	4798      	blx	r3
 800e47c:	4603      	mov	r3, r0
 800e47e:	f083 0301 	eor.w	r3, r3, #1
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00b      	beq.n	800e4a0 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <decode_callback_field+0x82>
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	e000      	b.n	800e498 <decode_callback_field+0x84>
 800e496:	4b22      	ldr	r3, [pc, #136]	; (800e520 <decode_callback_field+0x10c>)
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	60d3      	str	r3, [r2, #12]
 800e49c:	2300      	movs	r3, #0
 800e49e:	e03a      	b.n	800e516 <decode_callback_field+0x102>
        } while (substream.bytes_left);
 800e4a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e2      	bne.n	800e46c <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 800e4a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	69f8      	ldr	r0, [r7, #28]
 800e4ae:	f7ff fe4f 	bl	800e150 <pb_close_string_substream>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f083 0301 	eor.w	r3, r3, #1
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <decode_callback_field+0xae>
            return false;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e029      	b.n	800e516 <decode_callback_field+0x102>

        return true;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e027      	b.n	800e516 <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800e4c6:	230a      	movs	r3, #10
 800e4c8:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800e4ca:	f107 0320 	add.w	r3, r7, #32
 800e4ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e4d2:	7ef9      	ldrb	r1, [r7, #27]
 800e4d4:	69f8      	ldr	r0, [r7, #28]
 800e4d6:	f7ff fda5 	bl	800e024 <read_raw_value>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	f083 0301 	eor.w	r3, r3, #1
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <decode_callback_field+0xd6>
            return false;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	e015      	b.n	800e516 <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 800e4ea:	6a3a      	ldr	r2, [r7, #32]
 800e4ec:	463b      	mov	r3, r7
 800e4ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7ff fbca 	bl	800dc8c <pb_istream_from_buffer>
 800e4f8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e4fc:	463b      	mov	r3, r7
 800e4fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800e504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	6851      	ldr	r1, [r2, #4]
 800e50c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e512:	4798      	blx	r3
 800e514:	4603      	mov	r3, r0
    }
}
 800e516:	4618      	mov	r0, r3
 800e518:	375c      	adds	r7, #92	; 0x5c
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd90      	pop	{r4, r7, pc}
 800e51e:	bf00      	nop
 800e520:	0801626c 	.word	0x0801626c

0800e524 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	460b      	mov	r3, r1
 800e52e:	607a      	str	r2, [r7, #4]
 800e530:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	789b      	ldrb	r3, [r3, #2]
 800e538:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e53c:	2b40      	cmp	r3, #64	; 0x40
 800e53e:	d013      	beq.n	800e568 <decode_field+0x44>
 800e540:	2b80      	cmp	r3, #128	; 0x80
 800e542:	d009      	beq.n	800e558 <decode_field+0x34>
 800e544:	2b00      	cmp	r3, #0
 800e546:	d117      	bne.n	800e578 <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 800e548:	7afb      	ldrb	r3, [r7, #11]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	4619      	mov	r1, r3
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f7ff fe24 	bl	800e19c <decode_static_field>
 800e554:	4603      	mov	r3, r0
 800e556:	e01a      	b.n	800e58e <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 800e558:	7afb      	ldrb	r3, [r7, #11]
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	4619      	mov	r1, r3
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f7ff ff3e 	bl	800e3e0 <decode_pointer_field>
 800e564:	4603      	mov	r3, r0
 800e566:	e012      	b.n	800e58e <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 800e568:	7afb      	ldrb	r3, [r7, #11]
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4619      	mov	r1, r3
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f7ff ff50 	bl	800e414 <decode_callback_field>
 800e574:	4603      	mov	r3, r0
 800e576:	e00a      	b.n	800e58e <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <decode_field+0x62>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	e000      	b.n	800e588 <decode_field+0x64>
 800e586:	4b04      	ldr	r3, [pc, #16]	; (800e598 <decode_field+0x74>)
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	60d3      	str	r3, [r2, #12]
 800e58c:	2300      	movs	r3, #0
    }
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	08016244 	.word	0x08016244

0800e59c <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	68f9      	ldr	r1, [r7, #12]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff f9b8 	bl	800d92c <pb_field_iter_begin>
    iter->pData = extension->dest;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	f103 020c 	add.w	r2, r3, #12
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	789b      	ldrb	r3, [r3, #2]
 800e5d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e5d6:	2b80      	cmp	r3, #128	; 0x80
 800e5d8:	d103      	bne.n	800e5e2 <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	1d1a      	adds	r2, r3, #4
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	611a      	str	r2, [r3, #16]
    }
}
 800e5e2:	bf00      	nop
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b08c      	sub	sp, #48	; 0x30
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	60f8      	str	r0, [r7, #12]
 800e5f2:	60b9      	str	r1, [r7, #8]
 800e5f4:	607a      	str	r2, [r7, #4]
 800e5f6:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	881b      	ldrh	r3, [r3, #0]
 800e604:	b29b      	uxth	r3, r3
 800e606:	461a      	mov	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d001      	beq.n	800e612 <default_extension_decoder+0x28>
        return true;
 800e60e:	2301      	movs	r3, #1
 800e610:	e010      	b.n	800e634 <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 800e612:	f107 0314 	add.w	r3, r7, #20
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff ffbf 	bl	800e59c <iter_from_extension>
    extension->found = true;
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	2201      	movs	r2, #1
 800e622:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800e624:	f107 0214 	add.w	r2, r7, #20
 800e628:	78fb      	ldrb	r3, [r7, #3]
 800e62a:	4619      	mov	r1, r3
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f7ff ff79 	bl	800e524 <decode_field>
 800e632:	4603      	mov	r3, r0
}
 800e634:	4618      	mov	r0, r3
 800e636:	3730      	adds	r7, #48	; 0x30
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800e63c:	b590      	push	{r4, r7, lr}
 800e63e:	b089      	sub	sp, #36	; 0x24
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	603b      	str	r3, [r7, #0]
 800e648:	4613      	mov	r3, r2
 800e64a:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 800e65a:	e022      	b.n	800e6a2 <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681c      	ldr	r4, [r3, #0]
 800e66c:	79fb      	ldrb	r3, [r7, #7]
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	69f9      	ldr	r1, [r7, #28]
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	47a0      	blx	r4
 800e676:	4603      	mov	r3, r0
 800e678:	76fb      	strb	r3, [r7, #27]
 800e67a:	e007      	b.n	800e68c <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	68ba      	ldr	r2, [r7, #8]
 800e680:	69f9      	ldr	r1, [r7, #28]
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f7ff ffb1 	bl	800e5ea <default_extension_decoder>
 800e688:	4603      	mov	r3, r0
 800e68a:	76fb      	strb	r3, [r7, #27]

        if (!status)
 800e68c:	7efb      	ldrb	r3, [r7, #27]
 800e68e:	f083 0301 	eor.w	r3, r3, #1
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <decode_extension+0x60>
            return false;
 800e698:	2300      	movs	r3, #0
 800e69a:	e00b      	b.n	800e6b4 <decode_extension+0x78>
        
        extension = extension->next;
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d004      	beq.n	800e6b2 <decode_extension+0x76>
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d0d4      	beq.n	800e65c <decode_extension+0x20>
    }
    
    return true;
 800e6b2:	2301      	movs	r3, #1
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3724      	adds	r7, #36	; 0x24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd90      	pop	{r4, r7, pc}

0800e6bc <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	789b      	ldrb	r3, [r3, #2]
 800e6d0:	f003 030f 	and.w	r3, r3, #15
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d101      	bne.n	800e6dc <find_extension_field+0x20>
            return true;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e008      	b.n	800e6ee <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff f95a 	bl	800d996 <pb_field_iter_next>
    } while (iter->pos != start);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d1ee      	bne.n	800e6ca <find_extension_field+0xe>
    
    return false;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b08a      	sub	sp, #40	; 0x28
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	789b      	ldrb	r3, [r3, #2]
 800e704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800e708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e70c:	f003 030f 	and.w	r3, r3, #15
 800e710:	2b08      	cmp	r3, #8
 800e712:	d119      	bne.n	800e748 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	691b      	ldr	r3, [r3, #16]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800e71c:	e010      	b.n	800e740 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	2200      	movs	r2, #0
 800e722:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 800e724:	f107 0308 	add.w	r3, r7, #8
 800e728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff ff36 	bl	800e59c <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 800e730:	f107 0308 	add.w	r3, r7, #8
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff ffde 	bl	800e6f6 <pb_field_set_to_default>
            ext = ext->next;
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1eb      	bne.n	800e71e <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 800e746:	e07d      	b.n	800e844 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800e748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e74c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d15d      	bne.n	800e810 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 800e754:	2301      	movs	r3, #1
 800e756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800e75a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e75e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e762:	2b10      	cmp	r3, #16
 800e764:	d10a      	bne.n	800e77c <pb_field_set_to_default+0x86>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	695a      	ldr	r2, [r3, #20]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	691b      	ldr	r3, [r3, #16]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d004      	beq.n	800e77c <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	695b      	ldr	r3, [r3, #20]
 800e776:	2200      	movs	r2, #0
 800e778:	701a      	strb	r2, [r3, #0]
 800e77a:	e012      	b.n	800e7a2 <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800e77c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e780:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e784:	2b20      	cmp	r3, #32
 800e786:	d005      	beq.n	800e794 <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800e788:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e78c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800e790:	2b30      	cmp	r3, #48	; 0x30
 800e792:	d106      	bne.n	800e7a2 <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	2200      	movs	r2, #0
 800e79a:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800e79c:	2300      	movs	r3, #0
 800e79e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 800e7a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d04c      	beq.n	800e844 <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	789b      	ldrb	r3, [r3, #2]
 800e7b0:	f003 030f 	and.w	r3, r3, #15
 800e7b4:	2b07      	cmp	r3, #7
 800e7b6:	d10a      	bne.n	800e7ce <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	f000 f840 	bl	800e84c <pb_message_set_to_defaults>
}
 800e7cc:	e03a      	b.n	800e844 <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00e      	beq.n	800e7f8 <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6918      	ldr	r0, [r3, #16]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	f8d3 100b 	ldr.w	r1, [r3, #11]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	f001 feb0 	bl	8010556 <memcpy>
}
 800e7f6:	e025      	b.n	800e844 <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6918      	ldr	r0, [r3, #16]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e804:	b29b      	uxth	r3, r3
 800e806:	461a      	mov	r2, r3
 800e808:	2100      	movs	r1, #0
 800e80a:	f001 feaf 	bl	801056c <memset>
}
 800e80e:	e019      	b.n	800e844 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800e810:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e814:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e818:	2b80      	cmp	r3, #128	; 0x80
 800e81a:	d113      	bne.n	800e844 <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	2200      	movs	r2, #0
 800e822:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800e824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e828:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e82c:	2b20      	cmp	r3, #32
 800e82e:	d005      	beq.n	800e83c <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800e830:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e834:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800e838:	2b30      	cmp	r3, #48	; 0x30
 800e83a:	d103      	bne.n	800e844 <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	2200      	movs	r2, #0
 800e842:	801a      	strh	r2, [r3, #0]
}
 800e844:	bf00      	nop
 800e846:	3728      	adds	r7, #40	; 0x28
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800e856:	f107 0308 	add.w	r3, r7, #8
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	6879      	ldr	r1, [r7, #4]
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff f864 	bl	800d92c <pb_field_iter_begin>
 800e864:	4603      	mov	r3, r0
 800e866:	f083 0301 	eor.w	r3, r3, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d10d      	bne.n	800e88c <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800e870:	f107 0308 	add.w	r3, r7, #8
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff ff3e 	bl	800e6f6 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800e87a:	f107 0308 	add.w	r3, r7, #8
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff f889 	bl	800d996 <pb_field_iter_next>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1f2      	bne.n	800e870 <pb_message_set_to_defaults+0x24>
 800e88a:	e000      	b.n	800e88e <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 800e88c:	bf00      	nop
}
 800e88e:	3720      	adds	r7, #32
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b098      	sub	sp, #96	; 0x60
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 800e8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800e8ba:	f107 0320 	add.w	r3, r7, #32
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	68b9      	ldr	r1, [r7, #8]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff f832 	bl	800d92c <pb_field_iter_begin>

    while (stream->bytes_left)
 800e8c8:	e0bf      	b.n	800ea4a <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800e8ca:	f107 0316 	add.w	r3, r7, #22
 800e8ce:	f107 0218 	add.w	r2, r7, #24
 800e8d2:	f107 0117 	add.w	r1, r7, #23
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f7ff fb2b 	bl	800df32 <pb_decode_tag>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f083 0301 	eor.w	r3, r3, #1
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d005      	beq.n	800e8f4 <pb_decode_noinit+0x60>
        {
            if (eof)
 800e8e8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f040 80b3 	bne.w	800ea56 <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e130      	b.n	800eb56 <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 800e8f4:	69ba      	ldr	r2, [r7, #24]
 800e8f6:	f107 0320 	add.w	r3, r7, #32
 800e8fa:	4611      	mov	r1, r2
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7ff f8d0 	bl	800daa2 <pb_field_iter_find>
 800e902:	4603      	mov	r3, r0
 800e904:	f083 0301 	eor.w	r3, r3, #1
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d03e      	beq.n	800e98c <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e912:	429a      	cmp	r2, r3
 800e914:	d82d      	bhi.n	800e972 <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 800e916:	f107 0320 	add.w	r3, r7, #32
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff fece 	bl	800e6bc <find_extension_field>
 800e920:	4603      	mov	r3, r0
 800e922:	f083 0301 	eor.w	r3, r3, #1
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d003      	beq.n	800e934 <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 800e92c:	f04f 33ff 	mov.w	r3, #4294967295
 800e930:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e932:	e003      	b.n	800e93c <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	881b      	ldrh	r3, [r3, #0]
 800e938:	b29b      	uxth	r3, r3
 800e93a:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e940:	429a      	cmp	r2, r3
 800e942:	d816      	bhi.n	800e972 <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 800e94a:	69b9      	ldr	r1, [r7, #24]
 800e94c:	7dfa      	ldrb	r2, [r7, #23]
 800e94e:	f107 0320 	add.w	r3, r7, #32
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff fe72 	bl	800e63c <decode_extension>
 800e958:	4603      	mov	r3, r0
 800e95a:	f083 0301 	eor.w	r3, r3, #1
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <pb_decode_noinit+0xd4>
                        return false;
 800e964:	2300      	movs	r3, #0
 800e966:	e0f6      	b.n	800eb56 <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e96e:	429a      	cmp	r2, r3
 800e970:	d168      	bne.n	800ea44 <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800e972:	7dfb      	ldrb	r3, [r7, #23]
 800e974:	4619      	mov	r1, r3
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7ff fb12 	bl	800dfa0 <pb_skip_field>
 800e97c:	4603      	mov	r3, r0
 800e97e:	f083 0301 	eor.w	r3, r3, #1
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d05f      	beq.n	800ea48 <pb_decode_noinit+0x1b4>
                return false;
 800e988:	2300      	movs	r3, #0
 800e98a:	e0e4      	b.n	800eb56 <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800e98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98e:	789b      	ldrb	r3, [r3, #2]
 800e990:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e994:	2b20      	cmp	r3, #32
 800e996:	d124      	bne.n	800e9e2 <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 800e998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d120      	bne.n	800e9e2 <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d019      	beq.n	800e9dc <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 800e9a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d012      	beq.n	800e9d4 <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 800e9ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9b0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d00b      	beq.n	800e9d4 <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <pb_decode_noinit+0x136>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	e000      	b.n	800e9cc <pb_decode_noinit+0x138>
 800e9ca:	4b65      	ldr	r3, [pc, #404]	; (800eb60 <pb_decode_noinit+0x2cc>)
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	60d3      	str	r3, [r2, #12]
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	e0c0      	b.n	800eb56 <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 800e9dc:	f107 031e 	add.w	r3, r7, #30
 800e9e0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e4:	789b      	ldrb	r3, [r3, #2]
 800e9e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d11b      	bne.n	800ea26 <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800e9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f0:	2b3f      	cmp	r3, #63	; 0x3f
 800e9f2:	d818      	bhi.n	800ea26 <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800e9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f6:	f003 031f 	and.w	r3, r3, #31
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ea00:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	095b      	lsrs	r3, r3, #5
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea14:	095b      	lsrs	r3, r3, #5
 800ea16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea18:	430a      	orrs	r2, r1
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ea20:	440b      	add	r3, r1
 800ea22:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800ea26:	7dfb      	ldrb	r3, [r7, #23]
 800ea28:	f107 0220 	add.w	r2, r7, #32
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f7ff fd78 	bl	800e524 <decode_field>
 800ea34:	4603      	mov	r3, r0
 800ea36:	f083 0301 	eor.w	r3, r3, #1
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d004      	beq.n	800ea4a <pb_decode_noinit+0x1b6>
            return false;
 800ea40:	2300      	movs	r3, #0
 800ea42:	e088      	b.n	800eb56 <pb_decode_noinit+0x2c2>
                        continue;
 800ea44:	bf00      	nop
 800ea46:	e000      	b.n	800ea4a <pb_decode_noinit+0x1b6>
            continue;
 800ea48:	bf00      	nop
    while (stream->bytes_left)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f47f af3b 	bne.w	800e8ca <pb_decode_noinit+0x36>
 800ea54:	e000      	b.n	800ea58 <pb_decode_noinit+0x1c4>
                break;
 800ea56:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 800ea58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d012      	beq.n	800ea84 <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 800ea5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea60:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d00b      	beq.n	800ea84 <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <pb_decode_noinit+0x1e6>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	e000      	b.n	800ea7c <pb_decode_noinit+0x1e8>
 800ea7a:	4b39      	ldr	r3, [pc, #228]	; (800eb60 <pb_decode_noinit+0x2cc>)
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	60d3      	str	r3, [r2, #12]
 800ea80:	2300      	movs	r3, #0
 800ea82:	e068      	b.n	800eb56 <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 800ea84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea86:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	789b      	ldrb	r3, [r3, #2]
 800ea8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 800ea90:	f107 0320 	add.w	r3, r7, #32
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fe ff7e 	bl	800d996 <pb_field_iter_next>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1f1      	bne.n	800ea84 <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800eaa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eaa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d107      	bne.n	800eabc <pb_decode_noinit+0x228>
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <pb_decode_noinit+0x228>
            req_field_count++;
 800eab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eab8:	3301      	adds	r3, #1
 800eaba:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800eabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eabe:	2b40      	cmp	r3, #64	; 0x40
 800eac0:	d901      	bls.n	800eac6 <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800eac2:	2340      	movs	r3, #64	; 0x40
 800eac4:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 800eac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d043      	beq.n	800eb54 <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800eacc:	2300      	movs	r3, #0
 800eace:	653b      	str	r3, [r7, #80]	; 0x50
 800ead0:	e018      	b.n	800eb04 <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 800ead2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800eada:	4413      	add	r3, r2
 800eadc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800eae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d00b      	beq.n	800eafe <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <pb_decode_noinit+0x260>
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	e000      	b.n	800eaf6 <pb_decode_noinit+0x262>
 800eaf4:	4b1b      	ldr	r3, [pc, #108]	; (800eb64 <pb_decode_noinit+0x2d0>)
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	60d3      	str	r3, [r2, #12]
 800eafa:	2300      	movs	r3, #0
 800eafc:	e02b      	b.n	800eb56 <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 800eafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb00:	3301      	adds	r3, #1
 800eb02:	653b      	str	r3, [r7, #80]	; 0x50
 800eb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb06:	095b      	lsrs	r3, r3, #5
 800eb08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d3e1      	bcc.n	800ead2 <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800eb0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb10:	f003 031f 	and.w	r3, r3, #31
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d01d      	beq.n	800eb54 <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 800eb18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb1a:	095b      	lsrs	r3, r3, #5
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800eb22:	4413      	add	r3, r2
 800eb24:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 800eb28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb2a:	f003 031f 	and.w	r3, r3, #31
 800eb2e:	f1c3 0320 	rsb	r3, r3, #32
 800eb32:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eb34:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d00b      	beq.n	800eb54 <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d002      	beq.n	800eb4a <pb_decode_noinit+0x2b6>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	e000      	b.n	800eb4c <pb_decode_noinit+0x2b8>
 800eb4a:	4b06      	ldr	r3, [pc, #24]	; (800eb64 <pb_decode_noinit+0x2d0>)
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	60d3      	str	r3, [r2, #12]
 800eb50:	2300      	movs	r3, #0
 800eb52:	e000      	b.n	800eb56 <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 800eb54:	2301      	movs	r3, #1
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3760      	adds	r7, #96	; 0x60
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	0801627c 	.word	0x0801627c
 800eb64:	080162a0 	.word	0x080162a0

0800eb68 <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 800eb74:	6879      	ldr	r1, [r7, #4]
 800eb76:	68b8      	ldr	r0, [r7, #8]
 800eb78:	f7ff fe68 	bl	800e84c <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	68b9      	ldr	r1, [r7, #8]
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7ff fe87 	bl	800e894 <pb_decode_noinit>
 800eb86:	4603      	mov	r3, r0
 800eb88:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3718      	adds	r7, #24
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b08a      	sub	sp, #40	; 0x28
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 800eba0:	f107 0314 	add.w	r3, r7, #20
 800eba4:	4619      	mov	r1, r3
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff fa98 	bl	800e0dc <pb_make_string_substream>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f083 0301 	eor.w	r3, r3, #1
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <pb_decode_delimited+0x28>
        return false;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e019      	b.n	800ebf0 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 800ebbc:	f107 0314 	add.w	r3, r7, #20
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	68b9      	ldr	r1, [r7, #8]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7ff ffcf 	bl	800eb68 <pb_decode>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 800ebd0:	f107 0314 	add.w	r3, r7, #20
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f7ff faba 	bl	800e150 <pb_close_string_substream>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	f083 0301 	eor.w	r3, r3, #1
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <pb_decode_delimited+0x58>
        return false;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e001      	b.n	800ebf0 <pb_decode_delimited+0x5c>
    return status;
 800ebec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3728      	adds	r7, #40	; 0x28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800ebf8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ebfc:	b084      	sub	sp, #16
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800ec04:	f107 0308 	add.w	r3, r7, #8
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff f8f6 	bl	800ddfc <pb_decode_varint>
 800ec10:	4603      	mov	r3, r0
 800ec12:	f083 0301 	eor.w	r3, r3, #1
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d001      	beq.n	800ec20 <pb_decode_svarint+0x28>
        return false;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	e021      	b.n	800ec64 <pb_decode_svarint+0x6c>
    
    if (value & 1)
 800ec20:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800ec24:	f04f 0101 	mov.w	r1, #1
 800ec28:	f04f 0200 	mov.w	r2, #0
 800ec2c:	ea0b 0301 	and.w	r3, fp, r1
 800ec30:	ea0c 0402 	and.w	r4, ip, r2
 800ec34:	4323      	orrs	r3, r4
 800ec36:	d00c      	beq.n	800ec52 <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800ec38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ec3c:	0862      	lsrs	r2, r4, #1
 800ec3e:	ea4f 0133 	mov.w	r1, r3, rrx
 800ec42:	ea6f 0301 	mvn.w	r3, r1
 800ec46:	ea6f 0402 	mvn.w	r4, r2
 800ec4a:	683a      	ldr	r2, [r7, #0]
 800ec4c:	e9c2 3400 	strd	r3, r4, [r2]
 800ec50:	e007      	b.n	800ec62 <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800ec52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ec56:	0864      	lsrs	r4, r4, #1
 800ec58:	ea4f 0333 	mov.w	r3, r3, rrx
 800ec5c:	683a      	ldr	r2, [r7, #0]
 800ec5e:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800ec62:	2301      	movs	r3, #1
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ec6e <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 800ec78:	f107 030c 	add.w	r3, r7, #12
 800ec7c:	2204      	movs	r2, #4
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7fe ff5f 	bl	800db44 <pb_read>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f083 0301 	eor.w	r3, r3, #1
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <pb_decode_fixed32+0x28>
        return false;
 800ec92:	2300      	movs	r3, #0
 800ec94:	e00d      	b.n	800ecb2 <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800ec96:	7b3b      	ldrb	r3, [r7, #12]
 800ec98:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 800ec9a:	7b7b      	ldrb	r3, [r7, #13]
 800ec9c:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800ec9e:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 800eca4:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 800ecaa:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	601a      	str	r2, [r3, #0]
    return true;
 800ecb0:	2301      	movs	r3, #1
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800ecba:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 800ecc6:	f107 0308 	add.w	r3, r7, #8
 800ecca:	2208      	movs	r2, #8
 800eccc:	4619      	mov	r1, r3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fe ff38 	bl	800db44 <pb_read>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f083 0301 	eor.w	r3, r3, #1
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <pb_decode_fixed64+0x2a>
        return false;
 800ece0:	2300      	movs	r3, #0
 800ece2:	e06c      	b.n	800edbe <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800ece4:	7a3b      	ldrb	r3, [r7, #8]
 800ece6:	fa5f fb83 	uxtb.w	fp, r3
 800ecea:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 800ecee:	7a7b      	ldrb	r3, [r7, #9]
 800ecf0:	b2d9      	uxtb	r1, r3
 800ecf2:	f04f 0200 	mov.w	r2, #0
 800ecf6:	f04f 0300 	mov.w	r3, #0
 800ecfa:	f04f 0400 	mov.w	r4, #0
 800ecfe:	0214      	lsls	r4, r2, #8
 800ed00:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ed04:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800ed06:	ea4b 0803 	orr.w	r8, fp, r3
 800ed0a:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 800ed0e:	7abb      	ldrb	r3, [r7, #10]
 800ed10:	b2d9      	uxtb	r1, r3
 800ed12:	f04f 0200 	mov.w	r2, #0
 800ed16:	f04f 0300 	mov.w	r3, #0
 800ed1a:	f04f 0400 	mov.w	r4, #0
 800ed1e:	0414      	lsls	r4, r2, #16
 800ed20:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800ed24:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 800ed26:	ea48 0103 	orr.w	r1, r8, r3
 800ed2a:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 800ed2e:	7afb      	ldrb	r3, [r7, #11]
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	f04f 0400 	mov.w	r4, #0
 800ed36:	0a1e      	lsrs	r6, r3, #8
 800ed38:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 800ed3a:	ea41 0805 	orr.w	r8, r1, r5
 800ed3e:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 800ed42:	7b3b      	ldrb	r3, [r7, #12]
 800ed44:	b2dd      	uxtb	r5, r3
 800ed46:	f04f 0600 	mov.w	r6, #0
 800ed4a:	f04f 0300 	mov.w	r3, #0
 800ed4e:	f04f 0400 	mov.w	r4, #0
 800ed52:	002c      	movs	r4, r5
 800ed54:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 800ed56:	ea48 0103 	orr.w	r1, r8, r3
 800ed5a:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 800ed5e:	7b7b      	ldrb	r3, [r7, #13]
 800ed60:	b2dd      	uxtb	r5, r3
 800ed62:	f04f 0600 	mov.w	r6, #0
 800ed66:	f04f 0300 	mov.w	r3, #0
 800ed6a:	f04f 0400 	mov.w	r4, #0
 800ed6e:	022c      	lsls	r4, r5, #8
 800ed70:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 800ed72:	ea41 0803 	orr.w	r8, r1, r3
 800ed76:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 800ed7a:	7bbb      	ldrb	r3, [r7, #14]
 800ed7c:	b2dd      	uxtb	r5, r3
 800ed7e:	f04f 0600 	mov.w	r6, #0
 800ed82:	f04f 0300 	mov.w	r3, #0
 800ed86:	f04f 0400 	mov.w	r4, #0
 800ed8a:	042c      	lsls	r4, r5, #16
 800ed8c:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 800ed8e:	ea48 0103 	orr.w	r1, r8, r3
 800ed92:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 800ed96:	7bfb      	ldrb	r3, [r7, #15]
 800ed98:	b2dd      	uxtb	r5, r3
 800ed9a:	f04f 0600 	mov.w	r6, #0
 800ed9e:	f04f 0800 	mov.w	r8, #0
 800eda2:	f04f 0900 	mov.w	r9, #0
 800eda6:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800edaa:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 800edae:	ea48 0301 	orr.w	r3, r8, r1
 800edb2:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800edbc:	2301      	movs	r3, #1
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800edc8 <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800edc8:	b590      	push	{r4, r7, lr}
 800edca:	b08b      	sub	sp, #44	; 0x2c
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 800edd4:	f107 0310 	add.w	r3, r7, #16
 800edd8:	4619      	mov	r1, r3
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f7ff f80e 	bl	800ddfc <pb_decode_varint>
 800ede0:	4603      	mov	r3, r0
 800ede2:	f083 0301 	eor.w	r3, r3, #1
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <pb_dec_varint+0x28>
        return false;
 800edec:	2300      	movs	r3, #0
 800edee:	e078      	b.n	800eee2 <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	2b08      	cmp	r3, #8
 800edfa:	d104      	bne.n	800ee06 <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 800edfc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ee00:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800ee04:	e005      	b.n	800ee12 <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 800ee06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ee0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800ee0e:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	2b08      	cmp	r3, #8
 800ee1c:	d10a      	bne.n	800ee34 <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ee24:	e9c2 3400 	strd	r3, r4, [r2]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ee2e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ee32:	e041      	b.n	800eeb8 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	2b04      	cmp	r3, #4
 800ee3e:	d109      	bne.n	800ee54 <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800ee40:	6a3a      	ldr	r2, [r7, #32]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	601a      	str	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800ee4e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ee52:	e031      	b.n	800eeb8 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d10c      	bne.n	800ee7a <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800ee60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	801a      	strh	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee6e:	b21b      	sxth	r3, r3
 800ee70:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800ee74:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ee78:	e01e      	b.n	800eeb8 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d10c      	bne.n	800eea0 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800ee86:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	701a      	strb	r2, [r3, #0]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f993 3000 	ldrsb.w	r3, [r3]
 800ee94:	b25b      	sxtb	r3, r3
 800ee96:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800ee9a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ee9e:	e00b      	b.n	800eeb8 <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <pb_dec_varint+0xe6>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	e000      	b.n	800eeb0 <pb_dec_varint+0xe8>
 800eeae:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <pb_dec_varint+0x124>)
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	60d3      	str	r3, [r2, #12]
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	e014      	b.n	800eee2 <pb_dec_varint+0x11a>

    if (clamped != svalue)
 800eeb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eebc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800eec0:	42a2      	cmp	r2, r4
 800eec2:	bf08      	it	eq
 800eec4:	4299      	cmpeq	r1, r3
 800eec6:	d00b      	beq.n	800eee0 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <pb_dec_varint+0x10e>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	e000      	b.n	800eed8 <pb_dec_varint+0x110>
 800eed6:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <pb_dec_varint+0x128>)
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	60d3      	str	r3, [r2, #12]
 800eedc:	2300      	movs	r3, #0
 800eede:	e000      	b.n	800eee2 <pb_dec_varint+0x11a>
    
    return true;
 800eee0:	2301      	movs	r3, #1
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	372c      	adds	r7, #44	; 0x2c
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd90      	pop	{r4, r7, pc}
 800eeea:	bf00      	nop
 800eeec:	080162b8 	.word	0x080162b8
 800eef0:	080162cc 	.word	0x080162cc

0800eef4 <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800eef4:	b590      	push	{r4, r7, lr}
 800eef6:	b089      	sub	sp, #36	; 0x24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 800ef00:	f107 0310 	add.w	r3, r7, #16
 800ef04:	4619      	mov	r1, r3
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f7fe ff78 	bl	800ddfc <pb_decode_varint>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	f083 0301 	eor.w	r3, r3, #1
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <pb_dec_uvarint+0x28>
        return false;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e069      	b.n	800eff0 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	2b08      	cmp	r3, #8
 800ef26:	d10a      	bne.n	800ef3e <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 800ef28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	e9c2 3400 	strd	r3, r4, [r2]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ef38:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ef3c:	e043      	b.n	800efc6 <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	2b04      	cmp	r3, #4
 800ef48:	d10b      	bne.n	800ef62 <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800ef4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f04f 0400 	mov.w	r4, #0
 800ef5c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ef60:	e031      	b.n	800efc6 <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d10c      	bne.n	800ef88 <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800ef6e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	801a      	strh	r2, [r3, #0]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	f04f 0400 	mov.w	r4, #0
 800ef82:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ef86:	e01e      	b.n	800efc6 <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d10c      	bne.n	800efae <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800ef94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	701a      	strb	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	f04f 0400 	mov.w	r4, #0
 800efa8:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800efac:	e00b      	b.n	800efc6 <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d002      	beq.n	800efbc <pb_dec_uvarint+0xc8>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	e000      	b.n	800efbe <pb_dec_uvarint+0xca>
 800efbc:	4b0e      	ldr	r3, [pc, #56]	; (800eff8 <pb_dec_uvarint+0x104>)
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	60d3      	str	r3, [r2, #12]
 800efc2:	2300      	movs	r3, #0
 800efc4:	e014      	b.n	800eff0 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800efc6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800efca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800efce:	42a2      	cmp	r2, r4
 800efd0:	bf08      	it	eq
 800efd2:	4299      	cmpeq	r1, r3
 800efd4:	d00b      	beq.n	800efee <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d002      	beq.n	800efe4 <pb_dec_uvarint+0xf0>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	e000      	b.n	800efe6 <pb_dec_uvarint+0xf2>
 800efe4:	4b05      	ldr	r3, [pc, #20]	; (800effc <pb_dec_uvarint+0x108>)
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	60d3      	str	r3, [r2, #12]
 800efea:	2300      	movs	r3, #0
 800efec:	e000      	b.n	800eff0 <pb_dec_uvarint+0xfc>

    return true;
 800efee:	2301      	movs	r3, #1
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3724      	adds	r7, #36	; 0x24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd90      	pop	{r4, r7, pc}
 800eff8:	080162b8 	.word	0x080162b8
 800effc:	080162cc 	.word	0x080162cc

0800f000 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f000:	b590      	push	{r4, r7, lr}
 800f002:	b089      	sub	sp, #36	; 0x24
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 800f00c:	f107 0310 	add.w	r3, r7, #16
 800f010:	4619      	mov	r1, r3
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7ff fdf0 	bl	800ebf8 <pb_decode_svarint>
 800f018:	4603      	mov	r3, r0
 800f01a:	f083 0301 	eor.w	r3, r3, #1
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <pb_dec_svarint+0x28>
        return false;
 800f024:	2300      	movs	r3, #0
 800f026:	e06b      	b.n	800f100 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f02e:	b29b      	uxth	r3, r3
 800f030:	2b08      	cmp	r3, #8
 800f032:	d10a      	bne.n	800f04a <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 800f034:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	e9c2 3400 	strd	r3, r4, [r2]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f044:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f048:	e045      	b.n	800f0d6 <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f050:	b29b      	uxth	r3, r3
 800f052:	2b04      	cmp	r3, #4
 800f054:	d10b      	bne.n	800f06e <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800f056:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f05a:	461a      	mov	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	601a      	str	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f068:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f06c:	e033      	b.n	800f0d6 <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f074:	b29b      	uxth	r3, r3
 800f076:	2b02      	cmp	r3, #2
 800f078:	d10d      	bne.n	800f096 <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800f07a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f07e:	b21a      	sxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	801a      	strh	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f08a:	b21b      	sxth	r3, r3
 800f08c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f090:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f094:	e01f      	b.n	800f0d6 <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d10d      	bne.n	800f0be <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800f0a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f0a6:	b25a      	sxtb	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	701a      	strb	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f993 3000 	ldrsb.w	r3, [r3]
 800f0b2:	b25b      	sxtb	r3, r3
 800f0b4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f0b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800f0bc:	e00b      	b.n	800f0d6 <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d002      	beq.n	800f0cc <pb_dec_svarint+0xcc>
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	e000      	b.n	800f0ce <pb_dec_svarint+0xce>
 800f0cc:	4b0e      	ldr	r3, [pc, #56]	; (800f108 <pb_dec_svarint+0x108>)
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	60d3      	str	r3, [r2, #12]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e014      	b.n	800f100 <pb_dec_svarint+0x100>

    if (clamped != value)
 800f0d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f0da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f0de:	42a2      	cmp	r2, r4
 800f0e0:	bf08      	it	eq
 800f0e2:	4299      	cmpeq	r1, r3
 800f0e4:	d00b      	beq.n	800f0fe <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <pb_dec_svarint+0xf4>
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	e000      	b.n	800f0f6 <pb_dec_svarint+0xf6>
 800f0f4:	4b05      	ldr	r3, [pc, #20]	; (800f10c <pb_dec_svarint+0x10c>)
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	60d3      	str	r3, [r2, #12]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e000      	b.n	800f100 <pb_dec_svarint+0x100>
    
    return true;
 800f0fe:	2301      	movs	r3, #1
}
 800f100:	4618      	mov	r0, r3
 800f102:	3724      	adds	r7, #36	; 0x24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd90      	pop	{r4, r7, pc}
 800f108:	080162b8 	.word	0x080162b8
 800f10c:	080162cc 	.word	0x080162cc

0800f110 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 800f11c:	6879      	ldr	r1, [r7, #4]
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff fda5 	bl	800ec6e <pb_decode_fixed32>
 800f124:	4603      	mov	r3, r0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b084      	sub	sp, #16
 800f132:	af00      	add	r7, sp, #0
 800f134:	60f8      	str	r0, [r7, #12]
 800f136:	60b9      	str	r1, [r7, #8]
 800f138:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 800f13a:	6879      	ldr	r1, [r7, #4]
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f7ff fdbc 	bl	800ecba <pb_decode_fixed64>
 800f142:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800f144:	4618      	mov	r0, r3
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b088      	sub	sp, #32
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 800f158:	f107 0314 	add.w	r3, r7, #20
 800f15c:	4619      	mov	r1, r3
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7fe fe3c 	bl	800dddc <pb_decode_varint32>
 800f164:	4603      	mov	r3, r0
 800f166:	f083 0301 	eor.w	r3, r3, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <pb_dec_bytes+0x28>
        return false;
 800f170:	2300      	movs	r3, #0
 800f172:	e056      	b.n	800f222 <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f17a:	d30b      	bcc.n	800f194 <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <pb_dec_bytes+0x3e>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	e000      	b.n	800f18c <pb_dec_bytes+0x40>
 800f18a:	4b28      	ldr	r3, [pc, #160]	; (800f22c <pb_dec_bytes+0xe0>)
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	60d3      	str	r3, [r2, #12]
 800f190:	2300      	movs	r3, #0
 800f192:	e046      	b.n	800f222 <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	3302      	adds	r3, #2
 800f198:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	69fa      	ldr	r2, [r7, #28]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d20b      	bcs.n	800f1ba <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <pb_dec_bytes+0x64>
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	e000      	b.n	800f1b2 <pb_dec_bytes+0x66>
 800f1b0:	4b1f      	ldr	r3, [pc, #124]	; (800f230 <pb_dec_bytes+0xe4>)
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	60d3      	str	r3, [r2, #12]
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e033      	b.n	800f222 <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	789b      	ldrb	r3, [r3, #2]
 800f1be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1c2:	2b80      	cmp	r3, #128	; 0x80
 800f1c4:	d10b      	bne.n	800f1de <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d002      	beq.n	800f1d4 <pb_dec_bytes+0x88>
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	e000      	b.n	800f1d6 <pb_dec_bytes+0x8a>
 800f1d4:	4b17      	ldr	r3, [pc, #92]	; (800f234 <pb_dec_bytes+0xe8>)
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	60d3      	str	r3, [r2, #12]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e021      	b.n	800f222 <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d90b      	bls.n	800f206 <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <pb_dec_bytes+0xb0>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	e000      	b.n	800f1fe <pb_dec_bytes+0xb2>
 800f1fc:	4b0b      	ldr	r3, [pc, #44]	; (800f22c <pb_dec_bytes+0xe0>)
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	60d3      	str	r3, [r2, #12]
 800f202:	2300      	movs	r3, #0
 800f204:	e00d      	b.n	800f222 <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	b29a      	uxth	r2, r3
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	3302      	adds	r3, #2
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	4619      	mov	r1, r3
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7fe fc92 	bl	800db44 <pb_read>
 800f220:	4603      	mov	r3, r0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3720      	adds	r7, #32
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	080162e0 	.word	0x080162e0
 800f230:	080162f0 	.word	0x080162f0
 800f234:	08016258 	.word	0x08016258

0800f238 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b088      	sub	sp, #32
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 800f244:	f107 0314 	add.w	r3, r7, #20
 800f248:	4619      	mov	r1, r3
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7fe fdc6 	bl	800dddc <pb_decode_varint32>
 800f250:	4603      	mov	r3, r0
 800f252:	f083 0301 	eor.w	r3, r3, #1
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d001      	beq.n	800f260 <pb_dec_string+0x28>
        return false;
 800f25c:	2300      	movs	r3, #0
 800f25e:	e046      	b.n	800f2ee <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	3301      	adds	r3, #1
 800f264:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	69fa      	ldr	r2, [r7, #28]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d20b      	bcs.n	800f286 <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d002      	beq.n	800f27c <pb_dec_string+0x44>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	e000      	b.n	800f27e <pb_dec_string+0x46>
 800f27c:	4b1e      	ldr	r3, [pc, #120]	; (800f2f8 <pb_dec_string+0xc0>)
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	60d3      	str	r3, [r2, #12]
 800f282:	2300      	movs	r3, #0
 800f284:	e033      	b.n	800f2ee <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	789b      	ldrb	r3, [r3, #2]
 800f28a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f28e:	2b80      	cmp	r3, #128	; 0x80
 800f290:	d10b      	bne.n	800f2aa <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d002      	beq.n	800f2a0 <pb_dec_string+0x68>
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	e000      	b.n	800f2a2 <pb_dec_string+0x6a>
 800f2a0:	4b16      	ldr	r3, [pc, #88]	; (800f2fc <pb_dec_string+0xc4>)
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	60d3      	str	r3, [r2, #12]
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	e021      	b.n	800f2ee <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d90b      	bls.n	800f2d2 <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d002      	beq.n	800f2c8 <pb_dec_string+0x90>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	e000      	b.n	800f2ca <pb_dec_string+0x92>
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <pb_dec_string+0xc8>)
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	60d3      	str	r3, [r2, #12]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	e00d      	b.n	800f2ee <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f7fe fc33 	bl	800db44 <pb_read>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	701a      	strb	r2, [r3, #0]
    return status;
 800f2ec:	7efb      	ldrb	r3, [r7, #27]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3720      	adds	r7, #32
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	080162f0 	.word	0x080162f0
 800f2fc:	08016258 	.word	0x08016258
 800f300:	08016300 	.word	0x08016300

0800f304 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b08a      	sub	sp, #40	; 0x28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800f316:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 800f318:	f107 0310 	add.w	r3, r7, #16
 800f31c:	4619      	mov	r1, r3
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f7fe fedc 	bl	800e0dc <pb_make_string_substream>
 800f324:	4603      	mov	r3, r0
 800f326:	f083 0301 	eor.w	r3, r3, #1
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <pb_dec_submessage+0x30>
        return false;
 800f330:	2300      	movs	r3, #0
 800f332:	e03b      	b.n	800f3ac <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d10b      	bne.n	800f356 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d002      	beq.n	800f34c <pb_dec_submessage+0x48>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	e000      	b.n	800f34e <pb_dec_submessage+0x4a>
 800f34c:	4b19      	ldr	r3, [pc, #100]	; (800f3b4 <pb_dec_submessage+0xb0>)
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	60d3      	str	r3, [r2, #12]
 800f352:	2300      	movs	r3, #0
 800f354:	e02a      	b.n	800f3ac <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	789b      	ldrb	r3, [r3, #2]
 800f35a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f35e:	2b20      	cmp	r3, #32
 800f360:	d10a      	bne.n	800f378 <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800f362:	f107 0310 	add.w	r3, r7, #16
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	6a39      	ldr	r1, [r7, #32]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff fbfc 	bl	800eb68 <pb_decode>
 800f370:	4603      	mov	r3, r0
 800f372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f376:	e009      	b.n	800f38c <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800f378:	f107 0310 	add.w	r3, r7, #16
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	6a39      	ldr	r1, [r7, #32]
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fa87 	bl	800e894 <pb_decode_noinit>
 800f386:	4603      	mov	r3, r0
 800f388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 800f38c:	f107 0310 	add.w	r3, r7, #16
 800f390:	4619      	mov	r1, r3
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7fe fedc 	bl	800e150 <pb_close_string_substream>
 800f398:	4603      	mov	r3, r0
 800f39a:	f083 0301 	eor.w	r3, r3, #1
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <pb_dec_submessage+0xa4>
        return false;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	e001      	b.n	800f3ac <pb_dec_submessage+0xa8>
    return status;
 800f3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3728      	adds	r7, #40	; 0x28
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	08016310 	.word	0x08016310

0800f3b8 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800f3c4:	f107 0314 	add.w	r3, r7, #20
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7fe fd06 	bl	800dddc <pb_decode_varint32>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f083 0301 	eor.w	r3, r3, #1
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <pb_dec_fixed_length_bytes+0x28>
        return false;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e03b      	b.n	800f458 <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3e6:	d30b      	bcc.n	800f400 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d002      	beq.n	800f3f6 <pb_dec_fixed_length_bytes+0x3e>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	e000      	b.n	800f3f8 <pb_dec_fixed_length_bytes+0x40>
 800f3f6:	4b1a      	ldr	r3, [pc, #104]	; (800f460 <pb_dec_fixed_length_bytes+0xa8>)
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	60d3      	str	r3, [r2, #12]
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	e02b      	b.n	800f458 <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10a      	bne.n	800f41c <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	461a      	mov	r2, r3
 800f410:	2100      	movs	r1, #0
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f001 f8aa 	bl	801056c <memset>
        return true;
 800f418:	2301      	movs	r3, #1
 800f41a:	e01d      	b.n	800f458 <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f422:	b29b      	uxth	r3, r3
 800f424:	461a      	mov	r2, r3
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d00b      	beq.n	800f444 <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <pb_dec_fixed_length_bytes+0x82>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	e000      	b.n	800f43c <pb_dec_fixed_length_bytes+0x84>
 800f43a:	4b0a      	ldr	r3, [pc, #40]	; (800f464 <pb_dec_fixed_length_bytes+0xac>)
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	60d3      	str	r3, [r2, #12]
 800f440:	2300      	movs	r3, #0
 800f442:	e009      	b.n	800f458 <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	461a      	mov	r2, r3
 800f44e:	6879      	ldr	r1, [r7, #4]
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7fe fb77 	bl	800db44 <pb_read>
 800f456:	4603      	mov	r3, r0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	080162e0 	.word	0x080162e0
 800f464:	0801632c 	.word	0x0801632c

0800f468 <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d02b      	beq.n	800f4d4 <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	68da      	ldr	r2, [r3, #12]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	441a      	add	r2, r3
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d90b      	bls.n	800f4a4 <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <pb_write+0x32>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	e000      	b.n	800f49c <pb_write+0x34>
 800f49a:	4b14      	ldr	r3, [pc, #80]	; (800f4ec <pb_write+0x84>)
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	6113      	str	r3, [r2, #16]
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	e01e      	b.n	800f4e2 <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	68b9      	ldr	r1, [r7, #8]
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	4798      	blx	r3
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	f083 0301 	eor.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <pb_write+0x62>
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	e000      	b.n	800f4cc <pb_write+0x64>
 800f4ca:	4b09      	ldr	r3, [pc, #36]	; (800f4f0 <pb_write+0x88>)
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	6113      	str	r3, [r2, #16]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e006      	b.n	800f4e2 <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	68da      	ldr	r2, [r3, #12]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	441a      	add	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	60da      	str	r2, [r3, #12]
    return true;
 800f4e0:	2301      	movs	r3, #1
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	08016350 	.word	0x08016350
 800f4f0:	0801635c 	.word	0x0801635c

0800f4f4 <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 800f4f4:	b590      	push	{r4, r7, lr}
 800f4f6:	b08d      	sub	sp, #52	; 0x34
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
 800f500:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <encode_array+0x18>
        return true;
 800f508:	2301      	movs	r3, #1
 800f50a:	e0fb      	b.n	800f704 <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	789b      	ldrb	r3, [r3, #2]
 800f510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f514:	2b80      	cmp	r3, #128	; 0x80
 800f516:	d013      	beq.n	800f540 <encode_array+0x4c>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800f51e:	b29b      	uxth	r3, r3
 800f520:	461a      	mov	r2, r3
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	4293      	cmp	r3, r2
 800f526:	d90b      	bls.n	800f540 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <encode_array+0x42>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	691b      	ldr	r3, [r3, #16]
 800f534:	e000      	b.n	800f538 <encode_array+0x44>
 800f536:	4b75      	ldr	r3, [pc, #468]	; (800f70c <encode_array+0x218>)
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	6113      	str	r3, [r2, #16]
 800f53c:	2300      	movs	r3, #0
 800f53e:	e0e1      	b.n	800f704 <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	789b      	ldrb	r3, [r3, #2]
 800f544:	f003 030f 	and.w	r3, r3, #15
 800f548:	2b04      	cmp	r3, #4
 800f54a:	f300 808d 	bgt.w	800f668 <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	b29b      	uxth	r3, r3
 800f554:	461a      	mov	r2, r3
 800f556:	2102      	movs	r1, #2
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 fcb1 	bl	800fec0 <pb_encode_tag>
 800f55e:	4603      	mov	r3, r0
 800f560:	f083 0301 	eor.w	r3, r3, #1
 800f564:	b2db      	uxtb	r3, r3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <encode_array+0x7a>
            return false;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e0ca      	b.n	800f704 <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	789b      	ldrb	r3, [r3, #2]
 800f572:	f003 030f 	and.w	r3, r3, #15
 800f576:	2b03      	cmp	r3, #3
 800f578:	d103      	bne.n	800f582 <encode_array+0x8e>
        {
            size = 4 * count;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	627b      	str	r3, [r7, #36]	; 0x24
 800f580:	e035      	b.n	800f5ee <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	789b      	ldrb	r3, [r3, #2]
 800f586:	f003 030f 	and.w	r3, r3, #15
 800f58a:	2b04      	cmp	r3, #4
 800f58c:	d103      	bne.n	800f596 <encode_array+0xa2>
        {
            size = 8 * count;
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	627b      	str	r3, [r7, #36]	; 0x24
 800f594:	e02b      	b.n	800f5ee <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	2200      	movs	r2, #0
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	605a      	str	r2, [r3, #4]
 800f5a0:	609a      	str	r2, [r3, #8]
 800f5a2:	60da      	str	r2, [r3, #12]
 800f5a4:	611a      	str	r2, [r3, #16]
            p = pData;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ae:	e018      	b.n	800f5e2 <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 800f5b0:	f107 0010 	add.w	r0, r7, #16
 800f5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5b8:	68b9      	ldr	r1, [r7, #8]
 800f5ba:	4798      	blx	r3
 800f5bc:	4603      	mov	r3, r0
 800f5be:	f083 0301 	eor.w	r3, r3, #1
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <encode_array+0xd8>
                    return false;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	e09b      	b.n	800f704 <encode_array+0x210>
                p = (const char*)p + field->data_size;
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d8:	4413      	add	r3, r2
 800f5da:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800f5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5de:	3301      	adds	r3, #1
 800f5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d3e2      	bcc.n	800f5b0 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f0:	f04f 0400 	mov.w	r4, #0
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4623      	mov	r3, r4
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f000 fb5c 	bl	800fcb6 <pb_encode_varint>
 800f5fe:	4603      	mov	r3, r0
 800f600:	f083 0301 	eor.w	r3, r3, #1
 800f604:	b2db      	uxtb	r3, r3
 800f606:	2b00      	cmp	r3, #0
 800f608:	d001      	beq.n	800f60e <encode_array+0x11a>
            return false;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e07a      	b.n	800f704 <encode_array+0x210>
        
        if (stream->callback == NULL)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d106      	bne.n	800f624 <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800f616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f618:	2100      	movs	r1, #0
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f7ff ff24 	bl	800f468 <pb_write>
 800f620:	4603      	mov	r3, r0
 800f622:	e06f      	b.n	800f704 <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800f628:	2300      	movs	r3, #0
 800f62a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f62c:	e017      	b.n	800f65e <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 800f62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f632:	68b9      	ldr	r1, [r7, #8]
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	4798      	blx	r3
 800f638:	4603      	mov	r3, r0
 800f63a:	f083 0301 	eor.w	r3, r3, #1
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <encode_array+0x154>
                return false;
 800f644:	2300      	movs	r3, #0
 800f646:	e05d      	b.n	800f704 <encode_array+0x210>
            p = (const char*)p + field->data_size;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	461a      	mov	r2, r3
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	4413      	add	r3, r2
 800f656:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800f658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65a:	3301      	adds	r3, #1
 800f65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	429a      	cmp	r2, r3
 800f664:	d3e3      	bcc.n	800f62e <encode_array+0x13a>
 800f666:	e04c      	b.n	800f702 <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800f66c:	2300      	movs	r3, #0
 800f66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f670:	e043      	b.n	800f6fa <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800f672:	68b9      	ldr	r1, [r7, #8]
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f000 fc47 	bl	800ff08 <pb_encode_tag_for_field>
 800f67a:	4603      	mov	r3, r0
 800f67c:	f083 0301 	eor.w	r3, r3, #1
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <encode_array+0x196>
                return false;
 800f686:	2300      	movs	r3, #0
 800f688:	e03c      	b.n	800f704 <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	789b      	ldrb	r3, [r3, #2]
 800f68e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f692:	2b80      	cmp	r3, #128	; 0x80
 800f694:	d119      	bne.n	800f6ca <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	789b      	ldrb	r3, [r3, #2]
 800f69a:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800f69e:	2b06      	cmp	r3, #6
 800f6a0:	d005      	beq.n	800f6ae <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	789b      	ldrb	r3, [r3, #2]
 800f6a6:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800f6aa:	2b05      	cmp	r3, #5
 800f6ac:	d10d      	bne.n	800f6ca <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 800f6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b4:	68b9      	ldr	r1, [r7, #8]
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	4798      	blx	r3
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	f083 0301 	eor.w	r3, r3, #1
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00e      	beq.n	800f6e4 <encode_array+0x1f0>
                    return false;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	e01c      	b.n	800f704 <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 800f6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6ce:	68b9      	ldr	r1, [r7, #8]
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	4798      	blx	r3
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	f083 0301 	eor.w	r3, r3, #1
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d001      	beq.n	800f6e4 <encode_array+0x1f0>
                    return false;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	e00f      	b.n	800f704 <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f0:	4413      	add	r3, r2
 800f6f2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d3b7      	bcc.n	800f672 <encode_array+0x17e>
        }
    }
    
    return true;
 800f702:	2301      	movs	r3, #1
}
 800f704:	4618      	mov	r0, r3
 800f706:	3734      	adds	r7, #52	; 0x34
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd90      	pop	{r4, r7, pc}
 800f70c:	08016368 	.word	0x08016368

0800f710 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800f710:	b590      	push	{r4, r7, lr}
 800f712:	b08d      	sub	sp, #52	; 0x34
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	789b      	ldrb	r3, [r3, #2]
 800f71e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f728:	b21b      	sxth	r3, r3
 800f72a:	461a      	mov	r2, r3
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	4413      	add	r3, r2
 800f730:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800f732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f736:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 800f73e:	2300      	movs	r3, #0
 800f740:	e0af      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800f742:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f746:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f74a:	2b20      	cmp	r3, #32
 800f74c:	d107      	bne.n	800f75e <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 800f74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	bf0c      	ite	eq
 800f756:	2301      	moveq	r3, #1
 800f758:	2300      	movne	r3, #0
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	e0a1      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800f75e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f762:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f766:	2b30      	cmp	r3, #48	; 0x30
 800f768:	d107      	bne.n	800f77a <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bf0c      	ite	eq
 800f772:	2301      	moveq	r3, #1
 800f774:	2300      	movne	r3, #0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	e093      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800f77a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f77e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f782:	2b10      	cmp	r3, #16
 800f784:	d113      	bne.n	800f7ae <pb_check_proto3_default_value+0x9e>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f78c:	b21b      	sxth	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00d      	beq.n	800f7ae <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 800f792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	bf14      	ite	ne
 800f79a:	2301      	movne	r3, #1
 800f79c:	2300      	moveq	r3, #0
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	f083 0301 	eor.w	r3, r3, #1
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	e079      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800f7ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d15b      	bne.n	800f872 <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800f7ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7be:	f003 030f 	and.w	r3, r3, #15
 800f7c2:	2b05      	cmp	r3, #5
 800f7c4:	d109      	bne.n	800f7da <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bf0c      	ite	eq
 800f7d2:	2301      	moveq	r3, #1
 800f7d4:	2300      	movne	r3, #0
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	e063      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800f7da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7de:	f003 030f 	and.w	r3, r3, #15
 800f7e2:	2b06      	cmp	r3, #6
 800f7e4:	d107      	bne.n	800f7f6 <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bf0c      	ite	eq
 800f7ee:	2301      	moveq	r3, #1
 800f7f0:	2300      	movne	r3, #0
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	e055      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800f7f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7fa:	f003 030f 	and.w	r3, r3, #15
 800f7fe:	2b09      	cmp	r3, #9
 800f800:	d109      	bne.n	800f816 <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f808:	b29b      	uxth	r3, r3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	bf0c      	ite	eq
 800f80e:	2301      	moveq	r3, #1
 800f810:	2300      	movne	r3, #0
 800f812:	b2db      	uxtb	r3, r3
 800f814:	e045      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800f816:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f81a:	f003 030f 	and.w	r3, r3, #15
 800f81e:	2b07      	cmp	r3, #7
 800f820:	d127      	bne.n	800f872 <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 400b 	ldr.w	r4, [r3, #11]
 800f828:	6838      	ldr	r0, [r7, #0]
 800f82a:	f000 f9f0 	bl	800fc0e <pb_const_cast>
 800f82e:	4602      	mov	r2, r0
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	4621      	mov	r1, r4
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe f878 	bl	800d92c <pb_field_iter_begin>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d015      	beq.n	800f86e <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	69ba      	ldr	r2, [r7, #24]
 800f846:	4611      	mov	r1, r2
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff ff61 	bl	800f710 <pb_check_proto3_default_value>
 800f84e:	4603      	mov	r3, r0
 800f850:	f083 0301 	eor.w	r3, r3, #1
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b00      	cmp	r3, #0
 800f858:	d001      	beq.n	800f85e <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 800f85a:	2300      	movs	r3, #0
 800f85c:	e021      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 800f85e:	f107 0308 	add.w	r3, r7, #8
 800f862:	4618      	mov	r0, r3
 800f864:	f7fe f897 	bl	800d996 <pb_field_iter_next>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1e9      	bne.n	800f842 <pb_check_proto3_default_value+0x132>
            }
            return true;
 800f86e:	2301      	movs	r3, #1
 800f870:	e017      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 800f876:	2300      	movs	r3, #0
 800f878:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f87a:	e00a      	b.n	800f892 <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 800f87c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f87e:	6a3a      	ldr	r2, [r7, #32]
 800f880:	4413      	add	r3, r2
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 800f888:	2300      	movs	r3, #0
 800f88a:	e00a      	b.n	800f8a2 <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 800f88c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f88e:	3301      	adds	r3, #1
 800f890:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d3ed      	bcc.n	800f87c <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 800f8a0:	2301      	movs	r3, #1
	}
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3734      	adds	r7, #52	; 0x34
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd90      	pop	{r4, r7, pc}
	...

0800f8ac <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b08a      	sub	sp, #40	; 0x28
 800f8b0:	af02      	add	r7, sp, #8
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 800f8b8:	f107 0313 	add.w	r3, r7, #19
 800f8bc:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	789b      	ldrb	r3, [r3, #2]
 800f8c2:	f003 030f 	and.w	r3, r3, #15
 800f8c6:	4a75      	ldr	r2, [pc, #468]	; (800fa9c <encode_basic_field+0x1f0>)
 800f8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8cc:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f8d4:	b21b      	sxth	r3, r3
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d008      	beq.n	800f8ec <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f8e0:	b21b      	sxth	r3, r3
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	61fb      	str	r3, [r7, #28]
 800f8ea:	e019      	b.n	800f920 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	789b      	ldrb	r3, [r3, #2]
 800f8f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f8f4:	2b10      	cmp	r3, #16
 800f8f6:	d111      	bne.n	800f91c <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800f8f8:	6879      	ldr	r1, [r7, #4]
 800f8fa:	68b8      	ldr	r0, [r7, #8]
 800f8fc:	f7ff ff08 	bl	800f710 <pb_check_proto3_default_value>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	bf14      	ite	ne
 800f906:	2301      	movne	r3, #1
 800f908:	2300      	moveq	r3, #0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	f083 0301 	eor.w	r3, r3, #1
 800f910:	b2db      	uxtb	r3, r3
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	b2db      	uxtb	r3, r3
 800f918:	74fb      	strb	r3, [r7, #19]
 800f91a:	e001      	b.n	800f920 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 800f91c:	2301      	movs	r3, #1
 800f91e:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	789b      	ldrb	r3, [r3, #2]
 800f924:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f928:	2b80      	cmp	r3, #128	; 0x80
 800f92a:	d109      	bne.n	800f940 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	bf14      	ite	ne
 800f938:	2301      	movne	r3, #1
 800f93a:	2300      	moveq	r3, #0
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	789b      	ldrb	r3, [r3, #2]
 800f944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f948:	2b10      	cmp	r3, #16
 800f94a:	d031      	beq.n	800f9b0 <encode_basic_field+0x104>
 800f94c:	2b10      	cmp	r3, #16
 800f94e:	dc02      	bgt.n	800f956 <encode_basic_field+0xaa>
 800f950:	2b00      	cmp	r3, #0
 800f952:	d005      	beq.n	800f960 <encode_basic_field+0xb4>
 800f954:	e08a      	b.n	800fa6c <encode_basic_field+0x1c0>
 800f956:	2b20      	cmp	r3, #32
 800f958:	d047      	beq.n	800f9ea <encode_basic_field+0x13e>
 800f95a:	2b30      	cmp	r3, #48	; 0x30
 800f95c:	d066      	beq.n	800fa2c <encode_basic_field+0x180>
 800f95e:	e085      	b.n	800fa6c <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d10b      	bne.n	800f97e <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d002      	beq.n	800f974 <encode_basic_field+0xc8>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	691b      	ldr	r3, [r3, #16]
 800f972:	e000      	b.n	800f976 <encode_basic_field+0xca>
 800f974:	4b4a      	ldr	r3, [pc, #296]	; (800faa0 <encode_basic_field+0x1f4>)
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	6113      	str	r3, [r2, #16]
 800f97a:	2300      	movs	r3, #0
 800f97c:	e08a      	b.n	800fa94 <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f000 fac1 	bl	800ff08 <pb_encode_tag_for_field>
 800f986:	4603      	mov	r3, r0
 800f988:	f083 0301 	eor.w	r3, r3, #1
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <encode_basic_field+0xea>
                return false;
 800f992:	2300      	movs	r3, #0
 800f994:	e07e      	b.n	800fa94 <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	68b9      	ldr	r1, [r7, #8]
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	4798      	blx	r3
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	f083 0301 	eor.w	r3, r3, #1
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d06b      	beq.n	800fa84 <encode_basic_field+0x1d8>
                return false;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	e071      	b.n	800fa94 <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d067      	beq.n	800fa88 <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800f9b8:	68b9      	ldr	r1, [r7, #8]
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f000 faa4 	bl	800ff08 <pb_encode_tag_for_field>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	f083 0301 	eor.w	r3, r3, #1
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d001      	beq.n	800f9d0 <encode_basic_field+0x124>
                    return false;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	e061      	b.n	800fa94 <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	68b9      	ldr	r1, [r7, #8]
 800f9d6:	68f8      	ldr	r0, [r7, #12]
 800f9d8:	4798      	blx	r3
 800f9da:	4603      	mov	r3, r0
 800f9dc:	f083 0301 	eor.w	r3, r3, #1
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d050      	beq.n	800fa88 <encode_basic_field+0x1dc>
                    return false;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	e054      	b.n	800fa94 <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f9f0:	b21b      	sxth	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d003      	beq.n	800f9fe <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	881b      	ldrh	r3, [r3, #0]
 800f9fa:	837b      	strh	r3, [r7, #26]
 800f9fc:	e005      	b.n	800fa0a <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	7a5a      	ldrb	r2, [r3, #9]
 800fa02:	7a9b      	ldrb	r3, [r3, #10]
 800fa04:	021b      	lsls	r3, r3, #8
 800fa06:	4313      	orrs	r3, r2
 800fa08:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 800fa0a:	8b7a      	ldrh	r2, [r7, #26]
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	9300      	str	r3, [sp, #0]
 800fa10:	4613      	mov	r3, r2
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f7ff fd6c 	bl	800f4f4 <encode_array>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f083 0301 	eor.w	r3, r3, #1
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d031      	beq.n	800fa8c <encode_basic_field+0x1e0>
                return false;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e033      	b.n	800fa94 <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	881a      	ldrh	r2, [r3, #0]
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d12a      	bne.n	800fa90 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 fa63 	bl	800ff08 <pb_encode_tag_for_field>
 800fa42:	4603      	mov	r3, r0
 800fa44:	f083 0301 	eor.w	r3, r3, #1
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d001      	beq.n	800fa52 <encode_basic_field+0x1a6>
                    return false;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	e020      	b.n	800fa94 <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	4798      	blx	r3
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	f083 0301 	eor.w	r3, r3, #1
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d013      	beq.n	800fa90 <encode_basic_field+0x1e4>
                    return false;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e013      	b.n	800fa94 <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <encode_basic_field+0x1ce>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	691b      	ldr	r3, [r3, #16]
 800fa78:	e000      	b.n	800fa7c <encode_basic_field+0x1d0>
 800fa7a:	4b0a      	ldr	r3, [pc, #40]	; (800faa4 <encode_basic_field+0x1f8>)
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	6113      	str	r3, [r2, #16]
 800fa80:	2300      	movs	r3, #0
 800fa82:	e007      	b.n	800fa94 <encode_basic_field+0x1e8>
            break;
 800fa84:	bf00      	nop
 800fa86:	e004      	b.n	800fa92 <encode_basic_field+0x1e6>
            break;
 800fa88:	bf00      	nop
 800fa8a:	e002      	b.n	800fa92 <encode_basic_field+0x1e6>
            break;
 800fa8c:	bf00      	nop
 800fa8e:	e000      	b.n	800fa92 <encode_basic_field+0x1e6>
            break;
 800fa90:	bf00      	nop
    }
    
    return true;
 800fa92:	2301      	movs	r3, #1
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3720      	adds	r7, #32
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	08016dc0 	.word	0x08016dc0
 800faa0:	08016380 	.word	0x08016380
 800faa4:	08016398 	.word	0x08016398

0800faa8 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	3304      	adds	r3, #4
 800fabc:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d017      	beq.n	800faf6 <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	693a      	ldr	r2, [r7, #16]
 800facc:	68b9      	ldr	r1, [r7, #8]
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	4798      	blx	r3
 800fad2:	4603      	mov	r3, r0
 800fad4:	f083 0301 	eor.w	r3, r3, #1
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00b      	beq.n	800faf6 <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d002      	beq.n	800faec <encode_callback_field+0x44>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	691b      	ldr	r3, [r3, #16]
 800faea:	e000      	b.n	800faee <encode_callback_field+0x46>
 800faec:	4b04      	ldr	r3, [pc, #16]	; (800fb00 <encode_callback_field+0x58>)
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	6113      	str	r3, [r2, #16]
 800faf2:	2300      	movs	r3, #0
 800faf4:	e000      	b.n	800faf8 <encode_callback_field+0x50>
    }
    return true;
 800faf6:	2301      	movs	r3, #1
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	080163ac 	.word	0x080163ac

0800fb04 <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	789b      	ldrb	r3, [r3, #2]
 800fb14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb18:	2b40      	cmp	r3, #64	; 0x40
 800fb1a:	d00a      	beq.n	800fb32 <encode_field+0x2e>
 800fb1c:	2b80      	cmp	r3, #128	; 0x80
 800fb1e:	d001      	beq.n	800fb24 <encode_field+0x20>
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d10d      	bne.n	800fb40 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	68b9      	ldr	r1, [r7, #8]
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f7ff febf 	bl	800f8ac <encode_basic_field>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	e011      	b.n	800fb56 <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	68b9      	ldr	r1, [r7, #8]
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f7ff ffb6 	bl	800faa8 <encode_callback_field>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	e00a      	b.n	800fb56 <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <encode_field+0x4a>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	e000      	b.n	800fb50 <encode_field+0x4c>
 800fb4e:	4b04      	ldr	r3, [pc, #16]	; (800fb60 <encode_field+0x5c>)
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	6113      	str	r3, [r2, #16]
 800fb54:	2300      	movs	r3, #0
    }
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3710      	adds	r7, #16
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	08016398 	.word	0x08016398

0800fb64 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	789b      	ldrb	r3, [r3, #2]
 800fb7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb7e:	2b80      	cmp	r3, #128	; 0x80
 800fb80:	d108      	bne.n	800fb94 <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	3304      	adds	r3, #4
 800fb86:	461a      	mov	r2, r3
 800fb88:	68f9      	ldr	r1, [r7, #12]
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff ffba 	bl	800fb04 <encode_field>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e007      	b.n	800fba4 <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	68f9      	ldr	r1, [r7, #12]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7ff ffb1 	bl	800fb04 <encode_field>
 800fba2:	4603      	mov	r3, r0
    }
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 800fbbe:	e01e      	b.n	800fbfe <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d008      	beq.n	800fbdc <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	6979      	ldr	r1, [r7, #20]
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	4798      	blx	r3
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	74fb      	strb	r3, [r7, #19]
 800fbda:	e005      	b.n	800fbe8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800fbdc:	6979      	ldr	r1, [r7, #20]
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f7ff ffc0 	bl	800fb64 <default_extension_encoder>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	74fb      	strb	r3, [r7, #19]

        if (!status)
 800fbe8:	7cfb      	ldrb	r3, [r7, #19]
 800fbea:	f083 0301 	eor.w	r3, r3, #1
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d001      	beq.n	800fbf8 <encode_extension_field+0x4c>
            return false;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	e006      	b.n	800fc06 <encode_extension_field+0x5a>
        
        extension = extension->next;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	617b      	str	r3, [r7, #20]
    while (extension)
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1dd      	bne.n	800fbc0 <encode_extension_field+0x14>
    }
    
    return true;
 800fc04:	2301      	movs	r3, #1
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3718      	adds	r7, #24
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 800fc0e:	b480      	push	{r7}
 800fc10:	b085      	sub	sp, #20
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08a      	sub	sp, #40	; 0x28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7ff ffea 	bl	800fc0e <pb_const_cast>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	f107 0310 	add.w	r3, r7, #16
 800fc40:	68b9      	ldr	r1, [r7, #8]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fd fe72 	bl	800d92c <pb_field_iter_begin>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f083 0301 	eor.w	r3, r3, #1
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <pb_encode+0x30>
        return true; /* Empty message type */
 800fc54:	2301      	movs	r3, #1
 800fc56:	e02a      	b.n	800fcae <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	789b      	ldrb	r3, [r3, #2]
 800fc5c:	f003 030f 	and.w	r3, r3, #15
 800fc60:	2b08      	cmp	r3, #8
 800fc62:	d10d      	bne.n	800fc80 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	6a3a      	ldr	r2, [r7, #32]
 800fc68:	4619      	mov	r1, r3
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7ff ff9e 	bl	800fbac <encode_extension_field>
 800fc70:	4603      	mov	r3, r0
 800fc72:	f083 0301 	eor.w	r3, r3, #1
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00f      	beq.n	800fc9c <pb_encode+0x74>
                return false;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	e016      	b.n	800fcae <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	6a3a      	ldr	r2, [r7, #32]
 800fc84:	4619      	mov	r1, r3
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7ff ff3c 	bl	800fb04 <encode_field>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	f083 0301 	eor.w	r3, r3, #1
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <pb_encode+0x74>
                return false;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e008      	b.n	800fcae <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 800fc9c:	f107 0310 	add.w	r3, r7, #16
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fd fe78 	bl	800d996 <pb_field_iter_next>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1d5      	bne.n	800fc58 <pb_encode+0x30>
    
    return true;
 800fcac:	2301      	movs	r3, #1
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3728      	adds	r7, #40	; 0x28
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800fcb6:	b590      	push	{r4, r7, lr}
 800fcb8:	b08b      	sub	sp, #44	; 0x2c
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	60f8      	str	r0, [r7, #12]
 800fcbe:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 800fcc6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fcca:	2c00      	cmp	r4, #0
 800fccc:	bf08      	it	eq
 800fcce:	2b80      	cmpeq	r3, #128	; 0x80
 800fcd0:	d223      	bcs.n	800fd1a <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 800fcd2:	783b      	ldrb	r3, [r7, #0]
 800fcd4:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 800fcd6:	f107 0317 	add.w	r3, r7, #23
 800fcda:	2201      	movs	r2, #1
 800fcdc:	4619      	mov	r1, r3
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f7ff fbc2 	bl	800f468 <pb_write>
 800fce4:	4603      	mov	r3, r0
 800fce6:	e035      	b.n	800fd54 <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800fce8:	783b      	ldrb	r3, [r7, #0]
 800fcea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fcee:	b2d9      	uxtb	r1, r3
 800fcf0:	f107 0218 	add.w	r2, r7, #24
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	4413      	add	r3, r2
 800fcf8:	460a      	mov	r2, r1
 800fcfa:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 800fcfc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fd00:	f04f 0300 	mov.w	r3, #0
 800fd04:	f04f 0400 	mov.w	r4, #0
 800fd08:	09cb      	lsrs	r3, r1, #7
 800fd0a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800fd0e:	09d4      	lsrs	r4, r2, #7
 800fd10:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd16:	3301      	adds	r3, #1
 800fd18:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 800fd1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fd1e:	4323      	orrs	r3, r4
 800fd20:	d1e2      	bne.n	800fce8 <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	3b01      	subs	r3, #1
 800fd26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd2a:	4413      	add	r3, r2
 800fd2c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	3b01      	subs	r3, #1
 800fd34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fd38:	b2d2      	uxtb	r2, r2
 800fd3a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fd3e:	440b      	add	r3, r1
 800fd40:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 800fd44:	f107 0318 	add.w	r3, r7, #24
 800fd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7ff fb8b 	bl	800f468 <pb_write>
 800fd52:	4603      	mov	r3, r0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	372c      	adds	r7, #44	; 0x2c
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd90      	pop	{r4, r7, pc}

0800fd5c <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800fd5c:	b590      	push	{r4, r7, lr}
 800fd5e:	b087      	sub	sp, #28
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 800fd68:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f174 0300 	sbcs.w	r3, r4, #0
 800fd72:	da0d      	bge.n	800fd90 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 800fd74:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fd78:	184b      	adds	r3, r1, r1
 800fd7a:	eb42 0402 	adc.w	r4, r2, r2
 800fd7e:	4619      	mov	r1, r3
 800fd80:	4622      	mov	r2, r4
 800fd82:	ea6f 0301 	mvn.w	r3, r1
 800fd86:	ea6f 0402 	mvn.w	r4, r2
 800fd8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fd8e:	e006      	b.n	800fd9e <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800fd90:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fd94:	184b      	adds	r3, r1, r1
 800fd96:	eb42 0402 	adc.w	r4, r2, r2
 800fd9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 800fd9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff ff87 	bl	800fcb6 <pb_encode_varint>
 800fda8:	4603      	mov	r3, r0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	371c      	adds	r7, #28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd90      	pop	{r4, r7, pc}

0800fdb2 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	0a1b      	lsrs	r3, r3, #8
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	0c1b      	lsrs	r3, r3, #16
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	0e1b      	lsrs	r3, r3, #24
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 800fde0:	f107 0308 	add.w	r3, r7, #8
 800fde4:	2204      	movs	r2, #4
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff fb3d 	bl	800f468 <pb_write>
 800fdee:	4603      	mov	r3, r0
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800fdf8:	b590      	push	{r4, r7, lr}
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fe08:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800fe0c:	7c3b      	ldrb	r3, [r7, #16]
 800fe0e:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800fe10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe14:	f04f 0300 	mov.w	r3, #0
 800fe18:	f04f 0400 	mov.w	r4, #0
 800fe1c:	0a0b      	lsrs	r3, r1, #8
 800fe1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fe22:	0a14      	lsrs	r4, r2, #8
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800fe28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe2c:	f04f 0300 	mov.w	r3, #0
 800fe30:	f04f 0400 	mov.w	r4, #0
 800fe34:	0c0b      	lsrs	r3, r1, #16
 800fe36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe3a:	0c14      	lsrs	r4, r2, #16
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800fe40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe44:	f04f 0300 	mov.w	r3, #0
 800fe48:	f04f 0400 	mov.w	r4, #0
 800fe4c:	0e0b      	lsrs	r3, r1, #24
 800fe4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fe52:	0e14      	lsrs	r4, r2, #24
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800fe58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe5c:	f04f 0300 	mov.w	r3, #0
 800fe60:	f04f 0400 	mov.w	r4, #0
 800fe64:	0013      	movs	r3, r2
 800fe66:	2400      	movs	r4, #0
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800fe6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe70:	f04f 0300 	mov.w	r3, #0
 800fe74:	f04f 0400 	mov.w	r4, #0
 800fe78:	0a13      	lsrs	r3, r2, #8
 800fe7a:	2400      	movs	r4, #0
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800fe80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe84:	f04f 0300 	mov.w	r3, #0
 800fe88:	f04f 0400 	mov.w	r4, #0
 800fe8c:	0c13      	lsrs	r3, r2, #16
 800fe8e:	2400      	movs	r4, #0
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800fe94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe98:	f04f 0300 	mov.w	r3, #0
 800fe9c:	f04f 0400 	mov.w	r4, #0
 800fea0:	0e13      	lsrs	r3, r2, #24
 800fea2:	2400      	movs	r4, #0
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 800fea8:	f107 0308 	add.w	r3, r7, #8
 800feac:	2208      	movs	r2, #8
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7ff fad9 	bl	800f468 <pb_write>
 800feb6:	4603      	mov	r3, r0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	371c      	adds	r7, #28
 800febc:	46bd      	mov	sp, r7
 800febe:	bd90      	pop	{r4, r7, pc}

0800fec0 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800fec0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fec4:	b086      	sub	sp, #24
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	60f8      	str	r0, [r7, #12]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	460a      	mov	r2, r1
 800fece:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	4611      	mov	r1, r2
 800fed4:	f04f 0200 	mov.w	r2, #0
 800fed8:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 800fedc:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 800fee0:	7af9      	ldrb	r1, [r7, #11]
 800fee2:	f04f 0200 	mov.w	r2, #0
 800fee6:	ea4b 0301 	orr.w	r3, fp, r1
 800feea:	ea4c 0402 	orr.w	r4, ip, r2
 800feee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 800fef2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7ff fedd 	bl	800fcb6 <pb_encode_varint>
 800fefc:	4603      	mov	r3, r0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3718      	adds	r7, #24
 800ff02:	46bd      	mov	sp, r7
 800ff04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ff08 <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	789b      	ldrb	r3, [r3, #2]
 800ff16:	f003 030f 	and.w	r3, r3, #15
 800ff1a:	2b09      	cmp	r3, #9
 800ff1c:	d822      	bhi.n	800ff64 <pb_encode_tag_for_field+0x5c>
 800ff1e:	a201      	add	r2, pc, #4	; (adr r2, 800ff24 <pb_encode_tag_for_field+0x1c>)
 800ff20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff24:	0800ff4d 	.word	0x0800ff4d
 800ff28:	0800ff4d 	.word	0x0800ff4d
 800ff2c:	0800ff4d 	.word	0x0800ff4d
 800ff30:	0800ff53 	.word	0x0800ff53
 800ff34:	0800ff59 	.word	0x0800ff59
 800ff38:	0800ff5f 	.word	0x0800ff5f
 800ff3c:	0800ff5f 	.word	0x0800ff5f
 800ff40:	0800ff5f 	.word	0x0800ff5f
 800ff44:	0800ff65 	.word	0x0800ff65
 800ff48:	0800ff5f 	.word	0x0800ff5f
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	73fb      	strb	r3, [r7, #15]
            break;
 800ff50:	e014      	b.n	800ff7c <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800ff52:	2305      	movs	r3, #5
 800ff54:	73fb      	strb	r3, [r7, #15]
            break;
 800ff56:	e011      	b.n	800ff7c <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	73fb      	strb	r3, [r7, #15]
            break;
 800ff5c:	e00e      	b.n	800ff7c <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800ff5e:	2302      	movs	r3, #2
 800ff60:	73fb      	strb	r3, [r7, #15]
            break;
 800ff62:	e00b      	b.n	800ff7c <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	691b      	ldr	r3, [r3, #16]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d002      	beq.n	800ff72 <pb_encode_tag_for_field+0x6a>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	691b      	ldr	r3, [r3, #16]
 800ff70:	e000      	b.n	800ff74 <pb_encode_tag_for_field+0x6c>
 800ff72:	4b09      	ldr	r3, [pc, #36]	; (800ff98 <pb_encode_tag_for_field+0x90>)
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	6113      	str	r3, [r2, #16]
 800ff78:	2300      	movs	r3, #0
 800ff7a:	e009      	b.n	800ff90 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	881b      	ldrh	r3, [r3, #0]
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	461a      	mov	r2, r3
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	4619      	mov	r1, r3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ff99 	bl	800fec0 <pb_encode_tag>
 800ff8e:	4603      	mov	r3, r0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	08016398 	.word	0x08016398

0800ff9c <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800ff9c:	b590      	push	{r4, r7, lr}
 800ff9e:	b085      	sub	sp, #20
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f04f 0400 	mov.w	r4, #0
 800ffae:	461a      	mov	r2, r3
 800ffb0:	4623      	mov	r3, r4
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f7ff fe7f 	bl	800fcb6 <pb_encode_varint>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	f083 0301 	eor.w	r3, r3, #1
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <pb_encode_string+0x2c>
        return false;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	e005      	b.n	800ffd4 <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	68b9      	ldr	r1, [r7, #8]
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f7ff fa4b 	bl	800f468 <pb_write>
 800ffd2:	4603      	mov	r3, r0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd90      	pop	{r4, r7, pc}

0800ffdc <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800ffdc:	b590      	push	{r4, r7, lr}
 800ffde:	b08d      	sub	sp, #52	; 0x34
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800ffe8:	f107 0314 	add.w	r3, r7, #20
 800ffec:	2200      	movs	r2, #0
 800ffee:	601a      	str	r2, [r3, #0]
 800fff0:	605a      	str	r2, [r3, #4]
 800fff2:	609a      	str	r2, [r3, #8]
 800fff4:	60da      	str	r2, [r3, #12]
 800fff6:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800fff8:	f107 0314 	add.w	r3, r7, #20
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	68b9      	ldr	r1, [r7, #8]
 8010000:	4618      	mov	r0, r3
 8010002:	f7ff fe11 	bl	800fc28 <pb_encode>
 8010006:	4603      	mov	r3, r0
 8010008:	f083 0301 	eor.w	r3, r3, #1
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d004      	beq.n	801001c <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8010012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8010018:	2300      	movs	r3, #0
 801001a:	e064      	b.n	80100e6 <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8010020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010022:	f04f 0400 	mov.w	r4, #0
 8010026:	461a      	mov	r2, r3
 8010028:	4623      	mov	r3, r4
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7ff fe43 	bl	800fcb6 <pb_encode_varint>
 8010030:	4603      	mov	r3, r0
 8010032:	f083 0301 	eor.w	r3, r3, #1
 8010036:	b2db      	uxtb	r3, r3
 8010038:	2b00      	cmp	r3, #0
 801003a:	d001      	beq.n	8010040 <pb_encode_submessage+0x64>
        return false;
 801003c:	2300      	movs	r3, #0
 801003e:	e052      	b.n	80100e6 <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d106      	bne.n	8010056 <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8010048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801004a:	2100      	movs	r1, #0
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f7ff fa0b 	bl	800f468 <pb_write>
 8010052:	4603      	mov	r3, r0
 8010054:	e047      	b.n	80100e6 <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	68da      	ldr	r2, [r3, #12]
 801005a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005c:	441a      	add	r2, r3
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	429a      	cmp	r2, r3
 8010064:	d90b      	bls.n	801007e <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	691b      	ldr	r3, [r3, #16]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d002      	beq.n	8010074 <pb_encode_submessage+0x98>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	e000      	b.n	8010076 <pb_encode_submessage+0x9a>
 8010074:	4b1e      	ldr	r3, [pc, #120]	; (80100f0 <pb_encode_submessage+0x114>)
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	6113      	str	r3, [r2, #16]
 801007a:	2300      	movs	r3, #0
 801007c:	e033      	b.n	80100e6 <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 801008e:	2300      	movs	r3, #0
 8010090:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8010096:	f107 0314 	add.w	r3, r7, #20
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	68b9      	ldr	r1, [r7, #8]
 801009e:	4618      	mov	r0, r3
 80100a0:	f7ff fdc2 	bl	800fc28 <pb_encode>
 80100a4:	4603      	mov	r3, r0
 80100a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	68da      	ldr	r2, [r3, #12]
 80100ae:	6a3b      	ldr	r3, [r7, #32]
 80100b0:	441a      	add	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 80100b6:	69ba      	ldr	r2, [r7, #24]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80100bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d00b      	beq.n	80100e2 <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <pb_encode_submessage+0xfc>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	691b      	ldr	r3, [r3, #16]
 80100d6:	e000      	b.n	80100da <pb_encode_submessage+0xfe>
 80100d8:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <pb_encode_submessage+0x118>)
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	6113      	str	r3, [r2, #16]
 80100de:	2300      	movs	r3, #0
 80100e0:	e001      	b.n	80100e6 <pb_encode_submessage+0x10a>
    
    return status;
 80100e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3734      	adds	r7, #52	; 0x34
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd90      	pop	{r4, r7, pc}
 80100ee:	bf00      	nop
 80100f0:	08016350 	.word	0x08016350
 80100f4:	080163bc 	.word	0x080163bc

080100f8 <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80100f8:	b590      	push	{r4, r7, lr}
 80100fa:	b087      	sub	sp, #28
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 8010104:	f04f 0300 	mov.w	r3, #0
 8010108:	f04f 0400 	mov.w	r4, #0
 801010c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010116:	b29b      	uxth	r3, r3
 8010118:	2b01      	cmp	r3, #1
 801011a:	d108      	bne.n	801012e <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f993 3000 	ldrsb.w	r3, [r3]
 8010122:	b25b      	sxtb	r3, r3
 8010124:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010128:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801012c:	e033      	b.n	8010196 <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010134:	b29b      	uxth	r3, r3
 8010136:	2b02      	cmp	r3, #2
 8010138:	d108      	bne.n	801014c <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010140:	b21b      	sxth	r3, r3
 8010142:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010146:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801014a:	e024      	b.n	8010196 <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010152:	b29b      	uxth	r3, r3
 8010154:	2b04      	cmp	r3, #4
 8010156:	d106      	bne.n	8010166 <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010160:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010164:	e017      	b.n	8010196 <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801016c:	b29b      	uxth	r3, r3
 801016e:	2b08      	cmp	r3, #8
 8010170:	d105      	bne.n	801017e <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010178:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801017c:	e00b      	b.n	8010196 <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d002      	beq.n	801018c <pb_enc_varint+0x94>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	e000      	b.n	801018e <pb_enc_varint+0x96>
 801018c:	4b08      	ldr	r3, [pc, #32]	; (80101b0 <pb_enc_varint+0xb8>)
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	6113      	str	r3, [r2, #16]
 8010192:	2300      	movs	r3, #0
 8010194:	e007      	b.n	80101a6 <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8010196:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801019a:	461a      	mov	r2, r3
 801019c:	4623      	mov	r3, r4
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f7ff fd89 	bl	800fcb6 <pb_encode_varint>
 80101a4:	4603      	mov	r3, r0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	371c      	adds	r7, #28
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd90      	pop	{r4, r7, pc}
 80101ae:	bf00      	nop
 80101b0:	080163d0 	.word	0x080163d0

080101b4 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80101b4:	b590      	push	{r4, r7, lr}
 80101b6:	b087      	sub	sp, #28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 80101c0:	f04f 0300 	mov.w	r3, #0
 80101c4:	f04f 0400 	mov.w	r4, #0
 80101c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d107      	bne.n	80101e8 <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	f04f 0400 	mov.w	r4, #0
 80101e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80101e6:	e032      	b.n	801024e <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	d107      	bne.n	8010204 <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	f04f 0400 	mov.w	r4, #0
 80101fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010202:	e024      	b.n	801024e <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801020a:	b29b      	uxth	r3, r3
 801020c:	2b04      	cmp	r3, #4
 801020e:	d106      	bne.n	801021e <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f04f 0400 	mov.w	r4, #0
 8010218:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801021c:	e017      	b.n	801024e <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010224:	b29b      	uxth	r3, r3
 8010226:	2b08      	cmp	r3, #8
 8010228:	d105      	bne.n	8010236 <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010230:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010234:	e00b      	b.n	801024e <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d002      	beq.n	8010244 <pb_enc_uvarint+0x90>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	e000      	b.n	8010246 <pb_enc_uvarint+0x92>
 8010244:	4b07      	ldr	r3, [pc, #28]	; (8010264 <pb_enc_uvarint+0xb0>)
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	6113      	str	r3, [r2, #16]
 801024a:	2300      	movs	r3, #0
 801024c:	e005      	b.n	801025a <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 801024e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f7ff fd2f 	bl	800fcb6 <pb_encode_varint>
 8010258:	4603      	mov	r3, r0
}
 801025a:	4618      	mov	r0, r3
 801025c:	371c      	adds	r7, #28
 801025e:	46bd      	mov	sp, r7
 8010260:	bd90      	pop	{r4, r7, pc}
 8010262:	bf00      	nop
 8010264:	080163d0 	.word	0x080163d0

08010268 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010268:	b590      	push	{r4, r7, lr}
 801026a:	b087      	sub	sp, #28
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 8010274:	f04f 0300 	mov.w	r3, #0
 8010278:	f04f 0400 	mov.w	r4, #0
 801027c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8010286:	b29b      	uxth	r3, r3
 8010288:	2b01      	cmp	r3, #1
 801028a:	d108      	bne.n	801029e <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f993 3000 	ldrsb.w	r3, [r3]
 8010292:	b25b      	sxtb	r3, r3
 8010294:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8010298:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801029c:	e033      	b.n	8010306 <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d108      	bne.n	80102bc <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102b0:	b21b      	sxth	r3, r3
 80102b2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80102b6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80102ba:	e024      	b.n	8010306 <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	2b04      	cmp	r3, #4
 80102c6:	d106      	bne.n	80102d6 <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80102d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80102d4:	e017      	b.n	8010306 <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	2b08      	cmp	r3, #8
 80102e0:	d105      	bne.n	80102ee <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80102e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80102ec:	e00b      	b.n	8010306 <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <pb_enc_svarint+0x94>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	e000      	b.n	80102fe <pb_enc_svarint+0x96>
 80102fc:	4b07      	ldr	r3, [pc, #28]	; (801031c <pb_enc_svarint+0xb4>)
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	6113      	str	r3, [r2, #16]
 8010302:	2300      	movs	r3, #0
 8010304:	e005      	b.n	8010312 <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 8010306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f7ff fd26 	bl	800fd5c <pb_encode_svarint>
 8010310:	4603      	mov	r3, r0
}
 8010312:	4618      	mov	r0, r3
 8010314:	371c      	adds	r7, #28
 8010316:	46bd      	mov	sp, r7
 8010318:	bd90      	pop	{r4, r7, pc}
 801031a:	bf00      	nop
 801031c:	080163d0 	.word	0x080163d0

08010320 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 801032c:	6879      	ldr	r1, [r7, #4]
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f7ff fd62 	bl	800fdf8 <pb_encode_fixed64>
 8010334:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 8010336:	4618      	mov	r0, r3
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 801033e:	b580      	push	{r7, lr}
 8010340:	b084      	sub	sp, #16
 8010342:	af00      	add	r7, sp, #0
 8010344:	60f8      	str	r0, [r7, #12]
 8010346:	60b9      	str	r1, [r7, #8]
 8010348:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 801034a:	6879      	ldr	r1, [r7, #4]
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f7ff fd30 	bl	800fdb2 <pb_encode_fixed32>
 8010352:	4603      	mov	r3, r0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 8010368:	2300      	movs	r3, #0
 801036a:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d106      	bne.n	8010384 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8010376:	2200      	movs	r2, #0
 8010378:	2100      	movs	r1, #0
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7ff fe0e 	bl	800ff9c <pb_encode_string>
 8010380:	4603      	mov	r3, r0
 8010382:	e023      	b.n	80103cc <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	789b      	ldrb	r3, [r3, #2]
 8010388:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d114      	bne.n	80103ba <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	881b      	ldrh	r3, [r3, #0]
 8010394:	3302      	adds	r3, #2
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 801039c:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801039e:	4293      	cmp	r3, r2
 80103a0:	d90b      	bls.n	80103ba <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	691b      	ldr	r3, [r3, #16]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d002      	beq.n	80103b0 <pb_enc_bytes+0x54>
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	e000      	b.n	80103b2 <pb_enc_bytes+0x56>
 80103b0:	4b08      	ldr	r3, [pc, #32]	; (80103d4 <pb_enc_bytes+0x78>)
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	6113      	str	r3, [r2, #16]
 80103b6:	2300      	movs	r3, #0
 80103b8:	e008      	b.n	80103cc <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	1c99      	adds	r1, r3, #2
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	461a      	mov	r2, r3
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f7ff fde9 	bl	800ff9c <pb_encode_string>
 80103ca:	4603      	mov	r3, r0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3718      	adds	r7, #24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	080163e4 	.word	0x080163e4

080103d8 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b088      	sub	sp, #32
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 80103e4:	2300      	movs	r3, #0
 80103e6:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	789b      	ldrb	r3, [r3, #2]
 80103fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80103fe:	2b80      	cmp	r3, #128	; 0x80
 8010400:	d102      	bne.n	8010408 <pb_enc_string+0x30>
        max_size = (size_t)-1;
 8010402:	f04f 33ff 	mov.w	r3, #4294967295
 8010406:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d108      	bne.n	8010420 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 801040e:	2300      	movs	r3, #0
 8010410:	61fb      	str	r3, [r7, #28]
 8010412:	e00d      	b.n	8010430 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	3301      	adds	r3, #1
 8010418:	61fb      	str	r3, [r7, #28]
            p++;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	3301      	adds	r3, #1
 801041e:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 8010420:	69fa      	ldr	r2, [r7, #28]
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	429a      	cmp	r2, r3
 8010426:	d203      	bcs.n	8010430 <pb_enc_string+0x58>
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d1f1      	bne.n	8010414 <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8010430:	69fa      	ldr	r2, [r7, #28]
 8010432:	6879      	ldr	r1, [r7, #4]
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f7ff fdb1 	bl	800ff9c <pb_encode_string>
 801043a:	4603      	mov	r3, r0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d10b      	bne.n	8010472 <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	691b      	ldr	r3, [r3, #16]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d002      	beq.n	8010468 <pb_enc_submessage+0x24>
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	691b      	ldr	r3, [r3, #16]
 8010466:	e000      	b.n	801046a <pb_enc_submessage+0x26>
 8010468:	4b08      	ldr	r3, [pc, #32]	; (801048c <pb_enc_submessage+0x48>)
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	6113      	str	r3, [r2, #16]
 801046e:	2300      	movs	r3, #0
 8010470:	e008      	b.n	8010484 <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	4619      	mov	r1, r3
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f7ff fdad 	bl	800ffdc <pb_encode_submessage>
 8010482:	4603      	mov	r3, r0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	080163f8 	.word	0x080163f8

08010490 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	461a      	mov	r2, r3
 80104a6:	6879      	ldr	r1, [r7, #4]
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7ff fd77 	bl	800ff9c <pb_encode_string>
 80104ae:	4603      	mov	r3, r0
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3710      	adds	r7, #16
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <__aeabi_memclr>:
 80104b8:	2200      	movs	r2, #0
 80104ba:	f7f6 bc87 	b.w	8006dcc <__aeabi_memset>

080104be <__aeabi_memcpy>:
 80104be:	f000 b84a 	b.w	8010556 <memcpy>
	...

080104c4 <__errno>:
 80104c4:	4b01      	ldr	r3, [pc, #4]	; (80104cc <__errno+0x8>)
 80104c6:	6818      	ldr	r0, [r3, #0]
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	200006c8 	.word	0x200006c8

080104d0 <__libc_init_array>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	4e0d      	ldr	r6, [pc, #52]	; (8010508 <__libc_init_array+0x38>)
 80104d4:	4c0d      	ldr	r4, [pc, #52]	; (801050c <__libc_init_array+0x3c>)
 80104d6:	1ba4      	subs	r4, r4, r6
 80104d8:	10a4      	asrs	r4, r4, #2
 80104da:	2500      	movs	r5, #0
 80104dc:	42a5      	cmp	r5, r4
 80104de:	d109      	bne.n	80104f4 <__libc_init_array+0x24>
 80104e0:	4e0b      	ldr	r6, [pc, #44]	; (8010510 <__libc_init_array+0x40>)
 80104e2:	4c0c      	ldr	r4, [pc, #48]	; (8010514 <__libc_init_array+0x44>)
 80104e4:	f005 f914 	bl	8015710 <_init>
 80104e8:	1ba4      	subs	r4, r4, r6
 80104ea:	10a4      	asrs	r4, r4, #2
 80104ec:	2500      	movs	r5, #0
 80104ee:	42a5      	cmp	r5, r4
 80104f0:	d105      	bne.n	80104fe <__libc_init_array+0x2e>
 80104f2:	bd70      	pop	{r4, r5, r6, pc}
 80104f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104f8:	4798      	blx	r3
 80104fa:	3501      	adds	r5, #1
 80104fc:	e7ee      	b.n	80104dc <__libc_init_array+0xc>
 80104fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010502:	4798      	blx	r3
 8010504:	3501      	adds	r5, #1
 8010506:	e7f2      	b.n	80104ee <__libc_init_array+0x1e>
 8010508:	08017c78 	.word	0x08017c78
 801050c:	08017c78 	.word	0x08017c78
 8010510:	08017c78 	.word	0x08017c78
 8010514:	08017c7c 	.word	0x08017c7c

08010518 <malloc>:
 8010518:	4b02      	ldr	r3, [pc, #8]	; (8010524 <malloc+0xc>)
 801051a:	4601      	mov	r1, r0
 801051c:	6818      	ldr	r0, [r3, #0]
 801051e:	f000 b87b 	b.w	8010618 <_malloc_r>
 8010522:	bf00      	nop
 8010524:	200006c8 	.word	0x200006c8

08010528 <free>:
 8010528:	4b02      	ldr	r3, [pc, #8]	; (8010534 <free+0xc>)
 801052a:	4601      	mov	r1, r0
 801052c:	6818      	ldr	r0, [r3, #0]
 801052e:	f000 b825 	b.w	801057c <_free_r>
 8010532:	bf00      	nop
 8010534:	200006c8 	.word	0x200006c8

08010538 <memcmp>:
 8010538:	b530      	push	{r4, r5, lr}
 801053a:	2400      	movs	r4, #0
 801053c:	42a2      	cmp	r2, r4
 801053e:	d101      	bne.n	8010544 <memcmp+0xc>
 8010540:	2000      	movs	r0, #0
 8010542:	e007      	b.n	8010554 <memcmp+0x1c>
 8010544:	5d03      	ldrb	r3, [r0, r4]
 8010546:	3401      	adds	r4, #1
 8010548:	190d      	adds	r5, r1, r4
 801054a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801054e:	42ab      	cmp	r3, r5
 8010550:	d0f4      	beq.n	801053c <memcmp+0x4>
 8010552:	1b58      	subs	r0, r3, r5
 8010554:	bd30      	pop	{r4, r5, pc}

08010556 <memcpy>:
 8010556:	b510      	push	{r4, lr}
 8010558:	1e43      	subs	r3, r0, #1
 801055a:	440a      	add	r2, r1
 801055c:	4291      	cmp	r1, r2
 801055e:	d100      	bne.n	8010562 <memcpy+0xc>
 8010560:	bd10      	pop	{r4, pc}
 8010562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010566:	f803 4f01 	strb.w	r4, [r3, #1]!
 801056a:	e7f7      	b.n	801055c <memcpy+0x6>

0801056c <memset>:
 801056c:	4402      	add	r2, r0
 801056e:	4603      	mov	r3, r0
 8010570:	4293      	cmp	r3, r2
 8010572:	d100      	bne.n	8010576 <memset+0xa>
 8010574:	4770      	bx	lr
 8010576:	f803 1b01 	strb.w	r1, [r3], #1
 801057a:	e7f9      	b.n	8010570 <memset+0x4>

0801057c <_free_r>:
 801057c:	b538      	push	{r3, r4, r5, lr}
 801057e:	4605      	mov	r5, r0
 8010580:	2900      	cmp	r1, #0
 8010582:	d045      	beq.n	8010610 <_free_r+0x94>
 8010584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010588:	1f0c      	subs	r4, r1, #4
 801058a:	2b00      	cmp	r3, #0
 801058c:	bfb8      	it	lt
 801058e:	18e4      	addlt	r4, r4, r3
 8010590:	f001 fe02 	bl	8012198 <__malloc_lock>
 8010594:	4a1f      	ldr	r2, [pc, #124]	; (8010614 <_free_r+0x98>)
 8010596:	6813      	ldr	r3, [r2, #0]
 8010598:	4610      	mov	r0, r2
 801059a:	b933      	cbnz	r3, 80105aa <_free_r+0x2e>
 801059c:	6063      	str	r3, [r4, #4]
 801059e:	6014      	str	r4, [r2, #0]
 80105a0:	4628      	mov	r0, r5
 80105a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105a6:	f001 bdf8 	b.w	801219a <__malloc_unlock>
 80105aa:	42a3      	cmp	r3, r4
 80105ac:	d90c      	bls.n	80105c8 <_free_r+0x4c>
 80105ae:	6821      	ldr	r1, [r4, #0]
 80105b0:	1862      	adds	r2, r4, r1
 80105b2:	4293      	cmp	r3, r2
 80105b4:	bf04      	itt	eq
 80105b6:	681a      	ldreq	r2, [r3, #0]
 80105b8:	685b      	ldreq	r3, [r3, #4]
 80105ba:	6063      	str	r3, [r4, #4]
 80105bc:	bf04      	itt	eq
 80105be:	1852      	addeq	r2, r2, r1
 80105c0:	6022      	streq	r2, [r4, #0]
 80105c2:	6004      	str	r4, [r0, #0]
 80105c4:	e7ec      	b.n	80105a0 <_free_r+0x24>
 80105c6:	4613      	mov	r3, r2
 80105c8:	685a      	ldr	r2, [r3, #4]
 80105ca:	b10a      	cbz	r2, 80105d0 <_free_r+0x54>
 80105cc:	42a2      	cmp	r2, r4
 80105ce:	d9fa      	bls.n	80105c6 <_free_r+0x4a>
 80105d0:	6819      	ldr	r1, [r3, #0]
 80105d2:	1858      	adds	r0, r3, r1
 80105d4:	42a0      	cmp	r0, r4
 80105d6:	d10b      	bne.n	80105f0 <_free_r+0x74>
 80105d8:	6820      	ldr	r0, [r4, #0]
 80105da:	4401      	add	r1, r0
 80105dc:	1858      	adds	r0, r3, r1
 80105de:	4282      	cmp	r2, r0
 80105e0:	6019      	str	r1, [r3, #0]
 80105e2:	d1dd      	bne.n	80105a0 <_free_r+0x24>
 80105e4:	6810      	ldr	r0, [r2, #0]
 80105e6:	6852      	ldr	r2, [r2, #4]
 80105e8:	605a      	str	r2, [r3, #4]
 80105ea:	4401      	add	r1, r0
 80105ec:	6019      	str	r1, [r3, #0]
 80105ee:	e7d7      	b.n	80105a0 <_free_r+0x24>
 80105f0:	d902      	bls.n	80105f8 <_free_r+0x7c>
 80105f2:	230c      	movs	r3, #12
 80105f4:	602b      	str	r3, [r5, #0]
 80105f6:	e7d3      	b.n	80105a0 <_free_r+0x24>
 80105f8:	6820      	ldr	r0, [r4, #0]
 80105fa:	1821      	adds	r1, r4, r0
 80105fc:	428a      	cmp	r2, r1
 80105fe:	bf04      	itt	eq
 8010600:	6811      	ldreq	r1, [r2, #0]
 8010602:	6852      	ldreq	r2, [r2, #4]
 8010604:	6062      	str	r2, [r4, #4]
 8010606:	bf04      	itt	eq
 8010608:	1809      	addeq	r1, r1, r0
 801060a:	6021      	streq	r1, [r4, #0]
 801060c:	605c      	str	r4, [r3, #4]
 801060e:	e7c7      	b.n	80105a0 <_free_r+0x24>
 8010610:	bd38      	pop	{r3, r4, r5, pc}
 8010612:	bf00      	nop
 8010614:	20000bd4 	.word	0x20000bd4

08010618 <_malloc_r>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	1ccd      	adds	r5, r1, #3
 801061c:	f025 0503 	bic.w	r5, r5, #3
 8010620:	3508      	adds	r5, #8
 8010622:	2d0c      	cmp	r5, #12
 8010624:	bf38      	it	cc
 8010626:	250c      	movcc	r5, #12
 8010628:	2d00      	cmp	r5, #0
 801062a:	4606      	mov	r6, r0
 801062c:	db01      	blt.n	8010632 <_malloc_r+0x1a>
 801062e:	42a9      	cmp	r1, r5
 8010630:	d903      	bls.n	801063a <_malloc_r+0x22>
 8010632:	230c      	movs	r3, #12
 8010634:	6033      	str	r3, [r6, #0]
 8010636:	2000      	movs	r0, #0
 8010638:	bd70      	pop	{r4, r5, r6, pc}
 801063a:	f001 fdad 	bl	8012198 <__malloc_lock>
 801063e:	4a21      	ldr	r2, [pc, #132]	; (80106c4 <_malloc_r+0xac>)
 8010640:	6814      	ldr	r4, [r2, #0]
 8010642:	4621      	mov	r1, r4
 8010644:	b991      	cbnz	r1, 801066c <_malloc_r+0x54>
 8010646:	4c20      	ldr	r4, [pc, #128]	; (80106c8 <_malloc_r+0xb0>)
 8010648:	6823      	ldr	r3, [r4, #0]
 801064a:	b91b      	cbnz	r3, 8010654 <_malloc_r+0x3c>
 801064c:	4630      	mov	r0, r6
 801064e:	f000 fcfb 	bl	8011048 <_sbrk_r>
 8010652:	6020      	str	r0, [r4, #0]
 8010654:	4629      	mov	r1, r5
 8010656:	4630      	mov	r0, r6
 8010658:	f000 fcf6 	bl	8011048 <_sbrk_r>
 801065c:	1c43      	adds	r3, r0, #1
 801065e:	d124      	bne.n	80106aa <_malloc_r+0x92>
 8010660:	230c      	movs	r3, #12
 8010662:	6033      	str	r3, [r6, #0]
 8010664:	4630      	mov	r0, r6
 8010666:	f001 fd98 	bl	801219a <__malloc_unlock>
 801066a:	e7e4      	b.n	8010636 <_malloc_r+0x1e>
 801066c:	680b      	ldr	r3, [r1, #0]
 801066e:	1b5b      	subs	r3, r3, r5
 8010670:	d418      	bmi.n	80106a4 <_malloc_r+0x8c>
 8010672:	2b0b      	cmp	r3, #11
 8010674:	d90f      	bls.n	8010696 <_malloc_r+0x7e>
 8010676:	600b      	str	r3, [r1, #0]
 8010678:	50cd      	str	r5, [r1, r3]
 801067a:	18cc      	adds	r4, r1, r3
 801067c:	4630      	mov	r0, r6
 801067e:	f001 fd8c 	bl	801219a <__malloc_unlock>
 8010682:	f104 000b 	add.w	r0, r4, #11
 8010686:	1d23      	adds	r3, r4, #4
 8010688:	f020 0007 	bic.w	r0, r0, #7
 801068c:	1ac3      	subs	r3, r0, r3
 801068e:	d0d3      	beq.n	8010638 <_malloc_r+0x20>
 8010690:	425a      	negs	r2, r3
 8010692:	50e2      	str	r2, [r4, r3]
 8010694:	e7d0      	b.n	8010638 <_malloc_r+0x20>
 8010696:	428c      	cmp	r4, r1
 8010698:	684b      	ldr	r3, [r1, #4]
 801069a:	bf16      	itet	ne
 801069c:	6063      	strne	r3, [r4, #4]
 801069e:	6013      	streq	r3, [r2, #0]
 80106a0:	460c      	movne	r4, r1
 80106a2:	e7eb      	b.n	801067c <_malloc_r+0x64>
 80106a4:	460c      	mov	r4, r1
 80106a6:	6849      	ldr	r1, [r1, #4]
 80106a8:	e7cc      	b.n	8010644 <_malloc_r+0x2c>
 80106aa:	1cc4      	adds	r4, r0, #3
 80106ac:	f024 0403 	bic.w	r4, r4, #3
 80106b0:	42a0      	cmp	r0, r4
 80106b2:	d005      	beq.n	80106c0 <_malloc_r+0xa8>
 80106b4:	1a21      	subs	r1, r4, r0
 80106b6:	4630      	mov	r0, r6
 80106b8:	f000 fcc6 	bl	8011048 <_sbrk_r>
 80106bc:	3001      	adds	r0, #1
 80106be:	d0cf      	beq.n	8010660 <_malloc_r+0x48>
 80106c0:	6025      	str	r5, [r4, #0]
 80106c2:	e7db      	b.n	801067c <_malloc_r+0x64>
 80106c4:	20000bd4 	.word	0x20000bd4
 80106c8:	20000bd8 	.word	0x20000bd8

080106cc <__cvt>:
 80106cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ce:	ed2d 8b02 	vpush	{d8}
 80106d2:	eeb0 8b40 	vmov.f64	d8, d0
 80106d6:	b085      	sub	sp, #20
 80106d8:	4617      	mov	r7, r2
 80106da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80106dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80106de:	ee18 2a90 	vmov	r2, s17
 80106e2:	f025 0520 	bic.w	r5, r5, #32
 80106e6:	2a00      	cmp	r2, #0
 80106e8:	bfb6      	itet	lt
 80106ea:	222d      	movlt	r2, #45	; 0x2d
 80106ec:	2200      	movge	r2, #0
 80106ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80106f2:	2d46      	cmp	r5, #70	; 0x46
 80106f4:	460c      	mov	r4, r1
 80106f6:	701a      	strb	r2, [r3, #0]
 80106f8:	d004      	beq.n	8010704 <__cvt+0x38>
 80106fa:	2d45      	cmp	r5, #69	; 0x45
 80106fc:	d100      	bne.n	8010700 <__cvt+0x34>
 80106fe:	3401      	adds	r4, #1
 8010700:	2102      	movs	r1, #2
 8010702:	e000      	b.n	8010706 <__cvt+0x3a>
 8010704:	2103      	movs	r1, #3
 8010706:	ab03      	add	r3, sp, #12
 8010708:	9301      	str	r3, [sp, #4]
 801070a:	ab02      	add	r3, sp, #8
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	4622      	mov	r2, r4
 8010710:	4633      	mov	r3, r6
 8010712:	eeb0 0b48 	vmov.f64	d0, d8
 8010716:	f000 fe07 	bl	8011328 <_dtoa_r>
 801071a:	2d47      	cmp	r5, #71	; 0x47
 801071c:	d101      	bne.n	8010722 <__cvt+0x56>
 801071e:	07fb      	lsls	r3, r7, #31
 8010720:	d51e      	bpl.n	8010760 <__cvt+0x94>
 8010722:	2d46      	cmp	r5, #70	; 0x46
 8010724:	eb00 0304 	add.w	r3, r0, r4
 8010728:	d10c      	bne.n	8010744 <__cvt+0x78>
 801072a:	7802      	ldrb	r2, [r0, #0]
 801072c:	2a30      	cmp	r2, #48	; 0x30
 801072e:	d107      	bne.n	8010740 <__cvt+0x74>
 8010730:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010738:	bf1c      	itt	ne
 801073a:	f1c4 0401 	rsbne	r4, r4, #1
 801073e:	6034      	strne	r4, [r6, #0]
 8010740:	6832      	ldr	r2, [r6, #0]
 8010742:	4413      	add	r3, r2
 8010744:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074c:	d007      	beq.n	801075e <__cvt+0x92>
 801074e:	2130      	movs	r1, #48	; 0x30
 8010750:	9a03      	ldr	r2, [sp, #12]
 8010752:	429a      	cmp	r2, r3
 8010754:	d204      	bcs.n	8010760 <__cvt+0x94>
 8010756:	1c54      	adds	r4, r2, #1
 8010758:	9403      	str	r4, [sp, #12]
 801075a:	7011      	strb	r1, [r2, #0]
 801075c:	e7f8      	b.n	8010750 <__cvt+0x84>
 801075e:	9303      	str	r3, [sp, #12]
 8010760:	9b03      	ldr	r3, [sp, #12]
 8010762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010764:	1a1b      	subs	r3, r3, r0
 8010766:	6013      	str	r3, [r2, #0]
 8010768:	b005      	add	sp, #20
 801076a:	ecbd 8b02 	vpop	{d8}
 801076e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010770 <__exponent>:
 8010770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010772:	2900      	cmp	r1, #0
 8010774:	4604      	mov	r4, r0
 8010776:	bfba      	itte	lt
 8010778:	4249      	neglt	r1, r1
 801077a:	232d      	movlt	r3, #45	; 0x2d
 801077c:	232b      	movge	r3, #43	; 0x2b
 801077e:	2909      	cmp	r1, #9
 8010780:	f804 2b02 	strb.w	r2, [r4], #2
 8010784:	7043      	strb	r3, [r0, #1]
 8010786:	dd20      	ble.n	80107ca <__exponent+0x5a>
 8010788:	f10d 0307 	add.w	r3, sp, #7
 801078c:	461f      	mov	r7, r3
 801078e:	260a      	movs	r6, #10
 8010790:	fb91 f5f6 	sdiv	r5, r1, r6
 8010794:	fb06 1115 	mls	r1, r6, r5, r1
 8010798:	3130      	adds	r1, #48	; 0x30
 801079a:	2d09      	cmp	r5, #9
 801079c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80107a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80107a4:	4629      	mov	r1, r5
 80107a6:	dc09      	bgt.n	80107bc <__exponent+0x4c>
 80107a8:	3130      	adds	r1, #48	; 0x30
 80107aa:	3b02      	subs	r3, #2
 80107ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80107b0:	42bb      	cmp	r3, r7
 80107b2:	4622      	mov	r2, r4
 80107b4:	d304      	bcc.n	80107c0 <__exponent+0x50>
 80107b6:	1a10      	subs	r0, r2, r0
 80107b8:	b003      	add	sp, #12
 80107ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107bc:	4613      	mov	r3, r2
 80107be:	e7e7      	b.n	8010790 <__exponent+0x20>
 80107c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107c4:	f804 2b01 	strb.w	r2, [r4], #1
 80107c8:	e7f2      	b.n	80107b0 <__exponent+0x40>
 80107ca:	2330      	movs	r3, #48	; 0x30
 80107cc:	4419      	add	r1, r3
 80107ce:	7083      	strb	r3, [r0, #2]
 80107d0:	1d02      	adds	r2, r0, #4
 80107d2:	70c1      	strb	r1, [r0, #3]
 80107d4:	e7ef      	b.n	80107b6 <__exponent+0x46>
	...

080107d8 <_printf_float>:
 80107d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107dc:	b08d      	sub	sp, #52	; 0x34
 80107de:	460c      	mov	r4, r1
 80107e0:	4616      	mov	r6, r2
 80107e2:	461f      	mov	r7, r3
 80107e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80107e8:	4605      	mov	r5, r0
 80107ea:	f001 fc63 	bl	80120b4 <_localeconv_r>
 80107ee:	f8d0 b000 	ldr.w	fp, [r0]
 80107f2:	4658      	mov	r0, fp
 80107f4:	f7f6 fb37 	bl	8006e66 <strlen>
 80107f8:	2300      	movs	r3, #0
 80107fa:	930a      	str	r3, [sp, #40]	; 0x28
 80107fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010800:	9005      	str	r0, [sp, #20]
 8010802:	3307      	adds	r3, #7
 8010804:	f023 0307 	bic.w	r3, r3, #7
 8010808:	f103 0108 	add.w	r1, r3, #8
 801080c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010810:	6822      	ldr	r2, [r4, #0]
 8010812:	f8c8 1000 	str.w	r1, [r8]
 8010816:	e9d3 0100 	ldrd	r0, r1, [r3]
 801081a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801081e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010aa8 <_printf_float+0x2d0>
 8010822:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010826:	eeb0 6bc0 	vabs.f64	d6, d0
 801082a:	eeb4 6b47 	vcmp.f64	d6, d7
 801082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010832:	dd24      	ble.n	801087e <_printf_float+0xa6>
 8010834:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801083c:	d502      	bpl.n	8010844 <_printf_float+0x6c>
 801083e:	232d      	movs	r3, #45	; 0x2d
 8010840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010844:	499a      	ldr	r1, [pc, #616]	; (8010ab0 <_printf_float+0x2d8>)
 8010846:	4b9b      	ldr	r3, [pc, #620]	; (8010ab4 <_printf_float+0x2dc>)
 8010848:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801084c:	bf8c      	ite	hi
 801084e:	4688      	movhi	r8, r1
 8010850:	4698      	movls	r8, r3
 8010852:	f022 0204 	bic.w	r2, r2, #4
 8010856:	2303      	movs	r3, #3
 8010858:	6123      	str	r3, [r4, #16]
 801085a:	6022      	str	r2, [r4, #0]
 801085c:	f04f 0a00 	mov.w	sl, #0
 8010860:	9700      	str	r7, [sp, #0]
 8010862:	4633      	mov	r3, r6
 8010864:	aa0b      	add	r2, sp, #44	; 0x2c
 8010866:	4621      	mov	r1, r4
 8010868:	4628      	mov	r0, r5
 801086a:	f000 f9e1 	bl	8010c30 <_printf_common>
 801086e:	3001      	adds	r0, #1
 8010870:	f040 8089 	bne.w	8010986 <_printf_float+0x1ae>
 8010874:	f04f 30ff 	mov.w	r0, #4294967295
 8010878:	b00d      	add	sp, #52	; 0x34
 801087a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087e:	eeb4 0b40 	vcmp.f64	d0, d0
 8010882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010886:	d702      	bvc.n	801088e <_printf_float+0xb6>
 8010888:	498b      	ldr	r1, [pc, #556]	; (8010ab8 <_printf_float+0x2e0>)
 801088a:	4b8c      	ldr	r3, [pc, #560]	; (8010abc <_printf_float+0x2e4>)
 801088c:	e7dc      	b.n	8010848 <_printf_float+0x70>
 801088e:	6861      	ldr	r1, [r4, #4]
 8010890:	1c4b      	adds	r3, r1, #1
 8010892:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010896:	ab0a      	add	r3, sp, #40	; 0x28
 8010898:	a809      	add	r0, sp, #36	; 0x24
 801089a:	d13b      	bne.n	8010914 <_printf_float+0x13c>
 801089c:	2106      	movs	r1, #6
 801089e:	6061      	str	r1, [r4, #4]
 80108a0:	f04f 0c00 	mov.w	ip, #0
 80108a4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80108a8:	e9cd 0900 	strd	r0, r9, [sp]
 80108ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	6861      	ldr	r1, [r4, #4]
 80108b4:	4628      	mov	r0, r5
 80108b6:	f7ff ff09 	bl	80106cc <__cvt>
 80108ba:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80108be:	2b47      	cmp	r3, #71	; 0x47
 80108c0:	4680      	mov	r8, r0
 80108c2:	d109      	bne.n	80108d8 <_printf_float+0x100>
 80108c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c6:	1cd8      	adds	r0, r3, #3
 80108c8:	db02      	blt.n	80108d0 <_printf_float+0xf8>
 80108ca:	6862      	ldr	r2, [r4, #4]
 80108cc:	4293      	cmp	r3, r2
 80108ce:	dd47      	ble.n	8010960 <_printf_float+0x188>
 80108d0:	f1a9 0902 	sub.w	r9, r9, #2
 80108d4:	fa5f f989 	uxtb.w	r9, r9
 80108d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80108dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108de:	d824      	bhi.n	801092a <_printf_float+0x152>
 80108e0:	3901      	subs	r1, #1
 80108e2:	464a      	mov	r2, r9
 80108e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80108e8:	9109      	str	r1, [sp, #36]	; 0x24
 80108ea:	f7ff ff41 	bl	8010770 <__exponent>
 80108ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108f0:	1813      	adds	r3, r2, r0
 80108f2:	2a01      	cmp	r2, #1
 80108f4:	4682      	mov	sl, r0
 80108f6:	6123      	str	r3, [r4, #16]
 80108f8:	dc02      	bgt.n	8010900 <_printf_float+0x128>
 80108fa:	6822      	ldr	r2, [r4, #0]
 80108fc:	07d1      	lsls	r1, r2, #31
 80108fe:	d501      	bpl.n	8010904 <_printf_float+0x12c>
 8010900:	3301      	adds	r3, #1
 8010902:	6123      	str	r3, [r4, #16]
 8010904:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010908:	2b00      	cmp	r3, #0
 801090a:	d0a9      	beq.n	8010860 <_printf_float+0x88>
 801090c:	232d      	movs	r3, #45	; 0x2d
 801090e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010912:	e7a5      	b.n	8010860 <_printf_float+0x88>
 8010914:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010918:	f000 8178 	beq.w	8010c0c <_printf_float+0x434>
 801091c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010920:	d1be      	bne.n	80108a0 <_printf_float+0xc8>
 8010922:	2900      	cmp	r1, #0
 8010924:	d1bc      	bne.n	80108a0 <_printf_float+0xc8>
 8010926:	2101      	movs	r1, #1
 8010928:	e7b9      	b.n	801089e <_printf_float+0xc6>
 801092a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801092e:	d119      	bne.n	8010964 <_printf_float+0x18c>
 8010930:	2900      	cmp	r1, #0
 8010932:	6863      	ldr	r3, [r4, #4]
 8010934:	dd0c      	ble.n	8010950 <_printf_float+0x178>
 8010936:	6121      	str	r1, [r4, #16]
 8010938:	b913      	cbnz	r3, 8010940 <_printf_float+0x168>
 801093a:	6822      	ldr	r2, [r4, #0]
 801093c:	07d2      	lsls	r2, r2, #31
 801093e:	d502      	bpl.n	8010946 <_printf_float+0x16e>
 8010940:	3301      	adds	r3, #1
 8010942:	440b      	add	r3, r1
 8010944:	6123      	str	r3, [r4, #16]
 8010946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010948:	65a3      	str	r3, [r4, #88]	; 0x58
 801094a:	f04f 0a00 	mov.w	sl, #0
 801094e:	e7d9      	b.n	8010904 <_printf_float+0x12c>
 8010950:	b913      	cbnz	r3, 8010958 <_printf_float+0x180>
 8010952:	6822      	ldr	r2, [r4, #0]
 8010954:	07d0      	lsls	r0, r2, #31
 8010956:	d501      	bpl.n	801095c <_printf_float+0x184>
 8010958:	3302      	adds	r3, #2
 801095a:	e7f3      	b.n	8010944 <_printf_float+0x16c>
 801095c:	2301      	movs	r3, #1
 801095e:	e7f1      	b.n	8010944 <_printf_float+0x16c>
 8010960:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010964:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010968:	4293      	cmp	r3, r2
 801096a:	db05      	blt.n	8010978 <_printf_float+0x1a0>
 801096c:	6822      	ldr	r2, [r4, #0]
 801096e:	6123      	str	r3, [r4, #16]
 8010970:	07d1      	lsls	r1, r2, #31
 8010972:	d5e8      	bpl.n	8010946 <_printf_float+0x16e>
 8010974:	3301      	adds	r3, #1
 8010976:	e7e5      	b.n	8010944 <_printf_float+0x16c>
 8010978:	2b00      	cmp	r3, #0
 801097a:	bfd4      	ite	le
 801097c:	f1c3 0302 	rsble	r3, r3, #2
 8010980:	2301      	movgt	r3, #1
 8010982:	4413      	add	r3, r2
 8010984:	e7de      	b.n	8010944 <_printf_float+0x16c>
 8010986:	6823      	ldr	r3, [r4, #0]
 8010988:	055a      	lsls	r2, r3, #21
 801098a:	d407      	bmi.n	801099c <_printf_float+0x1c4>
 801098c:	6923      	ldr	r3, [r4, #16]
 801098e:	4642      	mov	r2, r8
 8010990:	4631      	mov	r1, r6
 8010992:	4628      	mov	r0, r5
 8010994:	47b8      	blx	r7
 8010996:	3001      	adds	r0, #1
 8010998:	d12a      	bne.n	80109f0 <_printf_float+0x218>
 801099a:	e76b      	b.n	8010874 <_printf_float+0x9c>
 801099c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80109a0:	f240 80de 	bls.w	8010b60 <_printf_float+0x388>
 80109a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80109a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b0:	d133      	bne.n	8010a1a <_printf_float+0x242>
 80109b2:	2301      	movs	r3, #1
 80109b4:	4a42      	ldr	r2, [pc, #264]	; (8010ac0 <_printf_float+0x2e8>)
 80109b6:	4631      	mov	r1, r6
 80109b8:	4628      	mov	r0, r5
 80109ba:	47b8      	blx	r7
 80109bc:	3001      	adds	r0, #1
 80109be:	f43f af59 	beq.w	8010874 <_printf_float+0x9c>
 80109c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109c6:	429a      	cmp	r2, r3
 80109c8:	db02      	blt.n	80109d0 <_printf_float+0x1f8>
 80109ca:	6823      	ldr	r3, [r4, #0]
 80109cc:	07d8      	lsls	r0, r3, #31
 80109ce:	d50f      	bpl.n	80109f0 <_printf_float+0x218>
 80109d0:	9b05      	ldr	r3, [sp, #20]
 80109d2:	465a      	mov	r2, fp
 80109d4:	4631      	mov	r1, r6
 80109d6:	4628      	mov	r0, r5
 80109d8:	47b8      	blx	r7
 80109da:	3001      	adds	r0, #1
 80109dc:	f43f af4a 	beq.w	8010874 <_printf_float+0x9c>
 80109e0:	f04f 0800 	mov.w	r8, #0
 80109e4:	f104 091a 	add.w	r9, r4, #26
 80109e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ea:	3b01      	subs	r3, #1
 80109ec:	4543      	cmp	r3, r8
 80109ee:	dc09      	bgt.n	8010a04 <_printf_float+0x22c>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	079b      	lsls	r3, r3, #30
 80109f4:	f100 8105 	bmi.w	8010c02 <_printf_float+0x42a>
 80109f8:	68e0      	ldr	r0, [r4, #12]
 80109fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109fc:	4298      	cmp	r0, r3
 80109fe:	bfb8      	it	lt
 8010a00:	4618      	movlt	r0, r3
 8010a02:	e739      	b.n	8010878 <_printf_float+0xa0>
 8010a04:	2301      	movs	r3, #1
 8010a06:	464a      	mov	r2, r9
 8010a08:	4631      	mov	r1, r6
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	47b8      	blx	r7
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f43f af30 	beq.w	8010874 <_printf_float+0x9c>
 8010a14:	f108 0801 	add.w	r8, r8, #1
 8010a18:	e7e6      	b.n	80109e8 <_printf_float+0x210>
 8010a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	dc2b      	bgt.n	8010a78 <_printf_float+0x2a0>
 8010a20:	2301      	movs	r3, #1
 8010a22:	4a27      	ldr	r2, [pc, #156]	; (8010ac0 <_printf_float+0x2e8>)
 8010a24:	4631      	mov	r1, r6
 8010a26:	4628      	mov	r0, r5
 8010a28:	47b8      	blx	r7
 8010a2a:	3001      	adds	r0, #1
 8010a2c:	f43f af22 	beq.w	8010874 <_printf_float+0x9c>
 8010a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a32:	b923      	cbnz	r3, 8010a3e <_printf_float+0x266>
 8010a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a36:	b913      	cbnz	r3, 8010a3e <_printf_float+0x266>
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	07d9      	lsls	r1, r3, #31
 8010a3c:	d5d8      	bpl.n	80109f0 <_printf_float+0x218>
 8010a3e:	9b05      	ldr	r3, [sp, #20]
 8010a40:	465a      	mov	r2, fp
 8010a42:	4631      	mov	r1, r6
 8010a44:	4628      	mov	r0, r5
 8010a46:	47b8      	blx	r7
 8010a48:	3001      	adds	r0, #1
 8010a4a:	f43f af13 	beq.w	8010874 <_printf_float+0x9c>
 8010a4e:	f04f 0900 	mov.w	r9, #0
 8010a52:	f104 0a1a 	add.w	sl, r4, #26
 8010a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a58:	425b      	negs	r3, r3
 8010a5a:	454b      	cmp	r3, r9
 8010a5c:	dc01      	bgt.n	8010a62 <_printf_float+0x28a>
 8010a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a60:	e795      	b.n	801098e <_printf_float+0x1b6>
 8010a62:	2301      	movs	r3, #1
 8010a64:	4652      	mov	r2, sl
 8010a66:	4631      	mov	r1, r6
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b8      	blx	r7
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	f43f af01 	beq.w	8010874 <_printf_float+0x9c>
 8010a72:	f109 0901 	add.w	r9, r9, #1
 8010a76:	e7ee      	b.n	8010a56 <_printf_float+0x27e>
 8010a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	bfa8      	it	ge
 8010a80:	461a      	movge	r2, r3
 8010a82:	2a00      	cmp	r2, #0
 8010a84:	4691      	mov	r9, r2
 8010a86:	dd07      	ble.n	8010a98 <_printf_float+0x2c0>
 8010a88:	4613      	mov	r3, r2
 8010a8a:	4631      	mov	r1, r6
 8010a8c:	4642      	mov	r2, r8
 8010a8e:	4628      	mov	r0, r5
 8010a90:	47b8      	blx	r7
 8010a92:	3001      	adds	r0, #1
 8010a94:	f43f aeee 	beq.w	8010874 <_printf_float+0x9c>
 8010a98:	f104 031a 	add.w	r3, r4, #26
 8010a9c:	f04f 0a00 	mov.w	sl, #0
 8010aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010aa4:	9307      	str	r3, [sp, #28]
 8010aa6:	e017      	b.n	8010ad8 <_printf_float+0x300>
 8010aa8:	ffffffff 	.word	0xffffffff
 8010aac:	7fefffff 	.word	0x7fefffff
 8010ab0:	0801787f 	.word	0x0801787f
 8010ab4:	08017208 	.word	0x08017208
 8010ab8:	08017210 	.word	0x08017210
 8010abc:	0801720c 	.word	0x0801720c
 8010ac0:	08017214 	.word	0x08017214
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	9a07      	ldr	r2, [sp, #28]
 8010ac8:	4631      	mov	r1, r6
 8010aca:	4628      	mov	r0, r5
 8010acc:	47b8      	blx	r7
 8010ace:	3001      	adds	r0, #1
 8010ad0:	f43f aed0 	beq.w	8010874 <_printf_float+0x9c>
 8010ad4:	f10a 0a01 	add.w	sl, sl, #1
 8010ad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ada:	9306      	str	r3, [sp, #24]
 8010adc:	eba3 0309 	sub.w	r3, r3, r9
 8010ae0:	4553      	cmp	r3, sl
 8010ae2:	dcef      	bgt.n	8010ac4 <_printf_float+0x2ec>
 8010ae4:	9b06      	ldr	r3, [sp, #24]
 8010ae6:	4498      	add	r8, r3
 8010ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010aec:	429a      	cmp	r2, r3
 8010aee:	db15      	blt.n	8010b1c <_printf_float+0x344>
 8010af0:	6823      	ldr	r3, [r4, #0]
 8010af2:	07da      	lsls	r2, r3, #31
 8010af4:	d412      	bmi.n	8010b1c <_printf_float+0x344>
 8010af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af8:	9a06      	ldr	r2, [sp, #24]
 8010afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010afc:	1a9a      	subs	r2, r3, r2
 8010afe:	eba3 0a01 	sub.w	sl, r3, r1
 8010b02:	4592      	cmp	sl, r2
 8010b04:	bfa8      	it	ge
 8010b06:	4692      	movge	sl, r2
 8010b08:	f1ba 0f00 	cmp.w	sl, #0
 8010b0c:	dc0e      	bgt.n	8010b2c <_printf_float+0x354>
 8010b0e:	f04f 0800 	mov.w	r8, #0
 8010b12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b16:	f104 091a 	add.w	r9, r4, #26
 8010b1a:	e019      	b.n	8010b50 <_printf_float+0x378>
 8010b1c:	9b05      	ldr	r3, [sp, #20]
 8010b1e:	465a      	mov	r2, fp
 8010b20:	4631      	mov	r1, r6
 8010b22:	4628      	mov	r0, r5
 8010b24:	47b8      	blx	r7
 8010b26:	3001      	adds	r0, #1
 8010b28:	d1e5      	bne.n	8010af6 <_printf_float+0x31e>
 8010b2a:	e6a3      	b.n	8010874 <_printf_float+0x9c>
 8010b2c:	4653      	mov	r3, sl
 8010b2e:	4642      	mov	r2, r8
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	47b8      	blx	r7
 8010b36:	3001      	adds	r0, #1
 8010b38:	d1e9      	bne.n	8010b0e <_printf_float+0x336>
 8010b3a:	e69b      	b.n	8010874 <_printf_float+0x9c>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	464a      	mov	r2, r9
 8010b40:	4631      	mov	r1, r6
 8010b42:	4628      	mov	r0, r5
 8010b44:	47b8      	blx	r7
 8010b46:	3001      	adds	r0, #1
 8010b48:	f43f ae94 	beq.w	8010874 <_printf_float+0x9c>
 8010b4c:	f108 0801 	add.w	r8, r8, #1
 8010b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b54:	1a9b      	subs	r3, r3, r2
 8010b56:	eba3 030a 	sub.w	r3, r3, sl
 8010b5a:	4543      	cmp	r3, r8
 8010b5c:	dcee      	bgt.n	8010b3c <_printf_float+0x364>
 8010b5e:	e747      	b.n	80109f0 <_printf_float+0x218>
 8010b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b62:	2a01      	cmp	r2, #1
 8010b64:	dc01      	bgt.n	8010b6a <_printf_float+0x392>
 8010b66:	07db      	lsls	r3, r3, #31
 8010b68:	d539      	bpl.n	8010bde <_printf_float+0x406>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	4642      	mov	r2, r8
 8010b6e:	4631      	mov	r1, r6
 8010b70:	4628      	mov	r0, r5
 8010b72:	47b8      	blx	r7
 8010b74:	3001      	adds	r0, #1
 8010b76:	f43f ae7d 	beq.w	8010874 <_printf_float+0x9c>
 8010b7a:	9b05      	ldr	r3, [sp, #20]
 8010b7c:	465a      	mov	r2, fp
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4628      	mov	r0, r5
 8010b82:	47b8      	blx	r7
 8010b84:	3001      	adds	r0, #1
 8010b86:	f108 0801 	add.w	r8, r8, #1
 8010b8a:	f43f ae73 	beq.w	8010874 <_printf_float+0x9c>
 8010b8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ba0:	d018      	beq.n	8010bd4 <_printf_float+0x3fc>
 8010ba2:	4642      	mov	r2, r8
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	47b8      	blx	r7
 8010baa:	3001      	adds	r0, #1
 8010bac:	d10e      	bne.n	8010bcc <_printf_float+0x3f4>
 8010bae:	e661      	b.n	8010874 <_printf_float+0x9c>
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	464a      	mov	r2, r9
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	4628      	mov	r0, r5
 8010bb8:	47b8      	blx	r7
 8010bba:	3001      	adds	r0, #1
 8010bbc:	f43f ae5a 	beq.w	8010874 <_printf_float+0x9c>
 8010bc0:	f108 0801 	add.w	r8, r8, #1
 8010bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	4543      	cmp	r3, r8
 8010bca:	dcf1      	bgt.n	8010bb0 <_printf_float+0x3d8>
 8010bcc:	4653      	mov	r3, sl
 8010bce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010bd2:	e6dd      	b.n	8010990 <_printf_float+0x1b8>
 8010bd4:	f04f 0800 	mov.w	r8, #0
 8010bd8:	f104 091a 	add.w	r9, r4, #26
 8010bdc:	e7f2      	b.n	8010bc4 <_printf_float+0x3ec>
 8010bde:	2301      	movs	r3, #1
 8010be0:	e7df      	b.n	8010ba2 <_printf_float+0x3ca>
 8010be2:	2301      	movs	r3, #1
 8010be4:	464a      	mov	r2, r9
 8010be6:	4631      	mov	r1, r6
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b8      	blx	r7
 8010bec:	3001      	adds	r0, #1
 8010bee:	f43f ae41 	beq.w	8010874 <_printf_float+0x9c>
 8010bf2:	f108 0801 	add.w	r8, r8, #1
 8010bf6:	68e3      	ldr	r3, [r4, #12]
 8010bf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bfa:	1a9b      	subs	r3, r3, r2
 8010bfc:	4543      	cmp	r3, r8
 8010bfe:	dcf0      	bgt.n	8010be2 <_printf_float+0x40a>
 8010c00:	e6fa      	b.n	80109f8 <_printf_float+0x220>
 8010c02:	f04f 0800 	mov.w	r8, #0
 8010c06:	f104 0919 	add.w	r9, r4, #25
 8010c0a:	e7f4      	b.n	8010bf6 <_printf_float+0x41e>
 8010c0c:	2900      	cmp	r1, #0
 8010c0e:	f43f ae8a 	beq.w	8010926 <_printf_float+0x14e>
 8010c12:	f04f 0c00 	mov.w	ip, #0
 8010c16:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010c1a:	e9cd 0900 	strd	r0, r9, [sp]
 8010c1e:	6022      	str	r2, [r4, #0]
 8010c20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c24:	4628      	mov	r0, r5
 8010c26:	f7ff fd51 	bl	80106cc <__cvt>
 8010c2a:	4680      	mov	r8, r0
 8010c2c:	e64a      	b.n	80108c4 <_printf_float+0xec>
 8010c2e:	bf00      	nop

08010c30 <_printf_common>:
 8010c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c34:	4691      	mov	r9, r2
 8010c36:	461f      	mov	r7, r3
 8010c38:	688a      	ldr	r2, [r1, #8]
 8010c3a:	690b      	ldr	r3, [r1, #16]
 8010c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	bfb8      	it	lt
 8010c44:	4613      	movlt	r3, r2
 8010c46:	f8c9 3000 	str.w	r3, [r9]
 8010c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c4e:	4606      	mov	r6, r0
 8010c50:	460c      	mov	r4, r1
 8010c52:	b112      	cbz	r2, 8010c5a <_printf_common+0x2a>
 8010c54:	3301      	adds	r3, #1
 8010c56:	f8c9 3000 	str.w	r3, [r9]
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	0699      	lsls	r1, r3, #26
 8010c5e:	bf42      	ittt	mi
 8010c60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c64:	3302      	addmi	r3, #2
 8010c66:	f8c9 3000 	strmi.w	r3, [r9]
 8010c6a:	6825      	ldr	r5, [r4, #0]
 8010c6c:	f015 0506 	ands.w	r5, r5, #6
 8010c70:	d107      	bne.n	8010c82 <_printf_common+0x52>
 8010c72:	f104 0a19 	add.w	sl, r4, #25
 8010c76:	68e3      	ldr	r3, [r4, #12]
 8010c78:	f8d9 2000 	ldr.w	r2, [r9]
 8010c7c:	1a9b      	subs	r3, r3, r2
 8010c7e:	42ab      	cmp	r3, r5
 8010c80:	dc28      	bgt.n	8010cd4 <_printf_common+0xa4>
 8010c82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c86:	6822      	ldr	r2, [r4, #0]
 8010c88:	3300      	adds	r3, #0
 8010c8a:	bf18      	it	ne
 8010c8c:	2301      	movne	r3, #1
 8010c8e:	0692      	lsls	r2, r2, #26
 8010c90:	d42d      	bmi.n	8010cee <_printf_common+0xbe>
 8010c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c96:	4639      	mov	r1, r7
 8010c98:	4630      	mov	r0, r6
 8010c9a:	47c0      	blx	r8
 8010c9c:	3001      	adds	r0, #1
 8010c9e:	d020      	beq.n	8010ce2 <_printf_common+0xb2>
 8010ca0:	6823      	ldr	r3, [r4, #0]
 8010ca2:	68e5      	ldr	r5, [r4, #12]
 8010ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8010ca8:	f003 0306 	and.w	r3, r3, #6
 8010cac:	2b04      	cmp	r3, #4
 8010cae:	bf08      	it	eq
 8010cb0:	1aad      	subeq	r5, r5, r2
 8010cb2:	68a3      	ldr	r3, [r4, #8]
 8010cb4:	6922      	ldr	r2, [r4, #16]
 8010cb6:	bf0c      	ite	eq
 8010cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cbc:	2500      	movne	r5, #0
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	bfc4      	itt	gt
 8010cc2:	1a9b      	subgt	r3, r3, r2
 8010cc4:	18ed      	addgt	r5, r5, r3
 8010cc6:	f04f 0900 	mov.w	r9, #0
 8010cca:	341a      	adds	r4, #26
 8010ccc:	454d      	cmp	r5, r9
 8010cce:	d11a      	bne.n	8010d06 <_printf_common+0xd6>
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	e008      	b.n	8010ce6 <_printf_common+0xb6>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	4652      	mov	r2, sl
 8010cd8:	4639      	mov	r1, r7
 8010cda:	4630      	mov	r0, r6
 8010cdc:	47c0      	blx	r8
 8010cde:	3001      	adds	r0, #1
 8010ce0:	d103      	bne.n	8010cea <_printf_common+0xba>
 8010ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cea:	3501      	adds	r5, #1
 8010cec:	e7c3      	b.n	8010c76 <_printf_common+0x46>
 8010cee:	18e1      	adds	r1, r4, r3
 8010cf0:	1c5a      	adds	r2, r3, #1
 8010cf2:	2030      	movs	r0, #48	; 0x30
 8010cf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cf8:	4422      	add	r2, r4
 8010cfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d02:	3302      	adds	r3, #2
 8010d04:	e7c5      	b.n	8010c92 <_printf_common+0x62>
 8010d06:	2301      	movs	r3, #1
 8010d08:	4622      	mov	r2, r4
 8010d0a:	4639      	mov	r1, r7
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	47c0      	blx	r8
 8010d10:	3001      	adds	r0, #1
 8010d12:	d0e6      	beq.n	8010ce2 <_printf_common+0xb2>
 8010d14:	f109 0901 	add.w	r9, r9, #1
 8010d18:	e7d8      	b.n	8010ccc <_printf_common+0x9c>
	...

08010d1c <_printf_i>:
 8010d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010d24:	460c      	mov	r4, r1
 8010d26:	7e09      	ldrb	r1, [r1, #24]
 8010d28:	b085      	sub	sp, #20
 8010d2a:	296e      	cmp	r1, #110	; 0x6e
 8010d2c:	4617      	mov	r7, r2
 8010d2e:	4606      	mov	r6, r0
 8010d30:	4698      	mov	r8, r3
 8010d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d34:	f000 80b3 	beq.w	8010e9e <_printf_i+0x182>
 8010d38:	d822      	bhi.n	8010d80 <_printf_i+0x64>
 8010d3a:	2963      	cmp	r1, #99	; 0x63
 8010d3c:	d036      	beq.n	8010dac <_printf_i+0x90>
 8010d3e:	d80a      	bhi.n	8010d56 <_printf_i+0x3a>
 8010d40:	2900      	cmp	r1, #0
 8010d42:	f000 80b9 	beq.w	8010eb8 <_printf_i+0x19c>
 8010d46:	2958      	cmp	r1, #88	; 0x58
 8010d48:	f000 8083 	beq.w	8010e52 <_printf_i+0x136>
 8010d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d54:	e032      	b.n	8010dbc <_printf_i+0xa0>
 8010d56:	2964      	cmp	r1, #100	; 0x64
 8010d58:	d001      	beq.n	8010d5e <_printf_i+0x42>
 8010d5a:	2969      	cmp	r1, #105	; 0x69
 8010d5c:	d1f6      	bne.n	8010d4c <_printf_i+0x30>
 8010d5e:	6820      	ldr	r0, [r4, #0]
 8010d60:	6813      	ldr	r3, [r2, #0]
 8010d62:	0605      	lsls	r5, r0, #24
 8010d64:	f103 0104 	add.w	r1, r3, #4
 8010d68:	d52a      	bpl.n	8010dc0 <_printf_i+0xa4>
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6011      	str	r1, [r2, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	da03      	bge.n	8010d7a <_printf_i+0x5e>
 8010d72:	222d      	movs	r2, #45	; 0x2d
 8010d74:	425b      	negs	r3, r3
 8010d76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d7a:	486f      	ldr	r0, [pc, #444]	; (8010f38 <_printf_i+0x21c>)
 8010d7c:	220a      	movs	r2, #10
 8010d7e:	e039      	b.n	8010df4 <_printf_i+0xd8>
 8010d80:	2973      	cmp	r1, #115	; 0x73
 8010d82:	f000 809d 	beq.w	8010ec0 <_printf_i+0x1a4>
 8010d86:	d808      	bhi.n	8010d9a <_printf_i+0x7e>
 8010d88:	296f      	cmp	r1, #111	; 0x6f
 8010d8a:	d020      	beq.n	8010dce <_printf_i+0xb2>
 8010d8c:	2970      	cmp	r1, #112	; 0x70
 8010d8e:	d1dd      	bne.n	8010d4c <_printf_i+0x30>
 8010d90:	6823      	ldr	r3, [r4, #0]
 8010d92:	f043 0320 	orr.w	r3, r3, #32
 8010d96:	6023      	str	r3, [r4, #0]
 8010d98:	e003      	b.n	8010da2 <_printf_i+0x86>
 8010d9a:	2975      	cmp	r1, #117	; 0x75
 8010d9c:	d017      	beq.n	8010dce <_printf_i+0xb2>
 8010d9e:	2978      	cmp	r1, #120	; 0x78
 8010da0:	d1d4      	bne.n	8010d4c <_printf_i+0x30>
 8010da2:	2378      	movs	r3, #120	; 0x78
 8010da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010da8:	4864      	ldr	r0, [pc, #400]	; (8010f3c <_printf_i+0x220>)
 8010daa:	e055      	b.n	8010e58 <_printf_i+0x13c>
 8010dac:	6813      	ldr	r3, [r2, #0]
 8010dae:	1d19      	adds	r1, r3, #4
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	6011      	str	r1, [r2, #0]
 8010db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e08c      	b.n	8010eda <_printf_i+0x1be>
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	6011      	str	r1, [r2, #0]
 8010dc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dc8:	bf18      	it	ne
 8010dca:	b21b      	sxthne	r3, r3
 8010dcc:	e7cf      	b.n	8010d6e <_printf_i+0x52>
 8010dce:	6813      	ldr	r3, [r2, #0]
 8010dd0:	6825      	ldr	r5, [r4, #0]
 8010dd2:	1d18      	adds	r0, r3, #4
 8010dd4:	6010      	str	r0, [r2, #0]
 8010dd6:	0628      	lsls	r0, r5, #24
 8010dd8:	d501      	bpl.n	8010dde <_printf_i+0xc2>
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	e002      	b.n	8010de4 <_printf_i+0xc8>
 8010dde:	0668      	lsls	r0, r5, #25
 8010de0:	d5fb      	bpl.n	8010dda <_printf_i+0xbe>
 8010de2:	881b      	ldrh	r3, [r3, #0]
 8010de4:	4854      	ldr	r0, [pc, #336]	; (8010f38 <_printf_i+0x21c>)
 8010de6:	296f      	cmp	r1, #111	; 0x6f
 8010de8:	bf14      	ite	ne
 8010dea:	220a      	movne	r2, #10
 8010dec:	2208      	moveq	r2, #8
 8010dee:	2100      	movs	r1, #0
 8010df0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010df4:	6865      	ldr	r5, [r4, #4]
 8010df6:	60a5      	str	r5, [r4, #8]
 8010df8:	2d00      	cmp	r5, #0
 8010dfa:	f2c0 8095 	blt.w	8010f28 <_printf_i+0x20c>
 8010dfe:	6821      	ldr	r1, [r4, #0]
 8010e00:	f021 0104 	bic.w	r1, r1, #4
 8010e04:	6021      	str	r1, [r4, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d13d      	bne.n	8010e86 <_printf_i+0x16a>
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	f040 808e 	bne.w	8010f2c <_printf_i+0x210>
 8010e10:	4665      	mov	r5, ip
 8010e12:	2a08      	cmp	r2, #8
 8010e14:	d10b      	bne.n	8010e2e <_printf_i+0x112>
 8010e16:	6823      	ldr	r3, [r4, #0]
 8010e18:	07db      	lsls	r3, r3, #31
 8010e1a:	d508      	bpl.n	8010e2e <_printf_i+0x112>
 8010e1c:	6923      	ldr	r3, [r4, #16]
 8010e1e:	6862      	ldr	r2, [r4, #4]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	bfde      	ittt	le
 8010e24:	2330      	movle	r3, #48	; 0x30
 8010e26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e2e:	ebac 0305 	sub.w	r3, ip, r5
 8010e32:	6123      	str	r3, [r4, #16]
 8010e34:	f8cd 8000 	str.w	r8, [sp]
 8010e38:	463b      	mov	r3, r7
 8010e3a:	aa03      	add	r2, sp, #12
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f7ff fef6 	bl	8010c30 <_printf_common>
 8010e44:	3001      	adds	r0, #1
 8010e46:	d14d      	bne.n	8010ee4 <_printf_i+0x1c8>
 8010e48:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4c:	b005      	add	sp, #20
 8010e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e52:	4839      	ldr	r0, [pc, #228]	; (8010f38 <_printf_i+0x21c>)
 8010e54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e58:	6813      	ldr	r3, [r2, #0]
 8010e5a:	6821      	ldr	r1, [r4, #0]
 8010e5c:	1d1d      	adds	r5, r3, #4
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	6015      	str	r5, [r2, #0]
 8010e62:	060a      	lsls	r2, r1, #24
 8010e64:	d50b      	bpl.n	8010e7e <_printf_i+0x162>
 8010e66:	07ca      	lsls	r2, r1, #31
 8010e68:	bf44      	itt	mi
 8010e6a:	f041 0120 	orrmi.w	r1, r1, #32
 8010e6e:	6021      	strmi	r1, [r4, #0]
 8010e70:	b91b      	cbnz	r3, 8010e7a <_printf_i+0x15e>
 8010e72:	6822      	ldr	r2, [r4, #0]
 8010e74:	f022 0220 	bic.w	r2, r2, #32
 8010e78:	6022      	str	r2, [r4, #0]
 8010e7a:	2210      	movs	r2, #16
 8010e7c:	e7b7      	b.n	8010dee <_printf_i+0xd2>
 8010e7e:	064d      	lsls	r5, r1, #25
 8010e80:	bf48      	it	mi
 8010e82:	b29b      	uxthmi	r3, r3
 8010e84:	e7ef      	b.n	8010e66 <_printf_i+0x14a>
 8010e86:	4665      	mov	r5, ip
 8010e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e8c:	fb02 3311 	mls	r3, r2, r1, r3
 8010e90:	5cc3      	ldrb	r3, [r0, r3]
 8010e92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e96:	460b      	mov	r3, r1
 8010e98:	2900      	cmp	r1, #0
 8010e9a:	d1f5      	bne.n	8010e88 <_printf_i+0x16c>
 8010e9c:	e7b9      	b.n	8010e12 <_printf_i+0xf6>
 8010e9e:	6813      	ldr	r3, [r2, #0]
 8010ea0:	6825      	ldr	r5, [r4, #0]
 8010ea2:	6961      	ldr	r1, [r4, #20]
 8010ea4:	1d18      	adds	r0, r3, #4
 8010ea6:	6010      	str	r0, [r2, #0]
 8010ea8:	0628      	lsls	r0, r5, #24
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	d501      	bpl.n	8010eb2 <_printf_i+0x196>
 8010eae:	6019      	str	r1, [r3, #0]
 8010eb0:	e002      	b.n	8010eb8 <_printf_i+0x19c>
 8010eb2:	066a      	lsls	r2, r5, #25
 8010eb4:	d5fb      	bpl.n	8010eae <_printf_i+0x192>
 8010eb6:	8019      	strh	r1, [r3, #0]
 8010eb8:	2300      	movs	r3, #0
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	4665      	mov	r5, ip
 8010ebe:	e7b9      	b.n	8010e34 <_printf_i+0x118>
 8010ec0:	6813      	ldr	r3, [r2, #0]
 8010ec2:	1d19      	adds	r1, r3, #4
 8010ec4:	6011      	str	r1, [r2, #0]
 8010ec6:	681d      	ldr	r5, [r3, #0]
 8010ec8:	6862      	ldr	r2, [r4, #4]
 8010eca:	2100      	movs	r1, #0
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f7f5 ffd7 	bl	8006e80 <memchr>
 8010ed2:	b108      	cbz	r0, 8010ed8 <_printf_i+0x1bc>
 8010ed4:	1b40      	subs	r0, r0, r5
 8010ed6:	6060      	str	r0, [r4, #4]
 8010ed8:	6863      	ldr	r3, [r4, #4]
 8010eda:	6123      	str	r3, [r4, #16]
 8010edc:	2300      	movs	r3, #0
 8010ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ee2:	e7a7      	b.n	8010e34 <_printf_i+0x118>
 8010ee4:	6923      	ldr	r3, [r4, #16]
 8010ee6:	462a      	mov	r2, r5
 8010ee8:	4639      	mov	r1, r7
 8010eea:	4630      	mov	r0, r6
 8010eec:	47c0      	blx	r8
 8010eee:	3001      	adds	r0, #1
 8010ef0:	d0aa      	beq.n	8010e48 <_printf_i+0x12c>
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	079b      	lsls	r3, r3, #30
 8010ef6:	d413      	bmi.n	8010f20 <_printf_i+0x204>
 8010ef8:	68e0      	ldr	r0, [r4, #12]
 8010efa:	9b03      	ldr	r3, [sp, #12]
 8010efc:	4298      	cmp	r0, r3
 8010efe:	bfb8      	it	lt
 8010f00:	4618      	movlt	r0, r3
 8010f02:	e7a3      	b.n	8010e4c <_printf_i+0x130>
 8010f04:	2301      	movs	r3, #1
 8010f06:	464a      	mov	r2, r9
 8010f08:	4639      	mov	r1, r7
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	47c0      	blx	r8
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d09a      	beq.n	8010e48 <_printf_i+0x12c>
 8010f12:	3501      	adds	r5, #1
 8010f14:	68e3      	ldr	r3, [r4, #12]
 8010f16:	9a03      	ldr	r2, [sp, #12]
 8010f18:	1a9b      	subs	r3, r3, r2
 8010f1a:	42ab      	cmp	r3, r5
 8010f1c:	dcf2      	bgt.n	8010f04 <_printf_i+0x1e8>
 8010f1e:	e7eb      	b.n	8010ef8 <_printf_i+0x1dc>
 8010f20:	2500      	movs	r5, #0
 8010f22:	f104 0919 	add.w	r9, r4, #25
 8010f26:	e7f5      	b.n	8010f14 <_printf_i+0x1f8>
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1ac      	bne.n	8010e86 <_printf_i+0x16a>
 8010f2c:	7803      	ldrb	r3, [r0, #0]
 8010f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f36:	e76c      	b.n	8010e12 <_printf_i+0xf6>
 8010f38:	08017216 	.word	0x08017216
 8010f3c:	08017227 	.word	0x08017227

08010f40 <iprintf>:
 8010f40:	b40f      	push	{r0, r1, r2, r3}
 8010f42:	4b0a      	ldr	r3, [pc, #40]	; (8010f6c <iprintf+0x2c>)
 8010f44:	b513      	push	{r0, r1, r4, lr}
 8010f46:	681c      	ldr	r4, [r3, #0]
 8010f48:	b124      	cbz	r4, 8010f54 <iprintf+0x14>
 8010f4a:	69a3      	ldr	r3, [r4, #24]
 8010f4c:	b913      	cbnz	r3, 8010f54 <iprintf+0x14>
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f001 f826 	bl	8011fa0 <__sinit>
 8010f54:	ab05      	add	r3, sp, #20
 8010f56:	9a04      	ldr	r2, [sp, #16]
 8010f58:	68a1      	ldr	r1, [r4, #8]
 8010f5a:	9301      	str	r3, [sp, #4]
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f001 fc57 	bl	8012810 <_vfiprintf_r>
 8010f62:	b002      	add	sp, #8
 8010f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f68:	b004      	add	sp, #16
 8010f6a:	4770      	bx	lr
 8010f6c:	200006c8 	.word	0x200006c8

08010f70 <_puts_r>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	460e      	mov	r6, r1
 8010f74:	4605      	mov	r5, r0
 8010f76:	b118      	cbz	r0, 8010f80 <_puts_r+0x10>
 8010f78:	6983      	ldr	r3, [r0, #24]
 8010f7a:	b90b      	cbnz	r3, 8010f80 <_puts_r+0x10>
 8010f7c:	f001 f810 	bl	8011fa0 <__sinit>
 8010f80:	69ab      	ldr	r3, [r5, #24]
 8010f82:	68ac      	ldr	r4, [r5, #8]
 8010f84:	b913      	cbnz	r3, 8010f8c <_puts_r+0x1c>
 8010f86:	4628      	mov	r0, r5
 8010f88:	f001 f80a 	bl	8011fa0 <__sinit>
 8010f8c:	4b23      	ldr	r3, [pc, #140]	; (801101c <_puts_r+0xac>)
 8010f8e:	429c      	cmp	r4, r3
 8010f90:	d117      	bne.n	8010fc2 <_puts_r+0x52>
 8010f92:	686c      	ldr	r4, [r5, #4]
 8010f94:	89a3      	ldrh	r3, [r4, #12]
 8010f96:	071b      	lsls	r3, r3, #28
 8010f98:	d51d      	bpl.n	8010fd6 <_puts_r+0x66>
 8010f9a:	6923      	ldr	r3, [r4, #16]
 8010f9c:	b1db      	cbz	r3, 8010fd6 <_puts_r+0x66>
 8010f9e:	3e01      	subs	r6, #1
 8010fa0:	68a3      	ldr	r3, [r4, #8]
 8010fa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010fa6:	3b01      	subs	r3, #1
 8010fa8:	60a3      	str	r3, [r4, #8]
 8010faa:	b9e9      	cbnz	r1, 8010fe8 <_puts_r+0x78>
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	da2e      	bge.n	801100e <_puts_r+0x9e>
 8010fb0:	4622      	mov	r2, r4
 8010fb2:	210a      	movs	r1, #10
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	f000 f869 	bl	801108c <__swbuf_r>
 8010fba:	3001      	adds	r0, #1
 8010fbc:	d011      	beq.n	8010fe2 <_puts_r+0x72>
 8010fbe:	200a      	movs	r0, #10
 8010fc0:	e011      	b.n	8010fe6 <_puts_r+0x76>
 8010fc2:	4b17      	ldr	r3, [pc, #92]	; (8011020 <_puts_r+0xb0>)
 8010fc4:	429c      	cmp	r4, r3
 8010fc6:	d101      	bne.n	8010fcc <_puts_r+0x5c>
 8010fc8:	68ac      	ldr	r4, [r5, #8]
 8010fca:	e7e3      	b.n	8010f94 <_puts_r+0x24>
 8010fcc:	4b15      	ldr	r3, [pc, #84]	; (8011024 <_puts_r+0xb4>)
 8010fce:	429c      	cmp	r4, r3
 8010fd0:	bf08      	it	eq
 8010fd2:	68ec      	ldreq	r4, [r5, #12]
 8010fd4:	e7de      	b.n	8010f94 <_puts_r+0x24>
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f000 f8a9 	bl	8011130 <__swsetup_r>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d0dd      	beq.n	8010f9e <_puts_r+0x2e>
 8010fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	da04      	bge.n	8010ff6 <_puts_r+0x86>
 8010fec:	69a2      	ldr	r2, [r4, #24]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	dc06      	bgt.n	8011000 <_puts_r+0x90>
 8010ff2:	290a      	cmp	r1, #10
 8010ff4:	d004      	beq.n	8011000 <_puts_r+0x90>
 8010ff6:	6823      	ldr	r3, [r4, #0]
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	6022      	str	r2, [r4, #0]
 8010ffc:	7019      	strb	r1, [r3, #0]
 8010ffe:	e7cf      	b.n	8010fa0 <_puts_r+0x30>
 8011000:	4622      	mov	r2, r4
 8011002:	4628      	mov	r0, r5
 8011004:	f000 f842 	bl	801108c <__swbuf_r>
 8011008:	3001      	adds	r0, #1
 801100a:	d1c9      	bne.n	8010fa0 <_puts_r+0x30>
 801100c:	e7e9      	b.n	8010fe2 <_puts_r+0x72>
 801100e:	6823      	ldr	r3, [r4, #0]
 8011010:	200a      	movs	r0, #10
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	6022      	str	r2, [r4, #0]
 8011016:	7018      	strb	r0, [r3, #0]
 8011018:	e7e5      	b.n	8010fe6 <_puts_r+0x76>
 801101a:	bf00      	nop
 801101c:	08017268 	.word	0x08017268
 8011020:	08017288 	.word	0x08017288
 8011024:	08017248 	.word	0x08017248

08011028 <puts>:
 8011028:	4b02      	ldr	r3, [pc, #8]	; (8011034 <puts+0xc>)
 801102a:	4601      	mov	r1, r0
 801102c:	6818      	ldr	r0, [r3, #0]
 801102e:	f7ff bf9f 	b.w	8010f70 <_puts_r>
 8011032:	bf00      	nop
 8011034:	200006c8 	.word	0x200006c8

08011038 <realloc>:
 8011038:	4b02      	ldr	r3, [pc, #8]	; (8011044 <realloc+0xc>)
 801103a:	460a      	mov	r2, r1
 801103c:	4601      	mov	r1, r0
 801103e:	6818      	ldr	r0, [r3, #0]
 8011040:	f001 bb96 	b.w	8012770 <_realloc_r>
 8011044:	200006c8 	.word	0x200006c8

08011048 <_sbrk_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4c06      	ldr	r4, [pc, #24]	; (8011064 <_sbrk_r+0x1c>)
 801104c:	2300      	movs	r3, #0
 801104e:	4605      	mov	r5, r0
 8011050:	4608      	mov	r0, r1
 8011052:	6023      	str	r3, [r4, #0]
 8011054:	f7f6 ff56 	bl	8007f04 <_sbrk>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_sbrk_r+0x1a>
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	b103      	cbz	r3, 8011062 <_sbrk_r+0x1a>
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	20000e60 	.word	0x20000e60

08011068 <strncmp>:
 8011068:	b510      	push	{r4, lr}
 801106a:	b16a      	cbz	r2, 8011088 <strncmp+0x20>
 801106c:	3901      	subs	r1, #1
 801106e:	1884      	adds	r4, r0, r2
 8011070:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011074:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011078:	4293      	cmp	r3, r2
 801107a:	d103      	bne.n	8011084 <strncmp+0x1c>
 801107c:	42a0      	cmp	r0, r4
 801107e:	d001      	beq.n	8011084 <strncmp+0x1c>
 8011080:	2b00      	cmp	r3, #0
 8011082:	d1f5      	bne.n	8011070 <strncmp+0x8>
 8011084:	1a98      	subs	r0, r3, r2
 8011086:	bd10      	pop	{r4, pc}
 8011088:	4610      	mov	r0, r2
 801108a:	e7fc      	b.n	8011086 <strncmp+0x1e>

0801108c <__swbuf_r>:
 801108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108e:	460e      	mov	r6, r1
 8011090:	4614      	mov	r4, r2
 8011092:	4605      	mov	r5, r0
 8011094:	b118      	cbz	r0, 801109e <__swbuf_r+0x12>
 8011096:	6983      	ldr	r3, [r0, #24]
 8011098:	b90b      	cbnz	r3, 801109e <__swbuf_r+0x12>
 801109a:	f000 ff81 	bl	8011fa0 <__sinit>
 801109e:	4b21      	ldr	r3, [pc, #132]	; (8011124 <__swbuf_r+0x98>)
 80110a0:	429c      	cmp	r4, r3
 80110a2:	d12a      	bne.n	80110fa <__swbuf_r+0x6e>
 80110a4:	686c      	ldr	r4, [r5, #4]
 80110a6:	69a3      	ldr	r3, [r4, #24]
 80110a8:	60a3      	str	r3, [r4, #8]
 80110aa:	89a3      	ldrh	r3, [r4, #12]
 80110ac:	071a      	lsls	r2, r3, #28
 80110ae:	d52e      	bpl.n	801110e <__swbuf_r+0x82>
 80110b0:	6923      	ldr	r3, [r4, #16]
 80110b2:	b363      	cbz	r3, 801110e <__swbuf_r+0x82>
 80110b4:	6923      	ldr	r3, [r4, #16]
 80110b6:	6820      	ldr	r0, [r4, #0]
 80110b8:	1ac0      	subs	r0, r0, r3
 80110ba:	6963      	ldr	r3, [r4, #20]
 80110bc:	b2f6      	uxtb	r6, r6
 80110be:	4283      	cmp	r3, r0
 80110c0:	4637      	mov	r7, r6
 80110c2:	dc04      	bgt.n	80110ce <__swbuf_r+0x42>
 80110c4:	4621      	mov	r1, r4
 80110c6:	4628      	mov	r0, r5
 80110c8:	f000 ff00 	bl	8011ecc <_fflush_r>
 80110cc:	bb28      	cbnz	r0, 801111a <__swbuf_r+0x8e>
 80110ce:	68a3      	ldr	r3, [r4, #8]
 80110d0:	3b01      	subs	r3, #1
 80110d2:	60a3      	str	r3, [r4, #8]
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	1c5a      	adds	r2, r3, #1
 80110d8:	6022      	str	r2, [r4, #0]
 80110da:	701e      	strb	r6, [r3, #0]
 80110dc:	6963      	ldr	r3, [r4, #20]
 80110de:	3001      	adds	r0, #1
 80110e0:	4283      	cmp	r3, r0
 80110e2:	d004      	beq.n	80110ee <__swbuf_r+0x62>
 80110e4:	89a3      	ldrh	r3, [r4, #12]
 80110e6:	07db      	lsls	r3, r3, #31
 80110e8:	d519      	bpl.n	801111e <__swbuf_r+0x92>
 80110ea:	2e0a      	cmp	r6, #10
 80110ec:	d117      	bne.n	801111e <__swbuf_r+0x92>
 80110ee:	4621      	mov	r1, r4
 80110f0:	4628      	mov	r0, r5
 80110f2:	f000 feeb 	bl	8011ecc <_fflush_r>
 80110f6:	b190      	cbz	r0, 801111e <__swbuf_r+0x92>
 80110f8:	e00f      	b.n	801111a <__swbuf_r+0x8e>
 80110fa:	4b0b      	ldr	r3, [pc, #44]	; (8011128 <__swbuf_r+0x9c>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	d101      	bne.n	8011104 <__swbuf_r+0x78>
 8011100:	68ac      	ldr	r4, [r5, #8]
 8011102:	e7d0      	b.n	80110a6 <__swbuf_r+0x1a>
 8011104:	4b09      	ldr	r3, [pc, #36]	; (801112c <__swbuf_r+0xa0>)
 8011106:	429c      	cmp	r4, r3
 8011108:	bf08      	it	eq
 801110a:	68ec      	ldreq	r4, [r5, #12]
 801110c:	e7cb      	b.n	80110a6 <__swbuf_r+0x1a>
 801110e:	4621      	mov	r1, r4
 8011110:	4628      	mov	r0, r5
 8011112:	f000 f80d 	bl	8011130 <__swsetup_r>
 8011116:	2800      	cmp	r0, #0
 8011118:	d0cc      	beq.n	80110b4 <__swbuf_r+0x28>
 801111a:	f04f 37ff 	mov.w	r7, #4294967295
 801111e:	4638      	mov	r0, r7
 8011120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011122:	bf00      	nop
 8011124:	08017268 	.word	0x08017268
 8011128:	08017288 	.word	0x08017288
 801112c:	08017248 	.word	0x08017248

08011130 <__swsetup_r>:
 8011130:	4b32      	ldr	r3, [pc, #200]	; (80111fc <__swsetup_r+0xcc>)
 8011132:	b570      	push	{r4, r5, r6, lr}
 8011134:	681d      	ldr	r5, [r3, #0]
 8011136:	4606      	mov	r6, r0
 8011138:	460c      	mov	r4, r1
 801113a:	b125      	cbz	r5, 8011146 <__swsetup_r+0x16>
 801113c:	69ab      	ldr	r3, [r5, #24]
 801113e:	b913      	cbnz	r3, 8011146 <__swsetup_r+0x16>
 8011140:	4628      	mov	r0, r5
 8011142:	f000 ff2d 	bl	8011fa0 <__sinit>
 8011146:	4b2e      	ldr	r3, [pc, #184]	; (8011200 <__swsetup_r+0xd0>)
 8011148:	429c      	cmp	r4, r3
 801114a:	d10f      	bne.n	801116c <__swsetup_r+0x3c>
 801114c:	686c      	ldr	r4, [r5, #4]
 801114e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011152:	b29a      	uxth	r2, r3
 8011154:	0715      	lsls	r5, r2, #28
 8011156:	d42c      	bmi.n	80111b2 <__swsetup_r+0x82>
 8011158:	06d0      	lsls	r0, r2, #27
 801115a:	d411      	bmi.n	8011180 <__swsetup_r+0x50>
 801115c:	2209      	movs	r2, #9
 801115e:	6032      	str	r2, [r6, #0]
 8011160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011164:	81a3      	strh	r3, [r4, #12]
 8011166:	f04f 30ff 	mov.w	r0, #4294967295
 801116a:	e03e      	b.n	80111ea <__swsetup_r+0xba>
 801116c:	4b25      	ldr	r3, [pc, #148]	; (8011204 <__swsetup_r+0xd4>)
 801116e:	429c      	cmp	r4, r3
 8011170:	d101      	bne.n	8011176 <__swsetup_r+0x46>
 8011172:	68ac      	ldr	r4, [r5, #8]
 8011174:	e7eb      	b.n	801114e <__swsetup_r+0x1e>
 8011176:	4b24      	ldr	r3, [pc, #144]	; (8011208 <__swsetup_r+0xd8>)
 8011178:	429c      	cmp	r4, r3
 801117a:	bf08      	it	eq
 801117c:	68ec      	ldreq	r4, [r5, #12]
 801117e:	e7e6      	b.n	801114e <__swsetup_r+0x1e>
 8011180:	0751      	lsls	r1, r2, #29
 8011182:	d512      	bpl.n	80111aa <__swsetup_r+0x7a>
 8011184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011186:	b141      	cbz	r1, 801119a <__swsetup_r+0x6a>
 8011188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801118c:	4299      	cmp	r1, r3
 801118e:	d002      	beq.n	8011196 <__swsetup_r+0x66>
 8011190:	4630      	mov	r0, r6
 8011192:	f7ff f9f3 	bl	801057c <_free_r>
 8011196:	2300      	movs	r3, #0
 8011198:	6363      	str	r3, [r4, #52]	; 0x34
 801119a:	89a3      	ldrh	r3, [r4, #12]
 801119c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80111a0:	81a3      	strh	r3, [r4, #12]
 80111a2:	2300      	movs	r3, #0
 80111a4:	6063      	str	r3, [r4, #4]
 80111a6:	6923      	ldr	r3, [r4, #16]
 80111a8:	6023      	str	r3, [r4, #0]
 80111aa:	89a3      	ldrh	r3, [r4, #12]
 80111ac:	f043 0308 	orr.w	r3, r3, #8
 80111b0:	81a3      	strh	r3, [r4, #12]
 80111b2:	6923      	ldr	r3, [r4, #16]
 80111b4:	b94b      	cbnz	r3, 80111ca <__swsetup_r+0x9a>
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111c0:	d003      	beq.n	80111ca <__swsetup_r+0x9a>
 80111c2:	4621      	mov	r1, r4
 80111c4:	4630      	mov	r0, r6
 80111c6:	f000 ffa7 	bl	8012118 <__smakebuf_r>
 80111ca:	89a2      	ldrh	r2, [r4, #12]
 80111cc:	f012 0301 	ands.w	r3, r2, #1
 80111d0:	d00c      	beq.n	80111ec <__swsetup_r+0xbc>
 80111d2:	2300      	movs	r3, #0
 80111d4:	60a3      	str	r3, [r4, #8]
 80111d6:	6963      	ldr	r3, [r4, #20]
 80111d8:	425b      	negs	r3, r3
 80111da:	61a3      	str	r3, [r4, #24]
 80111dc:	6923      	ldr	r3, [r4, #16]
 80111de:	b953      	cbnz	r3, 80111f6 <__swsetup_r+0xc6>
 80111e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80111e8:	d1ba      	bne.n	8011160 <__swsetup_r+0x30>
 80111ea:	bd70      	pop	{r4, r5, r6, pc}
 80111ec:	0792      	lsls	r2, r2, #30
 80111ee:	bf58      	it	pl
 80111f0:	6963      	ldrpl	r3, [r4, #20]
 80111f2:	60a3      	str	r3, [r4, #8]
 80111f4:	e7f2      	b.n	80111dc <__swsetup_r+0xac>
 80111f6:	2000      	movs	r0, #0
 80111f8:	e7f7      	b.n	80111ea <__swsetup_r+0xba>
 80111fa:	bf00      	nop
 80111fc:	200006c8 	.word	0x200006c8
 8011200:	08017268 	.word	0x08017268
 8011204:	08017288 	.word	0x08017288
 8011208:	08017248 	.word	0x08017248

0801120c <quorem>:
 801120c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011210:	6903      	ldr	r3, [r0, #16]
 8011212:	690c      	ldr	r4, [r1, #16]
 8011214:	42a3      	cmp	r3, r4
 8011216:	4680      	mov	r8, r0
 8011218:	f2c0 8082 	blt.w	8011320 <quorem+0x114>
 801121c:	3c01      	subs	r4, #1
 801121e:	f101 0714 	add.w	r7, r1, #20
 8011222:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011226:	f100 0614 	add.w	r6, r0, #20
 801122a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801122e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011232:	eb06 030c 	add.w	r3, r6, ip
 8011236:	3501      	adds	r5, #1
 8011238:	eb07 090c 	add.w	r9, r7, ip
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	fbb0 f5f5 	udiv	r5, r0, r5
 8011242:	b395      	cbz	r5, 80112aa <quorem+0x9e>
 8011244:	f04f 0a00 	mov.w	sl, #0
 8011248:	4638      	mov	r0, r7
 801124a:	46b6      	mov	lr, r6
 801124c:	46d3      	mov	fp, sl
 801124e:	f850 2b04 	ldr.w	r2, [r0], #4
 8011252:	b293      	uxth	r3, r2
 8011254:	fb05 a303 	mla	r3, r5, r3, sl
 8011258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801125c:	b29b      	uxth	r3, r3
 801125e:	ebab 0303 	sub.w	r3, fp, r3
 8011262:	0c12      	lsrs	r2, r2, #16
 8011264:	f8de b000 	ldr.w	fp, [lr]
 8011268:	fb05 a202 	mla	r2, r5, r2, sl
 801126c:	fa13 f38b 	uxtah	r3, r3, fp
 8011270:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011274:	fa1f fb82 	uxth.w	fp, r2
 8011278:	f8de 2000 	ldr.w	r2, [lr]
 801127c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011284:	b29b      	uxth	r3, r3
 8011286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801128a:	4581      	cmp	r9, r0
 801128c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011290:	f84e 3b04 	str.w	r3, [lr], #4
 8011294:	d2db      	bcs.n	801124e <quorem+0x42>
 8011296:	f856 300c 	ldr.w	r3, [r6, ip]
 801129a:	b933      	cbnz	r3, 80112aa <quorem+0x9e>
 801129c:	9b01      	ldr	r3, [sp, #4]
 801129e:	3b04      	subs	r3, #4
 80112a0:	429e      	cmp	r6, r3
 80112a2:	461a      	mov	r2, r3
 80112a4:	d330      	bcc.n	8011308 <quorem+0xfc>
 80112a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80112aa:	4640      	mov	r0, r8
 80112ac:	f001 f98c 	bl	80125c8 <__mcmp>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	db25      	blt.n	8011300 <quorem+0xf4>
 80112b4:	3501      	adds	r5, #1
 80112b6:	4630      	mov	r0, r6
 80112b8:	f04f 0c00 	mov.w	ip, #0
 80112bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80112c0:	f8d0 e000 	ldr.w	lr, [r0]
 80112c4:	b293      	uxth	r3, r2
 80112c6:	ebac 0303 	sub.w	r3, ip, r3
 80112ca:	0c12      	lsrs	r2, r2, #16
 80112cc:	fa13 f38e 	uxtah	r3, r3, lr
 80112d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80112d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80112d8:	b29b      	uxth	r3, r3
 80112da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112de:	45b9      	cmp	r9, r7
 80112e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80112e4:	f840 3b04 	str.w	r3, [r0], #4
 80112e8:	d2e8      	bcs.n	80112bc <quorem+0xb0>
 80112ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80112ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80112f2:	b92a      	cbnz	r2, 8011300 <quorem+0xf4>
 80112f4:	3b04      	subs	r3, #4
 80112f6:	429e      	cmp	r6, r3
 80112f8:	461a      	mov	r2, r3
 80112fa:	d30b      	bcc.n	8011314 <quorem+0x108>
 80112fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8011300:	4628      	mov	r0, r5
 8011302:	b003      	add	sp, #12
 8011304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011308:	6812      	ldr	r2, [r2, #0]
 801130a:	3b04      	subs	r3, #4
 801130c:	2a00      	cmp	r2, #0
 801130e:	d1ca      	bne.n	80112a6 <quorem+0x9a>
 8011310:	3c01      	subs	r4, #1
 8011312:	e7c5      	b.n	80112a0 <quorem+0x94>
 8011314:	6812      	ldr	r2, [r2, #0]
 8011316:	3b04      	subs	r3, #4
 8011318:	2a00      	cmp	r2, #0
 801131a:	d1ef      	bne.n	80112fc <quorem+0xf0>
 801131c:	3c01      	subs	r4, #1
 801131e:	e7ea      	b.n	80112f6 <quorem+0xea>
 8011320:	2000      	movs	r0, #0
 8011322:	e7ee      	b.n	8011302 <quorem+0xf6>
 8011324:	0000      	movs	r0, r0
	...

08011328 <_dtoa_r>:
 8011328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801132c:	ec57 6b10 	vmov	r6, r7, d0
 8011330:	b095      	sub	sp, #84	; 0x54
 8011332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011334:	9108      	str	r1, [sp, #32]
 8011336:	4604      	mov	r4, r0
 8011338:	920a      	str	r2, [sp, #40]	; 0x28
 801133a:	9311      	str	r3, [sp, #68]	; 0x44
 801133c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011340:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011344:	b93d      	cbnz	r5, 8011356 <_dtoa_r+0x2e>
 8011346:	2010      	movs	r0, #16
 8011348:	f7ff f8e6 	bl	8010518 <malloc>
 801134c:	6260      	str	r0, [r4, #36]	; 0x24
 801134e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011352:	6005      	str	r5, [r0, #0]
 8011354:	60c5      	str	r5, [r0, #12]
 8011356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011358:	6819      	ldr	r1, [r3, #0]
 801135a:	b151      	cbz	r1, 8011372 <_dtoa_r+0x4a>
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	604a      	str	r2, [r1, #4]
 8011360:	2301      	movs	r3, #1
 8011362:	4093      	lsls	r3, r2
 8011364:	608b      	str	r3, [r1, #8]
 8011366:	4620      	mov	r0, r4
 8011368:	f000 ff4c 	bl	8012204 <_Bfree>
 801136c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801136e:	2200      	movs	r2, #0
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	1e3b      	subs	r3, r7, #0
 8011374:	bfb9      	ittee	lt
 8011376:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801137a:	9303      	strlt	r3, [sp, #12]
 801137c:	2300      	movge	r3, #0
 801137e:	f8c8 3000 	strge.w	r3, [r8]
 8011382:	9d03      	ldr	r5, [sp, #12]
 8011384:	4bac      	ldr	r3, [pc, #688]	; (8011638 <_dtoa_r+0x310>)
 8011386:	bfbc      	itt	lt
 8011388:	2201      	movlt	r2, #1
 801138a:	f8c8 2000 	strlt.w	r2, [r8]
 801138e:	43ab      	bics	r3, r5
 8011390:	d11b      	bne.n	80113ca <_dtoa_r+0xa2>
 8011392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011394:	f242 730f 	movw	r3, #9999	; 0x270f
 8011398:	6013      	str	r3, [r2, #0]
 801139a:	9b02      	ldr	r3, [sp, #8]
 801139c:	b923      	cbnz	r3, 80113a8 <_dtoa_r+0x80>
 801139e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80113a2:	2d00      	cmp	r5, #0
 80113a4:	f000 84dd 	beq.w	8011d62 <_dtoa_r+0xa3a>
 80113a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80113aa:	b953      	cbnz	r3, 80113c2 <_dtoa_r+0x9a>
 80113ac:	4ba3      	ldr	r3, [pc, #652]	; (801163c <_dtoa_r+0x314>)
 80113ae:	e020      	b.n	80113f2 <_dtoa_r+0xca>
 80113b0:	4ba3      	ldr	r3, [pc, #652]	; (8011640 <_dtoa_r+0x318>)
 80113b2:	9304      	str	r3, [sp, #16]
 80113b4:	3308      	adds	r3, #8
 80113b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80113b8:	6013      	str	r3, [r2, #0]
 80113ba:	9804      	ldr	r0, [sp, #16]
 80113bc:	b015      	add	sp, #84	; 0x54
 80113be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c2:	4b9e      	ldr	r3, [pc, #632]	; (801163c <_dtoa_r+0x314>)
 80113c4:	9304      	str	r3, [sp, #16]
 80113c6:	3303      	adds	r3, #3
 80113c8:	e7f5      	b.n	80113b6 <_dtoa_r+0x8e>
 80113ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80113da:	d10c      	bne.n	80113f6 <_dtoa_r+0xce>
 80113dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113de:	2301      	movs	r3, #1
 80113e0:	6013      	str	r3, [r2, #0]
 80113e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f000 84b9 	beq.w	8011d5c <_dtoa_r+0xa34>
 80113ea:	4b96      	ldr	r3, [pc, #600]	; (8011644 <_dtoa_r+0x31c>)
 80113ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	9304      	str	r3, [sp, #16]
 80113f4:	e7e1      	b.n	80113ba <_dtoa_r+0x92>
 80113f6:	a913      	add	r1, sp, #76	; 0x4c
 80113f8:	aa12      	add	r2, sp, #72	; 0x48
 80113fa:	ed9d 0b04 	vldr	d0, [sp, #16]
 80113fe:	4620      	mov	r0, r4
 8011400:	f001 f959 	bl	80126b6 <__d2b>
 8011404:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011408:	9001      	str	r0, [sp, #4]
 801140a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801140c:	2e00      	cmp	r6, #0
 801140e:	d046      	beq.n	801149e <_dtoa_r+0x176>
 8011410:	9805      	ldr	r0, [sp, #20]
 8011412:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801141a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801141e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011422:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8011426:	2700      	movs	r7, #0
 8011428:	ee07 aa90 	vmov	s15, sl
 801142c:	ec43 2b16 	vmov	d6, r2, r3
 8011430:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011434:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8011620 <_dtoa_r+0x2f8>
 8011438:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801143c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011440:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011628 <_dtoa_r+0x300>
 8011444:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011448:	eeb0 7b46 	vmov.f64	d7, d6
 801144c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8011630 <_dtoa_r+0x308>
 8011450:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011454:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011458:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011460:	ee16 ba90 	vmov	fp, s13
 8011464:	d508      	bpl.n	8011478 <_dtoa_r+0x150>
 8011466:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801146a:	eeb4 6b47 	vcmp.f64	d6, d7
 801146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011472:	bf18      	it	ne
 8011474:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011478:	f1bb 0f16 	cmp.w	fp, #22
 801147c:	d834      	bhi.n	80114e8 <_dtoa_r+0x1c0>
 801147e:	4b72      	ldr	r3, [pc, #456]	; (8011648 <_dtoa_r+0x320>)
 8011480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011484:	ed93 7b00 	vldr	d7, [r3]
 8011488:	ed9d 6b02 	vldr	d6, [sp, #8]
 801148c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011494:	dd01      	ble.n	801149a <_dtoa_r+0x172>
 8011496:	f10b 3bff 	add.w	fp, fp, #4294967295
 801149a:	2300      	movs	r3, #0
 801149c:	e025      	b.n	80114ea <_dtoa_r+0x1c2>
 801149e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80114a0:	eb01 0a03 	add.w	sl, r1, r3
 80114a4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80114a8:	2b20      	cmp	r3, #32
 80114aa:	dd17      	ble.n	80114dc <_dtoa_r+0x1b4>
 80114ac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80114b0:	9a02      	ldr	r2, [sp, #8]
 80114b2:	409d      	lsls	r5, r3
 80114b4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80114b8:	fa22 f303 	lsr.w	r3, r2, r3
 80114bc:	432b      	orrs	r3, r5
 80114be:	ee07 3a90 	vmov	s15, r3
 80114c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80114c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80114ce:	9805      	ldr	r0, [sp, #20]
 80114d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114d4:	2701      	movs	r7, #1
 80114d6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80114da:	e7a5      	b.n	8011428 <_dtoa_r+0x100>
 80114dc:	9a02      	ldr	r2, [sp, #8]
 80114de:	f1c3 0320 	rsb	r3, r3, #32
 80114e2:	fa02 f303 	lsl.w	r3, r2, r3
 80114e6:	e7ea      	b.n	80114be <_dtoa_r+0x196>
 80114e8:	2301      	movs	r3, #1
 80114ea:	eba1 0a0a 	sub.w	sl, r1, sl
 80114ee:	9310      	str	r3, [sp, #64]	; 0x40
 80114f0:	f1ba 0301 	subs.w	r3, sl, #1
 80114f4:	9307      	str	r3, [sp, #28]
 80114f6:	bf43      	ittte	mi
 80114f8:	2300      	movmi	r3, #0
 80114fa:	f1ca 0a01 	rsbmi	sl, sl, #1
 80114fe:	9307      	strmi	r3, [sp, #28]
 8011500:	f04f 0a00 	movpl.w	sl, #0
 8011504:	f1bb 0f00 	cmp.w	fp, #0
 8011508:	db19      	blt.n	801153e <_dtoa_r+0x216>
 801150a:	9b07      	ldr	r3, [sp, #28]
 801150c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011510:	445b      	add	r3, fp
 8011512:	9307      	str	r3, [sp, #28]
 8011514:	f04f 0800 	mov.w	r8, #0
 8011518:	9b08      	ldr	r3, [sp, #32]
 801151a:	2b09      	cmp	r3, #9
 801151c:	d866      	bhi.n	80115ec <_dtoa_r+0x2c4>
 801151e:	2b05      	cmp	r3, #5
 8011520:	bfc4      	itt	gt
 8011522:	3b04      	subgt	r3, #4
 8011524:	9308      	strgt	r3, [sp, #32]
 8011526:	9b08      	ldr	r3, [sp, #32]
 8011528:	f1a3 0302 	sub.w	r3, r3, #2
 801152c:	bfcc      	ite	gt
 801152e:	2500      	movgt	r5, #0
 8011530:	2501      	movle	r5, #1
 8011532:	2b03      	cmp	r3, #3
 8011534:	d866      	bhi.n	8011604 <_dtoa_r+0x2dc>
 8011536:	e8df f003 	tbb	[pc, r3]
 801153a:	5755      	.short	0x5755
 801153c:	4909      	.short	0x4909
 801153e:	2300      	movs	r3, #0
 8011540:	ebaa 0a0b 	sub.w	sl, sl, fp
 8011544:	f1cb 0800 	rsb	r8, fp, #0
 8011548:	930b      	str	r3, [sp, #44]	; 0x2c
 801154a:	e7e5      	b.n	8011518 <_dtoa_r+0x1f0>
 801154c:	2301      	movs	r3, #1
 801154e:	9309      	str	r3, [sp, #36]	; 0x24
 8011550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011552:	2b00      	cmp	r3, #0
 8011554:	dd59      	ble.n	801160a <_dtoa_r+0x2e2>
 8011556:	9306      	str	r3, [sp, #24]
 8011558:	4699      	mov	r9, r3
 801155a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801155c:	2200      	movs	r2, #0
 801155e:	6072      	str	r2, [r6, #4]
 8011560:	2204      	movs	r2, #4
 8011562:	f102 0014 	add.w	r0, r2, #20
 8011566:	4298      	cmp	r0, r3
 8011568:	6871      	ldr	r1, [r6, #4]
 801156a:	d953      	bls.n	8011614 <_dtoa_r+0x2ec>
 801156c:	4620      	mov	r0, r4
 801156e:	f000 fe15 	bl	801219c <_Balloc>
 8011572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011574:	6030      	str	r0, [r6, #0]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	9304      	str	r3, [sp, #16]
 801157a:	f1b9 0f0e 	cmp.w	r9, #14
 801157e:	f200 80c2 	bhi.w	8011706 <_dtoa_r+0x3de>
 8011582:	2d00      	cmp	r5, #0
 8011584:	f000 80bf 	beq.w	8011706 <_dtoa_r+0x3de>
 8011588:	ed9d 7b02 	vldr	d7, [sp, #8]
 801158c:	f1bb 0f00 	cmp.w	fp, #0
 8011590:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8011594:	f340 80e6 	ble.w	8011764 <_dtoa_r+0x43c>
 8011598:	4a2b      	ldr	r2, [pc, #172]	; (8011648 <_dtoa_r+0x320>)
 801159a:	f00b 030f 	and.w	r3, fp, #15
 801159e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80115a2:	ed93 7b00 	vldr	d7, [r3]
 80115a6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80115aa:	06da      	lsls	r2, r3, #27
 80115ac:	f140 80d8 	bpl.w	8011760 <_dtoa_r+0x438>
 80115b0:	4a26      	ldr	r2, [pc, #152]	; (801164c <_dtoa_r+0x324>)
 80115b2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80115b6:	ed92 6b08 	vldr	d6, [r2, #32]
 80115ba:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80115be:	ed8d 6b02 	vstr	d6, [sp, #8]
 80115c2:	f003 030f 	and.w	r3, r3, #15
 80115c6:	2203      	movs	r2, #3
 80115c8:	4920      	ldr	r1, [pc, #128]	; (801164c <_dtoa_r+0x324>)
 80115ca:	e04a      	b.n	8011662 <_dtoa_r+0x33a>
 80115cc:	2301      	movs	r3, #1
 80115ce:	9309      	str	r3, [sp, #36]	; 0x24
 80115d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115d2:	445b      	add	r3, fp
 80115d4:	f103 0901 	add.w	r9, r3, #1
 80115d8:	9306      	str	r3, [sp, #24]
 80115da:	464b      	mov	r3, r9
 80115dc:	2b01      	cmp	r3, #1
 80115de:	bfb8      	it	lt
 80115e0:	2301      	movlt	r3, #1
 80115e2:	e7ba      	b.n	801155a <_dtoa_r+0x232>
 80115e4:	2300      	movs	r3, #0
 80115e6:	e7b2      	b.n	801154e <_dtoa_r+0x226>
 80115e8:	2300      	movs	r3, #0
 80115ea:	e7f0      	b.n	80115ce <_dtoa_r+0x2a6>
 80115ec:	2501      	movs	r5, #1
 80115ee:	2300      	movs	r3, #0
 80115f0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80115f4:	f04f 33ff 	mov.w	r3, #4294967295
 80115f8:	9306      	str	r3, [sp, #24]
 80115fa:	4699      	mov	r9, r3
 80115fc:	2200      	movs	r2, #0
 80115fe:	2312      	movs	r3, #18
 8011600:	920a      	str	r2, [sp, #40]	; 0x28
 8011602:	e7aa      	b.n	801155a <_dtoa_r+0x232>
 8011604:	2301      	movs	r3, #1
 8011606:	9309      	str	r3, [sp, #36]	; 0x24
 8011608:	e7f4      	b.n	80115f4 <_dtoa_r+0x2cc>
 801160a:	2301      	movs	r3, #1
 801160c:	9306      	str	r3, [sp, #24]
 801160e:	4699      	mov	r9, r3
 8011610:	461a      	mov	r2, r3
 8011612:	e7f5      	b.n	8011600 <_dtoa_r+0x2d8>
 8011614:	3101      	adds	r1, #1
 8011616:	6071      	str	r1, [r6, #4]
 8011618:	0052      	lsls	r2, r2, #1
 801161a:	e7a2      	b.n	8011562 <_dtoa_r+0x23a>
 801161c:	f3af 8000 	nop.w
 8011620:	636f4361 	.word	0x636f4361
 8011624:	3fd287a7 	.word	0x3fd287a7
 8011628:	8b60c8b3 	.word	0x8b60c8b3
 801162c:	3fc68a28 	.word	0x3fc68a28
 8011630:	509f79fb 	.word	0x509f79fb
 8011634:	3fd34413 	.word	0x3fd34413
 8011638:	7ff00000 	.word	0x7ff00000
 801163c:	08017241 	.word	0x08017241
 8011640:	08017238 	.word	0x08017238
 8011644:	08017215 	.word	0x08017215
 8011648:	080172d0 	.word	0x080172d0
 801164c:	080172a8 	.word	0x080172a8
 8011650:	07de      	lsls	r6, r3, #31
 8011652:	d504      	bpl.n	801165e <_dtoa_r+0x336>
 8011654:	ed91 6b00 	vldr	d6, [r1]
 8011658:	3201      	adds	r2, #1
 801165a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801165e:	105b      	asrs	r3, r3, #1
 8011660:	3108      	adds	r1, #8
 8011662:	2b00      	cmp	r3, #0
 8011664:	d1f4      	bne.n	8011650 <_dtoa_r+0x328>
 8011666:	ed9d 6b02 	vldr	d6, [sp, #8]
 801166a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801166e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011674:	2b00      	cmp	r3, #0
 8011676:	f000 80a7 	beq.w	80117c8 <_dtoa_r+0x4a0>
 801167a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801167e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801168a:	f140 809d 	bpl.w	80117c8 <_dtoa_r+0x4a0>
 801168e:	f1b9 0f00 	cmp.w	r9, #0
 8011692:	f000 8099 	beq.w	80117c8 <_dtoa_r+0x4a0>
 8011696:	9b06      	ldr	r3, [sp, #24]
 8011698:	2b00      	cmp	r3, #0
 801169a:	dd30      	ble.n	80116fe <_dtoa_r+0x3d6>
 801169c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80116a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116a8:	9d06      	ldr	r5, [sp, #24]
 80116aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80116ae:	3201      	adds	r2, #1
 80116b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116b4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80116b8:	ee07 2a90 	vmov	s15, r2
 80116bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116c0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80116c4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80116c8:	9a03      	ldr	r2, [sp, #12]
 80116ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116ce:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80116d2:	2d00      	cmp	r5, #0
 80116d4:	d17b      	bne.n	80117ce <_dtoa_r+0x4a6>
 80116d6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80116da:	ee36 6b47 	vsub.f64	d6, d6, d7
 80116de:	ec41 0b17 	vmov	d7, r0, r1
 80116e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80116e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ea:	f300 8253 	bgt.w	8011b94 <_dtoa_r+0x86c>
 80116ee:	eeb1 7b47 	vneg.f64	d7, d7
 80116f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80116f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fa:	f100 8249 	bmi.w	8011b90 <_dtoa_r+0x868>
 80116fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011702:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011708:	2b00      	cmp	r3, #0
 801170a:	f2c0 8119 	blt.w	8011940 <_dtoa_r+0x618>
 801170e:	f1bb 0f0e 	cmp.w	fp, #14
 8011712:	f300 8115 	bgt.w	8011940 <_dtoa_r+0x618>
 8011716:	4bc3      	ldr	r3, [pc, #780]	; (8011a24 <_dtoa_r+0x6fc>)
 8011718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801171c:	ed93 6b00 	vldr	d6, [r3]
 8011720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011722:	2b00      	cmp	r3, #0
 8011724:	f280 80ba 	bge.w	801189c <_dtoa_r+0x574>
 8011728:	f1b9 0f00 	cmp.w	r9, #0
 801172c:	f300 80b6 	bgt.w	801189c <_dtoa_r+0x574>
 8011730:	f040 822d 	bne.w	8011b8e <_dtoa_r+0x866>
 8011734:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011738:	ee26 6b07 	vmul.f64	d6, d6, d7
 801173c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011740:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011748:	464d      	mov	r5, r9
 801174a:	464f      	mov	r7, r9
 801174c:	f280 8204 	bge.w	8011b58 <_dtoa_r+0x830>
 8011750:	9b04      	ldr	r3, [sp, #16]
 8011752:	9a04      	ldr	r2, [sp, #16]
 8011754:	1c5e      	adds	r6, r3, #1
 8011756:	2331      	movs	r3, #49	; 0x31
 8011758:	7013      	strb	r3, [r2, #0]
 801175a:	f10b 0b01 	add.w	fp, fp, #1
 801175e:	e1ff      	b.n	8011b60 <_dtoa_r+0x838>
 8011760:	2202      	movs	r2, #2
 8011762:	e731      	b.n	80115c8 <_dtoa_r+0x2a0>
 8011764:	d02e      	beq.n	80117c4 <_dtoa_r+0x49c>
 8011766:	f1cb 0300 	rsb	r3, fp, #0
 801176a:	4aae      	ldr	r2, [pc, #696]	; (8011a24 <_dtoa_r+0x6fc>)
 801176c:	f003 010f 	and.w	r1, r3, #15
 8011770:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011774:	ed92 7b00 	vldr	d7, [r2]
 8011778:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801177c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011780:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011784:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8011788:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801178c:	49a6      	ldr	r1, [pc, #664]	; (8011a28 <_dtoa_r+0x700>)
 801178e:	111b      	asrs	r3, r3, #4
 8011790:	2000      	movs	r0, #0
 8011792:	2202      	movs	r2, #2
 8011794:	b93b      	cbnz	r3, 80117a6 <_dtoa_r+0x47e>
 8011796:	2800      	cmp	r0, #0
 8011798:	f43f af6b 	beq.w	8011672 <_dtoa_r+0x34a>
 801179c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117a4:	e765      	b.n	8011672 <_dtoa_r+0x34a>
 80117a6:	07dd      	lsls	r5, r3, #31
 80117a8:	d509      	bpl.n	80117be <_dtoa_r+0x496>
 80117aa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80117ae:	ed91 7b00 	vldr	d7, [r1]
 80117b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80117ba:	3201      	adds	r2, #1
 80117bc:	2001      	movs	r0, #1
 80117be:	105b      	asrs	r3, r3, #1
 80117c0:	3108      	adds	r1, #8
 80117c2:	e7e7      	b.n	8011794 <_dtoa_r+0x46c>
 80117c4:	2202      	movs	r2, #2
 80117c6:	e754      	b.n	8011672 <_dtoa_r+0x34a>
 80117c8:	465b      	mov	r3, fp
 80117ca:	464d      	mov	r5, r9
 80117cc:	e770      	b.n	80116b0 <_dtoa_r+0x388>
 80117ce:	4a95      	ldr	r2, [pc, #596]	; (8011a24 <_dtoa_r+0x6fc>)
 80117d0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80117d4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80117d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117da:	ec41 0b17 	vmov	d7, r0, r1
 80117de:	b35a      	cbz	r2, 8011838 <_dtoa_r+0x510>
 80117e0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80117e4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80117e8:	9e04      	ldr	r6, [sp, #16]
 80117ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80117ee:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80117f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80117f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80117fa:	ee14 2a90 	vmov	r2, s9
 80117fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011802:	3230      	adds	r2, #48	; 0x30
 8011804:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011810:	f806 2b01 	strb.w	r2, [r6], #1
 8011814:	d43b      	bmi.n	801188e <_dtoa_r+0x566>
 8011816:	ee32 5b46 	vsub.f64	d5, d2, d6
 801181a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011822:	d472      	bmi.n	801190a <_dtoa_r+0x5e2>
 8011824:	9a04      	ldr	r2, [sp, #16]
 8011826:	1ab2      	subs	r2, r6, r2
 8011828:	4295      	cmp	r5, r2
 801182a:	f77f af68 	ble.w	80116fe <_dtoa_r+0x3d6>
 801182e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011832:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011836:	e7de      	b.n	80117f6 <_dtoa_r+0x4ce>
 8011838:	9a04      	ldr	r2, [sp, #16]
 801183a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801183e:	1956      	adds	r6, r2, r5
 8011840:	4611      	mov	r1, r2
 8011842:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011846:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801184a:	ee14 2a90 	vmov	r2, s9
 801184e:	3230      	adds	r2, #48	; 0x30
 8011850:	f801 2b01 	strb.w	r2, [r1], #1
 8011854:	42b1      	cmp	r1, r6
 8011856:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801185a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801185e:	d11a      	bne.n	8011896 <_dtoa_r+0x56e>
 8011860:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011864:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011868:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011870:	dc4b      	bgt.n	801190a <_dtoa_r+0x5e2>
 8011872:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187e:	f57f af3e 	bpl.w	80116fe <_dtoa_r+0x3d6>
 8011882:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011886:	2a30      	cmp	r2, #48	; 0x30
 8011888:	f106 31ff 	add.w	r1, r6, #4294967295
 801188c:	d001      	beq.n	8011892 <_dtoa_r+0x56a>
 801188e:	469b      	mov	fp, r3
 8011890:	e02a      	b.n	80118e8 <_dtoa_r+0x5c0>
 8011892:	460e      	mov	r6, r1
 8011894:	e7f5      	b.n	8011882 <_dtoa_r+0x55a>
 8011896:	ee26 6b03 	vmul.f64	d6, d6, d3
 801189a:	e7d4      	b.n	8011846 <_dtoa_r+0x51e>
 801189c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118a0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80118a4:	9e04      	ldr	r6, [sp, #16]
 80118a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80118aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80118ae:	ee15 3a10 	vmov	r3, s10
 80118b2:	3330      	adds	r3, #48	; 0x30
 80118b4:	f806 3b01 	strb.w	r3, [r6], #1
 80118b8:	9b04      	ldr	r3, [sp, #16]
 80118ba:	1af3      	subs	r3, r6, r3
 80118bc:	4599      	cmp	r9, r3
 80118be:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80118c2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80118c6:	d133      	bne.n	8011930 <_dtoa_r+0x608>
 80118c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80118cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80118d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d4:	dc18      	bgt.n	8011908 <_dtoa_r+0x5e0>
 80118d6:	eeb4 7b46 	vcmp.f64	d7, d6
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	d103      	bne.n	80118e8 <_dtoa_r+0x5c0>
 80118e0:	ee15 3a10 	vmov	r3, s10
 80118e4:	07db      	lsls	r3, r3, #31
 80118e6:	d40f      	bmi.n	8011908 <_dtoa_r+0x5e0>
 80118e8:	9901      	ldr	r1, [sp, #4]
 80118ea:	4620      	mov	r0, r4
 80118ec:	f000 fc8a 	bl	8012204 <_Bfree>
 80118f0:	2300      	movs	r3, #0
 80118f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118f4:	7033      	strb	r3, [r6, #0]
 80118f6:	f10b 0301 	add.w	r3, fp, #1
 80118fa:	6013      	str	r3, [r2, #0]
 80118fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f43f ad5b 	beq.w	80113ba <_dtoa_r+0x92>
 8011904:	601e      	str	r6, [r3, #0]
 8011906:	e558      	b.n	80113ba <_dtoa_r+0x92>
 8011908:	465b      	mov	r3, fp
 801190a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801190e:	2939      	cmp	r1, #57	; 0x39
 8011910:	f106 32ff 	add.w	r2, r6, #4294967295
 8011914:	d106      	bne.n	8011924 <_dtoa_r+0x5fc>
 8011916:	9904      	ldr	r1, [sp, #16]
 8011918:	4291      	cmp	r1, r2
 801191a:	d107      	bne.n	801192c <_dtoa_r+0x604>
 801191c:	2230      	movs	r2, #48	; 0x30
 801191e:	700a      	strb	r2, [r1, #0]
 8011920:	3301      	adds	r3, #1
 8011922:	460a      	mov	r2, r1
 8011924:	7811      	ldrb	r1, [r2, #0]
 8011926:	3101      	adds	r1, #1
 8011928:	7011      	strb	r1, [r2, #0]
 801192a:	e7b0      	b.n	801188e <_dtoa_r+0x566>
 801192c:	4616      	mov	r6, r2
 801192e:	e7ec      	b.n	801190a <_dtoa_r+0x5e2>
 8011930:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193c:	d1b3      	bne.n	80118a6 <_dtoa_r+0x57e>
 801193e:	e7d3      	b.n	80118e8 <_dtoa_r+0x5c0>
 8011940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011942:	2a00      	cmp	r2, #0
 8011944:	f000 808d 	beq.w	8011a62 <_dtoa_r+0x73a>
 8011948:	9a08      	ldr	r2, [sp, #32]
 801194a:	2a01      	cmp	r2, #1
 801194c:	dc72      	bgt.n	8011a34 <_dtoa_r+0x70c>
 801194e:	2f00      	cmp	r7, #0
 8011950:	d06c      	beq.n	8011a2c <_dtoa_r+0x704>
 8011952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011956:	4645      	mov	r5, r8
 8011958:	4656      	mov	r6, sl
 801195a:	9a07      	ldr	r2, [sp, #28]
 801195c:	2101      	movs	r1, #1
 801195e:	441a      	add	r2, r3
 8011960:	4620      	mov	r0, r4
 8011962:	449a      	add	sl, r3
 8011964:	9207      	str	r2, [sp, #28]
 8011966:	f000 fced 	bl	8012344 <__i2b>
 801196a:	4607      	mov	r7, r0
 801196c:	2e00      	cmp	r6, #0
 801196e:	dd0b      	ble.n	8011988 <_dtoa_r+0x660>
 8011970:	9b07      	ldr	r3, [sp, #28]
 8011972:	2b00      	cmp	r3, #0
 8011974:	dd08      	ble.n	8011988 <_dtoa_r+0x660>
 8011976:	42b3      	cmp	r3, r6
 8011978:	9a07      	ldr	r2, [sp, #28]
 801197a:	bfa8      	it	ge
 801197c:	4633      	movge	r3, r6
 801197e:	ebaa 0a03 	sub.w	sl, sl, r3
 8011982:	1af6      	subs	r6, r6, r3
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	9307      	str	r3, [sp, #28]
 8011988:	f1b8 0f00 	cmp.w	r8, #0
 801198c:	d01d      	beq.n	80119ca <_dtoa_r+0x6a2>
 801198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011990:	2b00      	cmp	r3, #0
 8011992:	d06a      	beq.n	8011a6a <_dtoa_r+0x742>
 8011994:	b18d      	cbz	r5, 80119ba <_dtoa_r+0x692>
 8011996:	4639      	mov	r1, r7
 8011998:	462a      	mov	r2, r5
 801199a:	4620      	mov	r0, r4
 801199c:	f000 fd72 	bl	8012484 <__pow5mult>
 80119a0:	9a01      	ldr	r2, [sp, #4]
 80119a2:	4601      	mov	r1, r0
 80119a4:	4607      	mov	r7, r0
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 fcd5 	bl	8012356 <__multiply>
 80119ac:	9901      	ldr	r1, [sp, #4]
 80119ae:	900c      	str	r0, [sp, #48]	; 0x30
 80119b0:	4620      	mov	r0, r4
 80119b2:	f000 fc27 	bl	8012204 <_Bfree>
 80119b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	ebb8 0205 	subs.w	r2, r8, r5
 80119be:	d004      	beq.n	80119ca <_dtoa_r+0x6a2>
 80119c0:	9901      	ldr	r1, [sp, #4]
 80119c2:	4620      	mov	r0, r4
 80119c4:	f000 fd5e 	bl	8012484 <__pow5mult>
 80119c8:	9001      	str	r0, [sp, #4]
 80119ca:	2101      	movs	r1, #1
 80119cc:	4620      	mov	r0, r4
 80119ce:	f000 fcb9 	bl	8012344 <__i2b>
 80119d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119d4:	4605      	mov	r5, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f000 81ca 	beq.w	8011d70 <_dtoa_r+0xa48>
 80119dc:	461a      	mov	r2, r3
 80119de:	4601      	mov	r1, r0
 80119e0:	4620      	mov	r0, r4
 80119e2:	f000 fd4f 	bl	8012484 <__pow5mult>
 80119e6:	9b08      	ldr	r3, [sp, #32]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	4605      	mov	r5, r0
 80119ec:	dc44      	bgt.n	8011a78 <_dtoa_r+0x750>
 80119ee:	9b02      	ldr	r3, [sp, #8]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d13c      	bne.n	8011a6e <_dtoa_r+0x746>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d137      	bne.n	8011a6e <_dtoa_r+0x746>
 80119fe:	9b03      	ldr	r3, [sp, #12]
 8011a00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a04:	0d1b      	lsrs	r3, r3, #20
 8011a06:	051b      	lsls	r3, r3, #20
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d033      	beq.n	8011a74 <_dtoa_r+0x74c>
 8011a0c:	9b07      	ldr	r3, [sp, #28]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	f10a 0a01 	add.w	sl, sl, #1
 8011a14:	9307      	str	r3, [sp, #28]
 8011a16:	f04f 0801 	mov.w	r8, #1
 8011a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a1c:	bb73      	cbnz	r3, 8011a7c <_dtoa_r+0x754>
 8011a1e:	2001      	movs	r0, #1
 8011a20:	e034      	b.n	8011a8c <_dtoa_r+0x764>
 8011a22:	bf00      	nop
 8011a24:	080172d0 	.word	0x080172d0
 8011a28:	080172a8 	.word	0x080172a8
 8011a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a32:	e790      	b.n	8011956 <_dtoa_r+0x62e>
 8011a34:	f109 35ff 	add.w	r5, r9, #4294967295
 8011a38:	45a8      	cmp	r8, r5
 8011a3a:	bfbf      	itttt	lt
 8011a3c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8011a3e:	eba5 0808 	sublt.w	r8, r5, r8
 8011a42:	4443      	addlt	r3, r8
 8011a44:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8011a46:	bfb6      	itet	lt
 8011a48:	46a8      	movlt	r8, r5
 8011a4a:	eba8 0505 	subge.w	r5, r8, r5
 8011a4e:	2500      	movlt	r5, #0
 8011a50:	f1b9 0f00 	cmp.w	r9, #0
 8011a54:	bfb9      	ittee	lt
 8011a56:	ebaa 0609 	sublt.w	r6, sl, r9
 8011a5a:	2300      	movlt	r3, #0
 8011a5c:	4656      	movge	r6, sl
 8011a5e:	464b      	movge	r3, r9
 8011a60:	e77b      	b.n	801195a <_dtoa_r+0x632>
 8011a62:	4645      	mov	r5, r8
 8011a64:	4656      	mov	r6, sl
 8011a66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011a68:	e780      	b.n	801196c <_dtoa_r+0x644>
 8011a6a:	4642      	mov	r2, r8
 8011a6c:	e7a8      	b.n	80119c0 <_dtoa_r+0x698>
 8011a6e:	f04f 0800 	mov.w	r8, #0
 8011a72:	e7d2      	b.n	8011a1a <_dtoa_r+0x6f2>
 8011a74:	4698      	mov	r8, r3
 8011a76:	e7d0      	b.n	8011a1a <_dtoa_r+0x6f2>
 8011a78:	f04f 0800 	mov.w	r8, #0
 8011a7c:	692b      	ldr	r3, [r5, #16]
 8011a7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011a82:	6918      	ldr	r0, [r3, #16]
 8011a84:	f000 fc10 	bl	80122a8 <__hi0bits>
 8011a88:	f1c0 0020 	rsb	r0, r0, #32
 8011a8c:	9b07      	ldr	r3, [sp, #28]
 8011a8e:	4418      	add	r0, r3
 8011a90:	f010 001f 	ands.w	r0, r0, #31
 8011a94:	d047      	beq.n	8011b26 <_dtoa_r+0x7fe>
 8011a96:	f1c0 0320 	rsb	r3, r0, #32
 8011a9a:	2b04      	cmp	r3, #4
 8011a9c:	dd3b      	ble.n	8011b16 <_dtoa_r+0x7ee>
 8011a9e:	9b07      	ldr	r3, [sp, #28]
 8011aa0:	f1c0 001c 	rsb	r0, r0, #28
 8011aa4:	4482      	add	sl, r0
 8011aa6:	4406      	add	r6, r0
 8011aa8:	4403      	add	r3, r0
 8011aaa:	9307      	str	r3, [sp, #28]
 8011aac:	f1ba 0f00 	cmp.w	sl, #0
 8011ab0:	dd05      	ble.n	8011abe <_dtoa_r+0x796>
 8011ab2:	4652      	mov	r2, sl
 8011ab4:	9901      	ldr	r1, [sp, #4]
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f000 fd32 	bl	8012520 <__lshift>
 8011abc:	9001      	str	r0, [sp, #4]
 8011abe:	9b07      	ldr	r3, [sp, #28]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	dd05      	ble.n	8011ad0 <_dtoa_r+0x7a8>
 8011ac4:	4629      	mov	r1, r5
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 fd29 	bl	8012520 <__lshift>
 8011ace:	4605      	mov	r5, r0
 8011ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ad2:	b353      	cbz	r3, 8011b2a <_dtoa_r+0x802>
 8011ad4:	4629      	mov	r1, r5
 8011ad6:	9801      	ldr	r0, [sp, #4]
 8011ad8:	f000 fd76 	bl	80125c8 <__mcmp>
 8011adc:	2800      	cmp	r0, #0
 8011ade:	da24      	bge.n	8011b2a <_dtoa_r+0x802>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	220a      	movs	r2, #10
 8011ae4:	9901      	ldr	r1, [sp, #4]
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f000 fba3 	bl	8012232 <__multadd>
 8011aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aee:	9001      	str	r0, [sp, #4]
 8011af0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f000 8142 	beq.w	8011d7e <_dtoa_r+0xa56>
 8011afa:	2300      	movs	r3, #0
 8011afc:	4639      	mov	r1, r7
 8011afe:	220a      	movs	r2, #10
 8011b00:	4620      	mov	r0, r4
 8011b02:	f000 fb96 	bl	8012232 <__multadd>
 8011b06:	9b06      	ldr	r3, [sp, #24]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	4607      	mov	r7, r0
 8011b0c:	dc4b      	bgt.n	8011ba6 <_dtoa_r+0x87e>
 8011b0e:	9b08      	ldr	r3, [sp, #32]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	dd48      	ble.n	8011ba6 <_dtoa_r+0x87e>
 8011b14:	e011      	b.n	8011b3a <_dtoa_r+0x812>
 8011b16:	d0c9      	beq.n	8011aac <_dtoa_r+0x784>
 8011b18:	9a07      	ldr	r2, [sp, #28]
 8011b1a:	331c      	adds	r3, #28
 8011b1c:	441a      	add	r2, r3
 8011b1e:	449a      	add	sl, r3
 8011b20:	441e      	add	r6, r3
 8011b22:	4613      	mov	r3, r2
 8011b24:	e7c1      	b.n	8011aaa <_dtoa_r+0x782>
 8011b26:	4603      	mov	r3, r0
 8011b28:	e7f6      	b.n	8011b18 <_dtoa_r+0x7f0>
 8011b2a:	f1b9 0f00 	cmp.w	r9, #0
 8011b2e:	dc34      	bgt.n	8011b9a <_dtoa_r+0x872>
 8011b30:	9b08      	ldr	r3, [sp, #32]
 8011b32:	2b02      	cmp	r3, #2
 8011b34:	dd31      	ble.n	8011b9a <_dtoa_r+0x872>
 8011b36:	f8cd 9018 	str.w	r9, [sp, #24]
 8011b3a:	9b06      	ldr	r3, [sp, #24]
 8011b3c:	b963      	cbnz	r3, 8011b58 <_dtoa_r+0x830>
 8011b3e:	4629      	mov	r1, r5
 8011b40:	2205      	movs	r2, #5
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 fb75 	bl	8012232 <__multadd>
 8011b48:	4601      	mov	r1, r0
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	9801      	ldr	r0, [sp, #4]
 8011b4e:	f000 fd3b 	bl	80125c8 <__mcmp>
 8011b52:	2800      	cmp	r0, #0
 8011b54:	f73f adfc 	bgt.w	8011750 <_dtoa_r+0x428>
 8011b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b5a:	9e04      	ldr	r6, [sp, #16]
 8011b5c:	ea6f 0b03 	mvn.w	fp, r3
 8011b60:	f04f 0900 	mov.w	r9, #0
 8011b64:	4629      	mov	r1, r5
 8011b66:	4620      	mov	r0, r4
 8011b68:	f000 fb4c 	bl	8012204 <_Bfree>
 8011b6c:	2f00      	cmp	r7, #0
 8011b6e:	f43f aebb 	beq.w	80118e8 <_dtoa_r+0x5c0>
 8011b72:	f1b9 0f00 	cmp.w	r9, #0
 8011b76:	d005      	beq.n	8011b84 <_dtoa_r+0x85c>
 8011b78:	45b9      	cmp	r9, r7
 8011b7a:	d003      	beq.n	8011b84 <_dtoa_r+0x85c>
 8011b7c:	4649      	mov	r1, r9
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f000 fb40 	bl	8012204 <_Bfree>
 8011b84:	4639      	mov	r1, r7
 8011b86:	4620      	mov	r0, r4
 8011b88:	f000 fb3c 	bl	8012204 <_Bfree>
 8011b8c:	e6ac      	b.n	80118e8 <_dtoa_r+0x5c0>
 8011b8e:	2500      	movs	r5, #0
 8011b90:	462f      	mov	r7, r5
 8011b92:	e7e1      	b.n	8011b58 <_dtoa_r+0x830>
 8011b94:	469b      	mov	fp, r3
 8011b96:	462f      	mov	r7, r5
 8011b98:	e5da      	b.n	8011750 <_dtoa_r+0x428>
 8011b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b9c:	f8cd 9018 	str.w	r9, [sp, #24]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 80f3 	beq.w	8011d8c <_dtoa_r+0xa64>
 8011ba6:	2e00      	cmp	r6, #0
 8011ba8:	dd05      	ble.n	8011bb6 <_dtoa_r+0x88e>
 8011baa:	4639      	mov	r1, r7
 8011bac:	4632      	mov	r2, r6
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 fcb6 	bl	8012520 <__lshift>
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	f1b8 0f00 	cmp.w	r8, #0
 8011bba:	d04c      	beq.n	8011c56 <_dtoa_r+0x92e>
 8011bbc:	6879      	ldr	r1, [r7, #4]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f000 faec 	bl	801219c <_Balloc>
 8011bc4:	693a      	ldr	r2, [r7, #16]
 8011bc6:	3202      	adds	r2, #2
 8011bc8:	4606      	mov	r6, r0
 8011bca:	0092      	lsls	r2, r2, #2
 8011bcc:	f107 010c 	add.w	r1, r7, #12
 8011bd0:	300c      	adds	r0, #12
 8011bd2:	f7fe fcc0 	bl	8010556 <memcpy>
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	4631      	mov	r1, r6
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f000 fca0 	bl	8012520 <__lshift>
 8011be0:	9b02      	ldr	r3, [sp, #8]
 8011be2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011be6:	f003 0301 	and.w	r3, r3, #1
 8011bea:	46b9      	mov	r9, r7
 8011bec:	9307      	str	r3, [sp, #28]
 8011bee:	4607      	mov	r7, r0
 8011bf0:	4629      	mov	r1, r5
 8011bf2:	9801      	ldr	r0, [sp, #4]
 8011bf4:	f7ff fb0a 	bl	801120c <quorem>
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	4606      	mov	r6, r0
 8011bfc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011c00:	9801      	ldr	r0, [sp, #4]
 8011c02:	f000 fce1 	bl	80125c8 <__mcmp>
 8011c06:	463a      	mov	r2, r7
 8011c08:	9002      	str	r0, [sp, #8]
 8011c0a:	4629      	mov	r1, r5
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f000 fcf5 	bl	80125fc <__mdiff>
 8011c12:	68c3      	ldr	r3, [r0, #12]
 8011c14:	4602      	mov	r2, r0
 8011c16:	bb03      	cbnz	r3, 8011c5a <_dtoa_r+0x932>
 8011c18:	4601      	mov	r1, r0
 8011c1a:	9009      	str	r0, [sp, #36]	; 0x24
 8011c1c:	9801      	ldr	r0, [sp, #4]
 8011c1e:	f000 fcd3 	bl	80125c8 <__mcmp>
 8011c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c24:	4603      	mov	r3, r0
 8011c26:	4611      	mov	r1, r2
 8011c28:	4620      	mov	r0, r4
 8011c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c2c:	f000 faea 	bl	8012204 <_Bfree>
 8011c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c32:	b9a3      	cbnz	r3, 8011c5e <_dtoa_r+0x936>
 8011c34:	9a08      	ldr	r2, [sp, #32]
 8011c36:	b992      	cbnz	r2, 8011c5e <_dtoa_r+0x936>
 8011c38:	9a07      	ldr	r2, [sp, #28]
 8011c3a:	b982      	cbnz	r2, 8011c5e <_dtoa_r+0x936>
 8011c3c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c40:	d029      	beq.n	8011c96 <_dtoa_r+0x96e>
 8011c42:	9b02      	ldr	r3, [sp, #8]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	dd01      	ble.n	8011c4c <_dtoa_r+0x924>
 8011c48:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8011c4c:	f10a 0601 	add.w	r6, sl, #1
 8011c50:	f88a 8000 	strb.w	r8, [sl]
 8011c54:	e786      	b.n	8011b64 <_dtoa_r+0x83c>
 8011c56:	4638      	mov	r0, r7
 8011c58:	e7c2      	b.n	8011be0 <_dtoa_r+0x8b8>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e7e3      	b.n	8011c26 <_dtoa_r+0x8fe>
 8011c5e:	9a02      	ldr	r2, [sp, #8]
 8011c60:	2a00      	cmp	r2, #0
 8011c62:	db04      	blt.n	8011c6e <_dtoa_r+0x946>
 8011c64:	d124      	bne.n	8011cb0 <_dtoa_r+0x988>
 8011c66:	9a08      	ldr	r2, [sp, #32]
 8011c68:	bb12      	cbnz	r2, 8011cb0 <_dtoa_r+0x988>
 8011c6a:	9a07      	ldr	r2, [sp, #28]
 8011c6c:	bb02      	cbnz	r2, 8011cb0 <_dtoa_r+0x988>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	ddec      	ble.n	8011c4c <_dtoa_r+0x924>
 8011c72:	2201      	movs	r2, #1
 8011c74:	9901      	ldr	r1, [sp, #4]
 8011c76:	4620      	mov	r0, r4
 8011c78:	f000 fc52 	bl	8012520 <__lshift>
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	9001      	str	r0, [sp, #4]
 8011c80:	f000 fca2 	bl	80125c8 <__mcmp>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	dc03      	bgt.n	8011c90 <_dtoa_r+0x968>
 8011c88:	d1e0      	bne.n	8011c4c <_dtoa_r+0x924>
 8011c8a:	f018 0f01 	tst.w	r8, #1
 8011c8e:	d0dd      	beq.n	8011c4c <_dtoa_r+0x924>
 8011c90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c94:	d1d8      	bne.n	8011c48 <_dtoa_r+0x920>
 8011c96:	2339      	movs	r3, #57	; 0x39
 8011c98:	f10a 0601 	add.w	r6, sl, #1
 8011c9c:	f88a 3000 	strb.w	r3, [sl]
 8011ca0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ca4:	2b39      	cmp	r3, #57	; 0x39
 8011ca6:	f106 32ff 	add.w	r2, r6, #4294967295
 8011caa:	d04c      	beq.n	8011d46 <_dtoa_r+0xa1e>
 8011cac:	3301      	adds	r3, #1
 8011cae:	e051      	b.n	8011d54 <_dtoa_r+0xa2c>
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f10a 0601 	add.w	r6, sl, #1
 8011cb6:	dd05      	ble.n	8011cc4 <_dtoa_r+0x99c>
 8011cb8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011cbc:	d0eb      	beq.n	8011c96 <_dtoa_r+0x96e>
 8011cbe:	f108 0801 	add.w	r8, r8, #1
 8011cc2:	e7c5      	b.n	8011c50 <_dtoa_r+0x928>
 8011cc4:	9b04      	ldr	r3, [sp, #16]
 8011cc6:	9a06      	ldr	r2, [sp, #24]
 8011cc8:	f806 8c01 	strb.w	r8, [r6, #-1]
 8011ccc:	1af3      	subs	r3, r6, r3
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d021      	beq.n	8011d16 <_dtoa_r+0x9ee>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	220a      	movs	r2, #10
 8011cd6:	9901      	ldr	r1, [sp, #4]
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f000 faaa 	bl	8012232 <__multadd>
 8011cde:	45b9      	cmp	r9, r7
 8011ce0:	9001      	str	r0, [sp, #4]
 8011ce2:	f04f 0300 	mov.w	r3, #0
 8011ce6:	f04f 020a 	mov.w	r2, #10
 8011cea:	4649      	mov	r1, r9
 8011cec:	4620      	mov	r0, r4
 8011cee:	d105      	bne.n	8011cfc <_dtoa_r+0x9d4>
 8011cf0:	f000 fa9f 	bl	8012232 <__multadd>
 8011cf4:	4681      	mov	r9, r0
 8011cf6:	4607      	mov	r7, r0
 8011cf8:	46b2      	mov	sl, r6
 8011cfa:	e779      	b.n	8011bf0 <_dtoa_r+0x8c8>
 8011cfc:	f000 fa99 	bl	8012232 <__multadd>
 8011d00:	4639      	mov	r1, r7
 8011d02:	4681      	mov	r9, r0
 8011d04:	2300      	movs	r3, #0
 8011d06:	220a      	movs	r2, #10
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 fa92 	bl	8012232 <__multadd>
 8011d0e:	4607      	mov	r7, r0
 8011d10:	e7f2      	b.n	8011cf8 <_dtoa_r+0x9d0>
 8011d12:	f04f 0900 	mov.w	r9, #0
 8011d16:	2201      	movs	r2, #1
 8011d18:	9901      	ldr	r1, [sp, #4]
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f000 fc00 	bl	8012520 <__lshift>
 8011d20:	4629      	mov	r1, r5
 8011d22:	9001      	str	r0, [sp, #4]
 8011d24:	f000 fc50 	bl	80125c8 <__mcmp>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	dcb9      	bgt.n	8011ca0 <_dtoa_r+0x978>
 8011d2c:	d102      	bne.n	8011d34 <_dtoa_r+0xa0c>
 8011d2e:	f018 0f01 	tst.w	r8, #1
 8011d32:	d1b5      	bne.n	8011ca0 <_dtoa_r+0x978>
 8011d34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011d38:	2b30      	cmp	r3, #48	; 0x30
 8011d3a:	f106 32ff 	add.w	r2, r6, #4294967295
 8011d3e:	f47f af11 	bne.w	8011b64 <_dtoa_r+0x83c>
 8011d42:	4616      	mov	r6, r2
 8011d44:	e7f6      	b.n	8011d34 <_dtoa_r+0xa0c>
 8011d46:	9b04      	ldr	r3, [sp, #16]
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d105      	bne.n	8011d58 <_dtoa_r+0xa30>
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	f10b 0b01 	add.w	fp, fp, #1
 8011d52:	2331      	movs	r3, #49	; 0x31
 8011d54:	7013      	strb	r3, [r2, #0]
 8011d56:	e705      	b.n	8011b64 <_dtoa_r+0x83c>
 8011d58:	4616      	mov	r6, r2
 8011d5a:	e7a1      	b.n	8011ca0 <_dtoa_r+0x978>
 8011d5c:	4b16      	ldr	r3, [pc, #88]	; (8011db8 <_dtoa_r+0xa90>)
 8011d5e:	f7ff bb48 	b.w	80113f2 <_dtoa_r+0xca>
 8011d62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	f47f ab23 	bne.w	80113b0 <_dtoa_r+0x88>
 8011d6a:	4b14      	ldr	r3, [pc, #80]	; (8011dbc <_dtoa_r+0xa94>)
 8011d6c:	f7ff bb41 	b.w	80113f2 <_dtoa_r+0xca>
 8011d70:	9b08      	ldr	r3, [sp, #32]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	f77f ae3b 	ble.w	80119ee <_dtoa_r+0x6c6>
 8011d78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8011d7c:	e64f      	b.n	8011a1e <_dtoa_r+0x6f6>
 8011d7e:	9b06      	ldr	r3, [sp, #24]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	dc03      	bgt.n	8011d8c <_dtoa_r+0xa64>
 8011d84:	9b08      	ldr	r3, [sp, #32]
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	f73f aed7 	bgt.w	8011b3a <_dtoa_r+0x812>
 8011d8c:	9e04      	ldr	r6, [sp, #16]
 8011d8e:	9801      	ldr	r0, [sp, #4]
 8011d90:	4629      	mov	r1, r5
 8011d92:	f7ff fa3b 	bl	801120c <quorem>
 8011d96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8011d9e:	9b04      	ldr	r3, [sp, #16]
 8011da0:	9a06      	ldr	r2, [sp, #24]
 8011da2:	1af3      	subs	r3, r6, r3
 8011da4:	429a      	cmp	r2, r3
 8011da6:	ddb4      	ble.n	8011d12 <_dtoa_r+0x9ea>
 8011da8:	2300      	movs	r3, #0
 8011daa:	220a      	movs	r2, #10
 8011dac:	9901      	ldr	r1, [sp, #4]
 8011dae:	4620      	mov	r0, r4
 8011db0:	f000 fa3f 	bl	8012232 <__multadd>
 8011db4:	9001      	str	r0, [sp, #4]
 8011db6:	e7ea      	b.n	8011d8e <_dtoa_r+0xa66>
 8011db8:	08017214 	.word	0x08017214
 8011dbc:	08017238 	.word	0x08017238

08011dc0 <__sflush_r>:
 8011dc0:	898a      	ldrh	r2, [r1, #12]
 8011dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	0710      	lsls	r0, r2, #28
 8011dca:	460c      	mov	r4, r1
 8011dcc:	d458      	bmi.n	8011e80 <__sflush_r+0xc0>
 8011dce:	684b      	ldr	r3, [r1, #4]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	dc05      	bgt.n	8011de0 <__sflush_r+0x20>
 8011dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	dc02      	bgt.n	8011de0 <__sflush_r+0x20>
 8011dda:	2000      	movs	r0, #0
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011de2:	2e00      	cmp	r6, #0
 8011de4:	d0f9      	beq.n	8011dda <__sflush_r+0x1a>
 8011de6:	2300      	movs	r3, #0
 8011de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011dec:	682f      	ldr	r7, [r5, #0]
 8011dee:	6a21      	ldr	r1, [r4, #32]
 8011df0:	602b      	str	r3, [r5, #0]
 8011df2:	d032      	beq.n	8011e5a <__sflush_r+0x9a>
 8011df4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011df6:	89a3      	ldrh	r3, [r4, #12]
 8011df8:	075a      	lsls	r2, r3, #29
 8011dfa:	d505      	bpl.n	8011e08 <__sflush_r+0x48>
 8011dfc:	6863      	ldr	r3, [r4, #4]
 8011dfe:	1ac0      	subs	r0, r0, r3
 8011e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e02:	b10b      	cbz	r3, 8011e08 <__sflush_r+0x48>
 8011e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e06:	1ac0      	subs	r0, r0, r3
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e0e:	6a21      	ldr	r1, [r4, #32]
 8011e10:	4628      	mov	r0, r5
 8011e12:	47b0      	blx	r6
 8011e14:	1c43      	adds	r3, r0, #1
 8011e16:	89a3      	ldrh	r3, [r4, #12]
 8011e18:	d106      	bne.n	8011e28 <__sflush_r+0x68>
 8011e1a:	6829      	ldr	r1, [r5, #0]
 8011e1c:	291d      	cmp	r1, #29
 8011e1e:	d848      	bhi.n	8011eb2 <__sflush_r+0xf2>
 8011e20:	4a29      	ldr	r2, [pc, #164]	; (8011ec8 <__sflush_r+0x108>)
 8011e22:	40ca      	lsrs	r2, r1
 8011e24:	07d6      	lsls	r6, r2, #31
 8011e26:	d544      	bpl.n	8011eb2 <__sflush_r+0xf2>
 8011e28:	2200      	movs	r2, #0
 8011e2a:	6062      	str	r2, [r4, #4]
 8011e2c:	04d9      	lsls	r1, r3, #19
 8011e2e:	6922      	ldr	r2, [r4, #16]
 8011e30:	6022      	str	r2, [r4, #0]
 8011e32:	d504      	bpl.n	8011e3e <__sflush_r+0x7e>
 8011e34:	1c42      	adds	r2, r0, #1
 8011e36:	d101      	bne.n	8011e3c <__sflush_r+0x7c>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	b903      	cbnz	r3, 8011e3e <__sflush_r+0x7e>
 8011e3c:	6560      	str	r0, [r4, #84]	; 0x54
 8011e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e40:	602f      	str	r7, [r5, #0]
 8011e42:	2900      	cmp	r1, #0
 8011e44:	d0c9      	beq.n	8011dda <__sflush_r+0x1a>
 8011e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e4a:	4299      	cmp	r1, r3
 8011e4c:	d002      	beq.n	8011e54 <__sflush_r+0x94>
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f7fe fb94 	bl	801057c <_free_r>
 8011e54:	2000      	movs	r0, #0
 8011e56:	6360      	str	r0, [r4, #52]	; 0x34
 8011e58:	e7c0      	b.n	8011ddc <__sflush_r+0x1c>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	47b0      	blx	r6
 8011e60:	1c41      	adds	r1, r0, #1
 8011e62:	d1c8      	bne.n	8011df6 <__sflush_r+0x36>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d0c5      	beq.n	8011df6 <__sflush_r+0x36>
 8011e6a:	2b1d      	cmp	r3, #29
 8011e6c:	d001      	beq.n	8011e72 <__sflush_r+0xb2>
 8011e6e:	2b16      	cmp	r3, #22
 8011e70:	d101      	bne.n	8011e76 <__sflush_r+0xb6>
 8011e72:	602f      	str	r7, [r5, #0]
 8011e74:	e7b1      	b.n	8011dda <__sflush_r+0x1a>
 8011e76:	89a3      	ldrh	r3, [r4, #12]
 8011e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e7c:	81a3      	strh	r3, [r4, #12]
 8011e7e:	e7ad      	b.n	8011ddc <__sflush_r+0x1c>
 8011e80:	690f      	ldr	r7, [r1, #16]
 8011e82:	2f00      	cmp	r7, #0
 8011e84:	d0a9      	beq.n	8011dda <__sflush_r+0x1a>
 8011e86:	0793      	lsls	r3, r2, #30
 8011e88:	680e      	ldr	r6, [r1, #0]
 8011e8a:	bf08      	it	eq
 8011e8c:	694b      	ldreq	r3, [r1, #20]
 8011e8e:	600f      	str	r7, [r1, #0]
 8011e90:	bf18      	it	ne
 8011e92:	2300      	movne	r3, #0
 8011e94:	eba6 0807 	sub.w	r8, r6, r7
 8011e98:	608b      	str	r3, [r1, #8]
 8011e9a:	f1b8 0f00 	cmp.w	r8, #0
 8011e9e:	dd9c      	ble.n	8011dda <__sflush_r+0x1a>
 8011ea0:	4643      	mov	r3, r8
 8011ea2:	463a      	mov	r2, r7
 8011ea4:	6a21      	ldr	r1, [r4, #32]
 8011ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	47b0      	blx	r6
 8011eac:	2800      	cmp	r0, #0
 8011eae:	dc06      	bgt.n	8011ebe <__sflush_r+0xfe>
 8011eb0:	89a3      	ldrh	r3, [r4, #12]
 8011eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb6:	81a3      	strh	r3, [r4, #12]
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebc:	e78e      	b.n	8011ddc <__sflush_r+0x1c>
 8011ebe:	4407      	add	r7, r0
 8011ec0:	eba8 0800 	sub.w	r8, r8, r0
 8011ec4:	e7e9      	b.n	8011e9a <__sflush_r+0xda>
 8011ec6:	bf00      	nop
 8011ec8:	20400001 	.word	0x20400001

08011ecc <_fflush_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	690b      	ldr	r3, [r1, #16]
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	460c      	mov	r4, r1
 8011ed4:	b1db      	cbz	r3, 8011f0e <_fflush_r+0x42>
 8011ed6:	b118      	cbz	r0, 8011ee0 <_fflush_r+0x14>
 8011ed8:	6983      	ldr	r3, [r0, #24]
 8011eda:	b90b      	cbnz	r3, 8011ee0 <_fflush_r+0x14>
 8011edc:	f000 f860 	bl	8011fa0 <__sinit>
 8011ee0:	4b0c      	ldr	r3, [pc, #48]	; (8011f14 <_fflush_r+0x48>)
 8011ee2:	429c      	cmp	r4, r3
 8011ee4:	d109      	bne.n	8011efa <_fflush_r+0x2e>
 8011ee6:	686c      	ldr	r4, [r5, #4]
 8011ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eec:	b17b      	cbz	r3, 8011f0e <_fflush_r+0x42>
 8011eee:	4621      	mov	r1, r4
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ef6:	f7ff bf63 	b.w	8011dc0 <__sflush_r>
 8011efa:	4b07      	ldr	r3, [pc, #28]	; (8011f18 <_fflush_r+0x4c>)
 8011efc:	429c      	cmp	r4, r3
 8011efe:	d101      	bne.n	8011f04 <_fflush_r+0x38>
 8011f00:	68ac      	ldr	r4, [r5, #8]
 8011f02:	e7f1      	b.n	8011ee8 <_fflush_r+0x1c>
 8011f04:	4b05      	ldr	r3, [pc, #20]	; (8011f1c <_fflush_r+0x50>)
 8011f06:	429c      	cmp	r4, r3
 8011f08:	bf08      	it	eq
 8011f0a:	68ec      	ldreq	r4, [r5, #12]
 8011f0c:	e7ec      	b.n	8011ee8 <_fflush_r+0x1c>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	bd38      	pop	{r3, r4, r5, pc}
 8011f12:	bf00      	nop
 8011f14:	08017268 	.word	0x08017268
 8011f18:	08017288 	.word	0x08017288
 8011f1c:	08017248 	.word	0x08017248

08011f20 <std>:
 8011f20:	2300      	movs	r3, #0
 8011f22:	b510      	push	{r4, lr}
 8011f24:	4604      	mov	r4, r0
 8011f26:	e9c0 3300 	strd	r3, r3, [r0]
 8011f2a:	6083      	str	r3, [r0, #8]
 8011f2c:	8181      	strh	r1, [r0, #12]
 8011f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8011f30:	81c2      	strh	r2, [r0, #14]
 8011f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f36:	6183      	str	r3, [r0, #24]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	2208      	movs	r2, #8
 8011f3c:	305c      	adds	r0, #92	; 0x5c
 8011f3e:	f7fe fb15 	bl	801056c <memset>
 8011f42:	4b05      	ldr	r3, [pc, #20]	; (8011f58 <std+0x38>)
 8011f44:	6263      	str	r3, [r4, #36]	; 0x24
 8011f46:	4b05      	ldr	r3, [pc, #20]	; (8011f5c <std+0x3c>)
 8011f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f4a:	4b05      	ldr	r3, [pc, #20]	; (8011f60 <std+0x40>)
 8011f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f4e:	4b05      	ldr	r3, [pc, #20]	; (8011f64 <std+0x44>)
 8011f50:	6224      	str	r4, [r4, #32]
 8011f52:	6323      	str	r3, [r4, #48]	; 0x30
 8011f54:	bd10      	pop	{r4, pc}
 8011f56:	bf00      	nop
 8011f58:	08012a3d 	.word	0x08012a3d
 8011f5c:	08012a5f 	.word	0x08012a5f
 8011f60:	08012a97 	.word	0x08012a97
 8011f64:	08012abb 	.word	0x08012abb

08011f68 <_cleanup_r>:
 8011f68:	4901      	ldr	r1, [pc, #4]	; (8011f70 <_cleanup_r+0x8>)
 8011f6a:	f000 b885 	b.w	8012078 <_fwalk_reent>
 8011f6e:	bf00      	nop
 8011f70:	08011ecd 	.word	0x08011ecd

08011f74 <__sfmoreglue>:
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	1e4a      	subs	r2, r1, #1
 8011f78:	2568      	movs	r5, #104	; 0x68
 8011f7a:	4355      	muls	r5, r2
 8011f7c:	460e      	mov	r6, r1
 8011f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f82:	f7fe fb49 	bl	8010618 <_malloc_r>
 8011f86:	4604      	mov	r4, r0
 8011f88:	b140      	cbz	r0, 8011f9c <__sfmoreglue+0x28>
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8011f90:	300c      	adds	r0, #12
 8011f92:	60a0      	str	r0, [r4, #8]
 8011f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f98:	f7fe fae8 	bl	801056c <memset>
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}

08011fa0 <__sinit>:
 8011fa0:	6983      	ldr	r3, [r0, #24]
 8011fa2:	b510      	push	{r4, lr}
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	bb33      	cbnz	r3, 8011ff6 <__sinit+0x56>
 8011fa8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011fac:	6503      	str	r3, [r0, #80]	; 0x50
 8011fae:	4b12      	ldr	r3, [pc, #72]	; (8011ff8 <__sinit+0x58>)
 8011fb0:	4a12      	ldr	r2, [pc, #72]	; (8011ffc <__sinit+0x5c>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6282      	str	r2, [r0, #40]	; 0x28
 8011fb6:	4298      	cmp	r0, r3
 8011fb8:	bf04      	itt	eq
 8011fba:	2301      	moveq	r3, #1
 8011fbc:	6183      	streq	r3, [r0, #24]
 8011fbe:	f000 f81f 	bl	8012000 <__sfp>
 8011fc2:	6060      	str	r0, [r4, #4]
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f000 f81b 	bl	8012000 <__sfp>
 8011fca:	60a0      	str	r0, [r4, #8]
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f000 f817 	bl	8012000 <__sfp>
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	60e0      	str	r0, [r4, #12]
 8011fd6:	2104      	movs	r1, #4
 8011fd8:	6860      	ldr	r0, [r4, #4]
 8011fda:	f7ff ffa1 	bl	8011f20 <std>
 8011fde:	2201      	movs	r2, #1
 8011fe0:	2109      	movs	r1, #9
 8011fe2:	68a0      	ldr	r0, [r4, #8]
 8011fe4:	f7ff ff9c 	bl	8011f20 <std>
 8011fe8:	2202      	movs	r2, #2
 8011fea:	2112      	movs	r1, #18
 8011fec:	68e0      	ldr	r0, [r4, #12]
 8011fee:	f7ff ff97 	bl	8011f20 <std>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	61a3      	str	r3, [r4, #24]
 8011ff6:	bd10      	pop	{r4, pc}
 8011ff8:	08017204 	.word	0x08017204
 8011ffc:	08011f69 	.word	0x08011f69

08012000 <__sfp>:
 8012000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012002:	4b1b      	ldr	r3, [pc, #108]	; (8012070 <__sfp+0x70>)
 8012004:	681e      	ldr	r6, [r3, #0]
 8012006:	69b3      	ldr	r3, [r6, #24]
 8012008:	4607      	mov	r7, r0
 801200a:	b913      	cbnz	r3, 8012012 <__sfp+0x12>
 801200c:	4630      	mov	r0, r6
 801200e:	f7ff ffc7 	bl	8011fa0 <__sinit>
 8012012:	3648      	adds	r6, #72	; 0x48
 8012014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012018:	3b01      	subs	r3, #1
 801201a:	d503      	bpl.n	8012024 <__sfp+0x24>
 801201c:	6833      	ldr	r3, [r6, #0]
 801201e:	b133      	cbz	r3, 801202e <__sfp+0x2e>
 8012020:	6836      	ldr	r6, [r6, #0]
 8012022:	e7f7      	b.n	8012014 <__sfp+0x14>
 8012024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012028:	b16d      	cbz	r5, 8012046 <__sfp+0x46>
 801202a:	3468      	adds	r4, #104	; 0x68
 801202c:	e7f4      	b.n	8012018 <__sfp+0x18>
 801202e:	2104      	movs	r1, #4
 8012030:	4638      	mov	r0, r7
 8012032:	f7ff ff9f 	bl	8011f74 <__sfmoreglue>
 8012036:	6030      	str	r0, [r6, #0]
 8012038:	2800      	cmp	r0, #0
 801203a:	d1f1      	bne.n	8012020 <__sfp+0x20>
 801203c:	230c      	movs	r3, #12
 801203e:	603b      	str	r3, [r7, #0]
 8012040:	4604      	mov	r4, r0
 8012042:	4620      	mov	r0, r4
 8012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012046:	4b0b      	ldr	r3, [pc, #44]	; (8012074 <__sfp+0x74>)
 8012048:	6665      	str	r5, [r4, #100]	; 0x64
 801204a:	e9c4 5500 	strd	r5, r5, [r4]
 801204e:	60a5      	str	r5, [r4, #8]
 8012050:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012054:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012058:	2208      	movs	r2, #8
 801205a:	4629      	mov	r1, r5
 801205c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012060:	f7fe fa84 	bl	801056c <memset>
 8012064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801206c:	e7e9      	b.n	8012042 <__sfp+0x42>
 801206e:	bf00      	nop
 8012070:	08017204 	.word	0x08017204
 8012074:	ffff0001 	.word	0xffff0001

08012078 <_fwalk_reent>:
 8012078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801207c:	4680      	mov	r8, r0
 801207e:	4689      	mov	r9, r1
 8012080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012084:	2600      	movs	r6, #0
 8012086:	b914      	cbnz	r4, 801208e <_fwalk_reent+0x16>
 8012088:	4630      	mov	r0, r6
 801208a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801208e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012092:	3f01      	subs	r7, #1
 8012094:	d501      	bpl.n	801209a <_fwalk_reent+0x22>
 8012096:	6824      	ldr	r4, [r4, #0]
 8012098:	e7f5      	b.n	8012086 <_fwalk_reent+0xe>
 801209a:	89ab      	ldrh	r3, [r5, #12]
 801209c:	2b01      	cmp	r3, #1
 801209e:	d907      	bls.n	80120b0 <_fwalk_reent+0x38>
 80120a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120a4:	3301      	adds	r3, #1
 80120a6:	d003      	beq.n	80120b0 <_fwalk_reent+0x38>
 80120a8:	4629      	mov	r1, r5
 80120aa:	4640      	mov	r0, r8
 80120ac:	47c8      	blx	r9
 80120ae:	4306      	orrs	r6, r0
 80120b0:	3568      	adds	r5, #104	; 0x68
 80120b2:	e7ee      	b.n	8012092 <_fwalk_reent+0x1a>

080120b4 <_localeconv_r>:
 80120b4:	4b04      	ldr	r3, [pc, #16]	; (80120c8 <_localeconv_r+0x14>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	6a18      	ldr	r0, [r3, #32]
 80120ba:	4b04      	ldr	r3, [pc, #16]	; (80120cc <_localeconv_r+0x18>)
 80120bc:	2800      	cmp	r0, #0
 80120be:	bf08      	it	eq
 80120c0:	4618      	moveq	r0, r3
 80120c2:	30f0      	adds	r0, #240	; 0xf0
 80120c4:	4770      	bx	lr
 80120c6:	bf00      	nop
 80120c8:	200006c8 	.word	0x200006c8
 80120cc:	2000072c 	.word	0x2000072c

080120d0 <__swhatbuf_r>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	460e      	mov	r6, r1
 80120d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d8:	2900      	cmp	r1, #0
 80120da:	b096      	sub	sp, #88	; 0x58
 80120dc:	4614      	mov	r4, r2
 80120de:	461d      	mov	r5, r3
 80120e0:	da07      	bge.n	80120f2 <__swhatbuf_r+0x22>
 80120e2:	2300      	movs	r3, #0
 80120e4:	602b      	str	r3, [r5, #0]
 80120e6:	89b3      	ldrh	r3, [r6, #12]
 80120e8:	061a      	lsls	r2, r3, #24
 80120ea:	d410      	bmi.n	801210e <__swhatbuf_r+0x3e>
 80120ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120f0:	e00e      	b.n	8012110 <__swhatbuf_r+0x40>
 80120f2:	466a      	mov	r2, sp
 80120f4:	f000 fd08 	bl	8012b08 <_fstat_r>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	dbf2      	blt.n	80120e2 <__swhatbuf_r+0x12>
 80120fc:	9a01      	ldr	r2, [sp, #4]
 80120fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012106:	425a      	negs	r2, r3
 8012108:	415a      	adcs	r2, r3
 801210a:	602a      	str	r2, [r5, #0]
 801210c:	e7ee      	b.n	80120ec <__swhatbuf_r+0x1c>
 801210e:	2340      	movs	r3, #64	; 0x40
 8012110:	2000      	movs	r0, #0
 8012112:	6023      	str	r3, [r4, #0]
 8012114:	b016      	add	sp, #88	; 0x58
 8012116:	bd70      	pop	{r4, r5, r6, pc}

08012118 <__smakebuf_r>:
 8012118:	898b      	ldrh	r3, [r1, #12]
 801211a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801211c:	079d      	lsls	r5, r3, #30
 801211e:	4606      	mov	r6, r0
 8012120:	460c      	mov	r4, r1
 8012122:	d507      	bpl.n	8012134 <__smakebuf_r+0x1c>
 8012124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	6123      	str	r3, [r4, #16]
 801212c:	2301      	movs	r3, #1
 801212e:	6163      	str	r3, [r4, #20]
 8012130:	b002      	add	sp, #8
 8012132:	bd70      	pop	{r4, r5, r6, pc}
 8012134:	ab01      	add	r3, sp, #4
 8012136:	466a      	mov	r2, sp
 8012138:	f7ff ffca 	bl	80120d0 <__swhatbuf_r>
 801213c:	9900      	ldr	r1, [sp, #0]
 801213e:	4605      	mov	r5, r0
 8012140:	4630      	mov	r0, r6
 8012142:	f7fe fa69 	bl	8010618 <_malloc_r>
 8012146:	b948      	cbnz	r0, 801215c <__smakebuf_r+0x44>
 8012148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801214c:	059a      	lsls	r2, r3, #22
 801214e:	d4ef      	bmi.n	8012130 <__smakebuf_r+0x18>
 8012150:	f023 0303 	bic.w	r3, r3, #3
 8012154:	f043 0302 	orr.w	r3, r3, #2
 8012158:	81a3      	strh	r3, [r4, #12]
 801215a:	e7e3      	b.n	8012124 <__smakebuf_r+0xc>
 801215c:	4b0d      	ldr	r3, [pc, #52]	; (8012194 <__smakebuf_r+0x7c>)
 801215e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	6020      	str	r0, [r4, #0]
 8012164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012168:	81a3      	strh	r3, [r4, #12]
 801216a:	9b00      	ldr	r3, [sp, #0]
 801216c:	6163      	str	r3, [r4, #20]
 801216e:	9b01      	ldr	r3, [sp, #4]
 8012170:	6120      	str	r0, [r4, #16]
 8012172:	b15b      	cbz	r3, 801218c <__smakebuf_r+0x74>
 8012174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012178:	4630      	mov	r0, r6
 801217a:	f000 fcd7 	bl	8012b2c <_isatty_r>
 801217e:	b128      	cbz	r0, 801218c <__smakebuf_r+0x74>
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	f023 0303 	bic.w	r3, r3, #3
 8012186:	f043 0301 	orr.w	r3, r3, #1
 801218a:	81a3      	strh	r3, [r4, #12]
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	431d      	orrs	r5, r3
 8012190:	81a5      	strh	r5, [r4, #12]
 8012192:	e7cd      	b.n	8012130 <__smakebuf_r+0x18>
 8012194:	08011f69 	.word	0x08011f69

08012198 <__malloc_lock>:
 8012198:	4770      	bx	lr

0801219a <__malloc_unlock>:
 801219a:	4770      	bx	lr

0801219c <_Balloc>:
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121a0:	4604      	mov	r4, r0
 80121a2:	460e      	mov	r6, r1
 80121a4:	b93d      	cbnz	r5, 80121b6 <_Balloc+0x1a>
 80121a6:	2010      	movs	r0, #16
 80121a8:	f7fe f9b6 	bl	8010518 <malloc>
 80121ac:	6260      	str	r0, [r4, #36]	; 0x24
 80121ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80121b2:	6005      	str	r5, [r0, #0]
 80121b4:	60c5      	str	r5, [r0, #12]
 80121b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80121b8:	68eb      	ldr	r3, [r5, #12]
 80121ba:	b183      	cbz	r3, 80121de <_Balloc+0x42>
 80121bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80121c4:	b9b8      	cbnz	r0, 80121f6 <_Balloc+0x5a>
 80121c6:	2101      	movs	r1, #1
 80121c8:	fa01 f506 	lsl.w	r5, r1, r6
 80121cc:	1d6a      	adds	r2, r5, #5
 80121ce:	0092      	lsls	r2, r2, #2
 80121d0:	4620      	mov	r0, r4
 80121d2:	f000 fabf 	bl	8012754 <_calloc_r>
 80121d6:	b160      	cbz	r0, 80121f2 <_Balloc+0x56>
 80121d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80121dc:	e00e      	b.n	80121fc <_Balloc+0x60>
 80121de:	2221      	movs	r2, #33	; 0x21
 80121e0:	2104      	movs	r1, #4
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 fab6 	bl	8012754 <_calloc_r>
 80121e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121ea:	60e8      	str	r0, [r5, #12]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1e4      	bne.n	80121bc <_Balloc+0x20>
 80121f2:	2000      	movs	r0, #0
 80121f4:	bd70      	pop	{r4, r5, r6, pc}
 80121f6:	6802      	ldr	r2, [r0, #0]
 80121f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80121fc:	2300      	movs	r3, #0
 80121fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012202:	e7f7      	b.n	80121f4 <_Balloc+0x58>

08012204 <_Bfree>:
 8012204:	b570      	push	{r4, r5, r6, lr}
 8012206:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012208:	4606      	mov	r6, r0
 801220a:	460d      	mov	r5, r1
 801220c:	b93c      	cbnz	r4, 801221e <_Bfree+0x1a>
 801220e:	2010      	movs	r0, #16
 8012210:	f7fe f982 	bl	8010518 <malloc>
 8012214:	6270      	str	r0, [r6, #36]	; 0x24
 8012216:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801221a:	6004      	str	r4, [r0, #0]
 801221c:	60c4      	str	r4, [r0, #12]
 801221e:	b13d      	cbz	r5, 8012230 <_Bfree+0x2c>
 8012220:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012222:	686a      	ldr	r2, [r5, #4]
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801222a:	6029      	str	r1, [r5, #0]
 801222c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012230:	bd70      	pop	{r4, r5, r6, pc}

08012232 <__multadd>:
 8012232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012236:	690d      	ldr	r5, [r1, #16]
 8012238:	461f      	mov	r7, r3
 801223a:	4606      	mov	r6, r0
 801223c:	460c      	mov	r4, r1
 801223e:	f101 0c14 	add.w	ip, r1, #20
 8012242:	2300      	movs	r3, #0
 8012244:	f8dc 0000 	ldr.w	r0, [ip]
 8012248:	b281      	uxth	r1, r0
 801224a:	fb02 7101 	mla	r1, r2, r1, r7
 801224e:	0c0f      	lsrs	r7, r1, #16
 8012250:	0c00      	lsrs	r0, r0, #16
 8012252:	fb02 7000 	mla	r0, r2, r0, r7
 8012256:	b289      	uxth	r1, r1
 8012258:	3301      	adds	r3, #1
 801225a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801225e:	429d      	cmp	r5, r3
 8012260:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012264:	f84c 1b04 	str.w	r1, [ip], #4
 8012268:	dcec      	bgt.n	8012244 <__multadd+0x12>
 801226a:	b1d7      	cbz	r7, 80122a2 <__multadd+0x70>
 801226c:	68a3      	ldr	r3, [r4, #8]
 801226e:	42ab      	cmp	r3, r5
 8012270:	dc12      	bgt.n	8012298 <__multadd+0x66>
 8012272:	6861      	ldr	r1, [r4, #4]
 8012274:	4630      	mov	r0, r6
 8012276:	3101      	adds	r1, #1
 8012278:	f7ff ff90 	bl	801219c <_Balloc>
 801227c:	6922      	ldr	r2, [r4, #16]
 801227e:	3202      	adds	r2, #2
 8012280:	f104 010c 	add.w	r1, r4, #12
 8012284:	4680      	mov	r8, r0
 8012286:	0092      	lsls	r2, r2, #2
 8012288:	300c      	adds	r0, #12
 801228a:	f7fe f964 	bl	8010556 <memcpy>
 801228e:	4621      	mov	r1, r4
 8012290:	4630      	mov	r0, r6
 8012292:	f7ff ffb7 	bl	8012204 <_Bfree>
 8012296:	4644      	mov	r4, r8
 8012298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801229c:	3501      	adds	r5, #1
 801229e:	615f      	str	r7, [r3, #20]
 80122a0:	6125      	str	r5, [r4, #16]
 80122a2:	4620      	mov	r0, r4
 80122a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122a8 <__hi0bits>:
 80122a8:	0c02      	lsrs	r2, r0, #16
 80122aa:	0412      	lsls	r2, r2, #16
 80122ac:	4603      	mov	r3, r0
 80122ae:	b9b2      	cbnz	r2, 80122de <__hi0bits+0x36>
 80122b0:	0403      	lsls	r3, r0, #16
 80122b2:	2010      	movs	r0, #16
 80122b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80122b8:	bf04      	itt	eq
 80122ba:	021b      	lsleq	r3, r3, #8
 80122bc:	3008      	addeq	r0, #8
 80122be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80122c2:	bf04      	itt	eq
 80122c4:	011b      	lsleq	r3, r3, #4
 80122c6:	3004      	addeq	r0, #4
 80122c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80122cc:	bf04      	itt	eq
 80122ce:	009b      	lsleq	r3, r3, #2
 80122d0:	3002      	addeq	r0, #2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	db06      	blt.n	80122e4 <__hi0bits+0x3c>
 80122d6:	005b      	lsls	r3, r3, #1
 80122d8:	d503      	bpl.n	80122e2 <__hi0bits+0x3a>
 80122da:	3001      	adds	r0, #1
 80122dc:	4770      	bx	lr
 80122de:	2000      	movs	r0, #0
 80122e0:	e7e8      	b.n	80122b4 <__hi0bits+0xc>
 80122e2:	2020      	movs	r0, #32
 80122e4:	4770      	bx	lr

080122e6 <__lo0bits>:
 80122e6:	6803      	ldr	r3, [r0, #0]
 80122e8:	f013 0207 	ands.w	r2, r3, #7
 80122ec:	4601      	mov	r1, r0
 80122ee:	d00b      	beq.n	8012308 <__lo0bits+0x22>
 80122f0:	07da      	lsls	r2, r3, #31
 80122f2:	d423      	bmi.n	801233c <__lo0bits+0x56>
 80122f4:	0798      	lsls	r0, r3, #30
 80122f6:	bf49      	itett	mi
 80122f8:	085b      	lsrmi	r3, r3, #1
 80122fa:	089b      	lsrpl	r3, r3, #2
 80122fc:	2001      	movmi	r0, #1
 80122fe:	600b      	strmi	r3, [r1, #0]
 8012300:	bf5c      	itt	pl
 8012302:	600b      	strpl	r3, [r1, #0]
 8012304:	2002      	movpl	r0, #2
 8012306:	4770      	bx	lr
 8012308:	b298      	uxth	r0, r3
 801230a:	b9a8      	cbnz	r0, 8012338 <__lo0bits+0x52>
 801230c:	0c1b      	lsrs	r3, r3, #16
 801230e:	2010      	movs	r0, #16
 8012310:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012314:	bf04      	itt	eq
 8012316:	0a1b      	lsreq	r3, r3, #8
 8012318:	3008      	addeq	r0, #8
 801231a:	071a      	lsls	r2, r3, #28
 801231c:	bf04      	itt	eq
 801231e:	091b      	lsreq	r3, r3, #4
 8012320:	3004      	addeq	r0, #4
 8012322:	079a      	lsls	r2, r3, #30
 8012324:	bf04      	itt	eq
 8012326:	089b      	lsreq	r3, r3, #2
 8012328:	3002      	addeq	r0, #2
 801232a:	07da      	lsls	r2, r3, #31
 801232c:	d402      	bmi.n	8012334 <__lo0bits+0x4e>
 801232e:	085b      	lsrs	r3, r3, #1
 8012330:	d006      	beq.n	8012340 <__lo0bits+0x5a>
 8012332:	3001      	adds	r0, #1
 8012334:	600b      	str	r3, [r1, #0]
 8012336:	4770      	bx	lr
 8012338:	4610      	mov	r0, r2
 801233a:	e7e9      	b.n	8012310 <__lo0bits+0x2a>
 801233c:	2000      	movs	r0, #0
 801233e:	4770      	bx	lr
 8012340:	2020      	movs	r0, #32
 8012342:	4770      	bx	lr

08012344 <__i2b>:
 8012344:	b510      	push	{r4, lr}
 8012346:	460c      	mov	r4, r1
 8012348:	2101      	movs	r1, #1
 801234a:	f7ff ff27 	bl	801219c <_Balloc>
 801234e:	2201      	movs	r2, #1
 8012350:	6144      	str	r4, [r0, #20]
 8012352:	6102      	str	r2, [r0, #16]
 8012354:	bd10      	pop	{r4, pc}

08012356 <__multiply>:
 8012356:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235a:	4614      	mov	r4, r2
 801235c:	690a      	ldr	r2, [r1, #16]
 801235e:	6923      	ldr	r3, [r4, #16]
 8012360:	429a      	cmp	r2, r3
 8012362:	bfb8      	it	lt
 8012364:	460b      	movlt	r3, r1
 8012366:	4688      	mov	r8, r1
 8012368:	bfbc      	itt	lt
 801236a:	46a0      	movlt	r8, r4
 801236c:	461c      	movlt	r4, r3
 801236e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012372:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801237a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801237e:	eb07 0609 	add.w	r6, r7, r9
 8012382:	42b3      	cmp	r3, r6
 8012384:	bfb8      	it	lt
 8012386:	3101      	addlt	r1, #1
 8012388:	f7ff ff08 	bl	801219c <_Balloc>
 801238c:	f100 0514 	add.w	r5, r0, #20
 8012390:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012394:	462b      	mov	r3, r5
 8012396:	2200      	movs	r2, #0
 8012398:	4573      	cmp	r3, lr
 801239a:	d316      	bcc.n	80123ca <__multiply+0x74>
 801239c:	f104 0214 	add.w	r2, r4, #20
 80123a0:	f108 0114 	add.w	r1, r8, #20
 80123a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80123a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80123ac:	9300      	str	r3, [sp, #0]
 80123ae:	9b00      	ldr	r3, [sp, #0]
 80123b0:	9201      	str	r2, [sp, #4]
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d80c      	bhi.n	80123d0 <__multiply+0x7a>
 80123b6:	2e00      	cmp	r6, #0
 80123b8:	dd03      	ble.n	80123c2 <__multiply+0x6c>
 80123ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d05d      	beq.n	801247e <__multiply+0x128>
 80123c2:	6106      	str	r6, [r0, #16]
 80123c4:	b003      	add	sp, #12
 80123c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ca:	f843 2b04 	str.w	r2, [r3], #4
 80123ce:	e7e3      	b.n	8012398 <__multiply+0x42>
 80123d0:	f8b2 b000 	ldrh.w	fp, [r2]
 80123d4:	f1bb 0f00 	cmp.w	fp, #0
 80123d8:	d023      	beq.n	8012422 <__multiply+0xcc>
 80123da:	4689      	mov	r9, r1
 80123dc:	46ac      	mov	ip, r5
 80123de:	f04f 0800 	mov.w	r8, #0
 80123e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80123e6:	f8dc a000 	ldr.w	sl, [ip]
 80123ea:	b2a3      	uxth	r3, r4
 80123ec:	fa1f fa8a 	uxth.w	sl, sl
 80123f0:	fb0b a303 	mla	r3, fp, r3, sl
 80123f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80123f8:	f8dc 4000 	ldr.w	r4, [ip]
 80123fc:	4443      	add	r3, r8
 80123fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012402:	fb0b 840a 	mla	r4, fp, sl, r8
 8012406:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801240a:	46e2      	mov	sl, ip
 801240c:	b29b      	uxth	r3, r3
 801240e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012412:	454f      	cmp	r7, r9
 8012414:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012418:	f84a 3b04 	str.w	r3, [sl], #4
 801241c:	d82b      	bhi.n	8012476 <__multiply+0x120>
 801241e:	f8cc 8004 	str.w	r8, [ip, #4]
 8012422:	9b01      	ldr	r3, [sp, #4]
 8012424:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012428:	3204      	adds	r2, #4
 801242a:	f1ba 0f00 	cmp.w	sl, #0
 801242e:	d020      	beq.n	8012472 <__multiply+0x11c>
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	4689      	mov	r9, r1
 8012434:	46a8      	mov	r8, r5
 8012436:	f04f 0b00 	mov.w	fp, #0
 801243a:	f8b9 c000 	ldrh.w	ip, [r9]
 801243e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012442:	fb0a 440c 	mla	r4, sl, ip, r4
 8012446:	445c      	add	r4, fp
 8012448:	46c4      	mov	ip, r8
 801244a:	b29b      	uxth	r3, r3
 801244c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012450:	f84c 3b04 	str.w	r3, [ip], #4
 8012454:	f859 3b04 	ldr.w	r3, [r9], #4
 8012458:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801245c:	0c1b      	lsrs	r3, r3, #16
 801245e:	fb0a b303 	mla	r3, sl, r3, fp
 8012462:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012466:	454f      	cmp	r7, r9
 8012468:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801246c:	d805      	bhi.n	801247a <__multiply+0x124>
 801246e:	f8c8 3004 	str.w	r3, [r8, #4]
 8012472:	3504      	adds	r5, #4
 8012474:	e79b      	b.n	80123ae <__multiply+0x58>
 8012476:	46d4      	mov	ip, sl
 8012478:	e7b3      	b.n	80123e2 <__multiply+0x8c>
 801247a:	46e0      	mov	r8, ip
 801247c:	e7dd      	b.n	801243a <__multiply+0xe4>
 801247e:	3e01      	subs	r6, #1
 8012480:	e799      	b.n	80123b6 <__multiply+0x60>
	...

08012484 <__pow5mult>:
 8012484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012488:	4615      	mov	r5, r2
 801248a:	f012 0203 	ands.w	r2, r2, #3
 801248e:	4606      	mov	r6, r0
 8012490:	460f      	mov	r7, r1
 8012492:	d007      	beq.n	80124a4 <__pow5mult+0x20>
 8012494:	3a01      	subs	r2, #1
 8012496:	4c21      	ldr	r4, [pc, #132]	; (801251c <__pow5mult+0x98>)
 8012498:	2300      	movs	r3, #0
 801249a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801249e:	f7ff fec8 	bl	8012232 <__multadd>
 80124a2:	4607      	mov	r7, r0
 80124a4:	10ad      	asrs	r5, r5, #2
 80124a6:	d035      	beq.n	8012514 <__pow5mult+0x90>
 80124a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124aa:	b93c      	cbnz	r4, 80124bc <__pow5mult+0x38>
 80124ac:	2010      	movs	r0, #16
 80124ae:	f7fe f833 	bl	8010518 <malloc>
 80124b2:	6270      	str	r0, [r6, #36]	; 0x24
 80124b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124b8:	6004      	str	r4, [r0, #0]
 80124ba:	60c4      	str	r4, [r0, #12]
 80124bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124c4:	b94c      	cbnz	r4, 80124da <__pow5mult+0x56>
 80124c6:	f240 2171 	movw	r1, #625	; 0x271
 80124ca:	4630      	mov	r0, r6
 80124cc:	f7ff ff3a 	bl	8012344 <__i2b>
 80124d0:	2300      	movs	r3, #0
 80124d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80124d6:	4604      	mov	r4, r0
 80124d8:	6003      	str	r3, [r0, #0]
 80124da:	f04f 0800 	mov.w	r8, #0
 80124de:	07eb      	lsls	r3, r5, #31
 80124e0:	d50a      	bpl.n	80124f8 <__pow5mult+0x74>
 80124e2:	4639      	mov	r1, r7
 80124e4:	4622      	mov	r2, r4
 80124e6:	4630      	mov	r0, r6
 80124e8:	f7ff ff35 	bl	8012356 <__multiply>
 80124ec:	4639      	mov	r1, r7
 80124ee:	4681      	mov	r9, r0
 80124f0:	4630      	mov	r0, r6
 80124f2:	f7ff fe87 	bl	8012204 <_Bfree>
 80124f6:	464f      	mov	r7, r9
 80124f8:	106d      	asrs	r5, r5, #1
 80124fa:	d00b      	beq.n	8012514 <__pow5mult+0x90>
 80124fc:	6820      	ldr	r0, [r4, #0]
 80124fe:	b938      	cbnz	r0, 8012510 <__pow5mult+0x8c>
 8012500:	4622      	mov	r2, r4
 8012502:	4621      	mov	r1, r4
 8012504:	4630      	mov	r0, r6
 8012506:	f7ff ff26 	bl	8012356 <__multiply>
 801250a:	6020      	str	r0, [r4, #0]
 801250c:	f8c0 8000 	str.w	r8, [r0]
 8012510:	4604      	mov	r4, r0
 8012512:	e7e4      	b.n	80124de <__pow5mult+0x5a>
 8012514:	4638      	mov	r0, r7
 8012516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801251a:	bf00      	nop
 801251c:	08017398 	.word	0x08017398

08012520 <__lshift>:
 8012520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012524:	460c      	mov	r4, r1
 8012526:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801252a:	6923      	ldr	r3, [r4, #16]
 801252c:	6849      	ldr	r1, [r1, #4]
 801252e:	eb0a 0903 	add.w	r9, sl, r3
 8012532:	68a3      	ldr	r3, [r4, #8]
 8012534:	4607      	mov	r7, r0
 8012536:	4616      	mov	r6, r2
 8012538:	f109 0501 	add.w	r5, r9, #1
 801253c:	42ab      	cmp	r3, r5
 801253e:	db32      	blt.n	80125a6 <__lshift+0x86>
 8012540:	4638      	mov	r0, r7
 8012542:	f7ff fe2b 	bl	801219c <_Balloc>
 8012546:	2300      	movs	r3, #0
 8012548:	4680      	mov	r8, r0
 801254a:	f100 0114 	add.w	r1, r0, #20
 801254e:	461a      	mov	r2, r3
 8012550:	4553      	cmp	r3, sl
 8012552:	db2b      	blt.n	80125ac <__lshift+0x8c>
 8012554:	6920      	ldr	r0, [r4, #16]
 8012556:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801255a:	f104 0314 	add.w	r3, r4, #20
 801255e:	f016 021f 	ands.w	r2, r6, #31
 8012562:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012566:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801256a:	d025      	beq.n	80125b8 <__lshift+0x98>
 801256c:	f1c2 0e20 	rsb	lr, r2, #32
 8012570:	2000      	movs	r0, #0
 8012572:	681e      	ldr	r6, [r3, #0]
 8012574:	468a      	mov	sl, r1
 8012576:	4096      	lsls	r6, r2
 8012578:	4330      	orrs	r0, r6
 801257a:	f84a 0b04 	str.w	r0, [sl], #4
 801257e:	f853 0b04 	ldr.w	r0, [r3], #4
 8012582:	459c      	cmp	ip, r3
 8012584:	fa20 f00e 	lsr.w	r0, r0, lr
 8012588:	d814      	bhi.n	80125b4 <__lshift+0x94>
 801258a:	6048      	str	r0, [r1, #4]
 801258c:	b108      	cbz	r0, 8012592 <__lshift+0x72>
 801258e:	f109 0502 	add.w	r5, r9, #2
 8012592:	3d01      	subs	r5, #1
 8012594:	4638      	mov	r0, r7
 8012596:	f8c8 5010 	str.w	r5, [r8, #16]
 801259a:	4621      	mov	r1, r4
 801259c:	f7ff fe32 	bl	8012204 <_Bfree>
 80125a0:	4640      	mov	r0, r8
 80125a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125a6:	3101      	adds	r1, #1
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	e7c7      	b.n	801253c <__lshift+0x1c>
 80125ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80125b0:	3301      	adds	r3, #1
 80125b2:	e7cd      	b.n	8012550 <__lshift+0x30>
 80125b4:	4651      	mov	r1, sl
 80125b6:	e7dc      	b.n	8012572 <__lshift+0x52>
 80125b8:	3904      	subs	r1, #4
 80125ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80125be:	f841 2f04 	str.w	r2, [r1, #4]!
 80125c2:	459c      	cmp	ip, r3
 80125c4:	d8f9      	bhi.n	80125ba <__lshift+0x9a>
 80125c6:	e7e4      	b.n	8012592 <__lshift+0x72>

080125c8 <__mcmp>:
 80125c8:	6903      	ldr	r3, [r0, #16]
 80125ca:	690a      	ldr	r2, [r1, #16]
 80125cc:	1a9b      	subs	r3, r3, r2
 80125ce:	b530      	push	{r4, r5, lr}
 80125d0:	d10c      	bne.n	80125ec <__mcmp+0x24>
 80125d2:	0092      	lsls	r2, r2, #2
 80125d4:	3014      	adds	r0, #20
 80125d6:	3114      	adds	r1, #20
 80125d8:	1884      	adds	r4, r0, r2
 80125da:	4411      	add	r1, r2
 80125dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80125e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80125e4:	4295      	cmp	r5, r2
 80125e6:	d003      	beq.n	80125f0 <__mcmp+0x28>
 80125e8:	d305      	bcc.n	80125f6 <__mcmp+0x2e>
 80125ea:	2301      	movs	r3, #1
 80125ec:	4618      	mov	r0, r3
 80125ee:	bd30      	pop	{r4, r5, pc}
 80125f0:	42a0      	cmp	r0, r4
 80125f2:	d3f3      	bcc.n	80125dc <__mcmp+0x14>
 80125f4:	e7fa      	b.n	80125ec <__mcmp+0x24>
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295
 80125fa:	e7f7      	b.n	80125ec <__mcmp+0x24>

080125fc <__mdiff>:
 80125fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012600:	460d      	mov	r5, r1
 8012602:	4607      	mov	r7, r0
 8012604:	4611      	mov	r1, r2
 8012606:	4628      	mov	r0, r5
 8012608:	4614      	mov	r4, r2
 801260a:	f7ff ffdd 	bl	80125c8 <__mcmp>
 801260e:	1e06      	subs	r6, r0, #0
 8012610:	d108      	bne.n	8012624 <__mdiff+0x28>
 8012612:	4631      	mov	r1, r6
 8012614:	4638      	mov	r0, r7
 8012616:	f7ff fdc1 	bl	801219c <_Balloc>
 801261a:	2301      	movs	r3, #1
 801261c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012624:	bfa4      	itt	ge
 8012626:	4623      	movge	r3, r4
 8012628:	462c      	movge	r4, r5
 801262a:	4638      	mov	r0, r7
 801262c:	6861      	ldr	r1, [r4, #4]
 801262e:	bfa6      	itte	ge
 8012630:	461d      	movge	r5, r3
 8012632:	2600      	movge	r6, #0
 8012634:	2601      	movlt	r6, #1
 8012636:	f7ff fdb1 	bl	801219c <_Balloc>
 801263a:	692b      	ldr	r3, [r5, #16]
 801263c:	60c6      	str	r6, [r0, #12]
 801263e:	6926      	ldr	r6, [r4, #16]
 8012640:	f105 0914 	add.w	r9, r5, #20
 8012644:	f104 0214 	add.w	r2, r4, #20
 8012648:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801264c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012650:	f100 0514 	add.w	r5, r0, #20
 8012654:	f04f 0e00 	mov.w	lr, #0
 8012658:	f852 ab04 	ldr.w	sl, [r2], #4
 801265c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012660:	fa1e f18a 	uxtah	r1, lr, sl
 8012664:	b2a3      	uxth	r3, r4
 8012666:	1ac9      	subs	r1, r1, r3
 8012668:	0c23      	lsrs	r3, r4, #16
 801266a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801266e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012672:	b289      	uxth	r1, r1
 8012674:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012678:	45c8      	cmp	r8, r9
 801267a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801267e:	4694      	mov	ip, r2
 8012680:	f845 3b04 	str.w	r3, [r5], #4
 8012684:	d8e8      	bhi.n	8012658 <__mdiff+0x5c>
 8012686:	45bc      	cmp	ip, r7
 8012688:	d304      	bcc.n	8012694 <__mdiff+0x98>
 801268a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801268e:	b183      	cbz	r3, 80126b2 <__mdiff+0xb6>
 8012690:	6106      	str	r6, [r0, #16]
 8012692:	e7c5      	b.n	8012620 <__mdiff+0x24>
 8012694:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012698:	fa1e f381 	uxtah	r3, lr, r1
 801269c:	141a      	asrs	r2, r3, #16
 801269e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80126ac:	f845 3b04 	str.w	r3, [r5], #4
 80126b0:	e7e9      	b.n	8012686 <__mdiff+0x8a>
 80126b2:	3e01      	subs	r6, #1
 80126b4:	e7e9      	b.n	801268a <__mdiff+0x8e>

080126b6 <__d2b>:
 80126b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80126ba:	460e      	mov	r6, r1
 80126bc:	2101      	movs	r1, #1
 80126be:	ec59 8b10 	vmov	r8, r9, d0
 80126c2:	4615      	mov	r5, r2
 80126c4:	f7ff fd6a 	bl	801219c <_Balloc>
 80126c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80126cc:	4607      	mov	r7, r0
 80126ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126d2:	bb34      	cbnz	r4, 8012722 <__d2b+0x6c>
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	f1b8 0300 	subs.w	r3, r8, #0
 80126da:	d027      	beq.n	801272c <__d2b+0x76>
 80126dc:	a802      	add	r0, sp, #8
 80126de:	f840 3d08 	str.w	r3, [r0, #-8]!
 80126e2:	f7ff fe00 	bl	80122e6 <__lo0bits>
 80126e6:	9900      	ldr	r1, [sp, #0]
 80126e8:	b1f0      	cbz	r0, 8012728 <__d2b+0x72>
 80126ea:	9a01      	ldr	r2, [sp, #4]
 80126ec:	f1c0 0320 	rsb	r3, r0, #32
 80126f0:	fa02 f303 	lsl.w	r3, r2, r3
 80126f4:	430b      	orrs	r3, r1
 80126f6:	40c2      	lsrs	r2, r0
 80126f8:	617b      	str	r3, [r7, #20]
 80126fa:	9201      	str	r2, [sp, #4]
 80126fc:	9b01      	ldr	r3, [sp, #4]
 80126fe:	61bb      	str	r3, [r7, #24]
 8012700:	2b00      	cmp	r3, #0
 8012702:	bf14      	ite	ne
 8012704:	2102      	movne	r1, #2
 8012706:	2101      	moveq	r1, #1
 8012708:	6139      	str	r1, [r7, #16]
 801270a:	b1c4      	cbz	r4, 801273e <__d2b+0x88>
 801270c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012710:	4404      	add	r4, r0
 8012712:	6034      	str	r4, [r6, #0]
 8012714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012718:	6028      	str	r0, [r5, #0]
 801271a:	4638      	mov	r0, r7
 801271c:	b003      	add	sp, #12
 801271e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012726:	e7d5      	b.n	80126d4 <__d2b+0x1e>
 8012728:	6179      	str	r1, [r7, #20]
 801272a:	e7e7      	b.n	80126fc <__d2b+0x46>
 801272c:	a801      	add	r0, sp, #4
 801272e:	f7ff fdda 	bl	80122e6 <__lo0bits>
 8012732:	9b01      	ldr	r3, [sp, #4]
 8012734:	617b      	str	r3, [r7, #20]
 8012736:	2101      	movs	r1, #1
 8012738:	6139      	str	r1, [r7, #16]
 801273a:	3020      	adds	r0, #32
 801273c:	e7e5      	b.n	801270a <__d2b+0x54>
 801273e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012742:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012746:	6030      	str	r0, [r6, #0]
 8012748:	6918      	ldr	r0, [r3, #16]
 801274a:	f7ff fdad 	bl	80122a8 <__hi0bits>
 801274e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012752:	e7e1      	b.n	8012718 <__d2b+0x62>

08012754 <_calloc_r>:
 8012754:	b538      	push	{r3, r4, r5, lr}
 8012756:	fb02 f401 	mul.w	r4, r2, r1
 801275a:	4621      	mov	r1, r4
 801275c:	f7fd ff5c 	bl	8010618 <_malloc_r>
 8012760:	4605      	mov	r5, r0
 8012762:	b118      	cbz	r0, 801276c <_calloc_r+0x18>
 8012764:	4622      	mov	r2, r4
 8012766:	2100      	movs	r1, #0
 8012768:	f7fd ff00 	bl	801056c <memset>
 801276c:	4628      	mov	r0, r5
 801276e:	bd38      	pop	{r3, r4, r5, pc}

08012770 <_realloc_r>:
 8012770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012772:	4607      	mov	r7, r0
 8012774:	4614      	mov	r4, r2
 8012776:	460e      	mov	r6, r1
 8012778:	b921      	cbnz	r1, 8012784 <_realloc_r+0x14>
 801277a:	4611      	mov	r1, r2
 801277c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012780:	f7fd bf4a 	b.w	8010618 <_malloc_r>
 8012784:	b922      	cbnz	r2, 8012790 <_realloc_r+0x20>
 8012786:	f7fd fef9 	bl	801057c <_free_r>
 801278a:	4625      	mov	r5, r4
 801278c:	4628      	mov	r0, r5
 801278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012790:	f000 fa00 	bl	8012b94 <_malloc_usable_size_r>
 8012794:	42a0      	cmp	r0, r4
 8012796:	d20f      	bcs.n	80127b8 <_realloc_r+0x48>
 8012798:	4621      	mov	r1, r4
 801279a:	4638      	mov	r0, r7
 801279c:	f7fd ff3c 	bl	8010618 <_malloc_r>
 80127a0:	4605      	mov	r5, r0
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d0f2      	beq.n	801278c <_realloc_r+0x1c>
 80127a6:	4631      	mov	r1, r6
 80127a8:	4622      	mov	r2, r4
 80127aa:	f7fd fed4 	bl	8010556 <memcpy>
 80127ae:	4631      	mov	r1, r6
 80127b0:	4638      	mov	r0, r7
 80127b2:	f7fd fee3 	bl	801057c <_free_r>
 80127b6:	e7e9      	b.n	801278c <_realloc_r+0x1c>
 80127b8:	4635      	mov	r5, r6
 80127ba:	e7e7      	b.n	801278c <_realloc_r+0x1c>

080127bc <__sfputc_r>:
 80127bc:	6893      	ldr	r3, [r2, #8]
 80127be:	3b01      	subs	r3, #1
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	b410      	push	{r4}
 80127c4:	6093      	str	r3, [r2, #8]
 80127c6:	da08      	bge.n	80127da <__sfputc_r+0x1e>
 80127c8:	6994      	ldr	r4, [r2, #24]
 80127ca:	42a3      	cmp	r3, r4
 80127cc:	db01      	blt.n	80127d2 <__sfputc_r+0x16>
 80127ce:	290a      	cmp	r1, #10
 80127d0:	d103      	bne.n	80127da <__sfputc_r+0x1e>
 80127d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127d6:	f7fe bc59 	b.w	801108c <__swbuf_r>
 80127da:	6813      	ldr	r3, [r2, #0]
 80127dc:	1c58      	adds	r0, r3, #1
 80127de:	6010      	str	r0, [r2, #0]
 80127e0:	7019      	strb	r1, [r3, #0]
 80127e2:	4608      	mov	r0, r1
 80127e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127e8:	4770      	bx	lr

080127ea <__sfputs_r>:
 80127ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ec:	4606      	mov	r6, r0
 80127ee:	460f      	mov	r7, r1
 80127f0:	4614      	mov	r4, r2
 80127f2:	18d5      	adds	r5, r2, r3
 80127f4:	42ac      	cmp	r4, r5
 80127f6:	d101      	bne.n	80127fc <__sfputs_r+0x12>
 80127f8:	2000      	movs	r0, #0
 80127fa:	e007      	b.n	801280c <__sfputs_r+0x22>
 80127fc:	463a      	mov	r2, r7
 80127fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012802:	4630      	mov	r0, r6
 8012804:	f7ff ffda 	bl	80127bc <__sfputc_r>
 8012808:	1c43      	adds	r3, r0, #1
 801280a:	d1f3      	bne.n	80127f4 <__sfputs_r+0xa>
 801280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012810 <_vfiprintf_r>:
 8012810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012814:	460c      	mov	r4, r1
 8012816:	b09d      	sub	sp, #116	; 0x74
 8012818:	4617      	mov	r7, r2
 801281a:	461d      	mov	r5, r3
 801281c:	4606      	mov	r6, r0
 801281e:	b118      	cbz	r0, 8012828 <_vfiprintf_r+0x18>
 8012820:	6983      	ldr	r3, [r0, #24]
 8012822:	b90b      	cbnz	r3, 8012828 <_vfiprintf_r+0x18>
 8012824:	f7ff fbbc 	bl	8011fa0 <__sinit>
 8012828:	4b7c      	ldr	r3, [pc, #496]	; (8012a1c <_vfiprintf_r+0x20c>)
 801282a:	429c      	cmp	r4, r3
 801282c:	d158      	bne.n	80128e0 <_vfiprintf_r+0xd0>
 801282e:	6874      	ldr	r4, [r6, #4]
 8012830:	89a3      	ldrh	r3, [r4, #12]
 8012832:	0718      	lsls	r0, r3, #28
 8012834:	d55e      	bpl.n	80128f4 <_vfiprintf_r+0xe4>
 8012836:	6923      	ldr	r3, [r4, #16]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d05b      	beq.n	80128f4 <_vfiprintf_r+0xe4>
 801283c:	2300      	movs	r3, #0
 801283e:	9309      	str	r3, [sp, #36]	; 0x24
 8012840:	2320      	movs	r3, #32
 8012842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012846:	2330      	movs	r3, #48	; 0x30
 8012848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801284c:	9503      	str	r5, [sp, #12]
 801284e:	f04f 0b01 	mov.w	fp, #1
 8012852:	46b8      	mov	r8, r7
 8012854:	4645      	mov	r5, r8
 8012856:	f815 3b01 	ldrb.w	r3, [r5], #1
 801285a:	b10b      	cbz	r3, 8012860 <_vfiprintf_r+0x50>
 801285c:	2b25      	cmp	r3, #37	; 0x25
 801285e:	d154      	bne.n	801290a <_vfiprintf_r+0xfa>
 8012860:	ebb8 0a07 	subs.w	sl, r8, r7
 8012864:	d00b      	beq.n	801287e <_vfiprintf_r+0x6e>
 8012866:	4653      	mov	r3, sl
 8012868:	463a      	mov	r2, r7
 801286a:	4621      	mov	r1, r4
 801286c:	4630      	mov	r0, r6
 801286e:	f7ff ffbc 	bl	80127ea <__sfputs_r>
 8012872:	3001      	adds	r0, #1
 8012874:	f000 80c2 	beq.w	80129fc <_vfiprintf_r+0x1ec>
 8012878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801287a:	4453      	add	r3, sl
 801287c:	9309      	str	r3, [sp, #36]	; 0x24
 801287e:	f898 3000 	ldrb.w	r3, [r8]
 8012882:	2b00      	cmp	r3, #0
 8012884:	f000 80ba 	beq.w	80129fc <_vfiprintf_r+0x1ec>
 8012888:	2300      	movs	r3, #0
 801288a:	f04f 32ff 	mov.w	r2, #4294967295
 801288e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012892:	9304      	str	r3, [sp, #16]
 8012894:	9307      	str	r3, [sp, #28]
 8012896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801289a:	931a      	str	r3, [sp, #104]	; 0x68
 801289c:	46a8      	mov	r8, r5
 801289e:	2205      	movs	r2, #5
 80128a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80128a4:	485e      	ldr	r0, [pc, #376]	; (8012a20 <_vfiprintf_r+0x210>)
 80128a6:	f7f4 faeb 	bl	8006e80 <memchr>
 80128aa:	9b04      	ldr	r3, [sp, #16]
 80128ac:	bb78      	cbnz	r0, 801290e <_vfiprintf_r+0xfe>
 80128ae:	06d9      	lsls	r1, r3, #27
 80128b0:	bf44      	itt	mi
 80128b2:	2220      	movmi	r2, #32
 80128b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128b8:	071a      	lsls	r2, r3, #28
 80128ba:	bf44      	itt	mi
 80128bc:	222b      	movmi	r2, #43	; 0x2b
 80128be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128c2:	782a      	ldrb	r2, [r5, #0]
 80128c4:	2a2a      	cmp	r2, #42	; 0x2a
 80128c6:	d02a      	beq.n	801291e <_vfiprintf_r+0x10e>
 80128c8:	9a07      	ldr	r2, [sp, #28]
 80128ca:	46a8      	mov	r8, r5
 80128cc:	2000      	movs	r0, #0
 80128ce:	250a      	movs	r5, #10
 80128d0:	4641      	mov	r1, r8
 80128d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128d6:	3b30      	subs	r3, #48	; 0x30
 80128d8:	2b09      	cmp	r3, #9
 80128da:	d969      	bls.n	80129b0 <_vfiprintf_r+0x1a0>
 80128dc:	b360      	cbz	r0, 8012938 <_vfiprintf_r+0x128>
 80128de:	e024      	b.n	801292a <_vfiprintf_r+0x11a>
 80128e0:	4b50      	ldr	r3, [pc, #320]	; (8012a24 <_vfiprintf_r+0x214>)
 80128e2:	429c      	cmp	r4, r3
 80128e4:	d101      	bne.n	80128ea <_vfiprintf_r+0xda>
 80128e6:	68b4      	ldr	r4, [r6, #8]
 80128e8:	e7a2      	b.n	8012830 <_vfiprintf_r+0x20>
 80128ea:	4b4f      	ldr	r3, [pc, #316]	; (8012a28 <_vfiprintf_r+0x218>)
 80128ec:	429c      	cmp	r4, r3
 80128ee:	bf08      	it	eq
 80128f0:	68f4      	ldreq	r4, [r6, #12]
 80128f2:	e79d      	b.n	8012830 <_vfiprintf_r+0x20>
 80128f4:	4621      	mov	r1, r4
 80128f6:	4630      	mov	r0, r6
 80128f8:	f7fe fc1a 	bl	8011130 <__swsetup_r>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d09d      	beq.n	801283c <_vfiprintf_r+0x2c>
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	b01d      	add	sp, #116	; 0x74
 8012906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290a:	46a8      	mov	r8, r5
 801290c:	e7a2      	b.n	8012854 <_vfiprintf_r+0x44>
 801290e:	4a44      	ldr	r2, [pc, #272]	; (8012a20 <_vfiprintf_r+0x210>)
 8012910:	1a80      	subs	r0, r0, r2
 8012912:	fa0b f000 	lsl.w	r0, fp, r0
 8012916:	4318      	orrs	r0, r3
 8012918:	9004      	str	r0, [sp, #16]
 801291a:	4645      	mov	r5, r8
 801291c:	e7be      	b.n	801289c <_vfiprintf_r+0x8c>
 801291e:	9a03      	ldr	r2, [sp, #12]
 8012920:	1d11      	adds	r1, r2, #4
 8012922:	6812      	ldr	r2, [r2, #0]
 8012924:	9103      	str	r1, [sp, #12]
 8012926:	2a00      	cmp	r2, #0
 8012928:	db01      	blt.n	801292e <_vfiprintf_r+0x11e>
 801292a:	9207      	str	r2, [sp, #28]
 801292c:	e004      	b.n	8012938 <_vfiprintf_r+0x128>
 801292e:	4252      	negs	r2, r2
 8012930:	f043 0302 	orr.w	r3, r3, #2
 8012934:	9207      	str	r2, [sp, #28]
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	f898 3000 	ldrb.w	r3, [r8]
 801293c:	2b2e      	cmp	r3, #46	; 0x2e
 801293e:	d10e      	bne.n	801295e <_vfiprintf_r+0x14e>
 8012940:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012944:	2b2a      	cmp	r3, #42	; 0x2a
 8012946:	d138      	bne.n	80129ba <_vfiprintf_r+0x1aa>
 8012948:	9b03      	ldr	r3, [sp, #12]
 801294a:	1d1a      	adds	r2, r3, #4
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	9203      	str	r2, [sp, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	bfb8      	it	lt
 8012954:	f04f 33ff 	movlt.w	r3, #4294967295
 8012958:	f108 0802 	add.w	r8, r8, #2
 801295c:	9305      	str	r3, [sp, #20]
 801295e:	4d33      	ldr	r5, [pc, #204]	; (8012a2c <_vfiprintf_r+0x21c>)
 8012960:	f898 1000 	ldrb.w	r1, [r8]
 8012964:	2203      	movs	r2, #3
 8012966:	4628      	mov	r0, r5
 8012968:	f7f4 fa8a 	bl	8006e80 <memchr>
 801296c:	b140      	cbz	r0, 8012980 <_vfiprintf_r+0x170>
 801296e:	2340      	movs	r3, #64	; 0x40
 8012970:	1b40      	subs	r0, r0, r5
 8012972:	fa03 f000 	lsl.w	r0, r3, r0
 8012976:	9b04      	ldr	r3, [sp, #16]
 8012978:	4303      	orrs	r3, r0
 801297a:	f108 0801 	add.w	r8, r8, #1
 801297e:	9304      	str	r3, [sp, #16]
 8012980:	f898 1000 	ldrb.w	r1, [r8]
 8012984:	482a      	ldr	r0, [pc, #168]	; (8012a30 <_vfiprintf_r+0x220>)
 8012986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801298a:	2206      	movs	r2, #6
 801298c:	f108 0701 	add.w	r7, r8, #1
 8012990:	f7f4 fa76 	bl	8006e80 <memchr>
 8012994:	2800      	cmp	r0, #0
 8012996:	d037      	beq.n	8012a08 <_vfiprintf_r+0x1f8>
 8012998:	4b26      	ldr	r3, [pc, #152]	; (8012a34 <_vfiprintf_r+0x224>)
 801299a:	bb1b      	cbnz	r3, 80129e4 <_vfiprintf_r+0x1d4>
 801299c:	9b03      	ldr	r3, [sp, #12]
 801299e:	3307      	adds	r3, #7
 80129a0:	f023 0307 	bic.w	r3, r3, #7
 80129a4:	3308      	adds	r3, #8
 80129a6:	9303      	str	r3, [sp, #12]
 80129a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129aa:	444b      	add	r3, r9
 80129ac:	9309      	str	r3, [sp, #36]	; 0x24
 80129ae:	e750      	b.n	8012852 <_vfiprintf_r+0x42>
 80129b0:	fb05 3202 	mla	r2, r5, r2, r3
 80129b4:	2001      	movs	r0, #1
 80129b6:	4688      	mov	r8, r1
 80129b8:	e78a      	b.n	80128d0 <_vfiprintf_r+0xc0>
 80129ba:	2300      	movs	r3, #0
 80129bc:	f108 0801 	add.w	r8, r8, #1
 80129c0:	9305      	str	r3, [sp, #20]
 80129c2:	4619      	mov	r1, r3
 80129c4:	250a      	movs	r5, #10
 80129c6:	4640      	mov	r0, r8
 80129c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129cc:	3a30      	subs	r2, #48	; 0x30
 80129ce:	2a09      	cmp	r2, #9
 80129d0:	d903      	bls.n	80129da <_vfiprintf_r+0x1ca>
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d0c3      	beq.n	801295e <_vfiprintf_r+0x14e>
 80129d6:	9105      	str	r1, [sp, #20]
 80129d8:	e7c1      	b.n	801295e <_vfiprintf_r+0x14e>
 80129da:	fb05 2101 	mla	r1, r5, r1, r2
 80129de:	2301      	movs	r3, #1
 80129e0:	4680      	mov	r8, r0
 80129e2:	e7f0      	b.n	80129c6 <_vfiprintf_r+0x1b6>
 80129e4:	ab03      	add	r3, sp, #12
 80129e6:	9300      	str	r3, [sp, #0]
 80129e8:	4622      	mov	r2, r4
 80129ea:	4b13      	ldr	r3, [pc, #76]	; (8012a38 <_vfiprintf_r+0x228>)
 80129ec:	a904      	add	r1, sp, #16
 80129ee:	4630      	mov	r0, r6
 80129f0:	f7fd fef2 	bl	80107d8 <_printf_float>
 80129f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80129f8:	4681      	mov	r9, r0
 80129fa:	d1d5      	bne.n	80129a8 <_vfiprintf_r+0x198>
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	065b      	lsls	r3, r3, #25
 8012a00:	f53f af7e 	bmi.w	8012900 <_vfiprintf_r+0xf0>
 8012a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a06:	e77d      	b.n	8012904 <_vfiprintf_r+0xf4>
 8012a08:	ab03      	add	r3, sp, #12
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	4622      	mov	r2, r4
 8012a0e:	4b0a      	ldr	r3, [pc, #40]	; (8012a38 <_vfiprintf_r+0x228>)
 8012a10:	a904      	add	r1, sp, #16
 8012a12:	4630      	mov	r0, r6
 8012a14:	f7fe f982 	bl	8010d1c <_printf_i>
 8012a18:	e7ec      	b.n	80129f4 <_vfiprintf_r+0x1e4>
 8012a1a:	bf00      	nop
 8012a1c:	08017268 	.word	0x08017268
 8012a20:	080173a4 	.word	0x080173a4
 8012a24:	08017288 	.word	0x08017288
 8012a28:	08017248 	.word	0x08017248
 8012a2c:	080173aa 	.word	0x080173aa
 8012a30:	080173ae 	.word	0x080173ae
 8012a34:	080107d9 	.word	0x080107d9
 8012a38:	080127eb 	.word	0x080127eb

08012a3c <__sread>:
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	460c      	mov	r4, r1
 8012a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a44:	f000 f8ae 	bl	8012ba4 <_read_r>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	bfab      	itete	ge
 8012a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a50:	181b      	addge	r3, r3, r0
 8012a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a56:	bfac      	ite	ge
 8012a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a5a:	81a3      	strhlt	r3, [r4, #12]
 8012a5c:	bd10      	pop	{r4, pc}

08012a5e <__swrite>:
 8012a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a62:	461f      	mov	r7, r3
 8012a64:	898b      	ldrh	r3, [r1, #12]
 8012a66:	05db      	lsls	r3, r3, #23
 8012a68:	4605      	mov	r5, r0
 8012a6a:	460c      	mov	r4, r1
 8012a6c:	4616      	mov	r6, r2
 8012a6e:	d505      	bpl.n	8012a7c <__swrite+0x1e>
 8012a70:	2302      	movs	r3, #2
 8012a72:	2200      	movs	r2, #0
 8012a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a78:	f000 f868 	bl	8012b4c <_lseek_r>
 8012a7c:	89a3      	ldrh	r3, [r4, #12]
 8012a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a86:	81a3      	strh	r3, [r4, #12]
 8012a88:	4632      	mov	r2, r6
 8012a8a:	463b      	mov	r3, r7
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a92:	f000 b817 	b.w	8012ac4 <_write_r>

08012a96 <__sseek>:
 8012a96:	b510      	push	{r4, lr}
 8012a98:	460c      	mov	r4, r1
 8012a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9e:	f000 f855 	bl	8012b4c <_lseek_r>
 8012aa2:	1c43      	adds	r3, r0, #1
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	bf15      	itete	ne
 8012aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ab2:	81a3      	strheq	r3, [r4, #12]
 8012ab4:	bf18      	it	ne
 8012ab6:	81a3      	strhne	r3, [r4, #12]
 8012ab8:	bd10      	pop	{r4, pc}

08012aba <__sclose>:
 8012aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012abe:	f000 b813 	b.w	8012ae8 <_close_r>
	...

08012ac4 <_write_r>:
 8012ac4:	b538      	push	{r3, r4, r5, lr}
 8012ac6:	4c07      	ldr	r4, [pc, #28]	; (8012ae4 <_write_r+0x20>)
 8012ac8:	4605      	mov	r5, r0
 8012aca:	4608      	mov	r0, r1
 8012acc:	4611      	mov	r1, r2
 8012ace:	2200      	movs	r2, #0
 8012ad0:	6022      	str	r2, [r4, #0]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	f7f9 f85c 	bl	800bb90 <_write>
 8012ad8:	1c43      	adds	r3, r0, #1
 8012ada:	d102      	bne.n	8012ae2 <_write_r+0x1e>
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	b103      	cbz	r3, 8012ae2 <_write_r+0x1e>
 8012ae0:	602b      	str	r3, [r5, #0]
 8012ae2:	bd38      	pop	{r3, r4, r5, pc}
 8012ae4:	20000e60 	.word	0x20000e60

08012ae8 <_close_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	4c06      	ldr	r4, [pc, #24]	; (8012b04 <_close_r+0x1c>)
 8012aec:	2300      	movs	r3, #0
 8012aee:	4605      	mov	r5, r0
 8012af0:	4608      	mov	r0, r1
 8012af2:	6023      	str	r3, [r4, #0]
 8012af4:	f7f5 f9d1 	bl	8007e9a <_close>
 8012af8:	1c43      	adds	r3, r0, #1
 8012afa:	d102      	bne.n	8012b02 <_close_r+0x1a>
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	b103      	cbz	r3, 8012b02 <_close_r+0x1a>
 8012b00:	602b      	str	r3, [r5, #0]
 8012b02:	bd38      	pop	{r3, r4, r5, pc}
 8012b04:	20000e60 	.word	0x20000e60

08012b08 <_fstat_r>:
 8012b08:	b538      	push	{r3, r4, r5, lr}
 8012b0a:	4c07      	ldr	r4, [pc, #28]	; (8012b28 <_fstat_r+0x20>)
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	4605      	mov	r5, r0
 8012b10:	4608      	mov	r0, r1
 8012b12:	4611      	mov	r1, r2
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	f7f5 f9cc 	bl	8007eb2 <_fstat>
 8012b1a:	1c43      	adds	r3, r0, #1
 8012b1c:	d102      	bne.n	8012b24 <_fstat_r+0x1c>
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	b103      	cbz	r3, 8012b24 <_fstat_r+0x1c>
 8012b22:	602b      	str	r3, [r5, #0]
 8012b24:	bd38      	pop	{r3, r4, r5, pc}
 8012b26:	bf00      	nop
 8012b28:	20000e60 	.word	0x20000e60

08012b2c <_isatty_r>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	4c06      	ldr	r4, [pc, #24]	; (8012b48 <_isatty_r+0x1c>)
 8012b30:	2300      	movs	r3, #0
 8012b32:	4605      	mov	r5, r0
 8012b34:	4608      	mov	r0, r1
 8012b36:	6023      	str	r3, [r4, #0]
 8012b38:	f7f5 f9cb 	bl	8007ed2 <_isatty>
 8012b3c:	1c43      	adds	r3, r0, #1
 8012b3e:	d102      	bne.n	8012b46 <_isatty_r+0x1a>
 8012b40:	6823      	ldr	r3, [r4, #0]
 8012b42:	b103      	cbz	r3, 8012b46 <_isatty_r+0x1a>
 8012b44:	602b      	str	r3, [r5, #0]
 8012b46:	bd38      	pop	{r3, r4, r5, pc}
 8012b48:	20000e60 	.word	0x20000e60

08012b4c <_lseek_r>:
 8012b4c:	b538      	push	{r3, r4, r5, lr}
 8012b4e:	4c07      	ldr	r4, [pc, #28]	; (8012b6c <_lseek_r+0x20>)
 8012b50:	4605      	mov	r5, r0
 8012b52:	4608      	mov	r0, r1
 8012b54:	4611      	mov	r1, r2
 8012b56:	2200      	movs	r2, #0
 8012b58:	6022      	str	r2, [r4, #0]
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	f7f5 f9c4 	bl	8007ee8 <_lseek>
 8012b60:	1c43      	adds	r3, r0, #1
 8012b62:	d102      	bne.n	8012b6a <_lseek_r+0x1e>
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	b103      	cbz	r3, 8012b6a <_lseek_r+0x1e>
 8012b68:	602b      	str	r3, [r5, #0]
 8012b6a:	bd38      	pop	{r3, r4, r5, pc}
 8012b6c:	20000e60 	.word	0x20000e60

08012b70 <__ascii_mbtowc>:
 8012b70:	b082      	sub	sp, #8
 8012b72:	b901      	cbnz	r1, 8012b76 <__ascii_mbtowc+0x6>
 8012b74:	a901      	add	r1, sp, #4
 8012b76:	b142      	cbz	r2, 8012b8a <__ascii_mbtowc+0x1a>
 8012b78:	b14b      	cbz	r3, 8012b8e <__ascii_mbtowc+0x1e>
 8012b7a:	7813      	ldrb	r3, [r2, #0]
 8012b7c:	600b      	str	r3, [r1, #0]
 8012b7e:	7812      	ldrb	r2, [r2, #0]
 8012b80:	1c10      	adds	r0, r2, #0
 8012b82:	bf18      	it	ne
 8012b84:	2001      	movne	r0, #1
 8012b86:	b002      	add	sp, #8
 8012b88:	4770      	bx	lr
 8012b8a:	4610      	mov	r0, r2
 8012b8c:	e7fb      	b.n	8012b86 <__ascii_mbtowc+0x16>
 8012b8e:	f06f 0001 	mvn.w	r0, #1
 8012b92:	e7f8      	b.n	8012b86 <__ascii_mbtowc+0x16>

08012b94 <_malloc_usable_size_r>:
 8012b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b98:	1f18      	subs	r0, r3, #4
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	bfbc      	itt	lt
 8012b9e:	580b      	ldrlt	r3, [r1, r0]
 8012ba0:	18c0      	addlt	r0, r0, r3
 8012ba2:	4770      	bx	lr

08012ba4 <_read_r>:
 8012ba4:	b538      	push	{r3, r4, r5, lr}
 8012ba6:	4c07      	ldr	r4, [pc, #28]	; (8012bc4 <_read_r+0x20>)
 8012ba8:	4605      	mov	r5, r0
 8012baa:	4608      	mov	r0, r1
 8012bac:	4611      	mov	r1, r2
 8012bae:	2200      	movs	r2, #0
 8012bb0:	6022      	str	r2, [r4, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	f7f5 f954 	bl	8007e60 <_read>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d102      	bne.n	8012bc2 <_read_r+0x1e>
 8012bbc:	6823      	ldr	r3, [r4, #0]
 8012bbe:	b103      	cbz	r3, 8012bc2 <_read_r+0x1e>
 8012bc0:	602b      	str	r3, [r5, #0]
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	20000e60 	.word	0x20000e60

08012bc8 <__ascii_wctomb>:
 8012bc8:	b149      	cbz	r1, 8012bde <__ascii_wctomb+0x16>
 8012bca:	2aff      	cmp	r2, #255	; 0xff
 8012bcc:	bf85      	ittet	hi
 8012bce:	238a      	movhi	r3, #138	; 0x8a
 8012bd0:	6003      	strhi	r3, [r0, #0]
 8012bd2:	700a      	strbls	r2, [r1, #0]
 8012bd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8012bd8:	bf98      	it	ls
 8012bda:	2001      	movls	r0, #1
 8012bdc:	4770      	bx	lr
 8012bde:	4608      	mov	r0, r1
 8012be0:	4770      	bx	lr
	...

08012be4 <asinhf>:
 8012be4:	b510      	push	{r4, lr}
 8012be6:	ee10 4a10 	vmov	r4, s0
 8012bea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012bee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012bf2:	ed2d 8b04 	vpush	{d8-d9}
 8012bf6:	eeb0 8a40 	vmov.f32	s16, s0
 8012bfa:	db06      	blt.n	8012c0a <asinhf+0x26>
 8012bfc:	ee30 8a00 	vadd.f32	s16, s0, s0
 8012c00:	eeb0 0a48 	vmov.f32	s0, s16
 8012c04:	ecbd 8b04 	vpop	{d8-d9}
 8012c08:	bd10      	pop	{r4, pc}
 8012c0a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8012c0e:	da21      	bge.n	8012c54 <asinhf+0x70>
 8012c10:	eddf 7a26 	vldr	s15, [pc, #152]	; 8012cac <asinhf+0xc8>
 8012c14:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c24:	dcec      	bgt.n	8012c00 <asinhf+0x1c>
 8012c26:	eeb0 0a48 	vmov.f32	s0, s16
 8012c2a:	f000 fbf3 	bl	8013414 <fabsf>
 8012c2e:	ee68 8a08 	vmul.f32	s17, s16, s16
 8012c32:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012c36:	eeb0 9a40 	vmov.f32	s18, s0
 8012c3a:	ee38 0a88 	vadd.f32	s0, s17, s16
 8012c3e:	f001 ff5f 	bl	8014b00 <__ieee754_sqrtf>
 8012c42:	ee30 8a08 	vadd.f32	s16, s0, s16
 8012c46:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8012c4a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8012c4e:	f000 fc93 	bl	8013578 <log1pf>
 8012c52:	e028      	b.n	8012ca6 <asinhf+0xc2>
 8012c54:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8012c58:	dd0c      	ble.n	8012c74 <asinhf+0x90>
 8012c5a:	f000 fbdb 	bl	8013414 <fabsf>
 8012c5e:	f000 fc23 	bl	80134a8 <logf>
 8012c62:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8012cb0 <asinhf+0xcc>
 8012c66:	ee30 8a08 	vadd.f32	s16, s0, s16
 8012c6a:	2c00      	cmp	r4, #0
 8012c6c:	bfd8      	it	le
 8012c6e:	eeb1 8a48 	vnegle.f32	s16, s16
 8012c72:	e7c5      	b.n	8012c00 <asinhf+0x1c>
 8012c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c78:	ddd5      	ble.n	8012c26 <asinhf+0x42>
 8012c7a:	f000 fbcb 	bl	8013414 <fabsf>
 8012c7e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012c82:	eef0 8a40 	vmov.f32	s17, s0
 8012c86:	eeb0 0a49 	vmov.f32	s0, s18
 8012c8a:	eea8 0a08 	vfma.f32	s0, s16, s16
 8012c8e:	f001 ff37 	bl	8014b00 <__ieee754_sqrtf>
 8012c92:	ee70 7a28 	vadd.f32	s15, s0, s17
 8012c96:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8012c9a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012c9e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012ca2:	f000 fc01 	bl	80134a8 <logf>
 8012ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8012caa:	e7de      	b.n	8012c6a <asinhf+0x86>
 8012cac:	7149f2ca 	.word	0x7149f2ca
 8012cb0:	3f317218 	.word	0x3f317218

08012cb4 <atanf>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	ee10 5a10 	vmov	r5, s0
 8012cba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012cbe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012cc2:	eef0 7a40 	vmov.f32	s15, s0
 8012cc6:	db0f      	blt.n	8012ce8 <atanf+0x34>
 8012cc8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012ccc:	dd04      	ble.n	8012cd8 <atanf+0x24>
 8012cce:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8012cd6:	bd38      	pop	{r3, r4, r5, pc}
 8012cd8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8012e0c <atanf+0x158>
 8012cdc:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8012e10 <atanf+0x15c>
 8012ce0:	2d00      	cmp	r5, #0
 8012ce2:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8012ce6:	e7f4      	b.n	8012cd2 <atanf+0x1e>
 8012ce8:	4b4a      	ldr	r3, [pc, #296]	; (8012e14 <atanf+0x160>)
 8012cea:	429c      	cmp	r4, r3
 8012cec:	dc10      	bgt.n	8012d10 <atanf+0x5c>
 8012cee:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012cf2:	da0a      	bge.n	8012d0a <atanf+0x56>
 8012cf4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012e18 <atanf+0x164>
 8012cf8:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d00:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d08:	dce3      	bgt.n	8012cd2 <atanf+0x1e>
 8012d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d0e:	e013      	b.n	8012d38 <atanf+0x84>
 8012d10:	f000 fb80 	bl	8013414 <fabsf>
 8012d14:	4b41      	ldr	r3, [pc, #260]	; (8012e1c <atanf+0x168>)
 8012d16:	429c      	cmp	r4, r3
 8012d18:	dc4f      	bgt.n	8012dba <atanf+0x106>
 8012d1a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012d1e:	429c      	cmp	r4, r3
 8012d20:	dc41      	bgt.n	8012da6 <atanf+0xf2>
 8012d22:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012d26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012d2a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012d2e:	2300      	movs	r3, #0
 8012d30:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012d38:	1c5a      	adds	r2, r3, #1
 8012d3a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012d3e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012e20 <atanf+0x16c>
 8012d42:	eddf 5a38 	vldr	s11, [pc, #224]	; 8012e24 <atanf+0x170>
 8012d46:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8012e28 <atanf+0x174>
 8012d4a:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012d4e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012d52:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012e2c <atanf+0x178>
 8012d56:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012d5a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012e30 <atanf+0x17c>
 8012d5e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012d62:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012e34 <atanf+0x180>
 8012d66:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012d6a:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012e38 <atanf+0x184>
 8012d6e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012d72:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012e3c <atanf+0x188>
 8012d76:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012d7a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012e40 <atanf+0x18c>
 8012d7e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012d82:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8012e44 <atanf+0x190>
 8012d86:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012d8a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8012e48 <atanf+0x194>
 8012d8e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012d92:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012d96:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d9e:	d121      	bne.n	8012de4 <atanf+0x130>
 8012da0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012da4:	e795      	b.n	8012cd2 <atanf+0x1e>
 8012da6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012daa:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012dae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012db2:	2301      	movs	r3, #1
 8012db4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012db8:	e7be      	b.n	8012d38 <atanf+0x84>
 8012dba:	4b24      	ldr	r3, [pc, #144]	; (8012e4c <atanf+0x198>)
 8012dbc:	429c      	cmp	r4, r3
 8012dbe:	dc0b      	bgt.n	8012dd8 <atanf+0x124>
 8012dc0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dc8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012dcc:	2302      	movs	r3, #2
 8012dce:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dd6:	e7af      	b.n	8012d38 <atanf+0x84>
 8012dd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012ddc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012de0:	2303      	movs	r3, #3
 8012de2:	e7a9      	b.n	8012d38 <atanf+0x84>
 8012de4:	4a1a      	ldr	r2, [pc, #104]	; (8012e50 <atanf+0x19c>)
 8012de6:	491b      	ldr	r1, [pc, #108]	; (8012e54 <atanf+0x1a0>)
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	441a      	add	r2, r3
 8012dec:	440b      	add	r3, r1
 8012dee:	edd3 6a00 	vldr	s13, [r3]
 8012df2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012df6:	2d00      	cmp	r5, #0
 8012df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dfc:	ed92 7a00 	vldr	s14, [r2]
 8012e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e04:	bfb8      	it	lt
 8012e06:	eef1 7a67 	vneglt.f32	s15, s15
 8012e0a:	e762      	b.n	8012cd2 <atanf+0x1e>
 8012e0c:	bfc90fdb 	.word	0xbfc90fdb
 8012e10:	3fc90fdb 	.word	0x3fc90fdb
 8012e14:	3edfffff 	.word	0x3edfffff
 8012e18:	7149f2ca 	.word	0x7149f2ca
 8012e1c:	3f97ffff 	.word	0x3f97ffff
 8012e20:	3c8569d7 	.word	0x3c8569d7
 8012e24:	3d4bda59 	.word	0x3d4bda59
 8012e28:	bd6ef16b 	.word	0xbd6ef16b
 8012e2c:	3d886b35 	.word	0x3d886b35
 8012e30:	3dba2e6e 	.word	0x3dba2e6e
 8012e34:	3e124925 	.word	0x3e124925
 8012e38:	3eaaaaab 	.word	0x3eaaaaab
 8012e3c:	bd15a221 	.word	0xbd15a221
 8012e40:	bd9d8795 	.word	0xbd9d8795
 8012e44:	bde38e38 	.word	0xbde38e38
 8012e48:	be4ccccd 	.word	0xbe4ccccd
 8012e4c:	401bffff 	.word	0x401bffff
 8012e50:	080174c0 	.word	0x080174c0
 8012e54:	080174d0 	.word	0x080174d0

08012e58 <ceilf>:
 8012e58:	ee10 3a10 	vmov	r3, s0
 8012e5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012e60:	0dca      	lsrs	r2, r1, #23
 8012e62:	3a7f      	subs	r2, #127	; 0x7f
 8012e64:	2a16      	cmp	r2, #22
 8012e66:	dc2a      	bgt.n	8012ebe <ceilf+0x66>
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	da11      	bge.n	8012e90 <ceilf+0x38>
 8012e6c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012ed0 <ceilf+0x78>
 8012e70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7c:	dd05      	ble.n	8012e8a <ceilf+0x32>
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	db23      	blt.n	8012eca <ceilf+0x72>
 8012e82:	2900      	cmp	r1, #0
 8012e84:	bf18      	it	ne
 8012e86:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8012e8a:	ee00 3a10 	vmov	s0, r3
 8012e8e:	4770      	bx	lr
 8012e90:	4910      	ldr	r1, [pc, #64]	; (8012ed4 <ceilf+0x7c>)
 8012e92:	4111      	asrs	r1, r2
 8012e94:	420b      	tst	r3, r1
 8012e96:	d0fa      	beq.n	8012e8e <ceilf+0x36>
 8012e98:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012ed0 <ceilf+0x78>
 8012e9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ea0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea8:	ddef      	ble.n	8012e8a <ceilf+0x32>
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	bfc2      	ittt	gt
 8012eae:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8012eb2:	fa40 f202 	asrgt.w	r2, r0, r2
 8012eb6:	189b      	addgt	r3, r3, r2
 8012eb8:	ea23 0301 	bic.w	r3, r3, r1
 8012ebc:	e7e5      	b.n	8012e8a <ceilf+0x32>
 8012ebe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012ec2:	d3e4      	bcc.n	8012e8e <ceilf+0x36>
 8012ec4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012ec8:	4770      	bx	lr
 8012eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ece:	e7dc      	b.n	8012e8a <ceilf+0x32>
 8012ed0:	7149f2ca 	.word	0x7149f2ca
 8012ed4:	007fffff 	.word	0x007fffff

08012ed8 <cosf>:
 8012ed8:	ee10 3a10 	vmov	r3, s0
 8012edc:	b507      	push	{r0, r1, r2, lr}
 8012ede:	4a1c      	ldr	r2, [pc, #112]	; (8012f50 <cosf+0x78>)
 8012ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	dc04      	bgt.n	8012ef2 <cosf+0x1a>
 8012ee8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8012f54 <cosf+0x7c>
 8012eec:	f001 fe0c 	bl	8014b08 <__kernel_cosf>
 8012ef0:	e004      	b.n	8012efc <cosf+0x24>
 8012ef2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ef6:	db04      	blt.n	8012f02 <cosf+0x2a>
 8012ef8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012efc:	b003      	add	sp, #12
 8012efe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f02:	4668      	mov	r0, sp
 8012f04:	f001 fc62 	bl	80147cc <__ieee754_rem_pio2f>
 8012f08:	f000 0003 	and.w	r0, r0, #3
 8012f0c:	2801      	cmp	r0, #1
 8012f0e:	d007      	beq.n	8012f20 <cosf+0x48>
 8012f10:	2802      	cmp	r0, #2
 8012f12:	d00e      	beq.n	8012f32 <cosf+0x5a>
 8012f14:	b9a0      	cbnz	r0, 8012f40 <cosf+0x68>
 8012f16:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f1a:	ed9d 0a00 	vldr	s0, [sp]
 8012f1e:	e7e5      	b.n	8012eec <cosf+0x14>
 8012f20:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f24:	ed9d 0a00 	vldr	s0, [sp]
 8012f28:	f002 f8ce 	bl	80150c8 <__kernel_sinf>
 8012f2c:	eeb1 0a40 	vneg.f32	s0, s0
 8012f30:	e7e4      	b.n	8012efc <cosf+0x24>
 8012f32:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f36:	ed9d 0a00 	vldr	s0, [sp]
 8012f3a:	f001 fde5 	bl	8014b08 <__kernel_cosf>
 8012f3e:	e7f5      	b.n	8012f2c <cosf+0x54>
 8012f40:	2001      	movs	r0, #1
 8012f42:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f46:	ed9d 0a00 	vldr	s0, [sp]
 8012f4a:	f002 f8bd 	bl	80150c8 <__kernel_sinf>
 8012f4e:	e7d5      	b.n	8012efc <cosf+0x24>
 8012f50:	3f490fd8 	.word	0x3f490fd8
 8012f54:	00000000 	.word	0x00000000

08012f58 <erff>:
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	ee10 4a10 	vmov	r4, s0
 8012f5e:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 8012f62:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012f66:	ed2d 8b06 	vpush	{d8-d10}
 8012f6a:	eef0 7a40 	vmov.f32	s15, s0
 8012f6e:	db12      	blt.n	8012f96 <erff+0x3e>
 8012f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012f78:	0fe4      	lsrs	r4, r4, #31
 8012f7a:	0064      	lsls	r4, r4, #1
 8012f7c:	f1c4 0301 	rsb	r3, r4, #1
 8012f80:	ee00 3a10 	vmov	s0, r3
 8012f84:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012f88:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012f8c:	ecbd 8b06 	vpop	{d8-d10}
 8012f90:	eeb0 0a67 	vmov.f32	s0, s15
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	4ba4      	ldr	r3, [pc, #656]	; (8013228 <erff+0x2d0>)
 8012f98:	429d      	cmp	r5, r3
 8012f9a:	dc4a      	bgt.n	8013032 <erff+0xda>
 8012f9c:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8012fa0:	da16      	bge.n	8012fd0 <erff+0x78>
 8012fa2:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8012fa6:	da0e      	bge.n	8012fc6 <erff+0x6e>
 8012fa8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 801322c <erff+0x2d4>
 8012fac:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012fb0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8012fb4:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012fb8:	eef0 7a40 	vmov.f32	s15, s0
 8012fbc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012fc0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012fc4:	e7e2      	b.n	8012f8c <erff+0x34>
 8012fc6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8013230 <erff+0x2d8>
 8012fca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012fce:	e7dd      	b.n	8012f8c <erff+0x34>
 8012fd0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012fd4:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8013234 <erff+0x2dc>
 8012fd8:	eddf 6a97 	vldr	s13, [pc, #604]	; 8013238 <erff+0x2e0>
 8012fdc:	eddf 5a97 	vldr	s11, [pc, #604]	; 801323c <erff+0x2e4>
 8012fe0:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012fe4:	ed9f 6a96 	vldr	s12, [pc, #600]	; 8013240 <erff+0x2e8>
 8012fe8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012fec:	eddf 6a95 	vldr	s13, [pc, #596]	; 8013244 <erff+0x2ec>
 8012ff0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012ff4:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8013230 <erff+0x2d8>
 8012ff8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012ffc:	eddf 6a92 	vldr	s13, [pc, #584]	; 8013248 <erff+0x2f0>
 8013000:	eee7 6a25 	vfma.f32	s13, s14, s11
 8013004:	eddf 5a91 	vldr	s11, [pc, #580]	; 801324c <erff+0x2f4>
 8013008:	eee6 5a87 	vfma.f32	s11, s13, s14
 801300c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013250 <erff+0x2f8>
 8013010:	eee5 6a87 	vfma.f32	s13, s11, s14
 8013014:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8013254 <erff+0x2fc>
 8013018:	eee6 5a87 	vfma.f32	s11, s13, s14
 801301c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013020:	eee5 6a87 	vfma.f32	s13, s11, s14
 8013024:	eeb0 7a66 	vmov.f32	s14, s13
 8013028:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801302c:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013030:	e7ac      	b.n	8012f8c <erff+0x34>
 8013032:	4b89      	ldr	r3, [pc, #548]	; (8013258 <erff+0x300>)
 8013034:	429d      	cmp	r5, r3
 8013036:	dc44      	bgt.n	80130c2 <erff+0x16a>
 8013038:	f000 f9ec 	bl	8013414 <fabsf>
 801303c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013040:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013044:	ed9f 7a85 	vldr	s14, [pc, #532]	; 801325c <erff+0x304>
 8013048:	eddf 6a85 	vldr	s13, [pc, #532]	; 8013260 <erff+0x308>
 801304c:	ed9f 6a85 	vldr	s12, [pc, #532]	; 8013264 <erff+0x30c>
 8013050:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013054:	2c00      	cmp	r4, #0
 8013056:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8013268 <erff+0x310>
 801305a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801305e:	eddf 6a83 	vldr	s13, [pc, #524]	; 801326c <erff+0x314>
 8013062:	eee7 6a00 	vfma.f32	s13, s14, s0
 8013066:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8013270 <erff+0x318>
 801306a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801306e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8013274 <erff+0x31c>
 8013072:	eee7 6a00 	vfma.f32	s13, s14, s0
 8013076:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8013278 <erff+0x320>
 801307a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801307e:	eddf 6a7f 	vldr	s13, [pc, #508]	; 801327c <erff+0x324>
 8013082:	eee0 6a06 	vfma.f32	s13, s0, s12
 8013086:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 8013280 <erff+0x328>
 801308a:	eea6 6a80 	vfma.f32	s12, s13, s0
 801308e:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8013284 <erff+0x32c>
 8013092:	eee6 6a00 	vfma.f32	s13, s12, s0
 8013096:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 8013288 <erff+0x330>
 801309a:	eea6 6a80 	vfma.f32	s12, s13, s0
 801309e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 801328c <erff+0x334>
 80130a2:	eee6 6a00 	vfma.f32	s13, s12, s0
 80130a6:	eee6 7a80 	vfma.f32	s15, s13, s0
 80130aa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80130ae:	bfab      	itete	ge
 80130b0:	eddf 7a77 	vldrge	s15, [pc, #476]	; 8013290 <erff+0x338>
 80130b4:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 8013294 <erff+0x33c>
 80130b8:	ee70 7a27 	vaddge.f32	s15, s0, s15
 80130bc:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 80130c0:	e764      	b.n	8012f8c <erff+0x34>
 80130c2:	4b75      	ldr	r3, [pc, #468]	; (8013298 <erff+0x340>)
 80130c4:	429d      	cmp	r5, r3
 80130c6:	dd07      	ble.n	80130d8 <erff+0x180>
 80130c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80130cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80130d0:	2c00      	cmp	r4, #0
 80130d2:	fe60 7a27 	vselge.f32	s15, s0, s15
 80130d6:	e759      	b.n	8012f8c <erff+0x34>
 80130d8:	f000 f99c 	bl	8013414 <fabsf>
 80130dc:	4b6f      	ldr	r3, [pc, #444]	; (801329c <erff+0x344>)
 80130de:	ee60 7a00 	vmul.f32	s15, s0, s0
 80130e2:	eeb0 9a40 	vmov.f32	s18, s0
 80130e6:	429d      	cmp	r5, r3
 80130e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80130ec:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80130f0:	eef0 8a40 	vmov.f32	s17, s0
 80130f4:	dc64      	bgt.n	80131c0 <erff+0x268>
 80130f6:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80132a0 <erff+0x348>
 80130fa:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80132a4 <erff+0x34c>
 80130fe:	eddf 9a6a 	vldr	s19, [pc, #424]	; 80132a8 <erff+0x350>
 8013102:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013106:	eddf 7a69 	vldr	s15, [pc, #420]	; 80132ac <erff+0x354>
 801310a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801310e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80132b0 <erff+0x358>
 8013112:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013116:	eddf 7a67 	vldr	s15, [pc, #412]	; 80132b4 <erff+0x35c>
 801311a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801311e:	eddf 6a66 	vldr	s13, [pc, #408]	; 80132b8 <erff+0x360>
 8013122:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013126:	eddf 7a65 	vldr	s15, [pc, #404]	; 80132bc <erff+0x364>
 801312a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801312e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80132c0 <erff+0x368>
 8013132:	eee7 9a87 	vfma.f32	s19, s15, s14
 8013136:	eddf 7a63 	vldr	s15, [pc, #396]	; 80132c4 <erff+0x36c>
 801313a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801313e:	eddf 6a62 	vldr	s13, [pc, #392]	; 80132c8 <erff+0x370>
 8013142:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013146:	eddf 7a61 	vldr	s15, [pc, #388]	; 80132cc <erff+0x374>
 801314a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801314e:	eddf 6a60 	vldr	s13, [pc, #384]	; 80132d0 <erff+0x378>
 8013152:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013156:	eddf 7a5f 	vldr	s15, [pc, #380]	; 80132d4 <erff+0x37c>
 801315a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801315e:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80132d8 <erff+0x380>
 8013162:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013166:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80132dc <erff+0x384>
 801316a:	ee19 3a10 	vmov	r3, s18
 801316e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013172:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013176:	f023 030f 	bic.w	r3, r3, #15
 801317a:	ee08 3a10 	vmov	s16, r3
 801317e:	eef0 aa68 	vmov.f32	s21, s17
 8013182:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 8013186:	eee7 aa87 	vfma.f32	s21, s15, s14
 801318a:	eea8 0a48 	vfms.f32	s0, s16, s16
 801318e:	f000 f8c3 	bl	8013318 <expf>
 8013192:	eeb0 aa40 	vmov.f32	s20, s0
 8013196:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 801319a:	ee78 7a49 	vsub.f32	s15, s16, s18
 801319e:	ee38 8a09 	vadd.f32	s16, s16, s18
 80131a2:	eea7 0a88 	vfma.f32	s0, s15, s16
 80131a6:	f000 f8b7 	bl	8013318 <expf>
 80131aa:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80131ae:	2c00      	cmp	r4, #0
 80131b0:	eec0 7a09 	vdiv.f32	s15, s0, s18
 80131b4:	bfac      	ite	ge
 80131b6:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 80131ba:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 80131be:	e6e5      	b.n	8012f8c <erff+0x34>
 80131c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80132e0 <erff+0x388>
 80131c4:	eddf 7a47 	vldr	s15, [pc, #284]	; 80132e4 <erff+0x38c>
 80131c8:	eddf 9a47 	vldr	s19, [pc, #284]	; 80132e8 <erff+0x390>
 80131cc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80131d0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80132ec <erff+0x394>
 80131d4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80131d8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80132f0 <erff+0x398>
 80131dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80131e0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80132f4 <erff+0x39c>
 80131e4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80131e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80132f8 <erff+0x3a0>
 80131ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80131f0:	eddf 6a42 	vldr	s13, [pc, #264]	; 80132fc <erff+0x3a4>
 80131f4:	eee7 9a87 	vfma.f32	s19, s15, s14
 80131f8:	eddf 7a41 	vldr	s15, [pc, #260]	; 8013300 <erff+0x3a8>
 80131fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013200:	eddf 7a40 	vldr	s15, [pc, #256]	; 8013304 <erff+0x3ac>
 8013204:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013208:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8013308 <erff+0x3b0>
 801320c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013210:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801330c <erff+0x3b4>
 8013214:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013218:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013310 <erff+0x3b8>
 801321c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013220:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8013314 <erff+0x3bc>
 8013224:	e7a1      	b.n	801316a <erff+0x212>
 8013226:	bf00      	nop
 8013228:	3f57ffff 	.word	0x3f57ffff
 801322c:	3f8375d4 	.word	0x3f8375d4
 8013230:	3e0375d4 	.word	0x3e0375d4
 8013234:	b7c756b1 	.word	0xb7c756b1
 8013238:	bbbd1489 	.word	0xbbbd1489
 801323c:	b684e21a 	.word	0xb684e21a
 8013240:	bce9528f 	.word	0xbce9528f
 8013244:	bea66beb 	.word	0xbea66beb
 8013248:	390aee49 	.word	0x390aee49
 801324c:	3ba68116 	.word	0x3ba68116
 8013250:	3d852a63 	.word	0x3d852a63
 8013254:	3ecbbbce 	.word	0x3ecbbbce
 8013258:	3f9fffff 	.word	0x3f9fffff
 801325c:	bb0df9c0 	.word	0xbb0df9c0
 8013260:	3d1151b3 	.word	0x3d1151b3
 8013264:	3c445aa3 	.word	0x3c445aa3
 8013268:	bde31cc2 	.word	0xbde31cc2
 801326c:	3ea2fe54 	.word	0x3ea2fe54
 8013270:	bebe9208 	.word	0xbebe9208
 8013274:	3ed46805 	.word	0x3ed46805
 8013278:	bb1acdc6 	.word	0xbb1acdc6
 801327c:	3c5f6e13 	.word	0x3c5f6e13
 8013280:	3e013307 	.word	0x3e013307
 8013284:	3d931ae7 	.word	0x3d931ae7
 8013288:	3f0a5785 	.word	0x3f0a5785
 801328c:	3dd9f331 	.word	0x3dd9f331
 8013290:	3f58560b 	.word	0x3f58560b
 8013294:	bf58560b 	.word	0xbf58560b
 8013298:	40bfffff 	.word	0x40bfffff
 801329c:	4036db6d 	.word	0x4036db6d
 80132a0:	c11d077e 	.word	0xc11d077e
 80132a4:	c2a2932b 	.word	0xc2a2932b
 80132a8:	bc21a093 	.word	0xbc21a093
 80132ac:	c3389ae7 	.word	0xc3389ae7
 80132b0:	c322658c 	.word	0xc322658c
 80132b4:	c2798057 	.word	0xc2798057
 80132b8:	c128f022 	.word	0xc128f022
 80132bc:	bf31a0b7 	.word	0xbf31a0b7
 80132c0:	bd777f97 	.word	0xbd777f97
 80132c4:	40d23f7c 	.word	0x40d23f7c
 80132c8:	42d9451f 	.word	0x42d9451f
 80132cc:	43d6810b 	.word	0x43d6810b
 80132d0:	442158c9 	.word	0x442158c9
 80132d4:	43d9486f 	.word	0x43d9486f
 80132d8:	4309a863 	.word	0x4309a863
 80132dc:	419d35ce 	.word	0x419d35ce
 80132e0:	c3f1c275 	.word	0xc3f1c275
 80132e4:	c480230b 	.word	0xc480230b
 80132e8:	bc21a092 	.word	0xbc21a092
 80132ec:	c41f6441 	.word	0xc41f6441
 80132f0:	c320a2ea 	.word	0xc320a2ea
 80132f4:	c18e104b 	.word	0xc18e104b
 80132f8:	bf4c9dd4 	.word	0xbf4c9dd4
 80132fc:	43ed43a7 	.word	0x43ed43a7
 8013300:	c1b38712 	.word	0xc1b38712
 8013304:	451f90ce 	.word	0x451f90ce
 8013308:	4547fdbb 	.word	0x4547fdbb
 801330c:	44c01759 	.word	0x44c01759
 8013310:	43a2e571 	.word	0x43a2e571
 8013314:	41f2b459 	.word	0x41f2b459

08013318 <expf>:
 8013318:	ee10 2a10 	vmov	r2, s0
 801331c:	f240 412a 	movw	r1, #1066	; 0x42a
 8013320:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8013324:	428b      	cmp	r3, r1
 8013326:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 801332a:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801332e:	d92e      	bls.n	801338e <expf+0x76>
 8013330:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8013334:	d061      	beq.n	80133fa <expf+0xe2>
 8013336:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801333a:	d304      	bcc.n	8013346 <expf+0x2e>
 801333c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013340:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8013344:	4770      	bx	lr
 8013346:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8013400 <expf+0xe8>
 801334a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013352:	dd04      	ble.n	801335e <expf+0x46>
 8013354:	2000      	movs	r0, #0
 8013356:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801335a:	f002 b807 	b.w	801536c <__math_oflowf>
 801335e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8013404 <expf+0xec>
 8013362:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801336a:	d504      	bpl.n	8013376 <expf+0x5e>
 801336c:	2000      	movs	r0, #0
 801336e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8013372:	f001 bfef 	b.w	8015354 <__math_uflowf>
 8013376:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013408 <expf+0xf0>
 801337a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013382:	d504      	bpl.n	801338e <expf+0x76>
 8013384:	2000      	movs	r0, #0
 8013386:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801338a:	f001 bfe9 	b.w	8015360 <__math_may_uflowf>
 801338e:	491f      	ldr	r1, [pc, #124]	; (801340c <expf+0xf4>)
 8013390:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013394:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 8013398:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 801339c:	eeb0 4b47 	vmov.f64	d4, d7
 80133a0:	eea5 4b06 	vfma.f64	d4, d5, d6
 80133a4:	ec55 4b14 	vmov	r4, r5, d4
 80133a8:	ee34 7b47 	vsub.f64	d7, d4, d7
 80133ac:	f004 021f 	and.w	r2, r4, #31
 80133b0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80133b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80133b8:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 80133bc:	e9d2 4500 	ldrd	r4, r5, [r2]
 80133c0:	eea6 0b07 	vfma.f64	d0, d6, d7
 80133c4:	ee14 0a10 	vmov	r0, s8
 80133c8:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 80133cc:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 80133d0:	f04f 0b00 	mov.w	fp, #0
 80133d4:	eb1b 0204 	adds.w	r2, fp, r4
 80133d8:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 80133dc:	eb4c 0305 	adc.w	r3, ip, r5
 80133e0:	eea5 6b07 	vfma.f64	d6, d5, d7
 80133e4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80133e8:	eea6 0b07 	vfma.f64	d0, d6, d7
 80133ec:	ec43 2b17 	vmov	d7, r2, r3
 80133f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80133f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80133f8:	e7a2      	b.n	8013340 <expf+0x28>
 80133fa:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8013410 <expf+0xf8>
 80133fe:	e79f      	b.n	8013340 <expf+0x28>
 8013400:	42b17217 	.word	0x42b17217
 8013404:	c2cff1b4 	.word	0xc2cff1b4
 8013408:	c2ce8ecf 	.word	0xc2ce8ecf
 801340c:	080174e0 	.word	0x080174e0
 8013410:	00000000 	.word	0x00000000

08013414 <fabsf>:
 8013414:	ee10 3a10 	vmov	r3, s0
 8013418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801341c:	ee00 3a10 	vmov	s0, r3
 8013420:	4770      	bx	lr
	...

08013424 <floorf>:
 8013424:	ee10 3a10 	vmov	r3, s0
 8013428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801342c:	0dca      	lsrs	r2, r1, #23
 801342e:	3a7f      	subs	r2, #127	; 0x7f
 8013430:	2a16      	cmp	r2, #22
 8013432:	dc2a      	bgt.n	801348a <floorf+0x66>
 8013434:	2a00      	cmp	r2, #0
 8013436:	da11      	bge.n	801345c <floorf+0x38>
 8013438:	eddf 7a18 	vldr	s15, [pc, #96]	; 801349c <floorf+0x78>
 801343c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013440:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013448:	dd05      	ble.n	8013456 <floorf+0x32>
 801344a:	2b00      	cmp	r3, #0
 801344c:	da23      	bge.n	8013496 <floorf+0x72>
 801344e:	4a14      	ldr	r2, [pc, #80]	; (80134a0 <floorf+0x7c>)
 8013450:	2900      	cmp	r1, #0
 8013452:	bf18      	it	ne
 8013454:	4613      	movne	r3, r2
 8013456:	ee00 3a10 	vmov	s0, r3
 801345a:	4770      	bx	lr
 801345c:	4911      	ldr	r1, [pc, #68]	; (80134a4 <floorf+0x80>)
 801345e:	4111      	asrs	r1, r2
 8013460:	420b      	tst	r3, r1
 8013462:	d0fa      	beq.n	801345a <floorf+0x36>
 8013464:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801349c <floorf+0x78>
 8013468:	ee30 0a27 	vadd.f32	s0, s0, s15
 801346c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013474:	ddef      	ble.n	8013456 <floorf+0x32>
 8013476:	2b00      	cmp	r3, #0
 8013478:	bfbe      	ittt	lt
 801347a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801347e:	fa40 f202 	asrlt.w	r2, r0, r2
 8013482:	189b      	addlt	r3, r3, r2
 8013484:	ea23 0301 	bic.w	r3, r3, r1
 8013488:	e7e5      	b.n	8013456 <floorf+0x32>
 801348a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801348e:	d3e4      	bcc.n	801345a <floorf+0x36>
 8013490:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013494:	4770      	bx	lr
 8013496:	2300      	movs	r3, #0
 8013498:	e7dd      	b.n	8013456 <floorf+0x32>
 801349a:	bf00      	nop
 801349c:	7149f2ca 	.word	0x7149f2ca
 80134a0:	bf800000 	.word	0xbf800000
 80134a4:	007fffff 	.word	0x007fffff

080134a8 <logf>:
 80134a8:	ee10 3a10 	vmov	r3, s0
 80134ac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80134b0:	b410      	push	{r4}
 80134b2:	d057      	beq.n	8013564 <logf+0xbc>
 80134b4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80134b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80134bc:	d31a      	bcc.n	80134f4 <logf+0x4c>
 80134be:	005a      	lsls	r2, r3, #1
 80134c0:	d104      	bne.n	80134cc <logf+0x24>
 80134c2:	2001      	movs	r0, #1
 80134c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134c8:	f001 bf56 	b.w	8015378 <__math_divzerof>
 80134cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80134d0:	d045      	beq.n	801355e <logf+0xb6>
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	db02      	blt.n	80134dc <logf+0x34>
 80134d6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80134da:	d303      	bcc.n	80134e4 <logf+0x3c>
 80134dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134e0:	f001 bf5a 	b.w	8015398 <__math_invalidf>
 80134e4:	eddf 7a21 	vldr	s15, [pc, #132]	; 801356c <logf+0xc4>
 80134e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80134ec:	ee10 3a10 	vmov	r3, s0
 80134f0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80134f4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80134f8:	491d      	ldr	r1, [pc, #116]	; (8013570 <logf+0xc8>)
 80134fa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80134fe:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8013502:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8013506:	0dd4      	lsrs	r4, r2, #23
 8013508:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801350c:	05e4      	lsls	r4, r4, #23
 801350e:	ed90 5b00 	vldr	d5, [r0]
 8013512:	1b1b      	subs	r3, r3, r4
 8013514:	ee07 3a90 	vmov	s15, r3
 8013518:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801351c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013520:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8013524:	ee26 3b06 	vmul.f64	d3, d6, d6
 8013528:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801352c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013530:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8013534:	15d2      	asrs	r2, r2, #23
 8013536:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 801353a:	eea5 7b03 	vfma.f64	d7, d5, d3
 801353e:	eeb0 5b47 	vmov.f64	d5, d7
 8013542:	ed90 0b02 	vldr	d0, [r0, #8]
 8013546:	ee07 2a90 	vmov	s15, r2
 801354a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801354e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8013552:	ee30 0b06 	vadd.f64	d0, d0, d6
 8013556:	eea3 0b05 	vfma.f64	d0, d3, d5
 801355a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801355e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013562:	4770      	bx	lr
 8013564:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013574 <logf+0xcc>
 8013568:	e7f9      	b.n	801355e <logf+0xb6>
 801356a:	bf00      	nop
 801356c:	4b000000 	.word	0x4b000000
 8013570:	08017628 	.word	0x08017628
 8013574:	00000000 	.word	0x00000000

08013578 <log1pf>:
 8013578:	ee10 2a10 	vmov	r2, s0
 801357c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013580:	db02      	blt.n	8013588 <log1pf+0x10>
 8013582:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013586:	4770      	bx	lr
 8013588:	4b70      	ldr	r3, [pc, #448]	; (801374c <log1pf+0x1d4>)
 801358a:	429a      	cmp	r2, r3
 801358c:	dc78      	bgt.n	8013680 <log1pf+0x108>
 801358e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013592:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013596:	db12      	blt.n	80135be <log1pf+0x46>
 8013598:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801359c:	eeb4 0a67 	vcmp.f32	s0, s15
 80135a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a4:	bf05      	ittet	eq
 80135a6:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 8013750 <log1pf+0x1d8>
 80135aa:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 8013754 <log1pf+0x1dc>
 80135ae:	ee70 7a40 	vsubne.f32	s15, s0, s0
 80135b2:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 80135b6:	bf18      	it	ne
 80135b8:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 80135bc:	4770      	bx	lr
 80135be:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 80135c2:	da13      	bge.n	80135ec <log1pf+0x74>
 80135c4:	eddf 7a64 	vldr	s15, [pc, #400]	; 8013758 <log1pf+0x1e0>
 80135c8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80135cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80135d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d4:	dd03      	ble.n	80135de <log1pf+0x66>
 80135d6:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 80135da:	f2c0 80b6 	blt.w	801374a <log1pf+0x1d2>
 80135de:	ee20 7a40 	vnmul.f32	s14, s0, s0
 80135e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80135e6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80135ea:	4770      	bx	lr
 80135ec:	4b5b      	ldr	r3, [pc, #364]	; (801375c <log1pf+0x1e4>)
 80135ee:	441a      	add	r2, r3
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d84d      	bhi.n	8013690 <log1pf+0x118>
 80135f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80135f8:	ee30 7a27 	vadd.f32	s14, s0, s15
 80135fc:	ee17 2a10 	vmov	r2, s14
 8013600:	15d3      	asrs	r3, r2, #23
 8013602:	3b7f      	subs	r3, #127	; 0x7f
 8013604:	2b00      	cmp	r3, #0
 8013606:	bfcb      	itete	gt
 8013608:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 801360c:	ee77 7a67 	vsuble.f32	s15, s14, s15
 8013610:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 8013614:	ee30 0a67 	vsuble.f32	s0, s0, s15
 8013618:	eec0 6a07 	vdiv.f32	s13, s0, s14
 801361c:	4950      	ldr	r1, [pc, #320]	; (8013760 <log1pf+0x1e8>)
 801361e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8013622:	428a      	cmp	r2, r1
 8013624:	bfc9      	itett	gt
 8013626:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 801362a:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 801362e:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 8013632:	3301      	addgt	r3, #1
 8013634:	bfc8      	it	gt
 8013636:	1092      	asrgt	r2, r2, #2
 8013638:	ee07 1a90 	vmov	s15, r1
 801363c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013640:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013644:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013648:	ee20 7a07 	vmul.f32	s14, s0, s14
 801364c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013650:	2a00      	cmp	r2, #0
 8013652:	d13d      	bne.n	80136d0 <log1pf+0x158>
 8013654:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801365c:	d11b      	bne.n	8013696 <log1pf+0x11e>
 801365e:	2b00      	cmp	r3, #0
 8013660:	d071      	beq.n	8013746 <log1pf+0x1ce>
 8013662:	ee07 3a90 	vmov	s15, r3
 8013666:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8013764 <log1pf+0x1ec>
 801366a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801366e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013672:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8013768 <log1pf+0x1f0>
 8013676:	eeb0 0a66 	vmov.f32	s0, s13
 801367a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801367e:	4770      	bx	lr
 8013680:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 8013684:	dbb6      	blt.n	80135f4 <log1pf+0x7c>
 8013686:	15d3      	asrs	r3, r2, #23
 8013688:	3b7f      	subs	r3, #127	; 0x7f
 801368a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013754 <log1pf+0x1dc>
 801368e:	e7c5      	b.n	801361c <log1pf+0xa4>
 8013690:	2201      	movs	r2, #1
 8013692:	2300      	movs	r3, #0
 8013694:	e7d6      	b.n	8013644 <log1pf+0xcc>
 8013696:	eddf 7a35 	vldr	s15, [pc, #212]	; 801376c <log1pf+0x1f4>
 801369a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801369e:	eea0 6a67 	vfms.f32	s12, s0, s15
 80136a2:	ee26 6a07 	vmul.f32	s12, s12, s14
 80136a6:	b913      	cbnz	r3, 80136ae <log1pf+0x136>
 80136a8:	ee30 0a46 	vsub.f32	s0, s0, s12
 80136ac:	4770      	bx	lr
 80136ae:	ee07 3a90 	vmov	s15, r3
 80136b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8013764 <log1pf+0x1ec>
 80136b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136ba:	eee7 6a87 	vfma.f32	s13, s15, s14
 80136be:	ee36 7a66 	vsub.f32	s14, s12, s13
 80136c2:	ee37 0a40 	vsub.f32	s0, s14, s0
 80136c6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013768 <log1pf+0x1f0>
 80136ca:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80136ce:	4770      	bx	lr
 80136d0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80136d4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80136d8:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8013770 <log1pf+0x1f8>
 80136dc:	ed9f 5a25 	vldr	s10, [pc, #148]	; 8013774 <log1pf+0x1fc>
 80136e0:	eec0 5a27 	vdiv.f32	s11, s0, s15
 80136e4:	ee65 7aa5 	vmul.f32	s15, s11, s11
 80136e8:	eea7 5a86 	vfma.f32	s10, s15, s12
 80136ec:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8013778 <log1pf+0x200>
 80136f0:	eea5 6a27 	vfma.f32	s12, s10, s15
 80136f4:	ed9f 5a21 	vldr	s10, [pc, #132]	; 801377c <log1pf+0x204>
 80136f8:	eea6 5a27 	vfma.f32	s10, s12, s15
 80136fc:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8013780 <log1pf+0x208>
 8013700:	eea5 6a27 	vfma.f32	s12, s10, s15
 8013704:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8013784 <log1pf+0x20c>
 8013708:	eea6 5a27 	vfma.f32	s10, s12, s15
 801370c:	ed9f 6a17 	vldr	s12, [pc, #92]	; 801376c <log1pf+0x1f4>
 8013710:	eea5 6a27 	vfma.f32	s12, s10, s15
 8013714:	eeb0 5a47 	vmov.f32	s10, s14
 8013718:	eea6 5a27 	vfma.f32	s10, s12, s15
 801371c:	ee25 6a25 	vmul.f32	s12, s10, s11
 8013720:	b923      	cbnz	r3, 801372c <log1pf+0x1b4>
 8013722:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013726:	ee30 0a47 	vsub.f32	s0, s0, s14
 801372a:	4770      	bx	lr
 801372c:	ee07 3a90 	vmov	s15, r3
 8013730:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8013764 <log1pf+0x1ec>
 8013734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013738:	eee7 6aa5 	vfma.f32	s13, s15, s11
 801373c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013740:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013744:	e7bd      	b.n	80136c2 <log1pf+0x14a>
 8013746:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013754 <log1pf+0x1dc>
 801374a:	4770      	bx	lr
 801374c:	3ed413d6 	.word	0x3ed413d6
 8013750:	cc000000 	.word	0xcc000000
 8013754:	00000000 	.word	0x00000000
 8013758:	4c000000 	.word	0x4c000000
 801375c:	416a09e0 	.word	0x416a09e0
 8013760:	003504f6 	.word	0x003504f6
 8013764:	3717f7d1 	.word	0x3717f7d1
 8013768:	3f317180 	.word	0x3f317180
 801376c:	3f2aaaab 	.word	0x3f2aaaab
 8013770:	3e178897 	.word	0x3e178897
 8013774:	3e1cd04f 	.word	0x3e1cd04f
 8013778:	3e3a3325 	.word	0x3e3a3325
 801377c:	3e638e29 	.word	0x3e638e29
 8013780:	3e924925 	.word	0x3e924925
 8013784:	3ecccccd 	.word	0x3ecccccd

08013788 <checkint>:
 8013788:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801378c:	2b7e      	cmp	r3, #126	; 0x7e
 801378e:	dd10      	ble.n	80137b2 <checkint+0x2a>
 8013790:	2b96      	cmp	r3, #150	; 0x96
 8013792:	dc0c      	bgt.n	80137ae <checkint+0x26>
 8013794:	2201      	movs	r2, #1
 8013796:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801379a:	fa02 f303 	lsl.w	r3, r2, r3
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	4202      	tst	r2, r0
 80137a2:	d106      	bne.n	80137b2 <checkint+0x2a>
 80137a4:	4203      	tst	r3, r0
 80137a6:	bf0c      	ite	eq
 80137a8:	2002      	moveq	r0, #2
 80137aa:	2001      	movne	r0, #1
 80137ac:	4770      	bx	lr
 80137ae:	2002      	movs	r0, #2
 80137b0:	4770      	bx	lr
 80137b2:	2000      	movs	r0, #0
 80137b4:	4770      	bx	lr
	...

080137b8 <powf>:
 80137b8:	ee10 1a10 	vmov	r1, s0
 80137bc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80137c0:	ee10 4a90 	vmov	r4, s1
 80137c4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80137c8:	0062      	lsls	r2, r4, #1
 80137ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80137ce:	eef0 4a60 	vmov.f32	s9, s1
 80137d2:	f102 30ff 	add.w	r0, r2, #4294967295
 80137d6:	4b92      	ldr	r3, [pc, #584]	; (8013a20 <powf+0x268>)
 80137d8:	d255      	bcs.n	8013886 <powf+0xce>
 80137da:	4298      	cmp	r0, r3
 80137dc:	d855      	bhi.n	801388a <powf+0xd2>
 80137de:	2000      	movs	r0, #0
 80137e0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80137e4:	4a8f      	ldr	r2, [pc, #572]	; (8013a24 <powf+0x26c>)
 80137e6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 80137ea:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80137ee:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80137f2:	0ddb      	lsrs	r3, r3, #23
 80137f4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80137f8:	05db      	lsls	r3, r3, #23
 80137fa:	ed94 6b00 	vldr	d6, [r4]
 80137fe:	1ac9      	subs	r1, r1, r3
 8013800:	ee07 1a90 	vmov	s15, r1
 8013804:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8013808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801380c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8013810:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8013814:	ee22 6b02 	vmul.f64	d6, d2, d2
 8013818:	eea2 7b05 	vfma.f64	d7, d2, d5
 801381c:	15db      	asrs	r3, r3, #23
 801381e:	ed94 5b02 	vldr	d5, [r4, #8]
 8013822:	ee00 3a10 	vmov	s0, r3
 8013826:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801382a:	ee30 0b05 	vadd.f64	d0, d0, d5
 801382e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8013832:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8013836:	eea2 0b05 	vfma.f64	d0, d2, d5
 801383a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 801383e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8013842:	eea6 0b05 	vfma.f64	d0, d6, d5
 8013846:	ee26 6b06 	vmul.f64	d6, d6, d6
 801384a:	eea7 0b06 	vfma.f64	d0, d7, d6
 801384e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8013852:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013856:	ee10 3a90 	vmov	r3, s1
 801385a:	2500      	movs	r5, #0
 801385c:	0bda      	lsrs	r2, r3, #15
 801385e:	2300      	movs	r3, #0
 8013860:	b292      	uxth	r2, r2
 8013862:	f248 04be 	movw	r4, #32958	; 0x80be
 8013866:	429d      	cmp	r5, r3
 8013868:	bf08      	it	eq
 801386a:	4294      	cmpeq	r4, r2
 801386c:	f080 8094 	bcs.w	8013998 <powf+0x1e0>
 8013870:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8013a08 <powf+0x250>
 8013874:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387c:	dd76      	ble.n	801396c <powf+0x1b4>
 801387e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013882:	f001 bd73 	b.w	801536c <__math_oflowf>
 8013886:	4298      	cmp	r0, r3
 8013888:	d92d      	bls.n	80138e6 <powf+0x12e>
 801388a:	b952      	cbnz	r2, 80138a2 <powf+0xea>
 801388c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8013890:	005b      	lsls	r3, r3, #1
 8013892:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8013896:	f240 80ae 	bls.w	80139f6 <powf+0x23e>
 801389a:	ee30 0a24 	vadd.f32	s0, s0, s9
 801389e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80138a2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80138a6:	d105      	bne.n	80138b4 <powf+0xfc>
 80138a8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80138ac:	0064      	lsls	r4, r4, #1
 80138ae:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80138b2:	e7f0      	b.n	8013896 <powf+0xde>
 80138b4:	004b      	lsls	r3, r1, #1
 80138b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80138ba:	d8ee      	bhi.n	801389a <powf+0xe2>
 80138bc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80138c0:	d1eb      	bne.n	801389a <powf+0xe2>
 80138c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80138c6:	f000 8096 	beq.w	80139f6 <powf+0x23e>
 80138ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80138ce:	ea6f 0404 	mvn.w	r4, r4
 80138d2:	bf34      	ite	cc
 80138d4:	2300      	movcc	r3, #0
 80138d6:	2301      	movcs	r3, #1
 80138d8:	0fe4      	lsrs	r4, r4, #31
 80138da:	42a3      	cmp	r3, r4
 80138dc:	f040 808e 	bne.w	80139fc <powf+0x244>
 80138e0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 80138e4:	e7db      	b.n	801389e <powf+0xe6>
 80138e6:	004d      	lsls	r5, r1, #1
 80138e8:	1e6a      	subs	r2, r5, #1
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d91b      	bls.n	8013926 <powf+0x16e>
 80138ee:	2900      	cmp	r1, #0
 80138f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80138f4:	da0e      	bge.n	8013914 <powf+0x15c>
 80138f6:	ee10 0a90 	vmov	r0, s1
 80138fa:	f7ff ff45 	bl	8013788 <checkint>
 80138fe:	2801      	cmp	r0, #1
 8013900:	d108      	bne.n	8013914 <powf+0x15c>
 8013902:	eeb1 0a40 	vneg.f32	s0, s0
 8013906:	b93d      	cbnz	r5, 8013918 <powf+0x160>
 8013908:	2c00      	cmp	r4, #0
 801390a:	dac8      	bge.n	801389e <powf+0xe6>
 801390c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013910:	f001 bd32 	b.w	8015378 <__math_divzerof>
 8013914:	2000      	movs	r0, #0
 8013916:	e7f6      	b.n	8013906 <powf+0x14e>
 8013918:	2c00      	cmp	r4, #0
 801391a:	dac0      	bge.n	801389e <powf+0xe6>
 801391c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013920:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013924:	e7bb      	b.n	801389e <powf+0xe6>
 8013926:	2900      	cmp	r1, #0
 8013928:	da1e      	bge.n	8013968 <powf+0x1b0>
 801392a:	ee10 0a90 	vmov	r0, s1
 801392e:	f7ff ff2b 	bl	8013788 <checkint>
 8013932:	b918      	cbnz	r0, 801393c <powf+0x184>
 8013934:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013938:	f001 bd2e 	b.w	8015398 <__math_invalidf>
 801393c:	2801      	cmp	r0, #1
 801393e:	bf0c      	ite	eq
 8013940:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8013944:	2000      	movne	r0, #0
 8013946:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801394a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801394e:	f4bf af47 	bcs.w	80137e0 <powf+0x28>
 8013952:	eddf 0a35 	vldr	s1, [pc, #212]	; 8013a28 <powf+0x270>
 8013956:	ee20 0a20 	vmul.f32	s0, s0, s1
 801395a:	ee10 3a10 	vmov	r3, s0
 801395e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013962:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8013966:	e73b      	b.n	80137e0 <powf+0x28>
 8013968:	2000      	movs	r0, #0
 801396a:	e7ee      	b.n	801394a <powf+0x192>
 801396c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013a10 <powf+0x258>
 8013970:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013978:	d803      	bhi.n	8013982 <powf+0x1ca>
 801397a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 801397e:	f001 bce9 	b.w	8015354 <__math_uflowf>
 8013982:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8013a18 <powf+0x260>
 8013986:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398e:	d503      	bpl.n	8013998 <powf+0x1e0>
 8013990:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013994:	f001 bce4 	b.w	8015360 <__math_may_uflowf>
 8013998:	4924      	ldr	r1, [pc, #144]	; (8013a2c <powf+0x274>)
 801399a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 801399e:	ee30 6b07 	vadd.f64	d6, d0, d7
 80139a2:	ec55 4b16 	vmov	r4, r5, d6
 80139a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80139aa:	f004 021f 	and.w	r2, r4, #31
 80139ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80139b2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 80139b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80139ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80139be:	e9d2 6700 	ldrd	r6, r7, [r2]
 80139c2:	eea0 7b06 	vfma.f64	d7, d0, d6
 80139c6:	1824      	adds	r4, r4, r0
 80139c8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80139cc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 80139d0:	2000      	movs	r0, #0
 80139d2:	1982      	adds	r2, r0, r6
 80139d4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 80139d8:	eb41 0307 	adc.w	r3, r1, r7
 80139dc:	eea0 6b05 	vfma.f64	d6, d0, d5
 80139e0:	ee20 0b00 	vmul.f64	d0, d0, d0
 80139e4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80139e8:	ec43 2b16 	vmov	d6, r2, r3
 80139ec:	ee27 0b06 	vmul.f64	d0, d7, d6
 80139f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80139f4:	e753      	b.n	801389e <powf+0xe6>
 80139f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80139fa:	e750      	b.n	801389e <powf+0xe6>
 80139fc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013a30 <powf+0x278>
 8013a00:	e74d      	b.n	801389e <powf+0xe6>
 8013a02:	bf00      	nop
 8013a04:	f3af 8000 	nop.w
 8013a08:	ffd1d571 	.word	0xffd1d571
 8013a0c:	405fffff 	.word	0x405fffff
 8013a10:	00000000 	.word	0x00000000
 8013a14:	c062c000 	.word	0xc062c000
 8013a18:	00000000 	.word	0x00000000
 8013a1c:	c062a000 	.word	0xc062a000
 8013a20:	fefffffe 	.word	0xfefffffe
 8013a24:	08017748 	.word	0x08017748
 8013a28:	4b000000 	.word	0x4b000000
 8013a2c:	080174e0 	.word	0x080174e0
 8013a30:	00000000 	.word	0x00000000

08013a34 <roundf>:
 8013a34:	ee10 0a10 	vmov	r0, s0
 8013a38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013a3c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8013a40:	2a16      	cmp	r2, #22
 8013a42:	dc15      	bgt.n	8013a70 <roundf+0x3c>
 8013a44:	2a00      	cmp	r2, #0
 8013a46:	da08      	bge.n	8013a5a <roundf+0x26>
 8013a48:	3201      	adds	r2, #1
 8013a4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8013a4e:	d101      	bne.n	8013a54 <roundf+0x20>
 8013a50:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8013a54:	ee00 3a10 	vmov	s0, r3
 8013a58:	4770      	bx	lr
 8013a5a:	4908      	ldr	r1, [pc, #32]	; (8013a7c <roundf+0x48>)
 8013a5c:	4111      	asrs	r1, r2
 8013a5e:	4208      	tst	r0, r1
 8013a60:	d0fa      	beq.n	8013a58 <roundf+0x24>
 8013a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013a66:	4113      	asrs	r3, r2
 8013a68:	4403      	add	r3, r0
 8013a6a:	ea23 0301 	bic.w	r3, r3, r1
 8013a6e:	e7f1      	b.n	8013a54 <roundf+0x20>
 8013a70:	2a80      	cmp	r2, #128	; 0x80
 8013a72:	d1f1      	bne.n	8013a58 <roundf+0x24>
 8013a74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a78:	4770      	bx	lr
 8013a7a:	bf00      	nop
 8013a7c:	007fffff 	.word	0x007fffff

08013a80 <sinf>:
 8013a80:	ee10 3a10 	vmov	r3, s0
 8013a84:	b507      	push	{r0, r1, r2, lr}
 8013a86:	4a1d      	ldr	r2, [pc, #116]	; (8013afc <sinf+0x7c>)
 8013a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	dc05      	bgt.n	8013a9c <sinf+0x1c>
 8013a90:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8013b00 <sinf+0x80>
 8013a94:	2000      	movs	r0, #0
 8013a96:	f001 fb17 	bl	80150c8 <__kernel_sinf>
 8013a9a:	e004      	b.n	8013aa6 <sinf+0x26>
 8013a9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013aa0:	db04      	blt.n	8013aac <sinf+0x2c>
 8013aa2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013aa6:	b003      	add	sp, #12
 8013aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013aac:	4668      	mov	r0, sp
 8013aae:	f000 fe8d 	bl	80147cc <__ieee754_rem_pio2f>
 8013ab2:	f000 0003 	and.w	r0, r0, #3
 8013ab6:	2801      	cmp	r0, #1
 8013ab8:	d008      	beq.n	8013acc <sinf+0x4c>
 8013aba:	2802      	cmp	r0, #2
 8013abc:	d00d      	beq.n	8013ada <sinf+0x5a>
 8013abe:	b9b0      	cbnz	r0, 8013aee <sinf+0x6e>
 8013ac0:	2001      	movs	r0, #1
 8013ac2:	eddd 0a01 	vldr	s1, [sp, #4]
 8013ac6:	ed9d 0a00 	vldr	s0, [sp]
 8013aca:	e7e4      	b.n	8013a96 <sinf+0x16>
 8013acc:	eddd 0a01 	vldr	s1, [sp, #4]
 8013ad0:	ed9d 0a00 	vldr	s0, [sp]
 8013ad4:	f001 f818 	bl	8014b08 <__kernel_cosf>
 8013ad8:	e7e5      	b.n	8013aa6 <sinf+0x26>
 8013ada:	2001      	movs	r0, #1
 8013adc:	eddd 0a01 	vldr	s1, [sp, #4]
 8013ae0:	ed9d 0a00 	vldr	s0, [sp]
 8013ae4:	f001 faf0 	bl	80150c8 <__kernel_sinf>
 8013ae8:	eeb1 0a40 	vneg.f32	s0, s0
 8013aec:	e7db      	b.n	8013aa6 <sinf+0x26>
 8013aee:	eddd 0a01 	vldr	s1, [sp, #4]
 8013af2:	ed9d 0a00 	vldr	s0, [sp]
 8013af6:	f001 f807 	bl	8014b08 <__kernel_cosf>
 8013afa:	e7f5      	b.n	8013ae8 <sinf+0x68>
 8013afc:	3f490fd8 	.word	0x3f490fd8
 8013b00:	00000000 	.word	0x00000000

08013b04 <tanf>:
 8013b04:	ee10 3a10 	vmov	r3, s0
 8013b08:	b507      	push	{r0, r1, r2, lr}
 8013b0a:	4a10      	ldr	r2, [pc, #64]	; (8013b4c <tanf+0x48>)
 8013b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b10:	4293      	cmp	r3, r2
 8013b12:	dc05      	bgt.n	8013b20 <tanf+0x1c>
 8013b14:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8013b50 <tanf+0x4c>
 8013b18:	2001      	movs	r0, #1
 8013b1a:	f001 fb1d 	bl	8015158 <__kernel_tanf>
 8013b1e:	e004      	b.n	8013b2a <tanf+0x26>
 8013b20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b24:	db04      	blt.n	8013b30 <tanf+0x2c>
 8013b26:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013b2a:	b003      	add	sp, #12
 8013b2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b30:	4668      	mov	r0, sp
 8013b32:	f000 fe4b 	bl	80147cc <__ieee754_rem_pio2f>
 8013b36:	0040      	lsls	r0, r0, #1
 8013b38:	f000 0002 	and.w	r0, r0, #2
 8013b3c:	f1c0 0001 	rsb	r0, r0, #1
 8013b40:	eddd 0a01 	vldr	s1, [sp, #4]
 8013b44:	ed9d 0a00 	vldr	s0, [sp]
 8013b48:	e7e7      	b.n	8013b1a <tanf+0x16>
 8013b4a:	bf00      	nop
 8013b4c:	3f490fda 	.word	0x3f490fda
 8013b50:	00000000 	.word	0x00000000

08013b54 <tanhf>:
 8013b54:	b510      	push	{r4, lr}
 8013b56:	ee10 4a10 	vmov	r4, s0
 8013b5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013b5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b62:	ed2d 8b02 	vpush	{d8}
 8013b66:	eef0 7a40 	vmov.f32	s15, s0
 8013b6a:	db0c      	blt.n	8013b86 <tanhf+0x32>
 8013b6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013b70:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013b74:	2c00      	cmp	r4, #0
 8013b76:	bfac      	ite	ge
 8013b78:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8013b7c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8013b80:	ecbd 8b02 	vpop	{d8}
 8013b84:	bd10      	pop	{r4, pc}
 8013b86:	4a1b      	ldr	r2, [pc, #108]	; (8013bf4 <tanhf+0xa0>)
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	dc30      	bgt.n	8013bee <tanhf+0x9a>
 8013b8c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8013b90:	da06      	bge.n	8013ba0 <tanhf+0x4c>
 8013b92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013b96:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013b9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b9e:	e7ef      	b.n	8013b80 <tanhf+0x2c>
 8013ba0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013ba4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8013ba8:	db12      	blt.n	8013bd0 <tanhf+0x7c>
 8013baa:	f7ff fc33 	bl	8013414 <fabsf>
 8013bae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013bb2:	f001 fc0d 	bl	80153d0 <expm1f>
 8013bb6:	ee30 0a08 	vadd.f32	s0, s0, s16
 8013bba:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8013bbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013bc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013bc6:	2c00      	cmp	r4, #0
 8013bc8:	bfb8      	it	lt
 8013bca:	eeb1 0a40 	vneglt.f32	s0, s0
 8013bce:	e7d7      	b.n	8013b80 <tanhf+0x2c>
 8013bd0:	f7ff fc20 	bl	8013414 <fabsf>
 8013bd4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8013bd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013bdc:	f001 fbf8 	bl	80153d0 <expm1f>
 8013be0:	ee70 7a08 	vadd.f32	s15, s0, s16
 8013be4:	eeb1 7a40 	vneg.f32	s14, s0
 8013be8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013bec:	e7eb      	b.n	8013bc6 <tanhf+0x72>
 8013bee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013bf2:	e7e8      	b.n	8013bc6 <tanhf+0x72>
 8013bf4:	41afffff 	.word	0x41afffff

08013bf8 <acosf>:
 8013bf8:	b510      	push	{r4, lr}
 8013bfa:	ed2d 8b02 	vpush	{d8}
 8013bfe:	4c25      	ldr	r4, [pc, #148]	; (8013c94 <acosf+0x9c>)
 8013c00:	b08a      	sub	sp, #40	; 0x28
 8013c02:	eeb0 8a40 	vmov.f32	s16, s0
 8013c06:	f000 fa77 	bl	80140f8 <__ieee754_acosf>
 8013c0a:	f994 3000 	ldrsb.w	r3, [r4]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	eef0 8a40 	vmov.f32	s17, s0
 8013c14:	d038      	beq.n	8013c88 <acosf+0x90>
 8013c16:	eeb4 8a48 	vcmp.f32	s16, s16
 8013c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c1e:	d633      	bvs.n	8013c88 <acosf+0x90>
 8013c20:	eeb0 0a48 	vmov.f32	s0, s16
 8013c24:	f7ff fbf6 	bl	8013414 <fabsf>
 8013c28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c34:	dd28      	ble.n	8013c88 <acosf+0x90>
 8013c36:	2301      	movs	r3, #1
 8013c38:	9300      	str	r3, [sp, #0]
 8013c3a:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8013c3e:	4b16      	ldr	r3, [pc, #88]	; (8013c98 <acosf+0xa0>)
 8013c40:	9301      	str	r3, [sp, #4]
 8013c42:	4816      	ldr	r0, [pc, #88]	; (8013c9c <acosf+0xa4>)
 8013c44:	2300      	movs	r3, #0
 8013c46:	9308      	str	r3, [sp, #32]
 8013c48:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013c4c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013c50:	f001 fbb6 	bl	80153c0 <nan>
 8013c54:	f994 3000 	ldrsb.w	r3, [r4]
 8013c58:	2b02      	cmp	r3, #2
 8013c5a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013c5e:	d104      	bne.n	8013c6a <acosf+0x72>
 8013c60:	f7fc fc30 	bl	80104c4 <__errno>
 8013c64:	2321      	movs	r3, #33	; 0x21
 8013c66:	6003      	str	r3, [r0, #0]
 8013c68:	e004      	b.n	8013c74 <acosf+0x7c>
 8013c6a:	4668      	mov	r0, sp
 8013c6c:	f001 fba3 	bl	80153b6 <matherr>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d0f5      	beq.n	8013c60 <acosf+0x68>
 8013c74:	9b08      	ldr	r3, [sp, #32]
 8013c76:	b11b      	cbz	r3, 8013c80 <acosf+0x88>
 8013c78:	f7fc fc24 	bl	80104c4 <__errno>
 8013c7c:	9b08      	ldr	r3, [sp, #32]
 8013c7e:	6003      	str	r3, [r0, #0]
 8013c80:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013c84:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8013c88:	eeb0 0a68 	vmov.f32	s0, s17
 8013c8c:	b00a      	add	sp, #40	; 0x28
 8013c8e:	ecbd 8b02 	vpop	{d8}
 8013c92:	bd10      	pop	{r4, pc}
 8013c94:	20000898 	.word	0x20000898
 8013c98:	08017870 	.word	0x08017870
 8013c9c:	080173a9 	.word	0x080173a9

08013ca0 <acoshf>:
 8013ca0:	b500      	push	{lr}
 8013ca2:	ed2d 8b02 	vpush	{d8}
 8013ca6:	b08b      	sub	sp, #44	; 0x2c
 8013ca8:	eeb0 8a40 	vmov.f32	s16, s0
 8013cac:	f000 fb20 	bl	80142f0 <__ieee754_acoshf>
 8013cb0:	4b21      	ldr	r3, [pc, #132]	; (8013d38 <acoshf+0x98>)
 8013cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8013cb6:	1c5a      	adds	r2, r3, #1
 8013cb8:	d034      	beq.n	8013d24 <acoshf+0x84>
 8013cba:	eeb4 8a48 	vcmp.f32	s16, s16
 8013cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc2:	d62f      	bvs.n	8013d24 <acoshf+0x84>
 8013cc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013cc8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd0:	d528      	bpl.n	8013d24 <acoshf+0x84>
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013d30 <acoshf+0x90>
 8013cd8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8013cdc:	9200      	str	r2, [sp, #0]
 8013cde:	4a17      	ldr	r2, [pc, #92]	; (8013d3c <acoshf+0x9c>)
 8013ce0:	9201      	str	r2, [sp, #4]
 8013ce2:	2b02      	cmp	r3, #2
 8013ce4:	f04f 0200 	mov.w	r2, #0
 8013ce8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8013cec:	9208      	str	r2, [sp, #32]
 8013cee:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013cf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013cf6:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013cfa:	d104      	bne.n	8013d06 <acoshf+0x66>
 8013cfc:	f7fc fbe2 	bl	80104c4 <__errno>
 8013d00:	2321      	movs	r3, #33	; 0x21
 8013d02:	6003      	str	r3, [r0, #0]
 8013d04:	e004      	b.n	8013d10 <acoshf+0x70>
 8013d06:	4668      	mov	r0, sp
 8013d08:	f001 fb55 	bl	80153b6 <matherr>
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	d0f5      	beq.n	8013cfc <acoshf+0x5c>
 8013d10:	9b08      	ldr	r3, [sp, #32]
 8013d12:	b11b      	cbz	r3, 8013d1c <acoshf+0x7c>
 8013d14:	f7fc fbd6 	bl	80104c4 <__errno>
 8013d18:	9b08      	ldr	r3, [sp, #32]
 8013d1a:	6003      	str	r3, [r0, #0]
 8013d1c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013d20:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013d24:	b00b      	add	sp, #44	; 0x2c
 8013d26:	ecbd 8b02 	vpop	{d8}
 8013d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d2e:	bf00      	nop
	...
 8013d38:	20000898 	.word	0x20000898
 8013d3c:	08017876 	.word	0x08017876

08013d40 <asinf>:
 8013d40:	b510      	push	{r4, lr}
 8013d42:	ed2d 8b02 	vpush	{d8}
 8013d46:	4c25      	ldr	r4, [pc, #148]	; (8013ddc <asinf+0x9c>)
 8013d48:	b08a      	sub	sp, #40	; 0x28
 8013d4a:	eeb0 8a40 	vmov.f32	s16, s0
 8013d4e:	f000 fb23 	bl	8014398 <__ieee754_asinf>
 8013d52:	f994 3000 	ldrsb.w	r3, [r4]
 8013d56:	3301      	adds	r3, #1
 8013d58:	eef0 8a40 	vmov.f32	s17, s0
 8013d5c:	d038      	beq.n	8013dd0 <asinf+0x90>
 8013d5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d66:	d633      	bvs.n	8013dd0 <asinf+0x90>
 8013d68:	eeb0 0a48 	vmov.f32	s0, s16
 8013d6c:	f7ff fb52 	bl	8013414 <fabsf>
 8013d70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7c:	dd28      	ble.n	8013dd0 <asinf+0x90>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	9300      	str	r3, [sp, #0]
 8013d82:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8013d86:	4b16      	ldr	r3, [pc, #88]	; (8013de0 <asinf+0xa0>)
 8013d88:	9301      	str	r3, [sp, #4]
 8013d8a:	4816      	ldr	r0, [pc, #88]	; (8013de4 <asinf+0xa4>)
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	9308      	str	r3, [sp, #32]
 8013d90:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013d94:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013d98:	f001 fb12 	bl	80153c0 <nan>
 8013d9c:	f994 3000 	ldrsb.w	r3, [r4]
 8013da0:	2b02      	cmp	r3, #2
 8013da2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013da6:	d104      	bne.n	8013db2 <asinf+0x72>
 8013da8:	f7fc fb8c 	bl	80104c4 <__errno>
 8013dac:	2321      	movs	r3, #33	; 0x21
 8013dae:	6003      	str	r3, [r0, #0]
 8013db0:	e004      	b.n	8013dbc <asinf+0x7c>
 8013db2:	4668      	mov	r0, sp
 8013db4:	f001 faff 	bl	80153b6 <matherr>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d0f5      	beq.n	8013da8 <asinf+0x68>
 8013dbc:	9b08      	ldr	r3, [sp, #32]
 8013dbe:	b11b      	cbz	r3, 8013dc8 <asinf+0x88>
 8013dc0:	f7fc fb80 	bl	80104c4 <__errno>
 8013dc4:	9b08      	ldr	r3, [sp, #32]
 8013dc6:	6003      	str	r3, [r0, #0]
 8013dc8:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013dcc:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8013dd0:	eeb0 0a68 	vmov.f32	s0, s17
 8013dd4:	b00a      	add	sp, #40	; 0x28
 8013dd6:	ecbd 8b02 	vpop	{d8}
 8013dda:	bd10      	pop	{r4, pc}
 8013ddc:	20000898 	.word	0x20000898
 8013de0:	0801787d 	.word	0x0801787d
 8013de4:	080173a9 	.word	0x080173a9

08013de8 <atanhf>:
 8013de8:	b510      	push	{r4, lr}
 8013dea:	ed2d 8b02 	vpush	{d8}
 8013dee:	4c30      	ldr	r4, [pc, #192]	; (8013eb0 <atanhf+0xc8>)
 8013df0:	b08a      	sub	sp, #40	; 0x28
 8013df2:	eeb0 8a40 	vmov.f32	s16, s0
 8013df6:	f000 fbb7 	bl	8014568 <__ieee754_atanhf>
 8013dfa:	f994 3000 	ldrsb.w	r3, [r4]
 8013dfe:	3301      	adds	r3, #1
 8013e00:	eef0 8a40 	vmov.f32	s17, s0
 8013e04:	d049      	beq.n	8013e9a <atanhf+0xb2>
 8013e06:	eeb4 8a48 	vcmp.f32	s16, s16
 8013e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0e:	d644      	bvs.n	8013e9a <atanhf+0xb2>
 8013e10:	eeb0 0a48 	vmov.f32	s0, s16
 8013e14:	f7ff fafe 	bl	8013414 <fabsf>
 8013e18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e24:	db39      	blt.n	8013e9a <atanhf+0xb2>
 8013e26:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8013e2a:	f994 3000 	ldrsb.w	r3, [r4]
 8013e2e:	4a21      	ldr	r2, [pc, #132]	; (8013eb4 <atanhf+0xcc>)
 8013e30:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8013ea8 <atanhf+0xc0>
 8013e34:	dd13      	ble.n	8013e5e <atanhf+0x76>
 8013e36:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8013e3a:	2101      	movs	r1, #1
 8013e3c:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013e40:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013e44:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013e48:	e9cd 1200 	strd	r1, r2, [sp]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	9208      	str	r2, [sp, #32]
 8013e50:	2b02      	cmp	r3, #2
 8013e52:	d113      	bne.n	8013e7c <atanhf+0x94>
 8013e54:	f7fc fb36 	bl	80104c4 <__errno>
 8013e58:	2321      	movs	r3, #33	; 0x21
 8013e5a:	6003      	str	r3, [r0, #0]
 8013e5c:	e013      	b.n	8013e86 <atanhf+0x9e>
 8013e5e:	2102      	movs	r1, #2
 8013e60:	e9cd 1200 	strd	r1, r2, [sp]
 8013e64:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8013e68:	2200      	movs	r2, #0
 8013e6a:	9208      	str	r2, [sp, #32]
 8013e6c:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013e70:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013e74:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013e78:	428b      	cmp	r3, r1
 8013e7a:	e7ea      	b.n	8013e52 <atanhf+0x6a>
 8013e7c:	4668      	mov	r0, sp
 8013e7e:	f001 fa9a 	bl	80153b6 <matherr>
 8013e82:	2800      	cmp	r0, #0
 8013e84:	d0e6      	beq.n	8013e54 <atanhf+0x6c>
 8013e86:	9b08      	ldr	r3, [sp, #32]
 8013e88:	b11b      	cbz	r3, 8013e92 <atanhf+0xaa>
 8013e8a:	f7fc fb1b 	bl	80104c4 <__errno>
 8013e8e:	9b08      	ldr	r3, [sp, #32]
 8013e90:	6003      	str	r3, [r0, #0]
 8013e92:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013e96:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8013e9a:	eeb0 0a68 	vmov.f32	s0, s17
 8013e9e:	b00a      	add	sp, #40	; 0x28
 8013ea0:	ecbd 8b02 	vpop	{d8}
 8013ea4:	bd10      	pop	{r4, pc}
 8013ea6:	bf00      	nop
	...
 8013eb0:	20000898 	.word	0x20000898
 8013eb4:	08017883 	.word	0x08017883

08013eb8 <coshf>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	ed2d 8b02 	vpush	{d8}
 8013ebe:	4c27      	ldr	r4, [pc, #156]	; (8013f5c <coshf+0xa4>)
 8013ec0:	b08a      	sub	sp, #40	; 0x28
 8013ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8013ec6:	f000 fb95 	bl	80145f4 <__ieee754_coshf>
 8013eca:	f994 3000 	ldrsb.w	r3, [r4]
 8013ece:	3301      	adds	r3, #1
 8013ed0:	eef0 8a40 	vmov.f32	s17, s0
 8013ed4:	d031      	beq.n	8013f3a <coshf+0x82>
 8013ed6:	eeb4 8a48 	vcmp.f32	s16, s16
 8013eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ede:	d62c      	bvs.n	8013f3a <coshf+0x82>
 8013ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8013ee4:	f7ff fa96 	bl	8013414 <fabsf>
 8013ee8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8013f60 <coshf+0xa8>
 8013eec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	dd21      	ble.n	8013f3a <coshf+0x82>
 8013ef6:	2303      	movs	r3, #3
 8013ef8:	9300      	str	r3, [sp, #0]
 8013efa:	4b1a      	ldr	r3, [pc, #104]	; (8013f64 <coshf+0xac>)
 8013efc:	9301      	str	r3, [sp, #4]
 8013efe:	2300      	movs	r3, #0
 8013f00:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8013f04:	9308      	str	r3, [sp, #32]
 8013f06:	f994 3000 	ldrsb.w	r3, [r4]
 8013f0a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013f0e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013f12:	b9c3      	cbnz	r3, 8013f46 <coshf+0x8e>
 8013f14:	4b14      	ldr	r3, [pc, #80]	; (8013f68 <coshf+0xb0>)
 8013f16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013f1e:	4668      	mov	r0, sp
 8013f20:	f001 fa49 	bl	80153b6 <matherr>
 8013f24:	b1a8      	cbz	r0, 8013f52 <coshf+0x9a>
 8013f26:	9b08      	ldr	r3, [sp, #32]
 8013f28:	b11b      	cbz	r3, 8013f32 <coshf+0x7a>
 8013f2a:	f7fc facb 	bl	80104c4 <__errno>
 8013f2e:	9b08      	ldr	r3, [sp, #32]
 8013f30:	6003      	str	r3, [r0, #0]
 8013f32:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013f36:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8013f3a:	eeb0 0a68 	vmov.f32	s0, s17
 8013f3e:	b00a      	add	sp, #40	; 0x28
 8013f40:	ecbd 8b02 	vpop	{d8}
 8013f44:	bd10      	pop	{r4, pc}
 8013f46:	4909      	ldr	r1, [pc, #36]	; (8013f6c <coshf+0xb4>)
 8013f48:	2000      	movs	r0, #0
 8013f4a:	2b02      	cmp	r3, #2
 8013f4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f50:	d1e5      	bne.n	8013f1e <coshf+0x66>
 8013f52:	f7fc fab7 	bl	80104c4 <__errno>
 8013f56:	2322      	movs	r3, #34	; 0x22
 8013f58:	6003      	str	r3, [r0, #0]
 8013f5a:	e7e4      	b.n	8013f26 <coshf+0x6e>
 8013f5c:	20000898 	.word	0x20000898
 8013f60:	42b2d4fc 	.word	0x42b2d4fc
 8013f64:	08017877 	.word	0x08017877
 8013f68:	47efffff 	.word	0x47efffff
 8013f6c:	7ff00000 	.word	0x7ff00000

08013f70 <fmodf>:
 8013f70:	b500      	push	{lr}
 8013f72:	ed2d 8b02 	vpush	{d8}
 8013f76:	b08b      	sub	sp, #44	; 0x2c
 8013f78:	eeb0 8a40 	vmov.f32	s16, s0
 8013f7c:	eef0 8a60 	vmov.f32	s17, s1
 8013f80:	f000 fb9c 	bl	80146bc <__ieee754_fmodf>
 8013f84:	4b24      	ldr	r3, [pc, #144]	; (8014018 <fmodf+0xa8>)
 8013f86:	f993 3000 	ldrsb.w	r3, [r3]
 8013f8a:	1c5a      	adds	r2, r3, #1
 8013f8c:	d02d      	beq.n	8013fea <fmodf+0x7a>
 8013f8e:	eef4 8a68 	vcmp.f32	s17, s17
 8013f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f96:	d628      	bvs.n	8013fea <fmodf+0x7a>
 8013f98:	eeb4 8a48 	vcmp.f32	s16, s16
 8013f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa0:	d623      	bvs.n	8013fea <fmodf+0x7a>
 8013fa2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013faa:	d11e      	bne.n	8013fea <fmodf+0x7a>
 8013fac:	2201      	movs	r2, #1
 8013fae:	9200      	str	r2, [sp, #0]
 8013fb0:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
 8013fb4:	4a19      	ldr	r2, [pc, #100]	; (801401c <fmodf+0xac>)
 8013fb6:	9201      	str	r2, [sp, #4]
 8013fb8:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	9208      	str	r2, [sp, #32]
 8013fc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013fc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013fc8:	b9a3      	cbnz	r3, 8013ff4 <fmodf+0x84>
 8013fca:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013fce:	4668      	mov	r0, sp
 8013fd0:	f001 f9f1 	bl	80153b6 <matherr>
 8013fd4:	b1b0      	cbz	r0, 8014004 <fmodf+0x94>
 8013fd6:	9b08      	ldr	r3, [sp, #32]
 8013fd8:	b11b      	cbz	r3, 8013fe2 <fmodf+0x72>
 8013fda:	f7fc fa73 	bl	80104c4 <__errno>
 8013fde:	9b08      	ldr	r3, [sp, #32]
 8013fe0:	6003      	str	r3, [r0, #0]
 8013fe2:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013fe6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013fea:	b00b      	add	sp, #44	; 0x2c
 8013fec:	ecbd 8b02 	vpop	{d8}
 8013ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ff4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8014010 <fmodf+0xa0>
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8013ffe:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014002:	d1e4      	bne.n	8013fce <fmodf+0x5e>
 8014004:	f7fc fa5e 	bl	80104c4 <__errno>
 8014008:	2321      	movs	r3, #33	; 0x21
 801400a:	6003      	str	r3, [r0, #0]
 801400c:	e7e3      	b.n	8013fd6 <fmodf+0x66>
 801400e:	bf00      	nop
	...
 8014018:	20000898 	.word	0x20000898
 801401c:	0801788a 	.word	0x0801788a

08014020 <sinhf>:
 8014020:	b530      	push	{r4, r5, lr}
 8014022:	ed2d 8b02 	vpush	{d8}
 8014026:	4c32      	ldr	r4, [pc, #200]	; (80140f0 <sinhf+0xd0>)
 8014028:	b08b      	sub	sp, #44	; 0x2c
 801402a:	eef0 8a40 	vmov.f32	s17, s0
 801402e:	f000 fcf9 	bl	8014a24 <__ieee754_sinhf>
 8014032:	f994 3000 	ldrsb.w	r3, [r4]
 8014036:	3301      	adds	r3, #1
 8014038:	eeb0 8a40 	vmov.f32	s16, s0
 801403c:	d030      	beq.n	80140a0 <sinhf+0x80>
 801403e:	f001 faf1 	bl	8015624 <finitef>
 8014042:	4605      	mov	r5, r0
 8014044:	bb60      	cbnz	r0, 80140a0 <sinhf+0x80>
 8014046:	eeb0 0a68 	vmov.f32	s0, s17
 801404a:	f001 faeb 	bl	8015624 <finitef>
 801404e:	b338      	cbz	r0, 80140a0 <sinhf+0x80>
 8014050:	2303      	movs	r3, #3
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	4b27      	ldr	r3, [pc, #156]	; (80140f4 <sinhf+0xd4>)
 8014056:	9301      	str	r3, [sp, #4]
 8014058:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 801405c:	f994 3000 	ldrsb.w	r3, [r4]
 8014060:	9508      	str	r5, [sp, #32]
 8014062:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014066:	ed8d 7b02 	vstr	d7, [sp, #8]
 801406a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801406e:	b9eb      	cbnz	r3, 80140ac <sinhf+0x8c>
 8014070:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80140d0 <sinhf+0xb0>
 8014074:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80140d8 <sinhf+0xb8>
 8014078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801407c:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8014080:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014084:	4668      	mov	r0, sp
 8014086:	f001 f996 	bl	80153b6 <matherr>
 801408a:	b1d8      	cbz	r0, 80140c4 <sinhf+0xa4>
 801408c:	9b08      	ldr	r3, [sp, #32]
 801408e:	b11b      	cbz	r3, 8014098 <sinhf+0x78>
 8014090:	f7fc fa18 	bl	80104c4 <__errno>
 8014094:	9b08      	ldr	r3, [sp, #32]
 8014096:	6003      	str	r3, [r0, #0]
 8014098:	ed9d 8b06 	vldr	d8, [sp, #24]
 801409c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 80140a0:	eeb0 0a48 	vmov.f32	s0, s16
 80140a4:	b00b      	add	sp, #44	; 0x2c
 80140a6:	ecbd 8b02 	vpop	{d8}
 80140aa:	bd30      	pop	{r4, r5, pc}
 80140ac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80140e0 <sinhf+0xc0>
 80140b0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80140e8 <sinhf+0xc8>
 80140b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b8:	fe37 7b06 	vselgt.f64	d7, d7, d6
 80140bc:	2b02      	cmp	r3, #2
 80140be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140c2:	d1df      	bne.n	8014084 <sinhf+0x64>
 80140c4:	f7fc f9fe 	bl	80104c4 <__errno>
 80140c8:	2322      	movs	r3, #34	; 0x22
 80140ca:	6003      	str	r3, [r0, #0]
 80140cc:	e7de      	b.n	801408c <sinhf+0x6c>
 80140ce:	bf00      	nop
 80140d0:	e0000000 	.word	0xe0000000
 80140d4:	47efffff 	.word	0x47efffff
 80140d8:	e0000000 	.word	0xe0000000
 80140dc:	c7efffff 	.word	0xc7efffff
 80140e0:	00000000 	.word	0x00000000
 80140e4:	7ff00000 	.word	0x7ff00000
 80140e8:	00000000 	.word	0x00000000
 80140ec:	fff00000 	.word	0xfff00000
 80140f0:	20000898 	.word	0x20000898
 80140f4:	08017890 	.word	0x08017890

080140f8 <__ieee754_acosf>:
 80140f8:	b508      	push	{r3, lr}
 80140fa:	ee10 3a10 	vmov	r3, s0
 80140fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014102:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014106:	ed2d 8b0c 	vpush	{d8-d13}
 801410a:	d109      	bne.n	8014120 <__ieee754_acosf+0x28>
 801410c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80142ac <__ieee754_acosf+0x1b4>
 8014110:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80142b0 <__ieee754_acosf+0x1b8>
 8014114:	2b00      	cmp	r3, #0
 8014116:	fe30 0a08 	vselgt.f32	s0, s0, s16
 801411a:	ecbd 8b0c 	vpop	{d8-d13}
 801411e:	bd08      	pop	{r3, pc}
 8014120:	dd04      	ble.n	801412c <__ieee754_acosf+0x34>
 8014122:	ee30 8a40 	vsub.f32	s16, s0, s0
 8014126:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801412a:	e7f6      	b.n	801411a <__ieee754_acosf+0x22>
 801412c:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8014130:	da3e      	bge.n	80141b0 <__ieee754_acosf+0xb8>
 8014132:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8014136:	f340 80b5 	ble.w	80142a4 <__ieee754_acosf+0x1ac>
 801413a:	ee60 7a00 	vmul.f32	s15, s0, s0
 801413e:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80142b4 <__ieee754_acosf+0x1bc>
 8014142:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80142b8 <__ieee754_acosf+0x1c0>
 8014146:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 80142bc <__ieee754_acosf+0x1c4>
 801414a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80142c0 <__ieee754_acosf+0x1c8>
 801414e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014152:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80142c4 <__ieee754_acosf+0x1cc>
 8014156:	eee7 6a27 	vfma.f32	s13, s14, s15
 801415a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80142c8 <__ieee754_acosf+0x1d0>
 801415e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014162:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80142cc <__ieee754_acosf+0x1d4>
 8014166:	eee7 6a27 	vfma.f32	s13, s14, s15
 801416a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80142d0 <__ieee754_acosf+0x1d8>
 801416e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014172:	eddf 6a58 	vldr	s13, [pc, #352]	; 80142d4 <__ieee754_acosf+0x1dc>
 8014176:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801417a:	eddf 6a57 	vldr	s13, [pc, #348]	; 80142d8 <__ieee754_acosf+0x1e0>
 801417e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014182:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80142dc <__ieee754_acosf+0x1e4>
 8014186:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801418a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801418e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014196:	eef0 7a66 	vmov.f32	s15, s13
 801419a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801419e:	eea0 8a66 	vfms.f32	s16, s0, s13
 80141a2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80141a6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80142e0 <__ieee754_acosf+0x1e8>
 80141aa:	ee30 0a48 	vsub.f32	s0, s0, s16
 80141ae:	e7b4      	b.n	801411a <__ieee754_acosf+0x22>
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	eddf da40 	vldr	s27, [pc, #256]	; 80142b4 <__ieee754_acosf+0x1bc>
 80141b6:	eddf ca40 	vldr	s25, [pc, #256]	; 80142b8 <__ieee754_acosf+0x1c0>
 80141ba:	ed9f ca42 	vldr	s24, [pc, #264]	; 80142c4 <__ieee754_acosf+0x1cc>
 80141be:	eddf ba42 	vldr	s23, [pc, #264]	; 80142c8 <__ieee754_acosf+0x1d0>
 80141c2:	ed9f ba42 	vldr	s22, [pc, #264]	; 80142cc <__ieee754_acosf+0x1d4>
 80141c6:	eddf 8a42 	vldr	s17, [pc, #264]	; 80142d0 <__ieee754_acosf+0x1d8>
 80141ca:	ed9f da42 	vldr	s26, [pc, #264]	; 80142d4 <__ieee754_acosf+0x1dc>
 80141ce:	eddf aa3b 	vldr	s21, [pc, #236]	; 80142bc <__ieee754_acosf+0x1c4>
 80141d2:	ed9f aa41 	vldr	s20, [pc, #260]	; 80142d8 <__ieee754_acosf+0x1e0>
 80141d6:	eddf 9a41 	vldr	s19, [pc, #260]	; 80142dc <__ieee754_acosf+0x1e4>
 80141da:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80141de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80141e2:	da28      	bge.n	8014236 <__ieee754_acosf+0x13e>
 80141e4:	ee30 0a09 	vadd.f32	s0, s0, s18
 80141e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141ec:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80141f0:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80141f4:	eeac ca80 	vfma.f32	s24, s25, s0
 80141f8:	eeaa aa80 	vfma.f32	s20, s21, s0
 80141fc:	eeec ba00 	vfma.f32	s23, s24, s0
 8014200:	eeea 9a00 	vfma.f32	s19, s20, s0
 8014204:	eeab ba80 	vfma.f32	s22, s23, s0
 8014208:	eea9 9a80 	vfma.f32	s18, s19, s0
 801420c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8014210:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014214:	f000 fc74 	bl	8014b00 <__ieee754_sqrtf>
 8014218:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801421c:	eddf 7a31 	vldr	s15, [pc, #196]	; 80142e4 <__ieee754_acosf+0x1ec>
 8014220:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014224:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014228:	ee77 7a80 	vadd.f32	s15, s15, s0
 801422c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80142e8 <__ieee754_acosf+0x1f0>
 8014230:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014234:	e771      	b.n	801411a <__ieee754_acosf+0x22>
 8014236:	ee39 8a40 	vsub.f32	s16, s18, s0
 801423a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801423e:	eeb0 0a48 	vmov.f32	s0, s16
 8014242:	f000 fc5d 	bl	8014b00 <__ieee754_sqrtf>
 8014246:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801424a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801424e:	eeac ca88 	vfma.f32	s24, s25, s16
 8014252:	eeaa aa88 	vfma.f32	s20, s21, s16
 8014256:	eeec ba08 	vfma.f32	s23, s24, s16
 801425a:	ee10 3a10 	vmov	r3, s0
 801425e:	eeab ba88 	vfma.f32	s22, s23, s16
 8014262:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014266:	f023 030f 	bic.w	r3, r3, #15
 801426a:	eeea 9a08 	vfma.f32	s19, s20, s16
 801426e:	ee07 3a90 	vmov	s15, r3
 8014272:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8014276:	eeb0 6a48 	vmov.f32	s12, s16
 801427a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801427e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8014282:	ee70 6a27 	vadd.f32	s13, s0, s15
 8014286:	ee68 8a88 	vmul.f32	s17, s17, s16
 801428a:	eeb0 7a40 	vmov.f32	s14, s0
 801428e:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8014292:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8014296:	eea7 0a26 	vfma.f32	s0, s14, s13
 801429a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801429e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142a2:	e73a      	b.n	801411a <__ieee754_acosf+0x22>
 80142a4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80142ec <__ieee754_acosf+0x1f4>
 80142a8:	e737      	b.n	801411a <__ieee754_acosf+0x22>
 80142aa:	bf00      	nop
 80142ac:	00000000 	.word	0x00000000
 80142b0:	40490fdb 	.word	0x40490fdb
 80142b4:	3811ef08 	.word	0x3811ef08
 80142b8:	3a4f7f04 	.word	0x3a4f7f04
 80142bc:	bf303361 	.word	0xbf303361
 80142c0:	33a22168 	.word	0x33a22168
 80142c4:	bd241146 	.word	0xbd241146
 80142c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80142cc:	bea6b090 	.word	0xbea6b090
 80142d0:	3e2aaaab 	.word	0x3e2aaaab
 80142d4:	3d9dc62e 	.word	0x3d9dc62e
 80142d8:	4001572d 	.word	0x4001572d
 80142dc:	c019d139 	.word	0xc019d139
 80142e0:	3fc90fda 	.word	0x3fc90fda
 80142e4:	b3a22168 	.word	0xb3a22168
 80142e8:	40490fda 	.word	0x40490fda
 80142ec:	3fc90fdb 	.word	0x3fc90fdb

080142f0 <__ieee754_acoshf>:
 80142f0:	b508      	push	{r3, lr}
 80142f2:	ee10 3a10 	vmov	r3, s0
 80142f6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80142fa:	ed2d 8b04 	vpush	{d8-d9}
 80142fe:	eeb0 8a40 	vmov.f32	s16, s0
 8014302:	da06      	bge.n	8014312 <__ieee754_acoshf+0x22>
 8014304:	ee30 8a40 	vsub.f32	s16, s0, s0
 8014308:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801430c:	ecbd 8b04 	vpop	{d8-d9}
 8014310:	bd08      	pop	{r3, pc}
 8014312:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8014316:	db0c      	blt.n	8014332 <__ieee754_acoshf+0x42>
 8014318:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801431c:	db02      	blt.n	8014324 <__ieee754_acoshf+0x34>
 801431e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014322:	e7f3      	b.n	801430c <__ieee754_acoshf+0x1c>
 8014324:	f7ff f8c0 	bl	80134a8 <logf>
 8014328:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8014390 <__ieee754_acoshf+0xa0>
 801432c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014330:	e7ec      	b.n	801430c <__ieee754_acoshf+0x1c>
 8014332:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014336:	d028      	beq.n	801438a <__ieee754_acoshf+0x9a>
 8014338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801433c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014340:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8014344:	dd11      	ble.n	801436a <__ieee754_acoshf+0x7a>
 8014346:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801434a:	eea8 0a08 	vfma.f32	s0, s16, s16
 801434e:	f000 fbd7 	bl	8014b00 <__ieee754_sqrtf>
 8014352:	ee70 7a08 	vadd.f32	s15, s0, s16
 8014356:	ee89 0a27 	vdiv.f32	s0, s18, s15
 801435a:	ee98 0a28 	vfnms.f32	s0, s16, s17
 801435e:	ecbd 8b04 	vpop	{d8-d9}
 8014362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014366:	f7ff b89f 	b.w	80134a8 <logf>
 801436a:	ee30 8a49 	vsub.f32	s16, s0, s18
 801436e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014372:	eea8 0a28 	vfma.f32	s0, s16, s17
 8014376:	f000 fbc3 	bl	8014b00 <__ieee754_sqrtf>
 801437a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801437e:	ecbd 8b04 	vpop	{d8-d9}
 8014382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014386:	f7ff b8f7 	b.w	8013578 <log1pf>
 801438a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8014394 <__ieee754_acoshf+0xa4>
 801438e:	e7bd      	b.n	801430c <__ieee754_acoshf+0x1c>
 8014390:	3f317218 	.word	0x3f317218
 8014394:	00000000 	.word	0x00000000

08014398 <__ieee754_asinf>:
 8014398:	b538      	push	{r3, r4, r5, lr}
 801439a:	ee10 5a10 	vmov	r5, s0
 801439e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80143a2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80143a6:	ed2d 8b04 	vpush	{d8-d9}
 80143aa:	d10c      	bne.n	80143c6 <__ieee754_asinf+0x2e>
 80143ac:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8014528 <__ieee754_asinf+0x190>
 80143b0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 801452c <__ieee754_asinf+0x194>
 80143b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80143b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80143bc:	eeb0 0a67 	vmov.f32	s0, s15
 80143c0:	ecbd 8b04 	vpop	{d8-d9}
 80143c4:	bd38      	pop	{r3, r4, r5, pc}
 80143c6:	dd04      	ble.n	80143d2 <__ieee754_asinf+0x3a>
 80143c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80143cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80143d0:	e7f6      	b.n	80143c0 <__ieee754_asinf+0x28>
 80143d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80143d6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80143da:	da0b      	bge.n	80143f4 <__ieee754_asinf+0x5c>
 80143dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80143e0:	da52      	bge.n	8014488 <__ieee754_asinf+0xf0>
 80143e2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8014530 <__ieee754_asinf+0x198>
 80143e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80143ea:	eef4 7ae8 	vcmpe.f32	s15, s17
 80143ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f2:	dce5      	bgt.n	80143c0 <__ieee754_asinf+0x28>
 80143f4:	f7ff f80e 	bl	8013414 <fabsf>
 80143f8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80143fc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014400:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014404:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8014534 <__ieee754_asinf+0x19c>
 8014408:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014538 <__ieee754_asinf+0x1a0>
 801440c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 801453c <__ieee754_asinf+0x1a4>
 8014410:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014414:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014540 <__ieee754_asinf+0x1a8>
 8014418:	eee7 7a08 	vfma.f32	s15, s14, s16
 801441c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014544 <__ieee754_asinf+0x1ac>
 8014420:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014424:	eddf 7a48 	vldr	s15, [pc, #288]	; 8014548 <__ieee754_asinf+0x1b0>
 8014428:	eee7 7a08 	vfma.f32	s15, s14, s16
 801442c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801454c <__ieee754_asinf+0x1b4>
 8014430:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014434:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014550 <__ieee754_asinf+0x1b8>
 8014438:	eee8 7a07 	vfma.f32	s15, s16, s14
 801443c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014554 <__ieee754_asinf+0x1bc>
 8014440:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014444:	eddf 7a44 	vldr	s15, [pc, #272]	; 8014558 <__ieee754_asinf+0x1c0>
 8014448:	eee7 7a08 	vfma.f32	s15, s14, s16
 801444c:	eeb0 0a48 	vmov.f32	s0, s16
 8014450:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014454:	f000 fb54 	bl	8014b00 <__ieee754_sqrtf>
 8014458:	4b40      	ldr	r3, [pc, #256]	; (801455c <__ieee754_asinf+0x1c4>)
 801445a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801445e:	429c      	cmp	r4, r3
 8014460:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014464:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014468:	dd3d      	ble.n	80144e6 <__ieee754_asinf+0x14e>
 801446a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801446e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014560 <__ieee754_asinf+0x1c8>
 8014472:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014476:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801452c <__ieee754_asinf+0x194>
 801447a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801447e:	2d00      	cmp	r5, #0
 8014480:	bfd8      	it	le
 8014482:	eeb1 0a40 	vnegle.f32	s0, s0
 8014486:	e79b      	b.n	80143c0 <__ieee754_asinf+0x28>
 8014488:	ee60 7a00 	vmul.f32	s15, s0, s0
 801448c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8014534 <__ieee754_asinf+0x19c>
 8014490:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014538 <__ieee754_asinf+0x1a0>
 8014494:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801454c <__ieee754_asinf+0x1b4>
 8014498:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801449c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014540 <__ieee754_asinf+0x1a8>
 80144a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80144a4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8014544 <__ieee754_asinf+0x1ac>
 80144a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80144ac:	eddf 6a26 	vldr	s13, [pc, #152]	; 8014548 <__ieee754_asinf+0x1b0>
 80144b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80144b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801453c <__ieee754_asinf+0x1a4>
 80144b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80144bc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014550 <__ieee754_asinf+0x1b8>
 80144c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80144c4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8014554 <__ieee754_asinf+0x1bc>
 80144c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80144cc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8014558 <__ieee754_asinf+0x1c0>
 80144d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80144d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80144dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80144e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80144e4:	e76c      	b.n	80143c0 <__ieee754_asinf+0x28>
 80144e6:	ee10 3a10 	vmov	r3, s0
 80144ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80144ee:	f023 030f 	bic.w	r3, r3, #15
 80144f2:	ee07 3a90 	vmov	s15, r3
 80144f6:	eef1 6a67 	vneg.f32	s13, s15
 80144fa:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80144fe:	ee70 5a00 	vadd.f32	s11, s0, s0
 8014502:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014506:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014528 <__ieee754_asinf+0x190>
 801450a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801450e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8014564 <__ieee754_asinf+0x1cc>
 8014512:	eee5 7a47 	vfms.f32	s15, s10, s14
 8014516:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801451a:	eeb0 6a40 	vmov.f32	s12, s0
 801451e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014522:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014526:	e7a8      	b.n	801447a <__ieee754_asinf+0xe2>
 8014528:	b33bbd2e 	.word	0xb33bbd2e
 801452c:	3fc90fdb 	.word	0x3fc90fdb
 8014530:	7149f2ca 	.word	0x7149f2ca
 8014534:	3811ef08 	.word	0x3811ef08
 8014538:	3a4f7f04 	.word	0x3a4f7f04
 801453c:	3e2aaaab 	.word	0x3e2aaaab
 8014540:	bd241146 	.word	0xbd241146
 8014544:	3e4e0aa8 	.word	0x3e4e0aa8
 8014548:	bea6b090 	.word	0xbea6b090
 801454c:	3d9dc62e 	.word	0x3d9dc62e
 8014550:	bf303361 	.word	0xbf303361
 8014554:	4001572d 	.word	0x4001572d
 8014558:	c019d139 	.word	0xc019d139
 801455c:	3f799999 	.word	0x3f799999
 8014560:	333bbd2e 	.word	0x333bbd2e
 8014564:	3f490fdb 	.word	0x3f490fdb

08014568 <__ieee754_atanhf>:
 8014568:	b510      	push	{r4, lr}
 801456a:	ee10 4a10 	vmov	r4, s0
 801456e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014572:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014576:	ed2d 8b02 	vpush	{d8}
 801457a:	dd06      	ble.n	801458a <__ieee754_atanhf+0x22>
 801457c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014580:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014584:	ecbd 8b02 	vpop	{d8}
 8014588:	bd10      	pop	{r4, pc}
 801458a:	d104      	bne.n	8014596 <__ieee754_atanhf+0x2e>
 801458c:	eddf 7a17 	vldr	s15, [pc, #92]	; 80145ec <__ieee754_atanhf+0x84>
 8014590:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8014594:	e7f6      	b.n	8014584 <__ieee754_atanhf+0x1c>
 8014596:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801459a:	da08      	bge.n	80145ae <__ieee754_atanhf+0x46>
 801459c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80145f0 <__ieee754_atanhf+0x88>
 80145a0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80145a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80145a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ac:	dcea      	bgt.n	8014584 <__ieee754_atanhf+0x1c>
 80145ae:	ee07 3a90 	vmov	s15, r3
 80145b2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80145b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80145ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80145be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80145c2:	bfb6      	itet	lt
 80145c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80145c8:	ee80 0a07 	vdivge.f32	s0, s0, s14
 80145cc:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 80145d0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80145d4:	bfb8      	it	lt
 80145d6:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 80145da:	f7fe ffcd 	bl	8013578 <log1pf>
 80145de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80145e2:	2c00      	cmp	r4, #0
 80145e4:	bfb8      	it	lt
 80145e6:	eeb1 0a40 	vneglt.f32	s0, s0
 80145ea:	e7cb      	b.n	8014584 <__ieee754_atanhf+0x1c>
 80145ec:	00000000 	.word	0x00000000
 80145f0:	7149f2ca 	.word	0x7149f2ca

080145f4 <__ieee754_coshf>:
 80145f4:	b510      	push	{r4, lr}
 80145f6:	ee10 4a10 	vmov	r4, s0
 80145fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80145fe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014602:	ed2d 8b02 	vpush	{d8}
 8014606:	db04      	blt.n	8014612 <__ieee754_coshf+0x1e>
 8014608:	ee20 0a00 	vmul.f32	s0, s0, s0
 801460c:	ecbd 8b02 	vpop	{d8}
 8014610:	bd10      	pop	{r4, pc}
 8014612:	4b25      	ldr	r3, [pc, #148]	; (80146a8 <__ieee754_coshf+0xb4>)
 8014614:	429c      	cmp	r4, r3
 8014616:	dc15      	bgt.n	8014644 <__ieee754_coshf+0x50>
 8014618:	f7fe fefc 	bl	8013414 <fabsf>
 801461c:	f000 fed8 	bl	80153d0 <expm1f>
 8014620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014624:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 8014628:	eef0 7a40 	vmov.f32	s15, s0
 801462c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014630:	dbec      	blt.n	801460c <__ieee754_coshf+0x18>
 8014632:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014636:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801463a:	eec7 6a80 	vdiv.f32	s13, s15, s0
 801463e:	ee36 0a87 	vadd.f32	s0, s13, s14
 8014642:	e7e3      	b.n	801460c <__ieee754_coshf+0x18>
 8014644:	4b19      	ldr	r3, [pc, #100]	; (80146ac <__ieee754_coshf+0xb8>)
 8014646:	429c      	cmp	r4, r3
 8014648:	dc0c      	bgt.n	8014664 <__ieee754_coshf+0x70>
 801464a:	f7fe fee3 	bl	8013414 <fabsf>
 801464e:	f7fe fe63 	bl	8013318 <expf>
 8014652:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014656:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801465a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801465e:	eeb0 0a67 	vmov.f32	s0, s15
 8014662:	e7d3      	b.n	801460c <__ieee754_coshf+0x18>
 8014664:	4b12      	ldr	r3, [pc, #72]	; (80146b0 <__ieee754_coshf+0xbc>)
 8014666:	429c      	cmp	r4, r3
 8014668:	dc08      	bgt.n	801467c <__ieee754_coshf+0x88>
 801466a:	f7fe fed3 	bl	8013414 <fabsf>
 801466e:	f7fe fe53 	bl	8013318 <expf>
 8014672:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014676:	ee20 0a27 	vmul.f32	s0, s0, s15
 801467a:	e7c7      	b.n	801460c <__ieee754_coshf+0x18>
 801467c:	4b0d      	ldr	r3, [pc, #52]	; (80146b4 <__ieee754_coshf+0xc0>)
 801467e:	429c      	cmp	r4, r3
 8014680:	dc0c      	bgt.n	801469c <__ieee754_coshf+0xa8>
 8014682:	f7fe fec7 	bl	8013414 <fabsf>
 8014686:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801468a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801468e:	f7fe fe43 	bl	8013318 <expf>
 8014692:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014696:	ee28 0a00 	vmul.f32	s0, s16, s0
 801469a:	e7b7      	b.n	801460c <__ieee754_coshf+0x18>
 801469c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80146b8 <__ieee754_coshf+0xc4>
 80146a0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80146a4:	e7b2      	b.n	801460c <__ieee754_coshf+0x18>
 80146a6:	bf00      	nop
 80146a8:	3eb17217 	.word	0x3eb17217
 80146ac:	41afffff 	.word	0x41afffff
 80146b0:	42b17217 	.word	0x42b17217
 80146b4:	42b2d4fc 	.word	0x42b2d4fc
 80146b8:	7149f2ca 	.word	0x7149f2ca

080146bc <__ieee754_fmodf>:
 80146bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146be:	ee10 6a90 	vmov	r6, s1
 80146c2:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80146c6:	ee10 3a10 	vmov	r3, s0
 80146ca:	d009      	beq.n	80146e0 <__ieee754_fmodf+0x24>
 80146cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80146d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80146d4:	ee10 7a10 	vmov	r7, s0
 80146d8:	da02      	bge.n	80146e0 <__ieee754_fmodf+0x24>
 80146da:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80146de:	dd0a      	ble.n	80146f6 <__ieee754_fmodf+0x3a>
 80146e0:	ee07 3a90 	vmov	s15, r3
 80146e4:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80146e8:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 80146ec:	ee17 3a90 	vmov	r3, s15
 80146f0:	ee00 3a10 	vmov	s0, r3
 80146f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146f6:	42a9      	cmp	r1, r5
 80146f8:	dbfa      	blt.n	80146f0 <__ieee754_fmodf+0x34>
 80146fa:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 80146fe:	d105      	bne.n	801470c <__ieee754_fmodf+0x50>
 8014700:	4a30      	ldr	r2, [pc, #192]	; (80147c4 <__ieee754_fmodf+0x108>)
 8014702:	0fe3      	lsrs	r3, r4, #31
 8014704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	e7f1      	b.n	80146f0 <__ieee754_fmodf+0x34>
 801470c:	4b2e      	ldr	r3, [pc, #184]	; (80147c8 <__ieee754_fmodf+0x10c>)
 801470e:	4299      	cmp	r1, r3
 8014710:	dc3e      	bgt.n	8014790 <__ieee754_fmodf+0xd4>
 8014712:	020a      	lsls	r2, r1, #8
 8014714:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8014718:	2a00      	cmp	r2, #0
 801471a:	dc36      	bgt.n	801478a <__ieee754_fmodf+0xce>
 801471c:	429d      	cmp	r5, r3
 801471e:	dc3a      	bgt.n	8014796 <__ieee754_fmodf+0xda>
 8014720:	022b      	lsls	r3, r5, #8
 8014722:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	f102 32ff 	add.w	r2, r2, #4294967295
 801472c:	d5fb      	bpl.n	8014726 <__ieee754_fmodf+0x6a>
 801472e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8014732:	bfbb      	ittet	lt
 8014734:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014738:	1a1b      	sublt	r3, r3, r0
 801473a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 801473e:	4099      	lsllt	r1, r3
 8014740:	bfa8      	it	ge
 8014742:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8014746:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 801474a:	bfb5      	itete	lt
 801474c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014750:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8014754:	1a9b      	sublt	r3, r3, r2
 8014756:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 801475a:	bfb8      	it	lt
 801475c:	409d      	lsllt	r5, r3
 801475e:	1a80      	subs	r0, r0, r2
 8014760:	1b4b      	subs	r3, r1, r5
 8014762:	b9d8      	cbnz	r0, 801479c <__ieee754_fmodf+0xe0>
 8014764:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8014768:	bf28      	it	cs
 801476a:	460b      	movcs	r3, r1
 801476c:	2b00      	cmp	r3, #0
 801476e:	d0c7      	beq.n	8014700 <__ieee754_fmodf+0x44>
 8014770:	4915      	ldr	r1, [pc, #84]	; (80147c8 <__ieee754_fmodf+0x10c>)
 8014772:	428b      	cmp	r3, r1
 8014774:	dd1a      	ble.n	80147ac <__ieee754_fmodf+0xf0>
 8014776:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 801477a:	db1a      	blt.n	80147b2 <__ieee754_fmodf+0xf6>
 801477c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8014780:	4323      	orrs	r3, r4
 8014782:	327f      	adds	r2, #127	; 0x7f
 8014784:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014788:	e7b2      	b.n	80146f0 <__ieee754_fmodf+0x34>
 801478a:	3801      	subs	r0, #1
 801478c:	0052      	lsls	r2, r2, #1
 801478e:	e7c3      	b.n	8014718 <__ieee754_fmodf+0x5c>
 8014790:	15c8      	asrs	r0, r1, #23
 8014792:	387f      	subs	r0, #127	; 0x7f
 8014794:	e7c2      	b.n	801471c <__ieee754_fmodf+0x60>
 8014796:	15ea      	asrs	r2, r5, #23
 8014798:	3a7f      	subs	r2, #127	; 0x7f
 801479a:	e7c8      	b.n	801472e <__ieee754_fmodf+0x72>
 801479c:	2b00      	cmp	r3, #0
 801479e:	da02      	bge.n	80147a6 <__ieee754_fmodf+0xea>
 80147a0:	0049      	lsls	r1, r1, #1
 80147a2:	3801      	subs	r0, #1
 80147a4:	e7dc      	b.n	8014760 <__ieee754_fmodf+0xa4>
 80147a6:	d0ab      	beq.n	8014700 <__ieee754_fmodf+0x44>
 80147a8:	0059      	lsls	r1, r3, #1
 80147aa:	e7fa      	b.n	80147a2 <__ieee754_fmodf+0xe6>
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	3a01      	subs	r2, #1
 80147b0:	e7df      	b.n	8014772 <__ieee754_fmodf+0xb6>
 80147b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80147b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80147ba:	3282      	adds	r2, #130	; 0x82
 80147bc:	4113      	asrs	r3, r2
 80147be:	4323      	orrs	r3, r4
 80147c0:	e796      	b.n	80146f0 <__ieee754_fmodf+0x34>
 80147c2:	bf00      	nop
 80147c4:	08017898 	.word	0x08017898
 80147c8:	007fffff 	.word	0x007fffff

080147cc <__ieee754_rem_pio2f>:
 80147cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147ce:	ee10 6a10 	vmov	r6, s0
 80147d2:	4b86      	ldr	r3, [pc, #536]	; (80149ec <__ieee754_rem_pio2f+0x220>)
 80147d4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80147d8:	429c      	cmp	r4, r3
 80147da:	b087      	sub	sp, #28
 80147dc:	4605      	mov	r5, r0
 80147de:	dc05      	bgt.n	80147ec <__ieee754_rem_pio2f+0x20>
 80147e0:	2300      	movs	r3, #0
 80147e2:	ed85 0a00 	vstr	s0, [r5]
 80147e6:	6043      	str	r3, [r0, #4]
 80147e8:	2000      	movs	r0, #0
 80147ea:	e020      	b.n	801482e <__ieee754_rem_pio2f+0x62>
 80147ec:	4b80      	ldr	r3, [pc, #512]	; (80149f0 <__ieee754_rem_pio2f+0x224>)
 80147ee:	429c      	cmp	r4, r3
 80147f0:	dc38      	bgt.n	8014864 <__ieee754_rem_pio2f+0x98>
 80147f2:	2e00      	cmp	r6, #0
 80147f4:	f024 040f 	bic.w	r4, r4, #15
 80147f8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80149f4 <__ieee754_rem_pio2f+0x228>
 80147fc:	4b7e      	ldr	r3, [pc, #504]	; (80149f8 <__ieee754_rem_pio2f+0x22c>)
 80147fe:	dd18      	ble.n	8014832 <__ieee754_rem_pio2f+0x66>
 8014800:	429c      	cmp	r4, r3
 8014802:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014806:	bf09      	itett	eq
 8014808:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80149fc <__ieee754_rem_pio2f+0x230>
 801480c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8014a00 <__ieee754_rem_pio2f+0x234>
 8014810:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014814:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8014a04 <__ieee754_rem_pio2f+0x238>
 8014818:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801481c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014820:	edc0 6a00 	vstr	s13, [r0]
 8014824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014828:	edc0 7a01 	vstr	s15, [r0, #4]
 801482c:	2001      	movs	r0, #1
 801482e:	b007      	add	sp, #28
 8014830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014832:	429c      	cmp	r4, r3
 8014834:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014838:	bf09      	itett	eq
 801483a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80149fc <__ieee754_rem_pio2f+0x230>
 801483e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8014a00 <__ieee754_rem_pio2f+0x234>
 8014842:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014846:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8014a04 <__ieee754_rem_pio2f+0x238>
 801484a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801484e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014852:	edc0 6a00 	vstr	s13, [r0]
 8014856:	ee77 7a87 	vadd.f32	s15, s15, s14
 801485a:	edc0 7a01 	vstr	s15, [r0, #4]
 801485e:	f04f 30ff 	mov.w	r0, #4294967295
 8014862:	e7e4      	b.n	801482e <__ieee754_rem_pio2f+0x62>
 8014864:	4b68      	ldr	r3, [pc, #416]	; (8014a08 <__ieee754_rem_pio2f+0x23c>)
 8014866:	429c      	cmp	r4, r3
 8014868:	dc71      	bgt.n	801494e <__ieee754_rem_pio2f+0x182>
 801486a:	f7fe fdd3 	bl	8013414 <fabsf>
 801486e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8014a0c <__ieee754_rem_pio2f+0x240>
 8014872:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014876:	eee0 7a07 	vfma.f32	s15, s0, s14
 801487a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801487e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014882:	ee17 0a90 	vmov	r0, s15
 8014886:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80149f4 <__ieee754_rem_pio2f+0x228>
 801488a:	eeb1 7a46 	vneg.f32	s14, s12
 801488e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014892:	281f      	cmp	r0, #31
 8014894:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8014a00 <__ieee754_rem_pio2f+0x234>
 8014898:	ee66 7a27 	vmul.f32	s15, s12, s15
 801489c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80148a0:	ee16 3a90 	vmov	r3, s13
 80148a4:	dc1c      	bgt.n	80148e0 <__ieee754_rem_pio2f+0x114>
 80148a6:	1e47      	subs	r7, r0, #1
 80148a8:	4959      	ldr	r1, [pc, #356]	; (8014a10 <__ieee754_rem_pio2f+0x244>)
 80148aa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80148ae:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80148b2:	428a      	cmp	r2, r1
 80148b4:	d014      	beq.n	80148e0 <__ieee754_rem_pio2f+0x114>
 80148b6:	602b      	str	r3, [r5, #0]
 80148b8:	ed95 7a00 	vldr	s14, [r5]
 80148bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80148c0:	2e00      	cmp	r6, #0
 80148c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80148c6:	ed85 0a01 	vstr	s0, [r5, #4]
 80148ca:	dab0      	bge.n	801482e <__ieee754_rem_pio2f+0x62>
 80148cc:	eeb1 7a47 	vneg.f32	s14, s14
 80148d0:	eeb1 0a40 	vneg.f32	s0, s0
 80148d4:	ed85 7a00 	vstr	s14, [r5]
 80148d8:	ed85 0a01 	vstr	s0, [r5, #4]
 80148dc:	4240      	negs	r0, r0
 80148de:	e7a6      	b.n	801482e <__ieee754_rem_pio2f+0x62>
 80148e0:	15e4      	asrs	r4, r4, #23
 80148e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80148e6:	1aa2      	subs	r2, r4, r2
 80148e8:	2a08      	cmp	r2, #8
 80148ea:	dde4      	ble.n	80148b6 <__ieee754_rem_pio2f+0xea>
 80148ec:	eddf 7a43 	vldr	s15, [pc, #268]	; 80149fc <__ieee754_rem_pio2f+0x230>
 80148f0:	eef0 6a40 	vmov.f32	s13, s0
 80148f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80148f8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80148fc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014900:	eddf 7a40 	vldr	s15, [pc, #256]	; 8014a04 <__ieee754_rem_pio2f+0x238>
 8014904:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8014908:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801490c:	eef0 7a40 	vmov.f32	s15, s0
 8014910:	ee15 3a90 	vmov	r3, s11
 8014914:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014918:	1aa4      	subs	r4, r4, r2
 801491a:	2c19      	cmp	r4, #25
 801491c:	dc04      	bgt.n	8014928 <__ieee754_rem_pio2f+0x15c>
 801491e:	edc5 5a00 	vstr	s11, [r5]
 8014922:	eeb0 0a66 	vmov.f32	s0, s13
 8014926:	e7c7      	b.n	80148b8 <__ieee754_rem_pio2f+0xec>
 8014928:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8014a14 <__ieee754_rem_pio2f+0x248>
 801492c:	eeb0 0a66 	vmov.f32	s0, s13
 8014930:	eea7 0a25 	vfma.f32	s0, s14, s11
 8014934:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014938:	eee7 7a25 	vfma.f32	s15, s14, s11
 801493c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014a18 <__ieee754_rem_pio2f+0x24c>
 8014940:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8014944:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014948:	ed85 7a00 	vstr	s14, [r5]
 801494c:	e7b4      	b.n	80148b8 <__ieee754_rem_pio2f+0xec>
 801494e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014952:	db06      	blt.n	8014962 <__ieee754_rem_pio2f+0x196>
 8014954:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014958:	edc0 7a01 	vstr	s15, [r0, #4]
 801495c:	edc0 7a00 	vstr	s15, [r0]
 8014960:	e742      	b.n	80147e8 <__ieee754_rem_pio2f+0x1c>
 8014962:	15e2      	asrs	r2, r4, #23
 8014964:	3a86      	subs	r2, #134	; 0x86
 8014966:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801496a:	ee07 3a90 	vmov	s15, r3
 801496e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014972:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014a1c <__ieee754_rem_pio2f+0x250>
 8014976:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801497a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801497e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014986:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801498a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801498e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014992:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801499a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80149a6:	d11e      	bne.n	80149e6 <__ieee754_rem_pio2f+0x21a>
 80149a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80149ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b0:	bf0c      	ite	eq
 80149b2:	2301      	moveq	r3, #1
 80149b4:	2302      	movne	r3, #2
 80149b6:	491a      	ldr	r1, [pc, #104]	; (8014a20 <__ieee754_rem_pio2f+0x254>)
 80149b8:	9101      	str	r1, [sp, #4]
 80149ba:	2102      	movs	r1, #2
 80149bc:	9100      	str	r1, [sp, #0]
 80149be:	a803      	add	r0, sp, #12
 80149c0:	4629      	mov	r1, r5
 80149c2:	f000 f8ff 	bl	8014bc4 <__kernel_rem_pio2f>
 80149c6:	2e00      	cmp	r6, #0
 80149c8:	f6bf af31 	bge.w	801482e <__ieee754_rem_pio2f+0x62>
 80149cc:	edd5 7a00 	vldr	s15, [r5]
 80149d0:	eef1 7a67 	vneg.f32	s15, s15
 80149d4:	edc5 7a00 	vstr	s15, [r5]
 80149d8:	edd5 7a01 	vldr	s15, [r5, #4]
 80149dc:	eef1 7a67 	vneg.f32	s15, s15
 80149e0:	edc5 7a01 	vstr	s15, [r5, #4]
 80149e4:	e77a      	b.n	80148dc <__ieee754_rem_pio2f+0x110>
 80149e6:	2303      	movs	r3, #3
 80149e8:	e7e5      	b.n	80149b6 <__ieee754_rem_pio2f+0x1ea>
 80149ea:	bf00      	nop
 80149ec:	3f490fd8 	.word	0x3f490fd8
 80149f0:	4016cbe3 	.word	0x4016cbe3
 80149f4:	3fc90f80 	.word	0x3fc90f80
 80149f8:	3fc90fd0 	.word	0x3fc90fd0
 80149fc:	37354400 	.word	0x37354400
 8014a00:	37354443 	.word	0x37354443
 8014a04:	2e85a308 	.word	0x2e85a308
 8014a08:	43490f80 	.word	0x43490f80
 8014a0c:	3f22f984 	.word	0x3f22f984
 8014a10:	080178a0 	.word	0x080178a0
 8014a14:	2e85a300 	.word	0x2e85a300
 8014a18:	248d3132 	.word	0x248d3132
 8014a1c:	43800000 	.word	0x43800000
 8014a20:	08017920 	.word	0x08017920

08014a24 <__ieee754_sinhf>:
 8014a24:	b510      	push	{r4, lr}
 8014a26:	ee10 3a10 	vmov	r3, s0
 8014a2a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014a2e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014a32:	ed2d 8b02 	vpush	{d8}
 8014a36:	eef0 7a40 	vmov.f32	s15, s0
 8014a3a:	db06      	blt.n	8014a4a <__ieee754_sinhf+0x26>
 8014a3c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014a40:	ecbd 8b02 	vpop	{d8}
 8014a44:	eeb0 0a67 	vmov.f32	s0, s15
 8014a48:	bd10      	pop	{r4, pc}
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	4b28      	ldr	r3, [pc, #160]	; (8014af0 <__ieee754_sinhf+0xcc>)
 8014a4e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8014a52:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8014a56:	fe28 8a88 	vselge.f32	s16, s17, s16
 8014a5a:	429c      	cmp	r4, r3
 8014a5c:	dc2a      	bgt.n	8014ab4 <__ieee754_sinhf+0x90>
 8014a5e:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8014a62:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014a66:	da08      	bge.n	8014a7a <__ieee754_sinhf+0x56>
 8014a68:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8014af4 <__ieee754_sinhf+0xd0>
 8014a6c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014a70:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8014a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a78:	dce2      	bgt.n	8014a40 <__ieee754_sinhf+0x1c>
 8014a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8014a7e:	f7fe fcc9 	bl	8013414 <fabsf>
 8014a82:	f000 fca5 	bl	80153d0 <expm1f>
 8014a86:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014a8a:	bfbb      	ittet	lt
 8014a8c:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8014a90:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8014a94:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8014a98:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8014a9c:	bfad      	iteet	ge
 8014a9e:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8014aa2:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8014aa6:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8014aaa:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8014aae:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014ab2:	e7c5      	b.n	8014a40 <__ieee754_sinhf+0x1c>
 8014ab4:	4b10      	ldr	r3, [pc, #64]	; (8014af8 <__ieee754_sinhf+0xd4>)
 8014ab6:	429c      	cmp	r4, r3
 8014ab8:	dc06      	bgt.n	8014ac8 <__ieee754_sinhf+0xa4>
 8014aba:	f7fe fcab 	bl	8013414 <fabsf>
 8014abe:	f7fe fc2b 	bl	8013318 <expf>
 8014ac2:	ee60 7a08 	vmul.f32	s15, s0, s16
 8014ac6:	e7bb      	b.n	8014a40 <__ieee754_sinhf+0x1c>
 8014ac8:	4b0c      	ldr	r3, [pc, #48]	; (8014afc <__ieee754_sinhf+0xd8>)
 8014aca:	429c      	cmp	r4, r3
 8014acc:	dc0a      	bgt.n	8014ae4 <__ieee754_sinhf+0xc0>
 8014ace:	f7fe fca1 	bl	8013414 <fabsf>
 8014ad2:	ee20 0a28 	vmul.f32	s0, s0, s17
 8014ad6:	f7fe fc1f 	bl	8013318 <expf>
 8014ada:	ee68 7a00 	vmul.f32	s15, s16, s0
 8014ade:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014ae2:	e7ad      	b.n	8014a40 <__ieee754_sinhf+0x1c>
 8014ae4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8014af4 <__ieee754_sinhf+0xd0>
 8014ae8:	ee60 7a07 	vmul.f32	s15, s0, s14
 8014aec:	e7a8      	b.n	8014a40 <__ieee754_sinhf+0x1c>
 8014aee:	bf00      	nop
 8014af0:	41afffff 	.word	0x41afffff
 8014af4:	7cf0bdc2 	.word	0x7cf0bdc2
 8014af8:	42b17217 	.word	0x42b17217
 8014afc:	42b2d4fc 	.word	0x42b2d4fc

08014b00 <__ieee754_sqrtf>:
 8014b00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014b04:	4770      	bx	lr
	...

08014b08 <__kernel_cosf>:
 8014b08:	ee10 3a10 	vmov	r3, s0
 8014b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b10:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b18:	da05      	bge.n	8014b26 <__kernel_cosf+0x1e>
 8014b1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b1e:	ee17 2a90 	vmov	r2, s15
 8014b22:	2a00      	cmp	r2, #0
 8014b24:	d03b      	beq.n	8014b9e <__kernel_cosf+0x96>
 8014b26:	ee20 6a00 	vmul.f32	s12, s0, s0
 8014b2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014b2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8014ba4 <__kernel_cosf+0x9c>
 8014b32:	4a1d      	ldr	r2, [pc, #116]	; (8014ba8 <__kernel_cosf+0xa0>)
 8014b34:	ee66 7a07 	vmul.f32	s15, s12, s14
 8014b38:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8014bac <__kernel_cosf+0xa4>
 8014b3c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8014b40:	4293      	cmp	r3, r2
 8014b42:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8014bb0 <__kernel_cosf+0xa8>
 8014b46:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014b4a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014bb4 <__kernel_cosf+0xac>
 8014b4e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014b52:	eddf 5a19 	vldr	s11, [pc, #100]	; 8014bb8 <__kernel_cosf+0xb0>
 8014b56:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014b5a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8014bbc <__kernel_cosf+0xb4>
 8014b5e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014b62:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8014b66:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014b6a:	eee6 0a07 	vfma.f32	s1, s12, s14
 8014b6e:	dc04      	bgt.n	8014b7a <__kernel_cosf+0x72>
 8014b70:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8014b74:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8014b78:	4770      	bx	lr
 8014b7a:	4a11      	ldr	r2, [pc, #68]	; (8014bc0 <__kernel_cosf+0xb8>)
 8014b7c:	4293      	cmp	r3, r2
 8014b7e:	bfda      	itte	le
 8014b80:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014b84:	ee07 3a10 	vmovle	s14, r3
 8014b88:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8014b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b90:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8014b94:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014b98:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014b9c:	4770      	bx	lr
 8014b9e:	eeb0 0a66 	vmov.f32	s0, s13
 8014ba2:	4770      	bx	lr
 8014ba4:	ad47d74e 	.word	0xad47d74e
 8014ba8:	3e999999 	.word	0x3e999999
 8014bac:	310f74f6 	.word	0x310f74f6
 8014bb0:	b493f27c 	.word	0xb493f27c
 8014bb4:	37d00d01 	.word	0x37d00d01
 8014bb8:	bab60b61 	.word	0xbab60b61
 8014bbc:	3d2aaaab 	.word	0x3d2aaaab
 8014bc0:	3f480000 	.word	0x3f480000

08014bc4 <__kernel_rem_pio2f>:
 8014bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc8:	ed2d 8b04 	vpush	{d8-d9}
 8014bcc:	b0d7      	sub	sp, #348	; 0x15c
 8014bce:	469b      	mov	fp, r3
 8014bd0:	460e      	mov	r6, r1
 8014bd2:	4bbe      	ldr	r3, [pc, #760]	; (8014ecc <__kernel_rem_pio2f+0x308>)
 8014bd4:	9964      	ldr	r1, [sp, #400]	; 0x190
 8014bd6:	9002      	str	r0, [sp, #8]
 8014bd8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8014bdc:	9865      	ldr	r0, [sp, #404]	; 0x194
 8014bde:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8014edc <__kernel_rem_pio2f+0x318>
 8014be2:	1ed1      	subs	r1, r2, #3
 8014be4:	2308      	movs	r3, #8
 8014be6:	fb91 f1f3 	sdiv	r1, r1, r3
 8014bea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8014bee:	f10b 3aff 	add.w	sl, fp, #4294967295
 8014bf2:	1c4c      	adds	r4, r1, #1
 8014bf4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8014bf8:	eba1 050a 	sub.w	r5, r1, sl
 8014bfc:	aa1a      	add	r2, sp, #104	; 0x68
 8014bfe:	eb09 070a 	add.w	r7, r9, sl
 8014c02:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8014c06:	4696      	mov	lr, r2
 8014c08:	2300      	movs	r3, #0
 8014c0a:	42bb      	cmp	r3, r7
 8014c0c:	dd0f      	ble.n	8014c2e <__kernel_rem_pio2f+0x6a>
 8014c0e:	af42      	add	r7, sp, #264	; 0x108
 8014c10:	2200      	movs	r2, #0
 8014c12:	454a      	cmp	r2, r9
 8014c14:	dc27      	bgt.n	8014c66 <__kernel_rem_pio2f+0xa2>
 8014c16:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8014c1a:	eb0b 0302 	add.w	r3, fp, r2
 8014c1e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8014c22:	9d02      	ldr	r5, [sp, #8]
 8014c24:	eddf 7aad 	vldr	s15, [pc, #692]	; 8014edc <__kernel_rem_pio2f+0x318>
 8014c28:	f04f 0c00 	mov.w	ip, #0
 8014c2c:	e015      	b.n	8014c5a <__kernel_rem_pio2f+0x96>
 8014c2e:	42dd      	cmn	r5, r3
 8014c30:	bf5d      	ittte	pl
 8014c32:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8014c36:	ee07 2a90 	vmovpl	s15, r2
 8014c3a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014c3e:	eef0 7a47 	vmovmi.f32	s15, s14
 8014c42:	ecee 7a01 	vstmia	lr!, {s15}
 8014c46:	3301      	adds	r3, #1
 8014c48:	e7df      	b.n	8014c0a <__kernel_rem_pio2f+0x46>
 8014c4a:	ecf5 6a01 	vldmia	r5!, {s13}
 8014c4e:	ed33 7a01 	vldmdb	r3!, {s14}
 8014c52:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c56:	f10c 0c01 	add.w	ip, ip, #1
 8014c5a:	45d4      	cmp	ip, sl
 8014c5c:	ddf5      	ble.n	8014c4a <__kernel_rem_pio2f+0x86>
 8014c5e:	ece7 7a01 	vstmia	r7!, {s15}
 8014c62:	3201      	adds	r2, #1
 8014c64:	e7d5      	b.n	8014c12 <__kernel_rem_pio2f+0x4e>
 8014c66:	ab06      	add	r3, sp, #24
 8014c68:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014c6c:	9304      	str	r3, [sp, #16]
 8014c6e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8014ed8 <__kernel_rem_pio2f+0x314>
 8014c72:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8014ed4 <__kernel_rem_pio2f+0x310>
 8014c76:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8014c7a:	9303      	str	r3, [sp, #12]
 8014c7c:	464d      	mov	r5, r9
 8014c7e:	ab56      	add	r3, sp, #344	; 0x158
 8014c80:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8014c84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014c88:	3f01      	subs	r7, #1
 8014c8a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8014c8e:	00bf      	lsls	r7, r7, #2
 8014c90:	ab56      	add	r3, sp, #344	; 0x158
 8014c92:	19da      	adds	r2, r3, r7
 8014c94:	3a4c      	subs	r2, #76	; 0x4c
 8014c96:	2300      	movs	r3, #0
 8014c98:	1ae9      	subs	r1, r5, r3
 8014c9a:	2900      	cmp	r1, #0
 8014c9c:	dc4c      	bgt.n	8014d38 <__kernel_rem_pio2f+0x174>
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f000 fcca 	bl	8015638 <scalbnf>
 8014ca4:	eeb0 8a40 	vmov.f32	s16, s0
 8014ca8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014cac:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014cb0:	f7fe fbb8 	bl	8013424 <floorf>
 8014cb4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014cb8:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014cbc:	2c00      	cmp	r4, #0
 8014cbe:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014cc2:	edcd 7a01 	vstr	s15, [sp, #4]
 8014cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cca:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014cce:	dd48      	ble.n	8014d62 <__kernel_rem_pio2f+0x19e>
 8014cd0:	1e69      	subs	r1, r5, #1
 8014cd2:	ab06      	add	r3, sp, #24
 8014cd4:	f1c4 0008 	rsb	r0, r4, #8
 8014cd8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8014cdc:	9a01      	ldr	r2, [sp, #4]
 8014cde:	fa4c f300 	asr.w	r3, ip, r0
 8014ce2:	441a      	add	r2, r3
 8014ce4:	4083      	lsls	r3, r0
 8014ce6:	9201      	str	r2, [sp, #4]
 8014ce8:	ebac 0203 	sub.w	r2, ip, r3
 8014cec:	ab06      	add	r3, sp, #24
 8014cee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8014cf2:	f1c4 0307 	rsb	r3, r4, #7
 8014cf6:	fa42 f803 	asr.w	r8, r2, r3
 8014cfa:	f1b8 0f00 	cmp.w	r8, #0
 8014cfe:	dd41      	ble.n	8014d84 <__kernel_rem_pio2f+0x1c0>
 8014d00:	9b01      	ldr	r3, [sp, #4]
 8014d02:	2000      	movs	r0, #0
 8014d04:	3301      	adds	r3, #1
 8014d06:	9301      	str	r3, [sp, #4]
 8014d08:	4601      	mov	r1, r0
 8014d0a:	4285      	cmp	r5, r0
 8014d0c:	dc6d      	bgt.n	8014dea <__kernel_rem_pio2f+0x226>
 8014d0e:	2c00      	cmp	r4, #0
 8014d10:	dd04      	ble.n	8014d1c <__kernel_rem_pio2f+0x158>
 8014d12:	2c01      	cmp	r4, #1
 8014d14:	d07e      	beq.n	8014e14 <__kernel_rem_pio2f+0x250>
 8014d16:	2c02      	cmp	r4, #2
 8014d18:	f000 8086 	beq.w	8014e28 <__kernel_rem_pio2f+0x264>
 8014d1c:	f1b8 0f02 	cmp.w	r8, #2
 8014d20:	d130      	bne.n	8014d84 <__kernel_rem_pio2f+0x1c0>
 8014d22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014d26:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014d2a:	b359      	cbz	r1, 8014d84 <__kernel_rem_pio2f+0x1c0>
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	f000 fc83 	bl	8015638 <scalbnf>
 8014d32:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014d36:	e025      	b.n	8014d84 <__kernel_rem_pio2f+0x1c0>
 8014d38:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014d3c:	a806      	add	r0, sp, #24
 8014d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d46:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014d4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014d4e:	ee10 1a10 	vmov	r1, s0
 8014d52:	ed32 0a01 	vldmdb	r2!, {s0}
 8014d56:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8014d5a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014d5e:	3301      	adds	r3, #1
 8014d60:	e79a      	b.n	8014c98 <__kernel_rem_pio2f+0xd4>
 8014d62:	d106      	bne.n	8014d72 <__kernel_rem_pio2f+0x1ae>
 8014d64:	1e6b      	subs	r3, r5, #1
 8014d66:	aa06      	add	r2, sp, #24
 8014d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014d6c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8014d70:	e7c3      	b.n	8014cfa <__kernel_rem_pio2f+0x136>
 8014d72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014d76:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7e:	da31      	bge.n	8014de4 <__kernel_rem_pio2f+0x220>
 8014d80:	f04f 0800 	mov.w	r8, #0
 8014d84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8c:	f040 80a8 	bne.w	8014ee0 <__kernel_rem_pio2f+0x31c>
 8014d90:	1e6b      	subs	r3, r5, #1
 8014d92:	4618      	mov	r0, r3
 8014d94:	2200      	movs	r2, #0
 8014d96:	4548      	cmp	r0, r9
 8014d98:	da4d      	bge.n	8014e36 <__kernel_rem_pio2f+0x272>
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	f000 8087 	beq.w	8014eae <__kernel_rem_pio2f+0x2ea>
 8014da0:	aa06      	add	r2, sp, #24
 8014da2:	3c08      	subs	r4, #8
 8014da4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014da8:	2900      	cmp	r1, #0
 8014daa:	f000 808d 	beq.w	8014ec8 <__kernel_rem_pio2f+0x304>
 8014dae:	4620      	mov	r0, r4
 8014db0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014db4:	9302      	str	r3, [sp, #8]
 8014db6:	f000 fc3f 	bl	8015638 <scalbnf>
 8014dba:	9b02      	ldr	r3, [sp, #8]
 8014dbc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014ed8 <__kernel_rem_pio2f+0x314>
 8014dc0:	0099      	lsls	r1, r3, #2
 8014dc2:	aa42      	add	r2, sp, #264	; 0x108
 8014dc4:	1850      	adds	r0, r2, r1
 8014dc6:	1d05      	adds	r5, r0, #4
 8014dc8:	461c      	mov	r4, r3
 8014dca:	2c00      	cmp	r4, #0
 8014dcc:	f280 80b8 	bge.w	8014f40 <__kernel_rem_pio2f+0x37c>
 8014dd0:	2500      	movs	r5, #0
 8014dd2:	1b5c      	subs	r4, r3, r5
 8014dd4:	2c00      	cmp	r4, #0
 8014dd6:	f2c0 80d8 	blt.w	8014f8a <__kernel_rem_pio2f+0x3c6>
 8014dda:	4f3d      	ldr	r7, [pc, #244]	; (8014ed0 <__kernel_rem_pio2f+0x30c>)
 8014ddc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8014edc <__kernel_rem_pio2f+0x318>
 8014de0:	2400      	movs	r4, #0
 8014de2:	e0c6      	b.n	8014f72 <__kernel_rem_pio2f+0x3ae>
 8014de4:	f04f 0802 	mov.w	r8, #2
 8014de8:	e78a      	b.n	8014d00 <__kernel_rem_pio2f+0x13c>
 8014dea:	ab06      	add	r3, sp, #24
 8014dec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014df0:	b949      	cbnz	r1, 8014e06 <__kernel_rem_pio2f+0x242>
 8014df2:	b12b      	cbz	r3, 8014e00 <__kernel_rem_pio2f+0x23c>
 8014df4:	aa06      	add	r2, sp, #24
 8014df6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014dfa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8014dfe:	2301      	movs	r3, #1
 8014e00:	3001      	adds	r0, #1
 8014e02:	4619      	mov	r1, r3
 8014e04:	e781      	b.n	8014d0a <__kernel_rem_pio2f+0x146>
 8014e06:	aa06      	add	r2, sp, #24
 8014e08:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014e0c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8014e10:	460b      	mov	r3, r1
 8014e12:	e7f5      	b.n	8014e00 <__kernel_rem_pio2f+0x23c>
 8014e14:	1e68      	subs	r0, r5, #1
 8014e16:	ab06      	add	r3, sp, #24
 8014e18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e20:	aa06      	add	r2, sp, #24
 8014e22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8014e26:	e779      	b.n	8014d1c <__kernel_rem_pio2f+0x158>
 8014e28:	1e68      	subs	r0, r5, #1
 8014e2a:	ab06      	add	r3, sp, #24
 8014e2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e34:	e7f4      	b.n	8014e20 <__kernel_rem_pio2f+0x25c>
 8014e36:	a906      	add	r1, sp, #24
 8014e38:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014e3c:	3801      	subs	r0, #1
 8014e3e:	430a      	orrs	r2, r1
 8014e40:	e7a9      	b.n	8014d96 <__kernel_rem_pio2f+0x1d2>
 8014e42:	f10c 0c01 	add.w	ip, ip, #1
 8014e46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014e4a:	2a00      	cmp	r2, #0
 8014e4c:	d0f9      	beq.n	8014e42 <__kernel_rem_pio2f+0x27e>
 8014e4e:	eb0b 0305 	add.w	r3, fp, r5
 8014e52:	aa1a      	add	r2, sp, #104	; 0x68
 8014e54:	009b      	lsls	r3, r3, #2
 8014e56:	1898      	adds	r0, r3, r2
 8014e58:	3004      	adds	r0, #4
 8014e5a:	1c69      	adds	r1, r5, #1
 8014e5c:	3704      	adds	r7, #4
 8014e5e:	2200      	movs	r2, #0
 8014e60:	4465      	add	r5, ip
 8014e62:	9005      	str	r0, [sp, #20]
 8014e64:	428d      	cmp	r5, r1
 8014e66:	f6ff af0a 	blt.w	8014c7e <__kernel_rem_pio2f+0xba>
 8014e6a:	a81a      	add	r0, sp, #104	; 0x68
 8014e6c:	eb02 0c03 	add.w	ip, r2, r3
 8014e70:	4484      	add	ip, r0
 8014e72:	9803      	ldr	r0, [sp, #12]
 8014e74:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014e78:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014e7c:	9001      	str	r0, [sp, #4]
 8014e7e:	ee07 0a90 	vmov	s15, r0
 8014e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e86:	9805      	ldr	r0, [sp, #20]
 8014e88:	edcc 7a00 	vstr	s15, [ip]
 8014e8c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014edc <__kernel_rem_pio2f+0x318>
 8014e90:	eb00 0802 	add.w	r8, r0, r2
 8014e94:	f04f 0c00 	mov.w	ip, #0
 8014e98:	45d4      	cmp	ip, sl
 8014e9a:	dd0c      	ble.n	8014eb6 <__kernel_rem_pio2f+0x2f2>
 8014e9c:	eb02 0c07 	add.w	ip, r2, r7
 8014ea0:	a842      	add	r0, sp, #264	; 0x108
 8014ea2:	4484      	add	ip, r0
 8014ea4:	edcc 7a01 	vstr	s15, [ip, #4]
 8014ea8:	3101      	adds	r1, #1
 8014eaa:	3204      	adds	r2, #4
 8014eac:	e7da      	b.n	8014e64 <__kernel_rem_pio2f+0x2a0>
 8014eae:	9b04      	ldr	r3, [sp, #16]
 8014eb0:	f04f 0c01 	mov.w	ip, #1
 8014eb4:	e7c7      	b.n	8014e46 <__kernel_rem_pio2f+0x282>
 8014eb6:	ecfe 6a01 	vldmia	lr!, {s13}
 8014eba:	ed38 7a01 	vldmdb	r8!, {s14}
 8014ebe:	f10c 0c01 	add.w	ip, ip, #1
 8014ec2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ec6:	e7e7      	b.n	8014e98 <__kernel_rem_pio2f+0x2d4>
 8014ec8:	3b01      	subs	r3, #1
 8014eca:	e769      	b.n	8014da0 <__kernel_rem_pio2f+0x1dc>
 8014ecc:	08017c64 	.word	0x08017c64
 8014ed0:	08017c38 	.word	0x08017c38
 8014ed4:	43800000 	.word	0x43800000
 8014ed8:	3b800000 	.word	0x3b800000
 8014edc:	00000000 	.word	0x00000000
 8014ee0:	4260      	negs	r0, r4
 8014ee2:	eeb0 0a48 	vmov.f32	s0, s16
 8014ee6:	f000 fba7 	bl	8015638 <scalbnf>
 8014eea:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8014ed4 <__kernel_rem_pio2f+0x310>
 8014eee:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef6:	db1a      	blt.n	8014f2e <__kernel_rem_pio2f+0x36a>
 8014ef8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014ed8 <__kernel_rem_pio2f+0x314>
 8014efc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014f00:	aa06      	add	r2, sp, #24
 8014f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f06:	a906      	add	r1, sp, #24
 8014f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f0c:	3408      	adds	r4, #8
 8014f0e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014f1a:	ee10 3a10 	vmov	r3, s0
 8014f1e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014f22:	1c6b      	adds	r3, r5, #1
 8014f24:	ee17 2a90 	vmov	r2, s15
 8014f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014f2c:	e73f      	b.n	8014dae <__kernel_rem_pio2f+0x1ea>
 8014f2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014f32:	aa06      	add	r2, sp, #24
 8014f34:	ee10 3a10 	vmov	r3, s0
 8014f38:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014f3c:	462b      	mov	r3, r5
 8014f3e:	e736      	b.n	8014dae <__kernel_rem_pio2f+0x1ea>
 8014f40:	aa06      	add	r2, sp, #24
 8014f42:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014f46:	9202      	str	r2, [sp, #8]
 8014f48:	ee07 2a90 	vmov	s15, r2
 8014f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f50:	3c01      	subs	r4, #1
 8014f52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014f5a:	ed65 7a01 	vstmdb	r5!, {s15}
 8014f5e:	e734      	b.n	8014dca <__kernel_rem_pio2f+0x206>
 8014f60:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8014f64:	ecf7 6a01 	vldmia	r7!, {s13}
 8014f68:	ed9c 7a00 	vldr	s14, [ip]
 8014f6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014f70:	3401      	adds	r4, #1
 8014f72:	454c      	cmp	r4, r9
 8014f74:	dc01      	bgt.n	8014f7a <__kernel_rem_pio2f+0x3b6>
 8014f76:	42a5      	cmp	r5, r4
 8014f78:	daf2      	bge.n	8014f60 <__kernel_rem_pio2f+0x39c>
 8014f7a:	aa56      	add	r2, sp, #344	; 0x158
 8014f7c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8014f80:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8014f84:	3501      	adds	r5, #1
 8014f86:	3804      	subs	r0, #4
 8014f88:	e723      	b.n	8014dd2 <__kernel_rem_pio2f+0x20e>
 8014f8a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014f8c:	2a03      	cmp	r2, #3
 8014f8e:	d84d      	bhi.n	801502c <__kernel_rem_pio2f+0x468>
 8014f90:	e8df f002 	tbb	[pc, r2]
 8014f94:	021f1f3e 	.word	0x021f1f3e
 8014f98:	aa56      	add	r2, sp, #344	; 0x158
 8014f9a:	4411      	add	r1, r2
 8014f9c:	399c      	subs	r1, #156	; 0x9c
 8014f9e:	4608      	mov	r0, r1
 8014fa0:	461c      	mov	r4, r3
 8014fa2:	2c00      	cmp	r4, #0
 8014fa4:	dc5f      	bgt.n	8015066 <__kernel_rem_pio2f+0x4a2>
 8014fa6:	4608      	mov	r0, r1
 8014fa8:	461c      	mov	r4, r3
 8014faa:	2c01      	cmp	r4, #1
 8014fac:	dc6b      	bgt.n	8015086 <__kernel_rem_pio2f+0x4c2>
 8014fae:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8014edc <__kernel_rem_pio2f+0x318>
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	dc77      	bgt.n	80150a6 <__kernel_rem_pio2f+0x4e2>
 8014fb6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8014fba:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8014fbe:	f1b8 0f00 	cmp.w	r8, #0
 8014fc2:	d176      	bne.n	80150b2 <__kernel_rem_pio2f+0x4ee>
 8014fc4:	edc6 6a00 	vstr	s13, [r6]
 8014fc8:	ed86 7a01 	vstr	s14, [r6, #4]
 8014fcc:	edc6 7a02 	vstr	s15, [r6, #8]
 8014fd0:	e02c      	b.n	801502c <__kernel_rem_pio2f+0x468>
 8014fd2:	aa56      	add	r2, sp, #344	; 0x158
 8014fd4:	4411      	add	r1, r2
 8014fd6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8014edc <__kernel_rem_pio2f+0x318>
 8014fda:	399c      	subs	r1, #156	; 0x9c
 8014fdc:	4618      	mov	r0, r3
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	da32      	bge.n	8015048 <__kernel_rem_pio2f+0x484>
 8014fe2:	f1b8 0f00 	cmp.w	r8, #0
 8014fe6:	d035      	beq.n	8015054 <__kernel_rem_pio2f+0x490>
 8014fe8:	eef1 7a47 	vneg.f32	s15, s14
 8014fec:	edc6 7a00 	vstr	s15, [r6]
 8014ff0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8014ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ff8:	a82f      	add	r0, sp, #188	; 0xbc
 8014ffa:	2101      	movs	r1, #1
 8014ffc:	428b      	cmp	r3, r1
 8014ffe:	da2c      	bge.n	801505a <__kernel_rem_pio2f+0x496>
 8015000:	f1b8 0f00 	cmp.w	r8, #0
 8015004:	d001      	beq.n	801500a <__kernel_rem_pio2f+0x446>
 8015006:	eef1 7a67 	vneg.f32	s15, s15
 801500a:	edc6 7a01 	vstr	s15, [r6, #4]
 801500e:	e00d      	b.n	801502c <__kernel_rem_pio2f+0x468>
 8015010:	aa56      	add	r2, sp, #344	; 0x158
 8015012:	4411      	add	r1, r2
 8015014:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8014edc <__kernel_rem_pio2f+0x318>
 8015018:	399c      	subs	r1, #156	; 0x9c
 801501a:	2b00      	cmp	r3, #0
 801501c:	da0e      	bge.n	801503c <__kernel_rem_pio2f+0x478>
 801501e:	f1b8 0f00 	cmp.w	r8, #0
 8015022:	d001      	beq.n	8015028 <__kernel_rem_pio2f+0x464>
 8015024:	eef1 7a67 	vneg.f32	s15, s15
 8015028:	edc6 7a00 	vstr	s15, [r6]
 801502c:	9b01      	ldr	r3, [sp, #4]
 801502e:	f003 0007 	and.w	r0, r3, #7
 8015032:	b057      	add	sp, #348	; 0x15c
 8015034:	ecbd 8b04 	vpop	{d8-d9}
 8015038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503c:	ed31 7a01 	vldmdb	r1!, {s14}
 8015040:	3b01      	subs	r3, #1
 8015042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015046:	e7e8      	b.n	801501a <__kernel_rem_pio2f+0x456>
 8015048:	ed71 7a01 	vldmdb	r1!, {s15}
 801504c:	3801      	subs	r0, #1
 801504e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015052:	e7c4      	b.n	8014fde <__kernel_rem_pio2f+0x41a>
 8015054:	eef0 7a47 	vmov.f32	s15, s14
 8015058:	e7c8      	b.n	8014fec <__kernel_rem_pio2f+0x428>
 801505a:	ecb0 7a01 	vldmia	r0!, {s14}
 801505e:	3101      	adds	r1, #1
 8015060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015064:	e7ca      	b.n	8014ffc <__kernel_rem_pio2f+0x438>
 8015066:	ed50 7a02 	vldr	s15, [r0, #-8]
 801506a:	ed70 6a01 	vldmdb	r0!, {s13}
 801506e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015072:	3c01      	subs	r4, #1
 8015074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015078:	ed00 7a01 	vstr	s14, [r0, #-4]
 801507c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015080:	edc0 7a00 	vstr	s15, [r0]
 8015084:	e78d      	b.n	8014fa2 <__kernel_rem_pio2f+0x3de>
 8015086:	ed50 7a02 	vldr	s15, [r0, #-8]
 801508a:	ed70 6a01 	vldmdb	r0!, {s13}
 801508e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015092:	3c01      	subs	r4, #1
 8015094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015098:	ed00 7a01 	vstr	s14, [r0, #-4]
 801509c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80150a0:	edc0 7a00 	vstr	s15, [r0]
 80150a4:	e781      	b.n	8014faa <__kernel_rem_pio2f+0x3e6>
 80150a6:	ed31 7a01 	vldmdb	r1!, {s14}
 80150aa:	3b01      	subs	r3, #1
 80150ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150b0:	e77f      	b.n	8014fb2 <__kernel_rem_pio2f+0x3ee>
 80150b2:	eef1 6a66 	vneg.f32	s13, s13
 80150b6:	eeb1 7a47 	vneg.f32	s14, s14
 80150ba:	edc6 6a00 	vstr	s13, [r6]
 80150be:	ed86 7a01 	vstr	s14, [r6, #4]
 80150c2:	eef1 7a67 	vneg.f32	s15, s15
 80150c6:	e781      	b.n	8014fcc <__kernel_rem_pio2f+0x408>

080150c8 <__kernel_sinf>:
 80150c8:	ee10 3a10 	vmov	r3, s0
 80150cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80150d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80150d4:	da04      	bge.n	80150e0 <__kernel_sinf+0x18>
 80150d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80150da:	ee17 3a90 	vmov	r3, s15
 80150de:	b35b      	cbz	r3, 8015138 <__kernel_sinf+0x70>
 80150e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80150e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801513c <__kernel_sinf+0x74>
 80150e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8015140 <__kernel_sinf+0x78>
 80150ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80150f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015144 <__kernel_sinf+0x7c>
 80150f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80150f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015148 <__kernel_sinf+0x80>
 80150fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015100:	eddf 7a12 	vldr	s15, [pc, #72]	; 801514c <__kernel_sinf+0x84>
 8015104:	ee60 6a07 	vmul.f32	s13, s0, s14
 8015108:	eee6 7a07 	vfma.f32	s15, s12, s14
 801510c:	b930      	cbnz	r0, 801511c <__kernel_sinf+0x54>
 801510e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8015150 <__kernel_sinf+0x88>
 8015112:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015116:	eea6 0a26 	vfma.f32	s0, s12, s13
 801511a:	4770      	bx	lr
 801511c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8015120:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015124:	eee0 7a86 	vfma.f32	s15, s1, s12
 8015128:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801512c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015154 <__kernel_sinf+0x8c>
 8015130:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8015134:	ee30 0a60 	vsub.f32	s0, s0, s1
 8015138:	4770      	bx	lr
 801513a:	bf00      	nop
 801513c:	2f2ec9d3 	.word	0x2f2ec9d3
 8015140:	b2d72f34 	.word	0xb2d72f34
 8015144:	3638ef1b 	.word	0x3638ef1b
 8015148:	b9500d01 	.word	0xb9500d01
 801514c:	3c088889 	.word	0x3c088889
 8015150:	be2aaaab 	.word	0xbe2aaaab
 8015154:	3e2aaaab 	.word	0x3e2aaaab

08015158 <__kernel_tanf>:
 8015158:	b508      	push	{r3, lr}
 801515a:	ee10 3a10 	vmov	r3, s0
 801515e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015162:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8015166:	eef0 7a40 	vmov.f32	s15, s0
 801516a:	da17      	bge.n	801519c <__kernel_tanf+0x44>
 801516c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8015170:	ee17 1a10 	vmov	r1, s14
 8015174:	bb41      	cbnz	r1, 80151c8 <__kernel_tanf+0x70>
 8015176:	1c43      	adds	r3, r0, #1
 8015178:	4313      	orrs	r3, r2
 801517a:	d108      	bne.n	801518e <__kernel_tanf+0x36>
 801517c:	f7fe f94a 	bl	8013414 <fabsf>
 8015180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015184:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015188:	eeb0 0a67 	vmov.f32	s0, s15
 801518c:	bd08      	pop	{r3, pc}
 801518e:	2801      	cmp	r0, #1
 8015190:	d0fa      	beq.n	8015188 <__kernel_tanf+0x30>
 8015192:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015196:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801519a:	e7f5      	b.n	8015188 <__kernel_tanf+0x30>
 801519c:	494e      	ldr	r1, [pc, #312]	; (80152d8 <__kernel_tanf+0x180>)
 801519e:	428a      	cmp	r2, r1
 80151a0:	dd12      	ble.n	80151c8 <__kernel_tanf+0x70>
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80152dc <__kernel_tanf+0x184>
 80151a8:	bfb8      	it	lt
 80151aa:	eef1 7a40 	vneglt.f32	s15, s0
 80151ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151b2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80152e0 <__kernel_tanf+0x188>
 80151b6:	bfb8      	it	lt
 80151b8:	eef1 0a60 	vneglt.f32	s1, s1
 80151bc:	ee77 0a60 	vsub.f32	s1, s14, s1
 80151c0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80151c4:	eddf 0a47 	vldr	s1, [pc, #284]	; 80152e4 <__kernel_tanf+0x18c>
 80151c8:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80152e8 <__kernel_tanf+0x190>
 80151cc:	eddf 5a47 	vldr	s11, [pc, #284]	; 80152ec <__kernel_tanf+0x194>
 80151d0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 80152f0 <__kernel_tanf+0x198>
 80151d4:	4940      	ldr	r1, [pc, #256]	; (80152d8 <__kernel_tanf+0x180>)
 80151d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80151da:	428a      	cmp	r2, r1
 80151dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80151e0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80151e4:	eee7 5a06 	vfma.f32	s11, s14, s12
 80151e8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 80152f4 <__kernel_tanf+0x19c>
 80151ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80151f0:	eddf 5a41 	vldr	s11, [pc, #260]	; 80152f8 <__kernel_tanf+0x1a0>
 80151f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80151f8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80152fc <__kernel_tanf+0x1a4>
 80151fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015200:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8015300 <__kernel_tanf+0x1a8>
 8015204:	eee6 5a07 	vfma.f32	s11, s12, s14
 8015208:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8015304 <__kernel_tanf+0x1ac>
 801520c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8015210:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8015308 <__kernel_tanf+0x1b0>
 8015214:	eea6 5a07 	vfma.f32	s10, s12, s14
 8015218:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 801530c <__kernel_tanf+0x1b4>
 801521c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8015220:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8015310 <__kernel_tanf+0x1b8>
 8015224:	eea6 5a07 	vfma.f32	s10, s12, s14
 8015228:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8015314 <__kernel_tanf+0x1bc>
 801522c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8015230:	eeb0 7a46 	vmov.f32	s14, s12
 8015234:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015238:	eeb0 6a60 	vmov.f32	s12, s1
 801523c:	eea7 6a24 	vfma.f32	s12, s14, s9
 8015240:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8015318 <__kernel_tanf+0x1c0>
 8015244:	eee6 0a26 	vfma.f32	s1, s12, s13
 8015248:	eee4 0a87 	vfma.f32	s1, s9, s14
 801524c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8015250:	dd1d      	ble.n	801528e <__kernel_tanf+0x136>
 8015252:	ee07 0a10 	vmov	s14, r0
 8015256:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801525a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801525e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8015262:	179b      	asrs	r3, r3, #30
 8015264:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8015268:	f003 0302 	and.w	r3, r3, #2
 801526c:	f1c3 0301 	rsb	r3, r3, #1
 8015270:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015274:	ee76 0a60 	vsub.f32	s1, s12, s1
 8015278:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801527c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015280:	ee07 3a90 	vmov	s15, r3
 8015284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015288:	ee67 7a27 	vmul.f32	s15, s14, s15
 801528c:	e77c      	b.n	8015188 <__kernel_tanf+0x30>
 801528e:	2801      	cmp	r0, #1
 8015290:	d01f      	beq.n	80152d2 <__kernel_tanf+0x17a>
 8015292:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015296:	eec7 5a26 	vdiv.f32	s11, s14, s13
 801529a:	4b20      	ldr	r3, [pc, #128]	; (801531c <__kernel_tanf+0x1c4>)
 801529c:	ee16 2a90 	vmov	r2, s13
 80152a0:	401a      	ands	r2, r3
 80152a2:	ee06 2a10 	vmov	s12, r2
 80152a6:	ee15 2a90 	vmov	r2, s11
 80152aa:	4013      	ands	r3, r2
 80152ac:	ee07 3a10 	vmov	s14, r3
 80152b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80152b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80152b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80152bc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80152c0:	eef0 7a66 	vmov.f32	s15, s13
 80152c4:	eee7 7a20 	vfma.f32	s15, s14, s1
 80152c8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80152cc:	eef0 7a47 	vmov.f32	s15, s14
 80152d0:	e75a      	b.n	8015188 <__kernel_tanf+0x30>
 80152d2:	eef0 7a66 	vmov.f32	s15, s13
 80152d6:	e757      	b.n	8015188 <__kernel_tanf+0x30>
 80152d8:	3f2ca13f 	.word	0x3f2ca13f
 80152dc:	3f490fda 	.word	0x3f490fda
 80152e0:	33222168 	.word	0x33222168
 80152e4:	00000000 	.word	0x00000000
 80152e8:	37d95384 	.word	0x37d95384
 80152ec:	3895c07a 	.word	0x3895c07a
 80152f0:	b79bae5f 	.word	0xb79bae5f
 80152f4:	398137b9 	.word	0x398137b9
 80152f8:	3abede48 	.word	0x3abede48
 80152fc:	3c11371f 	.word	0x3c11371f
 8015300:	3d5d0dd1 	.word	0x3d5d0dd1
 8015304:	38a3f445 	.word	0x38a3f445
 8015308:	3a1a26c8 	.word	0x3a1a26c8
 801530c:	3b6b6916 	.word	0x3b6b6916
 8015310:	3cb327a4 	.word	0x3cb327a4
 8015314:	3e088889 	.word	0x3e088889
 8015318:	3eaaaaab 	.word	0x3eaaaaab
 801531c:	fffff000 	.word	0xfffff000

08015320 <with_errnof>:
 8015320:	b510      	push	{r4, lr}
 8015322:	ed2d 8b02 	vpush	{d8}
 8015326:	eeb0 8a40 	vmov.f32	s16, s0
 801532a:	4604      	mov	r4, r0
 801532c:	f7fb f8ca 	bl	80104c4 <__errno>
 8015330:	eeb0 0a48 	vmov.f32	s0, s16
 8015334:	ecbd 8b02 	vpop	{d8}
 8015338:	6004      	str	r4, [r0, #0]
 801533a:	bd10      	pop	{r4, pc}

0801533c <xflowf>:
 801533c:	b130      	cbz	r0, 801534c <xflowf+0x10>
 801533e:	eef1 7a40 	vneg.f32	s15, s0
 8015342:	2022      	movs	r0, #34	; 0x22
 8015344:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015348:	f7ff bfea 	b.w	8015320 <with_errnof>
 801534c:	eef0 7a40 	vmov.f32	s15, s0
 8015350:	e7f7      	b.n	8015342 <xflowf+0x6>
	...

08015354 <__math_uflowf>:
 8015354:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801535c <__math_uflowf+0x8>
 8015358:	f7ff bff0 	b.w	801533c <xflowf>
 801535c:	10000000 	.word	0x10000000

08015360 <__math_may_uflowf>:
 8015360:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015368 <__math_may_uflowf+0x8>
 8015364:	f7ff bfea 	b.w	801533c <xflowf>
 8015368:	1a200000 	.word	0x1a200000

0801536c <__math_oflowf>:
 801536c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015374 <__math_oflowf+0x8>
 8015370:	f7ff bfe4 	b.w	801533c <xflowf>
 8015374:	70000000 	.word	0x70000000

08015378 <__math_divzerof>:
 8015378:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801537c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015380:	2800      	cmp	r0, #0
 8015382:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8015386:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015394 <__math_divzerof+0x1c>
 801538a:	2022      	movs	r0, #34	; 0x22
 801538c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015390:	f7ff bfc6 	b.w	8015320 <with_errnof>
 8015394:	00000000 	.word	0x00000000

08015398 <__math_invalidf>:
 8015398:	eef0 7a40 	vmov.f32	s15, s0
 801539c:	ee30 7a40 	vsub.f32	s14, s0, s0
 80153a0:	eef4 7a67 	vcmp.f32	s15, s15
 80153a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80153ac:	d602      	bvs.n	80153b4 <__math_invalidf+0x1c>
 80153ae:	2021      	movs	r0, #33	; 0x21
 80153b0:	f7ff bfb6 	b.w	8015320 <with_errnof>
 80153b4:	4770      	bx	lr

080153b6 <matherr>:
 80153b6:	2000      	movs	r0, #0
 80153b8:	4770      	bx	lr
 80153ba:	0000      	movs	r0, r0
 80153bc:	0000      	movs	r0, r0
	...

080153c0 <nan>:
 80153c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80153c8 <nan+0x8>
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	00000000 	.word	0x00000000
 80153cc:	7ff80000 	.word	0x7ff80000

080153d0 <expm1f>:
 80153d0:	ee10 2a10 	vmov	r2, s0
 80153d4:	4984      	ldr	r1, [pc, #528]	; (80155e8 <expm1f+0x218>)
 80153d6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80153da:	428b      	cmp	r3, r1
 80153dc:	d923      	bls.n	8015426 <expm1f+0x56>
 80153de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80153e2:	d902      	bls.n	80153ea <expm1f+0x1a>
 80153e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80153e8:	4770      	bx	lr
 80153ea:	d105      	bne.n	80153f8 <expm1f+0x28>
 80153ec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80153f0:	2a00      	cmp	r2, #0
 80153f2:	fe20 0a27 	vselge.f32	s0, s0, s15
 80153f6:	4770      	bx	lr
 80153f8:	2a00      	cmp	r2, #0
 80153fa:	db08      	blt.n	801540e <expm1f+0x3e>
 80153fc:	4a7b      	ldr	r2, [pc, #492]	; (80155ec <expm1f+0x21c>)
 80153fe:	4293      	cmp	r3, r2
 8015400:	f240 80ea 	bls.w	80155d8 <expm1f+0x208>
 8015404:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80155f0 <expm1f+0x220>
 8015408:	ee20 0a00 	vmul.f32	s0, s0, s0
 801540c:	4770      	bx	lr
 801540e:	eddf 7a79 	vldr	s15, [pc, #484]	; 80155f4 <expm1f+0x224>
 8015412:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541e:	d554      	bpl.n	80154ca <expm1f+0xfa>
 8015420:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015424:	4770      	bx	lr
 8015426:	4974      	ldr	r1, [pc, #464]	; (80155f8 <expm1f+0x228>)
 8015428:	428b      	cmp	r3, r1
 801542a:	d96c      	bls.n	8015506 <expm1f+0x136>
 801542c:	4973      	ldr	r1, [pc, #460]	; (80155fc <expm1f+0x22c>)
 801542e:	428b      	cmp	r3, r1
 8015430:	d84b      	bhi.n	80154ca <expm1f+0xfa>
 8015432:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015600 <expm1f+0x230>
 8015436:	2a00      	cmp	r2, #0
 8015438:	bfa7      	ittee	ge
 801543a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801543e:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8015604 <expm1f+0x234>
 8015442:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8015608 <expm1f+0x238>
 8015446:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801544a:	bfac      	ite	ge
 801544c:	2301      	movge	r3, #1
 801544e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015452:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015456:	ee37 7a40 	vsub.f32	s14, s14, s0
 801545a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801545e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015462:	ee20 5a25 	vmul.f32	s10, s0, s11
 8015466:	eddf 6a69 	vldr	s13, [pc, #420]	; 801560c <expm1f+0x23c>
 801546a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8015610 <expm1f+0x240>
 801546e:	ee20 7a05 	vmul.f32	s14, s0, s10
 8015472:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015476:	eddf 6a67 	vldr	s13, [pc, #412]	; 8015614 <expm1f+0x244>
 801547a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801547e:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8015618 <expm1f+0x248>
 8015482:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015486:	eddf 6a65 	vldr	s13, [pc, #404]	; 801561c <expm1f+0x24c>
 801548a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801548e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015492:	eef0 4a46 	vmov.f32	s9, s12
 8015496:	eee6 4a87 	vfma.f32	s9, s13, s14
 801549a:	eef0 6a64 	vmov.f32	s13, s9
 801549e:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 80154a2:	eee5 4a66 	vfms.f32	s9, s10, s13
 80154a6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80154aa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80154ae:	eee0 6a64 	vfms.f32	s13, s0, s9
 80154b2:	eef0 4a66 	vmov.f32	s9, s13
 80154b6:	eec5 6a24 	vdiv.f32	s13, s10, s9
 80154ba:	ee66 6a87 	vmul.f32	s13, s13, s14
 80154be:	bb83      	cbnz	r3, 8015522 <expm1f+0x152>
 80154c0:	eef0 7a47 	vmov.f32	s15, s14
 80154c4:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80154c8:	e026      	b.n	8015518 <expm1f+0x148>
 80154ca:	eddf 7a55 	vldr	s15, [pc, #340]	; 8015620 <expm1f+0x250>
 80154ce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80154d2:	ee20 7a27 	vmul.f32	s14, s0, s15
 80154d6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80154da:	2a00      	cmp	r2, #0
 80154dc:	fe66 7aa7 	vselge.f32	s15, s13, s15
 80154e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80154e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015600 <expm1f+0x230>
 80154e8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015604 <expm1f+0x234>
 80154ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154f0:	ee17 3a90 	vmov	r3, s15
 80154f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80154fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015500:	eeb0 7a40 	vmov.f32	s14, s0
 8015504:	e7a5      	b.n	8015452 <expm1f+0x82>
 8015506:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801550a:	d208      	bcs.n	801551e <expm1f+0x14e>
 801550c:	eddf 7a38 	vldr	s15, [pc, #224]	; 80155f0 <expm1f+0x220>
 8015510:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015514:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8015518:	ee30 0a67 	vsub.f32	s0, s0, s15
 801551c:	4770      	bx	lr
 801551e:	2300      	movs	r3, #0
 8015520:	e79d      	b.n	801545e <expm1f+0x8e>
 8015522:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015526:	1c5a      	adds	r2, r3, #1
 8015528:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801552c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015530:	d106      	bne.n	8015540 <expm1f+0x170>
 8015532:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015536:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801553a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801553e:	4770      	bx	lr
 8015540:	2b01      	cmp	r3, #1
 8015542:	d118      	bne.n	8015576 <expm1f+0x1a6>
 8015544:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8015548:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015550:	bf41      	itttt	mi
 8015552:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8015556:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 801555a:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 801555e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8015562:	bf5f      	itttt	pl
 8015564:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8015568:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 801556c:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8015570:	eeb0 0a46 	vmovpl.f32	s0, s12
 8015574:	4770      	bx	lr
 8015576:	1c5a      	adds	r2, r3, #1
 8015578:	2a39      	cmp	r2, #57	; 0x39
 801557a:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801557e:	d90b      	bls.n	8015598 <expm1f+0x1c8>
 8015580:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015584:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015588:	ee10 3a10 	vmov	r3, s0
 801558c:	440b      	add	r3, r1
 801558e:	ee00 3a10 	vmov	s0, r3
 8015592:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015596:	4770      	bx	lr
 8015598:	2b16      	cmp	r3, #22
 801559a:	dc11      	bgt.n	80155c0 <expm1f+0x1f0>
 801559c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80155a0:	fa42 f303 	asr.w	r3, r2, r3
 80155a4:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80155a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80155ac:	ee07 3a90 	vmov	s15, r3
 80155b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80155b4:	ee10 3a10 	vmov	r3, s0
 80155b8:	440b      	add	r3, r1
 80155ba:	ee00 3a10 	vmov	s0, r3
 80155be:	4770      	bx	lr
 80155c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80155c4:	05db      	lsls	r3, r3, #23
 80155c6:	ee07 3a10 	vmov	s14, r3
 80155ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80155ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80155d2:	ee30 0a06 	vadd.f32	s0, s0, s12
 80155d6:	e7ed      	b.n	80155b4 <expm1f+0x1e4>
 80155d8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8015620 <expm1f+0x250>
 80155dc:	ee20 7a27 	vmul.f32	s14, s0, s15
 80155e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80155e4:	e77c      	b.n	80154e0 <expm1f+0x110>
 80155e6:	bf00      	nop
 80155e8:	4195b843 	.word	0x4195b843
 80155ec:	42b17217 	.word	0x42b17217
 80155f0:	7149f2ca 	.word	0x7149f2ca
 80155f4:	0da24260 	.word	0x0da24260
 80155f8:	3eb17218 	.word	0x3eb17218
 80155fc:	3f851591 	.word	0x3f851591
 8015600:	3f317180 	.word	0x3f317180
 8015604:	3717f7d1 	.word	0x3717f7d1
 8015608:	b717f7d1 	.word	0xb717f7d1
 801560c:	b457edbb 	.word	0xb457edbb
 8015610:	36867e54 	.word	0x36867e54
 8015614:	b8a670cd 	.word	0xb8a670cd
 8015618:	3ad00d01 	.word	0x3ad00d01
 801561c:	bd088889 	.word	0xbd088889
 8015620:	3fb8aa3b 	.word	0x3fb8aa3b

08015624 <finitef>:
 8015624:	ee10 3a10 	vmov	r3, s0
 8015628:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801562c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015630:	bfac      	ite	ge
 8015632:	2000      	movge	r0, #0
 8015634:	2001      	movlt	r0, #1
 8015636:	4770      	bx	lr

08015638 <scalbnf>:
 8015638:	b508      	push	{r3, lr}
 801563a:	ee10 2a10 	vmov	r2, s0
 801563e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8015642:	ed2d 8b02 	vpush	{d8}
 8015646:	eef0 0a40 	vmov.f32	s1, s0
 801564a:	d004      	beq.n	8015656 <scalbnf+0x1e>
 801564c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015650:	d306      	bcc.n	8015660 <scalbnf+0x28>
 8015652:	ee70 0a00 	vadd.f32	s1, s0, s0
 8015656:	ecbd 8b02 	vpop	{d8}
 801565a:	eeb0 0a60 	vmov.f32	s0, s1
 801565e:	bd08      	pop	{r3, pc}
 8015660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015664:	d21c      	bcs.n	80156a0 <scalbnf+0x68>
 8015666:	4b1f      	ldr	r3, [pc, #124]	; (80156e4 <scalbnf+0xac>)
 8015668:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80156e8 <scalbnf+0xb0>
 801566c:	4298      	cmp	r0, r3
 801566e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8015672:	db10      	blt.n	8015696 <scalbnf+0x5e>
 8015674:	ee10 2a90 	vmov	r2, s1
 8015678:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801567c:	3b19      	subs	r3, #25
 801567e:	4403      	add	r3, r0
 8015680:	2bfe      	cmp	r3, #254	; 0xfe
 8015682:	dd0f      	ble.n	80156a4 <scalbnf+0x6c>
 8015684:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80156ec <scalbnf+0xb4>
 8015688:	eeb0 0a48 	vmov.f32	s0, s16
 801568c:	f000 f834 	bl	80156f8 <copysignf>
 8015690:	ee60 0a08 	vmul.f32	s1, s0, s16
 8015694:	e7df      	b.n	8015656 <scalbnf+0x1e>
 8015696:	eddf 7a16 	vldr	s15, [pc, #88]	; 80156f0 <scalbnf+0xb8>
 801569a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801569e:	e7da      	b.n	8015656 <scalbnf+0x1e>
 80156a0:	0ddb      	lsrs	r3, r3, #23
 80156a2:	e7ec      	b.n	801567e <scalbnf+0x46>
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	dd06      	ble.n	80156b6 <scalbnf+0x7e>
 80156a8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80156ac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80156b0:	ee00 3a90 	vmov	s1, r3
 80156b4:	e7cf      	b.n	8015656 <scalbnf+0x1e>
 80156b6:	f113 0f16 	cmn.w	r3, #22
 80156ba:	da06      	bge.n	80156ca <scalbnf+0x92>
 80156bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80156c0:	4298      	cmp	r0, r3
 80156c2:	dcdf      	bgt.n	8015684 <scalbnf+0x4c>
 80156c4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80156f0 <scalbnf+0xb8>
 80156c8:	e7de      	b.n	8015688 <scalbnf+0x50>
 80156ca:	3319      	adds	r3, #25
 80156cc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80156d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80156d4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80156f4 <scalbnf+0xbc>
 80156d8:	ee07 3a10 	vmov	s14, r3
 80156dc:	ee67 0a27 	vmul.f32	s1, s14, s15
 80156e0:	e7b9      	b.n	8015656 <scalbnf+0x1e>
 80156e2:	bf00      	nop
 80156e4:	ffff3cb0 	.word	0xffff3cb0
 80156e8:	4c000000 	.word	0x4c000000
 80156ec:	7149f2ca 	.word	0x7149f2ca
 80156f0:	0da24260 	.word	0x0da24260
 80156f4:	33000000 	.word	0x33000000

080156f8 <copysignf>:
 80156f8:	ee10 3a10 	vmov	r3, s0
 80156fc:	ee10 2a90 	vmov	r2, s1
 8015700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015704:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015708:	4313      	orrs	r3, r2
 801570a:	ee00 3a10 	vmov	s0, r3
 801570e:	4770      	bx	lr

08015710 <_init>:
 8015710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015712:	bf00      	nop
 8015714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015716:	bc08      	pop	{r3}
 8015718:	469e      	mov	lr, r3
 801571a:	4770      	bx	lr

0801571c <_fini>:
 801571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801571e:	bf00      	nop
 8015720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015722:	bc08      	pop	{r3}
 8015724:	469e      	mov	lr, r3
 8015726:	4770      	bx	lr
