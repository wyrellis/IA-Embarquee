
determination.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002060  080138e0  080138e0  000238e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015940  08015940  00030730  2**0
                  CONTENTS
  4 .ARM          00000008  08015940  08015940  00025940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015948  08015948  00030730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015948  08015948  00025948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801594c  0801594c  0002594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000730  20000000  08015950  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000730  08016080  00030730  2**3
                  ALLOC
 10 ._user_heap_stack 00002804  20000f64  08016080  00030f64  2**0
                  ALLOC
 11 .ARM.attributes 00000032  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193ed  00000000  00000000  00030762  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003793  00000000  00000000  00049b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  0004d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  0004e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bf6b  00000000  00000000  0004efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012297  00000000  00000000  0007af2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102845  00000000  00000000  0008d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00008cad  00000000  00000000  0018fa07  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033e  00000000  00000000  001986b4  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000034  00000000  00000000  001989f4  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00009e8c  00000000  00000000  00198a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000730 	.word	0x20000730
 800021c:	00000000 	.word	0x00000000
 8000220:	080138c8 	.word	0x080138c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000734 	.word	0x20000734
 800023c:	080138c8 	.word	0x080138c8

08000240 <ai_inspector_default_config>:
 8000240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000244:	b084      	sub	sp, #16
 8000246:	2600      	movs	r6, #0
 8000248:	4669      	mov	r1, sp
 800024a:	2200      	movs	r2, #0
 800024c:	2300      	movs	r3, #0
 800024e:	2400      	movs	r4, #0
 8000250:	2500      	movs	r5, #0
 8000252:	f046 0601 	orr.w	r6, r6, #1
 8000256:	e881 003c 	stmia.w	r1, {r2, r3, r4, r5}
 800025a:	f88d 6000 	strb.w	r6, [sp]
 800025e:	e891 4380 	ldmia.w	r1, {r7, r8, r9, lr}
 8000262:	e880 4380 	stmia.w	r0, {r7, r8, r9, lr}
 8000266:	b004      	add	sp, #16
 8000268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800026c <ai_inspector_create>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	0004      	movs	r4, r0
 8000270:	b081      	sub	sp, #4
 8000272:	bf08      	it	eq
 8000274:	2000      	moveq	r0, #0
 8000276:	d026      	beq.n	80002c6 <ai_inspector_create+0x5a>
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <.text_6>)
 800027a:	2200      	movs	r2, #0
 800027c:	2300      	movs	r3, #0
 800027e:	2500      	movs	r5, #0
 8000280:	c02c      	stmia	r0!, {r2, r3, r5}
 8000282:	c02c      	stmia	r0!, {r2, r3, r5}
 8000284:	c02c      	stmia	r0!, {r2, r3, r5}
 8000286:	3824      	subs	r0, #36	; 0x24
 8000288:	2601      	movs	r6, #1
 800028a:	f100 0c18 	add.w	ip, r0, #24
 800028e:	f100 0218 	add.w	r2, r0, #24
 8000292:	7286      	strb	r6, [r0, #10]
 8000294:	8406      	strh	r6, [r0, #32]
 8000296:	f8c0 c018 	str.w	ip, [r0, #24]
 800029a:	61c2      	str	r2, [r0, #28]
 800029c:	b131      	cbz	r1, 80002ac <ai_inspector_create+0x40>
 800029e:	780a      	ldrb	r2, [r1, #0]
 80002a0:	784b      	ldrb	r3, [r1, #1]
 80002a2:	788d      	ldrb	r5, [r1, #2]
 80002a4:	684e      	ldr	r6, [r1, #4]
 80002a6:	688f      	ldr	r7, [r1, #8]
 80002a8:	68c9      	ldr	r1, [r1, #12]
 80002aa:	e002      	b.n	80002b2 <ai_inspector_create+0x46>
 80002ac:	2201      	movs	r2, #1
 80002ae:	2600      	movs	r6, #0
 80002b0:	2700      	movs	r7, #0
 80002b2:	7202      	strb	r2, [r0, #8]
 80002b4:	7243      	strb	r3, [r0, #9]
 80002b6:	7285      	strb	r5, [r0, #10]
 80002b8:	60c6      	str	r6, [r0, #12]
 80002ba:	6107      	str	r7, [r0, #16]
 80002bc:	6141      	str	r1, [r0, #20]
 80002be:	f000 fb85 	bl	80009cc <ai_platform_context_release>
 80002c2:	6020      	str	r0, [r4, #0]
 80002c4:	2001      	movs	r0, #1
 80002c6:	b001      	add	sp, #4
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002cc <.text_6>:
 80002cc:	2000074c 	.word	0x2000074c

080002d0 <ai_inspector_destroy>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f000 fb26 	bl	8000922 <ai_platform_context_acquire>
 80002d6:	0004      	movs	r4, r0
 80002d8:	d101      	bne.n	80002de <ai_inspector_destroy+0xe>
 80002da:	2000      	movs	r0, #0
 80002dc:	bd70      	pop	{r4, r5, r6, pc}
 80002de:	69a0      	ldr	r0, [r4, #24]
 80002e0:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
 80002e4:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80002e8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80002ea:	f104 0018 	add.w	r0, r4, #24
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f1a1 063c 	sub.w	r6, r1, #60	; 0x3c
 80002f4:	d015      	beq.n	8000322 <ai_inspector_destroy+0x52>
 80002f6:	6828      	ldr	r0, [r5, #0]
 80002f8:	f001 fd24 	bl	8001d44 <ai_network_inspect_destroy>
 80002fc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80002fe:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000300:	6048      	str	r0, [r1, #4]
 8000302:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000304:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000306:	6002      	str	r2, [r0, #0]
 8000308:	4628      	mov	r0, r5
 800030a:	f000 fff4 	bl	80012f6 <core_mem_free>
 800030e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8000310:	4635      	mov	r5, r6
 8000312:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8000316:	f104 0218 	add.w	r2, r4, #24
 800031a:	4290      	cmp	r0, r2
 800031c:	f1a1 063c 	sub.w	r6, r1, #60	; 0x3c
 8000320:	d1e9      	bne.n	80002f6 <ai_inspector_destroy+0x26>
 8000322:	2001      	movs	r0, #1
 8000324:	bd70      	pop	{r4, r5, r6, pc}

08000326 <ai_inspector_bind_network>:
 8000326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800032a:	460c      	mov	r4, r1
 800032c:	f000 faf9 	bl	8000922 <ai_platform_context_acquire>
 8000330:	0005      	movs	r5, r0
 8000332:	bf18      	it	ne
 8000334:	2c00      	cmpne	r4, #0
 8000336:	d033      	beq.n	80003a0 <ai_inspector_bind_network+0x7a>
 8000338:	6820      	ldr	r0, [r4, #0]
 800033a:	b388      	cbz	r0, 80003a0 <ai_inspector_bind_network+0x7a>
 800033c:	2044      	movs	r0, #68	; 0x44
 800033e:	f000 ffcd 	bl	80012dc <core_mem_alloc>
 8000342:	0006      	movs	r6, r0
 8000344:	d02c      	beq.n	80003a0 <ai_inspector_bind_network+0x7a>
 8000346:	8c28      	ldrh	r0, [r5, #32]
 8000348:	1c41      	adds	r1, r0, #1
 800034a:	8429      	strh	r1, [r5, #32]
 800034c:	f105 0118 	add.w	r1, r5, #24
 8000350:	8730      	strh	r0, [r6, #56]	; 0x38
 8000352:	e8b4 518d 	ldmia.w	r4!, {r0, r2, r3, r7, r8, ip, lr}
 8000356:	e8a6 518d 	stmia.w	r6!, {r0, r2, r3, r7, r8, ip, lr}
 800035a:	e8b4 518d 	ldmia.w	r4!, {r0, r2, r3, r7, r8, ip, lr}
 800035e:	e8a6 518d 	stmia.w	r6!, {r0, r2, r3, r7, r8, ip, lr}
 8000362:	3e38      	subs	r6, #56	; 0x38
 8000364:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 8000368:	6024      	str	r4, [r4, #0]
 800036a:	6434      	str	r4, [r6, #64]	; 0x40
 800036c:	69a8      	ldr	r0, [r5, #24]
 800036e:	6020      	str	r0, [r4, #0]
 8000370:	6061      	str	r1, [r4, #4]
 8000372:	f105 0108 	add.w	r1, r5, #8
 8000376:	6044      	str	r4, [r0, #4]
 8000378:	61ac      	str	r4, [r5, #24]
 800037a:	6830      	ldr	r0, [r6, #0]
 800037c:	f001 fc0a 	bl	8001b94 <ai_network_inspect_init>
 8000380:	b110      	cbz	r0, 8000388 <ai_inspector_bind_network+0x62>
 8000382:	8f30      	ldrh	r0, [r6, #56]	; 0x38
 8000384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000388:	6821      	ldr	r1, [r4, #0]
 800038a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800038c:	6048      	str	r0, [r1, #4]
 800038e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000390:	6822      	ldr	r2, [r4, #0]
 8000392:	4630      	mov	r0, r6
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	f000 ffae 	bl	80012f6 <core_mem_free>
 800039a:	8c28      	ldrh	r0, [r5, #32]
 800039c:	1e41      	subs	r1, r0, #1
 800039e:	8429      	strh	r1, [r5, #32]
 80003a0:	2000      	movs	r0, #0
 80003a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080003a6 <ai_inspector_unbind_network>:
 80003a6:	b570      	push	{r4, r5, r6, lr}
 80003a8:	460d      	mov	r5, r1
 80003aa:	f000 faba 	bl	8000922 <ai_platform_context_acquire>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	d03e      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003b2:	0029      	movs	r1, r5
 80003b4:	d03c      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003b6:	f850 1f18 	ldr.w	r1, [r0, #24]!
 80003ba:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 80003be:	e002      	b.n	80003c6 <ai_inspector_unbind_network+0x20>
 80003c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80003c2:	f1a2 043c 	sub.w	r4, r2, #60	; 0x3c
 80003c6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80003ca:	4281      	cmp	r1, r0
 80003cc:	d030      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003ce:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80003d0:	42aa      	cmp	r2, r5
 80003d2:	d01d      	beq.n	8000410 <ai_inspector_unbind_network+0x6a>
 80003d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003d6:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 80003da:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80003de:	4286      	cmp	r6, r0
 80003e0:	d026      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003e2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80003e4:	42aa      	cmp	r2, r5
 80003e6:	d013      	beq.n	8000410 <ai_inspector_unbind_network+0x6a>
 80003e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003ea:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 80003ee:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80003f2:	4286      	cmp	r6, r0
 80003f4:	d01c      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 80003f6:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80003f8:	42aa      	cmp	r2, r5
 80003fa:	d009      	beq.n	8000410 <ai_inspector_unbind_network+0x6a>
 80003fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80003fe:	f1a1 043c 	sub.w	r4, r1, #60	; 0x3c
 8000402:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8000406:	4286      	cmp	r6, r0
 8000408:	d012      	beq.n	8000430 <ai_inspector_unbind_network+0x8a>
 800040a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800040c:	42aa      	cmp	r2, r5
 800040e:	d1d7      	bne.n	80003c0 <ai_inspector_unbind_network+0x1a>
 8000410:	b174      	cbz	r4, 8000430 <ai_inspector_unbind_network+0x8a>
 8000412:	6820      	ldr	r0, [r4, #0]
 8000414:	f001 fc96 	bl	8001d44 <ai_network_inspect_destroy>
 8000418:	b158      	cbz	r0, 8000432 <ai_inspector_unbind_network+0x8c>
 800041a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800041c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800041e:	6048      	str	r0, [r1, #4]
 8000420:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000422:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000424:	6002      	str	r2, [r0, #0]
 8000426:	4620      	mov	r0, r4
 8000428:	f000 ff65 	bl	80012f6 <core_mem_free>
 800042c:	2001      	movs	r0, #1
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	2000      	movs	r0, #0
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <ai_inspector_get_report>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	b081      	sub	sp, #4
 8000438:	460d      	mov	r5, r1
 800043a:	4614      	mov	r4, r2
 800043c:	f000 fa71 	bl	8000922 <ai_platform_context_acquire>
 8000440:	2800      	cmp	r0, #0
 8000442:	bf18      	it	ne
 8000444:	2c00      	cmpne	r4, #0
 8000446:	d031      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000448:	f100 0118 	add.w	r1, r0, #24
 800044c:	6808      	ldr	r0, [r1, #0]
 800044e:	383c      	subs	r0, #60	; 0x3c
 8000450:	e002      	b.n	8000458 <ai_inspector_get_report+0x24>
 8000452:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000454:	f1a2 003c 	sub.w	r0, r2, #60	; 0x3c
 8000458:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800045c:	428b      	cmp	r3, r1
 800045e:	d025      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000460:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000462:	42aa      	cmp	r2, r5
 8000464:	d01a      	beq.n	800049c <ai_inspector_get_report+0x68>
 8000466:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000468:	383c      	subs	r0, #60	; 0x3c
 800046a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800046e:	428b      	cmp	r3, r1
 8000470:	d01c      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000472:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000474:	42aa      	cmp	r2, r5
 8000476:	d011      	beq.n	800049c <ai_inspector_get_report+0x68>
 8000478:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800047a:	383c      	subs	r0, #60	; 0x3c
 800047c:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8000480:	428b      	cmp	r3, r1
 8000482:	d013      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000484:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000486:	42aa      	cmp	r2, r5
 8000488:	d008      	beq.n	800049c <ai_inspector_get_report+0x68>
 800048a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800048c:	383c      	subs	r0, #60	; 0x3c
 800048e:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8000492:	428b      	cmp	r3, r1
 8000494:	d00a      	beq.n	80004ac <ai_inspector_get_report+0x78>
 8000496:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000498:	42aa      	cmp	r2, r5
 800049a:	d1da      	bne.n	8000452 <ai_inspector_get_report+0x1e>
 800049c:	b130      	cbz	r0, 80004ac <ai_inspector_get_report+0x78>
 800049e:	6800      	ldr	r0, [r0, #0]
 80004a0:	4621      	mov	r1, r4
 80004a2:	b001      	add	sp, #4
 80004a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80004a8:	f001 bc34 	b.w	8001d14 <ai_network_inspect_get_report>
 80004ac:	2000      	movs	r0, #0
 80004ae:	b001      	add	sp, #4
 80004b0:	bd30      	pop	{r4, r5, pc}

080004b2 <ai_inspector_run>:
 80004b2:	b570      	push	{r4, r5, r6, lr}
 80004b4:	460e      	mov	r6, r1
 80004b6:	4614      	mov	r4, r2
 80004b8:	461d      	mov	r5, r3
 80004ba:	f000 fa32 	bl	8000922 <ai_platform_context_acquire>
 80004be:	2800      	cmp	r0, #0
 80004c0:	bf18      	it	ne
 80004c2:	2c00      	cmpne	r4, #0
 80004c4:	d031      	beq.n	800052a <ai_inspector_run+0x78>
 80004c6:	f100 0118 	add.w	r1, r0, #24
 80004ca:	6808      	ldr	r0, [r1, #0]
 80004cc:	383c      	subs	r0, #60	; 0x3c
 80004ce:	e002      	b.n	80004d6 <ai_inspector_run+0x24>
 80004d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80004d2:	f1a2 003c 	sub.w	r0, r2, #60	; 0x3c
 80004d6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80004da:	428b      	cmp	r3, r1
 80004dc:	d025      	beq.n	800052a <ai_inspector_run+0x78>
 80004de:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80004e0:	42b2      	cmp	r2, r6
 80004e2:	d01a      	beq.n	800051a <ai_inspector_run+0x68>
 80004e4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80004e6:	383c      	subs	r0, #60	; 0x3c
 80004e8:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d01c      	beq.n	800052a <ai_inspector_run+0x78>
 80004f0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80004f2:	42b2      	cmp	r2, r6
 80004f4:	d011      	beq.n	800051a <ai_inspector_run+0x68>
 80004f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80004f8:	383c      	subs	r0, #60	; 0x3c
 80004fa:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80004fe:	428b      	cmp	r3, r1
 8000500:	d013      	beq.n	800052a <ai_inspector_run+0x78>
 8000502:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000504:	42b2      	cmp	r2, r6
 8000506:	d008      	beq.n	800051a <ai_inspector_run+0x68>
 8000508:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800050a:	383c      	subs	r0, #60	; 0x3c
 800050c:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8000510:	428b      	cmp	r3, r1
 8000512:	d00a      	beq.n	800052a <ai_inspector_run+0x78>
 8000514:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000516:	42b2      	cmp	r2, r6
 8000518:	d1da      	bne.n	80004d0 <ai_inspector_run+0x1e>
 800051a:	b130      	cbz	r0, 800052a <ai_inspector_run+0x78>
 800051c:	462a      	mov	r2, r5
 800051e:	4621      	mov	r1, r4
 8000520:	6800      	ldr	r0, [r0, #0]
 8000522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000526:	f000 bc95 	b.w	8000e54 <ai_platform_network_process>
 800052a:	2000      	movs	r0, #0
 800052c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000530 <CRC_Lock>:
 8000530:	f8df 0904 	ldr.w	r0, [pc, #2308]	; 8000e38 <.text_19>
 8000534:	f240 4249 	movw	r2, #1097	; 0x449
 8000538:	6801      	ldr	r1, [r0, #0]
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	0049      	lsls	r1, r1, #1
 800053e:	6001      	str	r1, [r0, #0]
 8000540:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8000e3c <.text_20>
 8000544:	6801      	ldr	r1, [r0, #0]
 8000546:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800054a:	4291      	cmp	r1, r2
 800054c:	d115      	bne.n	800057a <CRC_Lock+0x4a>
 800054e:	2001      	movs	r0, #1
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	4310      	orrs	r0, r2
 8000556:	4308      	orrs	r0, r1
 8000558:	d01d      	beq.n	8000596 <CRC_Lock+0x66>
 800055a:	f8df 18e4 	ldr.w	r1, [pc, #2276]	; 8000e40 <.text_21>
 800055e:	2201      	movs	r2, #1
 8000560:	608a      	str	r2, [r1, #8]
 8000562:	6888      	ldr	r0, [r1, #8]
 8000564:	2800      	cmp	r0, #0
 8000566:	d1fc      	bne.n	8000562 <CRC_Lock+0x32>
 8000568:	f8df 28d8 	ldr.w	r2, [pc, #2264]	; 8000e44 <.text_22>
 800056c:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 8000e48 <.text_23>
 8000570:	600a      	str	r2, [r1, #0]
 8000572:	6809      	ldr	r1, [r1, #0]
 8000574:	4299      	cmp	r1, r3
 8000576:	d026      	beq.n	80005c6 <CRC_Lock+0x96>
 8000578:	e7fe      	b.n	8000578 <CRC_Lock+0x48>
 800057a:	2000      	movs	r0, #0
 800057c:	f240 4c51 	movw	ip, #1105	; 0x451
 8000580:	4561      	cmp	r1, ip
 8000582:	bf08      	it	eq
 8000584:	2201      	moveq	r2, #1
 8000586:	d0e4      	beq.n	8000552 <CRC_Lock+0x22>
 8000588:	2200      	movs	r2, #0
 800058a:	f240 4352 	movw	r3, #1106	; 0x452
 800058e:	4299      	cmp	r1, r3
 8000590:	d1df      	bne.n	8000552 <CRC_Lock+0x22>
 8000592:	2101      	movs	r1, #1
 8000594:	e7de      	b.n	8000554 <CRC_Lock+0x24>
 8000596:	f8df 08b4 	ldr.w	r0, [pc, #2228]	; 8000e4c <.text_24>
 800059a:	6801      	ldr	r1, [r0, #0]
 800059c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005a0:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80005a4:	d10f      	bne.n	80005c6 <CRC_Lock+0x96>
 80005a6:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8000e50 <.text_25>
 80005aa:	2201      	movs	r2, #1
 80005ac:	608a      	str	r2, [r1, #8]
 80005ae:	6888      	ldr	r0, [r1, #8]
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d1fc      	bne.n	80005ae <CRC_Lock+0x7e>
 80005b4:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000e44 <.text_22>
 80005b8:	f8df 388c 	ldr.w	r3, [pc, #2188]	; 8000e48 <.text_23>
 80005bc:	600a      	str	r2, [r1, #0]
 80005be:	6809      	ldr	r1, [r1, #0]
 80005c0:	4299      	cmp	r1, r3
 80005c2:	d000      	beq.n	80005c6 <CRC_Lock+0x96>
 80005c4:	e7fe      	b.n	80005c4 <CRC_Lock+0x94>
 80005c6:	4770      	bx	lr

080005c8 <_ai_platform_get_io_buffers_info>:
 80005c8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005cc:	2500      	movs	r5, #0
 80005ce:	46aa      	mov	sl, r5
 80005d0:	b082      	sub	sp, #8
 80005d2:	4607      	mov	r7, r0
 80005d4:	46ab      	mov	fp, r5
 80005d6:	46d0      	mov	r8, sl
 80005d8:	46d1      	mov	r9, sl
 80005da:	e028      	b.n	800062e <_ai_platform_get_io_buffers_info+0x66>
 80005dc:	2000      	movs	r0, #0
 80005de:	e01c      	b.n	800061a <_ai_platform_get_io_buffers_info+0x52>
 80005e0:	f850 400a 	ldr.w	r4, [r0, sl]
 80005e4:	b364      	cbz	r4, 8000640 <_ai_platform_get_io_buffers_info+0x78>
 80005e6:	68b8      	ldr	r0, [r7, #8]
 80005e8:	6882      	ldr	r2, [r0, #8]
 80005ea:	4442      	add	r2, r8
 80005ec:	6841      	ldr	r1, [r0, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	69a3      	ldr	r3, [r4, #24]
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	eb01 0609 	add.w	r6, r1, r9
 80005f8:	f006 f8d2 	bl	80067a0 <ai_array_to_buffer_fmt>
 80005fc:	2101      	movs	r1, #1
 80005fe:	6030      	str	r0, [r6, #0]
 8000600:	80b1      	strh	r1, [r6, #4]
 8000602:	68e0      	ldr	r0, [r4, #12]
 8000604:	68c2      	ldr	r2, [r0, #12]
 8000606:	80f2      	strh	r2, [r6, #6]
 8000608:	6881      	ldr	r1, [r0, #8]
 800060a:	8131      	strh	r1, [r6, #8]
 800060c:	6840      	ldr	r0, [r0, #4]
 800060e:	60f0      	str	r0, [r6, #12]
 8000610:	69a1      	ldr	r1, [r4, #24]
 8000612:	688a      	ldr	r2, [r1, #8]
 8000614:	6132      	str	r2, [r6, #16]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	b9e0      	cbnz	r0, 8000654 <_ai_platform_get_io_buffers_info+0x8c>
 800061a:	6170      	str	r0, [r6, #20]
 800061c:	1c6d      	adds	r5, r5, #1
 800061e:	f10b 0b01 	add.w	fp, fp, #1
 8000622:	f109 0918 	add.w	r9, r9, #24
 8000626:	f108 0808 	add.w	r8, r8, #8
 800062a:	f10a 0a04 	add.w	sl, sl, #4
 800062e:	2f00      	cmp	r7, #0
 8000630:	bf14      	ite	ne
 8000632:	8838      	ldrhne	r0, [r7, #0]
 8000634:	2000      	moveq	r0, #0
 8000636:	4583      	cmp	fp, r0
 8000638:	d202      	bcs.n	8000640 <_ai_platform_get_io_buffers_info+0x78>
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	2800      	cmp	r0, #0
 800063e:	d1cf      	bne.n	80005e0 <_ai_platform_get_io_buffers_info+0x18>
 8000640:	b2a8      	uxth	r0, r5
 8000642:	b118      	cbz	r0, 800064c <_ai_platform_get_io_buffers_info+0x84>
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	9802      	ldr	r0, [sp, #8]
 8000648:	684a      	ldr	r2, [r1, #4]
 800064a:	6002      	str	r2, [r0, #0]
 800064c:	b2a8      	uxth	r0, r5
 800064e:	b003      	add	sp, #12
 8000650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000654:	9900      	ldr	r1, [sp, #0]
 8000656:	2000      	movs	r0, #0
 8000658:	6008      	str	r0, [r1, #0]
 800065a:	9a00      	ldr	r2, [sp, #0]
 800065c:	6820      	ldr	r0, [r4, #0]
 800065e:	2800      	cmp	r0, #0
 8000660:	6050      	str	r0, [r2, #4]
 8000662:	bf1c      	itt	ne
 8000664:	8840      	ldrhne	r0, [r0, #2]
 8000666:	2800      	cmpne	r0, #0
 8000668:	d0b8      	beq.n	80005dc <_ai_platform_get_io_buffers_info+0x14>
 800066a:	9a00      	ldr	r2, [sp, #0]
 800066c:	2101      	movs	r1, #1
 800066e:	6011      	str	r1, [r2, #0]
 8000670:	9800      	ldr	r0, [sp, #0]
 8000672:	e7d2      	b.n	800061a <_ai_platform_get_io_buffers_info+0x52>

08000674 <_platform_network_state_setup>:
 8000674:	b470      	push	{r4, r5, r6}
 8000676:	68d3      	ldr	r3, [r2, #12]
 8000678:	6955      	ldr	r5, [r2, #20]
 800067a:	68dc      	ldr	r4, [r3, #12]
 800067c:	68eb      	ldr	r3, [r5, #12]
 800067e:	435c      	muls	r4, r3
 8000680:	6084      	str	r4, [r0, #8]
 8000682:	888e      	ldrh	r6, [r1, #4]
 8000684:	4374      	muls	r4, r6
 8000686:	60c4      	str	r4, [r0, #12]
 8000688:	6909      	ldr	r1, [r1, #16]
 800068a:	68c3      	ldr	r3, [r0, #12]
 800068c:	6041      	str	r1, [r0, #4]
 800068e:	4419      	add	r1, r3
 8000690:	6001      	str	r1, [r0, #0]
 8000692:	6992      	ldr	r2, [r2, #24]
 8000694:	6814      	ldr	r4, [r2, #0]
 8000696:	00a5      	lsls	r5, r4, #2
 8000698:	d407      	bmi.n	80006aa <_platform_network_state_setup+0x36>
 800069a:	6894      	ldr	r4, [r2, #8]
 800069c:	68d1      	ldr	r1, [r2, #12]
 800069e:	6843      	ldr	r3, [r0, #4]
 80006a0:	1a64      	subs	r4, r4, r1
 80006a2:	1919      	adds	r1, r3, r4
 80006a4:	6091      	str	r1, [r2, #8]
 80006a6:	6840      	ldr	r0, [r0, #4]
 80006a8:	60d0      	str	r0, [r2, #12]
 80006aa:	bc70      	pop	{r4, r5, r6}
 80006ac:	4770      	bx	lr

080006ae <ai_platform_runtime_get_revision>:
 80006ae:	f8df 0788 	ldr.w	r0, [pc, #1928]	; 8000e38 <.text_19>
 80006b2:	f240 4249 	movw	r2, #1097	; 0x449
 80006b6:	6801      	ldr	r1, [r0, #0]
 80006b8:	0849      	lsrs	r1, r1, #1
 80006ba:	0049      	lsls	r1, r1, #1
 80006bc:	6001      	str	r1, [r0, #0]
 80006be:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000e3c <.text_20>
 80006c2:	6801      	ldr	r1, [r0, #0]
 80006c4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80006c8:	4291      	cmp	r1, r2
 80006ca:	d115      	bne.n	80006f8 <ai_platform_runtime_get_revision+0x4a>
 80006cc:	2001      	movs	r0, #1
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	4310      	orrs	r0, r2
 80006d4:	4308      	orrs	r0, r1
 80006d6:	d01d      	beq.n	8000714 <ai_platform_runtime_get_revision+0x66>
 80006d8:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000e40 <.text_21>
 80006dc:	2201      	movs	r2, #1
 80006de:	608a      	str	r2, [r1, #8]
 80006e0:	6888      	ldr	r0, [r1, #8]
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d1fc      	bne.n	80006e0 <ai_platform_runtime_get_revision+0x32>
 80006e6:	f8df 275c 	ldr.w	r2, [pc, #1884]	; 8000e44 <.text_22>
 80006ea:	f8df 375c 	ldr.w	r3, [pc, #1884]	; 8000e48 <.text_23>
 80006ee:	600a      	str	r2, [r1, #0]
 80006f0:	6809      	ldr	r1, [r1, #0]
 80006f2:	4299      	cmp	r1, r3
 80006f4:	d026      	beq.n	8000744 <ai_platform_runtime_get_revision+0x96>
 80006f6:	e7fe      	b.n	80006f6 <ai_platform_runtime_get_revision+0x48>
 80006f8:	2000      	movs	r0, #0
 80006fa:	f240 4c51 	movw	ip, #1105	; 0x451
 80006fe:	4561      	cmp	r1, ip
 8000700:	bf08      	it	eq
 8000702:	2201      	moveq	r2, #1
 8000704:	d0e4      	beq.n	80006d0 <ai_platform_runtime_get_revision+0x22>
 8000706:	2200      	movs	r2, #0
 8000708:	f240 4352 	movw	r3, #1106	; 0x452
 800070c:	4299      	cmp	r1, r3
 800070e:	d1df      	bne.n	80006d0 <ai_platform_runtime_get_revision+0x22>
 8000710:	2101      	movs	r1, #1
 8000712:	e7de      	b.n	80006d2 <ai_platform_runtime_get_revision+0x24>
 8000714:	f8df 0734 	ldr.w	r0, [pc, #1844]	; 8000e4c <.text_24>
 8000718:	6801      	ldr	r1, [r0, #0]
 800071a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800071e:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000722:	d10f      	bne.n	8000744 <ai_platform_runtime_get_revision+0x96>
 8000724:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 8000e50 <.text_25>
 8000728:	2201      	movs	r2, #1
 800072a:	608a      	str	r2, [r1, #8]
 800072c:	6888      	ldr	r0, [r1, #8]
 800072e:	2800      	cmp	r0, #0
 8000730:	d1fc      	bne.n	800072c <ai_platform_runtime_get_revision+0x7e>
 8000732:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000e44 <.text_22>
 8000736:	f8df 3710 	ldr.w	r3, [pc, #1808]	; 8000e48 <.text_23>
 800073a:	600a      	str	r2, [r1, #0]
 800073c:	6809      	ldr	r1, [r1, #0]
 800073e:	4299      	cmp	r1, r3
 8000740:	d000      	beq.n	8000744 <ai_platform_runtime_get_revision+0x96>
 8000742:	e7fe      	b.n	8000742 <ai_platform_runtime_get_revision+0x94>
 8000744:	a0a3      	add	r0, pc, #652	; (adr r0, 80009d4 <.text_11>)
 8000746:	4770      	bx	lr

08000748 <ai_platform_runtime_get_version>:
 8000748:	f8df 06ec 	ldr.w	r0, [pc, #1772]	; 8000e38 <.text_19>
 800074c:	f240 4249 	movw	r2, #1097	; 0x449
 8000750:	6801      	ldr	r1, [r0, #0]
 8000752:	0849      	lsrs	r1, r1, #1
 8000754:	0049      	lsls	r1, r1, #1
 8000756:	6001      	str	r1, [r0, #0]
 8000758:	f8df 06e0 	ldr.w	r0, [pc, #1760]	; 8000e3c <.text_20>
 800075c:	6801      	ldr	r1, [r0, #0]
 800075e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000762:	4291      	cmp	r1, r2
 8000764:	d115      	bne.n	8000792 <ai_platform_runtime_get_version+0x4a>
 8000766:	2001      	movs	r0, #1
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	4310      	orrs	r0, r2
 800076e:	4308      	orrs	r0, r1
 8000770:	d01d      	beq.n	80007ae <ai_platform_runtime_get_version+0x66>
 8000772:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000e40 <.text_21>
 8000776:	2201      	movs	r2, #1
 8000778:	608a      	str	r2, [r1, #8]
 800077a:	6888      	ldr	r0, [r1, #8]
 800077c:	2800      	cmp	r0, #0
 800077e:	d1fc      	bne.n	800077a <ai_platform_runtime_get_version+0x32>
 8000780:	f8df 26c0 	ldr.w	r2, [pc, #1728]	; 8000e44 <.text_22>
 8000784:	f8df 36c0 	ldr.w	r3, [pc, #1728]	; 8000e48 <.text_23>
 8000788:	600a      	str	r2, [r1, #0]
 800078a:	6809      	ldr	r1, [r1, #0]
 800078c:	4299      	cmp	r1, r3
 800078e:	d026      	beq.n	80007de <ai_platform_runtime_get_version+0x96>
 8000790:	e7fe      	b.n	8000790 <ai_platform_runtime_get_version+0x48>
 8000792:	2000      	movs	r0, #0
 8000794:	f240 4c51 	movw	ip, #1105	; 0x451
 8000798:	4561      	cmp	r1, ip
 800079a:	bf08      	it	eq
 800079c:	2201      	moveq	r2, #1
 800079e:	d0e4      	beq.n	800076a <ai_platform_runtime_get_version+0x22>
 80007a0:	2200      	movs	r2, #0
 80007a2:	f240 4352 	movw	r3, #1106	; 0x452
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d1df      	bne.n	800076a <ai_platform_runtime_get_version+0x22>
 80007aa:	2101      	movs	r1, #1
 80007ac:	e7de      	b.n	800076c <ai_platform_runtime_get_version+0x24>
 80007ae:	f8df 069c 	ldr.w	r0, [pc, #1692]	; 8000e4c <.text_24>
 80007b2:	6801      	ldr	r1, [r0, #0]
 80007b4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007b8:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80007bc:	d10f      	bne.n	80007de <ai_platform_runtime_get_version+0x96>
 80007be:	f8df 1690 	ldr.w	r1, [pc, #1680]	; 8000e50 <.text_25>
 80007c2:	2201      	movs	r2, #1
 80007c4:	608a      	str	r2, [r1, #8]
 80007c6:	6888      	ldr	r0, [r1, #8]
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d1fc      	bne.n	80007c6 <ai_platform_runtime_get_version+0x7e>
 80007cc:	f8df 2674 	ldr.w	r2, [pc, #1652]	; 8000e44 <.text_22>
 80007d0:	f8df 3674 	ldr.w	r3, [pc, #1652]	; 8000e48 <.text_23>
 80007d4:	600a      	str	r2, [r1, #0]
 80007d6:	6809      	ldr	r1, [r1, #0]
 80007d8:	4299      	cmp	r1, r3
 80007da:	d000      	beq.n	80007de <ai_platform_runtime_get_version+0x96>
 80007dc:	e7fe      	b.n	80007dc <ai_platform_runtime_get_version+0x94>
 80007de:	f60f 20b0 	addw	r0, pc, #2736	; 0xab0
 80007e2:	6800      	ldr	r0, [r0, #0]
 80007e4:	4770      	bx	lr

080007e6 <ai_platform_api_get_version>:
 80007e6:	f8df 0650 	ldr.w	r0, [pc, #1616]	; 8000e38 <.text_19>
 80007ea:	f240 4249 	movw	r2, #1097	; 0x449
 80007ee:	6801      	ldr	r1, [r0, #0]
 80007f0:	0849      	lsrs	r1, r1, #1
 80007f2:	0049      	lsls	r1, r1, #1
 80007f4:	6001      	str	r1, [r0, #0]
 80007f6:	f8df 0644 	ldr.w	r0, [pc, #1604]	; 8000e3c <.text_20>
 80007fa:	6801      	ldr	r1, [r0, #0]
 80007fc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000800:	4291      	cmp	r1, r2
 8000802:	d115      	bne.n	8000830 <ai_platform_api_get_version+0x4a>
 8000804:	2001      	movs	r0, #1
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	4310      	orrs	r0, r2
 800080c:	4308      	orrs	r0, r1
 800080e:	d01d      	beq.n	800084c <ai_platform_api_get_version+0x66>
 8000810:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000e40 <.text_21>
 8000814:	2201      	movs	r2, #1
 8000816:	608a      	str	r2, [r1, #8]
 8000818:	6888      	ldr	r0, [r1, #8]
 800081a:	2800      	cmp	r0, #0
 800081c:	d1fc      	bne.n	8000818 <ai_platform_api_get_version+0x32>
 800081e:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 8000e44 <.text_22>
 8000822:	f8df 3624 	ldr.w	r3, [pc, #1572]	; 8000e48 <.text_23>
 8000826:	600a      	str	r2, [r1, #0]
 8000828:	6809      	ldr	r1, [r1, #0]
 800082a:	4299      	cmp	r1, r3
 800082c:	d026      	beq.n	800087c <ai_platform_api_get_version+0x96>
 800082e:	e7fe      	b.n	800082e <ai_platform_api_get_version+0x48>
 8000830:	2000      	movs	r0, #0
 8000832:	f240 4c51 	movw	ip, #1105	; 0x451
 8000836:	4561      	cmp	r1, ip
 8000838:	bf08      	it	eq
 800083a:	2201      	moveq	r2, #1
 800083c:	d0e4      	beq.n	8000808 <ai_platform_api_get_version+0x22>
 800083e:	2200      	movs	r2, #0
 8000840:	f240 4352 	movw	r3, #1106	; 0x452
 8000844:	4299      	cmp	r1, r3
 8000846:	d1df      	bne.n	8000808 <ai_platform_api_get_version+0x22>
 8000848:	2101      	movs	r1, #1
 800084a:	e7de      	b.n	800080a <ai_platform_api_get_version+0x24>
 800084c:	f8df 05fc 	ldr.w	r0, [pc, #1532]	; 8000e4c <.text_24>
 8000850:	6801      	ldr	r1, [r0, #0]
 8000852:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000856:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800085a:	d10f      	bne.n	800087c <ai_platform_api_get_version+0x96>
 800085c:	f8df 15f0 	ldr.w	r1, [pc, #1520]	; 8000e50 <.text_25>
 8000860:	2201      	movs	r2, #1
 8000862:	608a      	str	r2, [r1, #8]
 8000864:	6888      	ldr	r0, [r1, #8]
 8000866:	2800      	cmp	r0, #0
 8000868:	d1fc      	bne.n	8000864 <ai_platform_api_get_version+0x7e>
 800086a:	f8df 25d8 	ldr.w	r2, [pc, #1496]	; 8000e44 <.text_22>
 800086e:	f8df 35d8 	ldr.w	r3, [pc, #1496]	; 8000e48 <.text_23>
 8000872:	600a      	str	r2, [r1, #0]
 8000874:	6809      	ldr	r1, [r1, #0]
 8000876:	4299      	cmp	r1, r3
 8000878:	d000      	beq.n	800087c <ai_platform_api_get_version+0x96>
 800087a:	e7fe      	b.n	800087a <ai_platform_api_get_version+0x94>
 800087c:	f60f 2014 	addw	r0, pc, #2580	; 0xa14
 8000880:	6800      	ldr	r0, [r0, #0]
 8000882:	4770      	bx	lr

08000884 <ai_platform_interface_api_get_version>:
 8000884:	f8df 05b0 	ldr.w	r0, [pc, #1456]	; 8000e38 <.text_19>
 8000888:	f240 4249 	movw	r2, #1097	; 0x449
 800088c:	6801      	ldr	r1, [r0, #0]
 800088e:	0849      	lsrs	r1, r1, #1
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	6001      	str	r1, [r0, #0]
 8000894:	f8df 05a4 	ldr.w	r0, [pc, #1444]	; 8000e3c <.text_20>
 8000898:	6801      	ldr	r1, [r0, #0]
 800089a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800089e:	4291      	cmp	r1, r2
 80008a0:	d115      	bne.n	80008ce <ai_platform_interface_api_get_version+0x4a>
 80008a2:	2001      	movs	r0, #1
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	4310      	orrs	r0, r2
 80008aa:	4308      	orrs	r0, r1
 80008ac:	d01d      	beq.n	80008ea <ai_platform_interface_api_get_version+0x66>
 80008ae:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000e40 <.text_21>
 80008b2:	2201      	movs	r2, #1
 80008b4:	608a      	str	r2, [r1, #8]
 80008b6:	6888      	ldr	r0, [r1, #8]
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d1fc      	bne.n	80008b6 <ai_platform_interface_api_get_version+0x32>
 80008bc:	f8df 2584 	ldr.w	r2, [pc, #1412]	; 8000e44 <.text_22>
 80008c0:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 8000e48 <.text_23>
 80008c4:	600a      	str	r2, [r1, #0]
 80008c6:	6809      	ldr	r1, [r1, #0]
 80008c8:	4299      	cmp	r1, r3
 80008ca:	d026      	beq.n	800091a <ai_platform_interface_api_get_version+0x96>
 80008cc:	e7fe      	b.n	80008cc <ai_platform_interface_api_get_version+0x48>
 80008ce:	2000      	movs	r0, #0
 80008d0:	f240 4c51 	movw	ip, #1105	; 0x451
 80008d4:	4561      	cmp	r1, ip
 80008d6:	bf08      	it	eq
 80008d8:	2201      	moveq	r2, #1
 80008da:	d0e4      	beq.n	80008a6 <ai_platform_interface_api_get_version+0x22>
 80008dc:	2200      	movs	r2, #0
 80008de:	f240 4352 	movw	r3, #1106	; 0x452
 80008e2:	4299      	cmp	r1, r3
 80008e4:	d1df      	bne.n	80008a6 <ai_platform_interface_api_get_version+0x22>
 80008e6:	2101      	movs	r1, #1
 80008e8:	e7de      	b.n	80008a8 <ai_platform_interface_api_get_version+0x24>
 80008ea:	f8df 0560 	ldr.w	r0, [pc, #1376]	; 8000e4c <.text_24>
 80008ee:	6801      	ldr	r1, [r0, #0]
 80008f0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80008f4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80008f8:	d10f      	bne.n	800091a <ai_platform_interface_api_get_version+0x96>
 80008fa:	f8df 1554 	ldr.w	r1, [pc, #1364]	; 8000e50 <.text_25>
 80008fe:	2201      	movs	r2, #1
 8000900:	608a      	str	r2, [r1, #8]
 8000902:	6888      	ldr	r0, [r1, #8]
 8000904:	2800      	cmp	r0, #0
 8000906:	d1fc      	bne.n	8000902 <ai_platform_interface_api_get_version+0x7e>
 8000908:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 8000e44 <.text_22>
 800090c:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000e48 <.text_23>
 8000910:	600a      	str	r2, [r1, #0]
 8000912:	6809      	ldr	r1, [r1, #0]
 8000914:	4299      	cmp	r1, r3
 8000916:	d000      	beq.n	800091a <ai_platform_interface_api_get_version+0x96>
 8000918:	e7fe      	b.n	8000918 <ai_platform_interface_api_get_version+0x94>
 800091a:	f60f 107c 	addw	r0, pc, #2428	; 0x97c
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	4770      	bx	lr

08000922 <ai_platform_context_acquire>:
 8000922:	b430      	push	{r4, r5}
 8000924:	b120      	cbz	r0, 8000930 <ai_platform_context_acquire+0xe>
 8000926:	6801      	ldr	r1, [r0, #0]
 8000928:	f8df 2940 	ldr.w	r2, [pc, #2368]	; 800126c <.text_27>
 800092c:	4291      	cmp	r1, r2
 800092e:	d000      	beq.n	8000932 <ai_platform_context_acquire+0x10>
 8000930:	2000      	movs	r0, #0
 8000932:	f8df 1504 	ldr.w	r1, [pc, #1284]	; 8000e38 <.text_19>
 8000936:	f240 4449 	movw	r4, #1097	; 0x449
 800093a:	680b      	ldr	r3, [r1, #0]
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	600b      	str	r3, [r1, #0]
 8000942:	f8df 14f8 	ldr.w	r1, [pc, #1272]	; 8000e3c <.text_20>
 8000946:	680a      	ldr	r2, [r1, #0]
 8000948:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800094c:	42a2      	cmp	r2, r4
 800094e:	d115      	bne.n	800097c <ai_platform_context_acquire+0x5a>
 8000950:	2101      	movs	r1, #1
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	4319      	orrs	r1, r3
 8000958:	4311      	orrs	r1, r2
 800095a:	d01d      	beq.n	8000998 <ai_platform_context_acquire+0x76>
 800095c:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000e40 <.text_21>
 8000960:	2301      	movs	r3, #1
 8000962:	6093      	str	r3, [r2, #8]
 8000964:	6891      	ldr	r1, [r2, #8]
 8000966:	2900      	cmp	r1, #0
 8000968:	d1fc      	bne.n	8000964 <ai_platform_context_acquire+0x42>
 800096a:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 8000e44 <.text_22>
 800096e:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 8000e48 <.text_23>
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	42a2      	cmp	r2, r4
 8000978:	d026      	beq.n	80009c8 <ai_platform_context_acquire+0xa6>
 800097a:	e7fe      	b.n	800097a <ai_platform_context_acquire+0x58>
 800097c:	2100      	movs	r1, #0
 800097e:	f240 4551 	movw	r5, #1105	; 0x451
 8000982:	42aa      	cmp	r2, r5
 8000984:	bf08      	it	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	d0e4      	beq.n	8000954 <ai_platform_context_acquire+0x32>
 800098a:	2300      	movs	r3, #0
 800098c:	f240 4452 	movw	r4, #1106	; 0x452
 8000990:	42a2      	cmp	r2, r4
 8000992:	d1df      	bne.n	8000954 <ai_platform_context_acquire+0x32>
 8000994:	2201      	movs	r2, #1
 8000996:	e7de      	b.n	8000956 <ai_platform_context_acquire+0x34>
 8000998:	f8df 14b0 	ldr.w	r1, [pc, #1200]	; 8000e4c <.text_24>
 800099c:	680a      	ldr	r2, [r1, #0]
 800099e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80009a2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80009a6:	d10f      	bne.n	80009c8 <ai_platform_context_acquire+0xa6>
 80009a8:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 8000e50 <.text_25>
 80009ac:	2301      	movs	r3, #1
 80009ae:	6093      	str	r3, [r2, #8]
 80009b0:	6891      	ldr	r1, [r2, #8]
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d1fc      	bne.n	80009b0 <ai_platform_context_acquire+0x8e>
 80009b6:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 8000e44 <.text_22>
 80009ba:	f8df 448c 	ldr.w	r4, [pc, #1164]	; 8000e48 <.text_23>
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	42a2      	cmp	r2, r4
 80009c4:	d000      	beq.n	80009c8 <ai_platform_context_acquire+0xa6>
 80009c6:	e7fe      	b.n	80009c6 <ai_platform_context_acquire+0xa4>
 80009c8:	bc30      	pop	{r4, r5}
 80009ca:	4770      	bx	lr

080009cc <ai_platform_context_release>:
 80009cc:	f8df 189c 	ldr.w	r1, [pc, #2204]	; 800126c <.text_27>
 80009d0:	6001      	str	r1, [r0, #0]
 80009d2:	4770      	bx	lr

080009d4 <.text_11>:
 80009d4:	00000000 	.word	0x00000000

080009d8 <ai_platform_network_get_error>:
 80009d8:	b430      	push	{r4, r5}
 80009da:	b120      	cbz	r0, 80009e6 <ai_platform_network_get_error+0xe>
 80009dc:	6801      	ldr	r1, [r0, #0]
 80009de:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 800126c <.text_27>
 80009e2:	4291      	cmp	r1, r2
 80009e4:	d000      	beq.n	80009e8 <ai_platform_network_get_error+0x10>
 80009e6:	2000      	movs	r0, #0
 80009e8:	f8df 144c 	ldr.w	r1, [pc, #1100]	; 8000e38 <.text_19>
 80009ec:	f240 4449 	movw	r4, #1097	; 0x449
 80009f0:	680b      	ldr	r3, [r1, #0]
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	600b      	str	r3, [r1, #0]
 80009f8:	f8df 1440 	ldr.w	r1, [pc, #1088]	; 8000e3c <.text_20>
 80009fc:	680a      	ldr	r2, [r1, #0]
 80009fe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a02:	42a2      	cmp	r2, r4
 8000a04:	d115      	bne.n	8000a32 <ai_platform_network_get_error+0x5a>
 8000a06:	2101      	movs	r1, #1
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	4311      	orrs	r1, r2
 8000a10:	d01d      	beq.n	8000a4e <ai_platform_network_get_error+0x76>
 8000a12:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8000e40 <.text_21>
 8000a16:	2301      	movs	r3, #1
 8000a18:	6093      	str	r3, [r2, #8]
 8000a1a:	6891      	ldr	r1, [r2, #8]
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d1fc      	bne.n	8000a1a <ai_platform_network_get_error+0x42>
 8000a20:	f8df 3420 	ldr.w	r3, [pc, #1056]	; 8000e44 <.text_22>
 8000a24:	f8df 4420 	ldr.w	r4, [pc, #1056]	; 8000e48 <.text_23>
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	42a2      	cmp	r2, r4
 8000a2e:	d026      	beq.n	8000a7e <ai_platform_network_get_error+0xa6>
 8000a30:	e7fe      	b.n	8000a30 <ai_platform_network_get_error+0x58>
 8000a32:	2100      	movs	r1, #0
 8000a34:	f240 4551 	movw	r5, #1105	; 0x451
 8000a38:	42aa      	cmp	r2, r5
 8000a3a:	bf08      	it	eq
 8000a3c:	2301      	moveq	r3, #1
 8000a3e:	d0e4      	beq.n	8000a0a <ai_platform_network_get_error+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	f240 4452 	movw	r4, #1106	; 0x452
 8000a46:	42a2      	cmp	r2, r4
 8000a48:	d1df      	bne.n	8000a0a <ai_platform_network_get_error+0x32>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	e7de      	b.n	8000a0c <ai_platform_network_get_error+0x34>
 8000a4e:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000e4c <.text_24>
 8000a52:	680a      	ldr	r2, [r1, #0]
 8000a54:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a58:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000a5c:	d10f      	bne.n	8000a7e <ai_platform_network_get_error+0xa6>
 8000a5e:	f8df 23f0 	ldr.w	r2, [pc, #1008]	; 8000e50 <.text_25>
 8000a62:	2301      	movs	r3, #1
 8000a64:	6093      	str	r3, [r2, #8]
 8000a66:	6891      	ldr	r1, [r2, #8]
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d1fc      	bne.n	8000a66 <ai_platform_network_get_error+0x8e>
 8000a6c:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8000e44 <.text_22>
 8000a70:	f8df 43d4 	ldr.w	r4, [pc, #980]	; 8000e48 <.text_23>
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	42a2      	cmp	r2, r4
 8000a7a:	d000      	beq.n	8000a7e <ai_platform_network_get_error+0xa6>
 8000a7c:	e7fe      	b.n	8000a7c <ai_platform_network_get_error+0xa4>
 8000a7e:	b920      	cbnz	r0, 8000a8a <ai_platform_network_get_error+0xb2>
 8000a80:	f60f 0028 	addw	r0, pc, #2088	; 0x828
 8000a84:	6800      	ldr	r0, [r0, #0]
 8000a86:	bc30      	pop	{r4, r5}
 8000a88:	4770      	bx	lr
 8000a8a:	3010      	adds	r0, #16
 8000a8c:	bc30      	pop	{r4, r5}
 8000a8e:	f000 bc15 	b.w	80012bc <core_get_error>

08000a92 <ai_platform_network_set_error>:
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf1c      	itt	ne
 8000a96:	3010      	addne	r0, #16
 8000a98:	f000 bc15 	bne.w	80012c6 <core_set_error>
 8000a9c:	4770      	bx	lr

08000a9e <ai_platform_api_get_network_report>:
 8000a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa2:	0004      	movs	r4, r0
 8000aa4:	b081      	sub	sp, #4
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	d004      	beq.n	8000ab4 <ai_platform_api_get_network_report+0x16>
 8000aaa:	6820      	ldr	r0, [r4, #0]
 8000aac:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 800126c <.text_27>
 8000ab0:	4288      	cmp	r0, r1
 8000ab2:	d000      	beq.n	8000ab6 <ai_platform_api_get_network_report+0x18>
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	f8df 0380 	ldr.w	r0, [pc, #896]	; 8000e38 <.text_19>
 8000aba:	f240 4349 	movw	r3, #1097	; 0x449
 8000abe:	6802      	ldr	r2, [r0, #0]
 8000ac0:	0852      	lsrs	r2, r2, #1
 8000ac2:	0052      	lsls	r2, r2, #1
 8000ac4:	6002      	str	r2, [r0, #0]
 8000ac6:	f8df 0374 	ldr.w	r0, [pc, #884]	; 8000e3c <.text_20>
 8000aca:	6801      	ldr	r1, [r0, #0]
 8000acc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000ad0:	4299      	cmp	r1, r3
 8000ad2:	d115      	bne.n	8000b00 <ai_platform_api_get_network_report+0x62>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4310      	orrs	r0, r2
 8000adc:	4308      	orrs	r0, r1
 8000ade:	d01d      	beq.n	8000b1c <ai_platform_api_get_network_report+0x7e>
 8000ae0:	f8df 135c 	ldr.w	r1, [pc, #860]	; 8000e40 <.text_21>
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	608a      	str	r2, [r1, #8]
 8000ae8:	6888      	ldr	r0, [r1, #8]
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d1fc      	bne.n	8000ae8 <ai_platform_api_get_network_report+0x4a>
 8000aee:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000e44 <.text_22>
 8000af2:	f8df 3354 	ldr.w	r3, [pc, #852]	; 8000e48 <.text_23>
 8000af6:	600a      	str	r2, [r1, #0]
 8000af8:	6809      	ldr	r1, [r1, #0]
 8000afa:	4299      	cmp	r1, r3
 8000afc:	d026      	beq.n	8000b4c <ai_platform_api_get_network_report+0xae>
 8000afe:	e7fe      	b.n	8000afe <ai_platform_api_get_network_report+0x60>
 8000b00:	2000      	movs	r0, #0
 8000b02:	f240 4651 	movw	r6, #1105	; 0x451
 8000b06:	42b1      	cmp	r1, r6
 8000b08:	bf08      	it	eq
 8000b0a:	2201      	moveq	r2, #1
 8000b0c:	d0e4      	beq.n	8000ad8 <ai_platform_api_get_network_report+0x3a>
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f240 4352 	movw	r3, #1106	; 0x452
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d1df      	bne.n	8000ad8 <ai_platform_api_get_network_report+0x3a>
 8000b18:	2101      	movs	r1, #1
 8000b1a:	e7de      	b.n	8000ada <ai_platform_api_get_network_report+0x3c>
 8000b1c:	f8df 032c 	ldr.w	r0, [pc, #812]	; 8000e4c <.text_24>
 8000b20:	6801      	ldr	r1, [r0, #0]
 8000b22:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000b26:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000b2a:	d10f      	bne.n	8000b4c <ai_platform_api_get_network_report+0xae>
 8000b2c:	f8df 1320 	ldr.w	r1, [pc, #800]	; 8000e50 <.text_25>
 8000b30:	2201      	movs	r2, #1
 8000b32:	608a      	str	r2, [r1, #8]
 8000b34:	6888      	ldr	r0, [r1, #8]
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d1fc      	bne.n	8000b34 <ai_platform_api_get_network_report+0x96>
 8000b3a:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000e44 <.text_22>
 8000b3e:	f8df 3308 	ldr.w	r3, [pc, #776]	; 8000e48 <.text_23>
 8000b42:	600a      	str	r2, [r1, #0]
 8000b44:	6809      	ldr	r1, [r1, #0]
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d000      	beq.n	8000b4c <ai_platform_api_get_network_report+0xae>
 8000b4a:	e7fe      	b.n	8000b4a <ai_platform_api_get_network_report+0xac>
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	bf18      	it	ne
 8000b50:	2d00      	cmpne	r5, #0
 8000b52:	d032      	beq.n	8000bba <ai_platform_api_get_network_report+0x11c>
 8000b54:	2000      	movs	r0, #0
 8000b56:	66e8      	str	r0, [r5, #108]	; 0x6c
 8000b58:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b5a:	b152      	cbz	r2, 8000b72 <ai_platform_api_get_network_report+0xd4>
 8000b5c:	e000      	b.n	8000b60 <ai_platform_api_get_network_report+0xc2>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8000b62:	1c49      	adds	r1, r1, #1
 8000b64:	66e9      	str	r1, [r5, #108]	; 0x6c
 8000b66:	68d0      	ldr	r0, [r2, #12]
 8000b68:	4282      	cmp	r2, r0
 8000b6a:	bf18      	it	ne
 8000b6c:	2800      	cmpne	r0, #0
 8000b6e:	d1f6      	bne.n	8000b5e <ai_platform_api_get_network_report+0xc0>
 8000b70:	b911      	cbnz	r1, 8000b78 <ai_platform_api_get_network_report+0xda>
 8000b72:	2218      	movs	r2, #24
 8000b74:	2111      	movs	r1, #17
 8000b76:	e01c      	b.n	8000bb2 <ai_platform_api_get_network_report+0x114>
 8000b78:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000b7c:	b100      	cbz	r0, 8000b80 <ai_platform_api_get_network_report+0xe2>
 8000b7e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b80:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000b84:	f7ff fd20 	bl	80005c8 <_ai_platform_get_io_buffers_info>
 8000b88:	8628      	strh	r0, [r5, #48]	; 0x30
 8000b8a:	b910      	cbnz	r0, 8000b92 <ai_platform_api_get_network_report+0xf4>
 8000b8c:	2218      	movs	r2, #24
 8000b8e:	2112      	movs	r1, #18
 8000b90:	e00f      	b.n	8000bb2 <ai_platform_api_get_network_report+0x114>
 8000b92:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000b96:	2802      	cmp	r0, #2
 8000b98:	bfa6      	itte	ge
 8000b9a:	6ce1      	ldrge	r1, [r4, #76]	; 0x4c
 8000b9c:	f101 000c 	addge.w	r0, r1, #12
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000ba6:	f7ff fd0f 	bl	80005c8 <_ai_platform_get_io_buffers_info>
 8000baa:	8668      	strh	r0, [r5, #50]	; 0x32
 8000bac:	b948      	cbnz	r0, 8000bc2 <ai_platform_api_get_network_report+0x124>
 8000bae:	2218      	movs	r2, #24
 8000bb0:	2113      	movs	r1, #19
 8000bb2:	f104 0010 	add.w	r0, r4, #16
 8000bb6:	f000 fb86 	bl	80012c6 <core_set_error>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	b001      	add	sp, #4
 8000bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bc2:	6860      	ldr	r0, [r4, #4]
 8000bc4:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8000bc8:	6728      	str	r0, [r5, #112]	; 0x70
 8000bca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 8000bce:	e892 51c8 	ldmia.w	r2, {r3, r6, r7, r8, ip, lr}
 8000bd2:	e881 51c8 	stmia.w	r1, {r3, r6, r7, r8, ip, lr}
 8000bd6:	3418      	adds	r4, #24
 8000bd8:	f105 0954 	add.w	r9, r5, #84	; 0x54
 8000bdc:	e894 0c0f 	ldmia.w	r4, {r0, r1, r2, r3, sl, fp}
 8000be0:	e889 0c0f 	stmia.w	r9, {r0, r1, r2, r3, sl, fp}
 8000be4:	f7ff fca4 	bl	8000530 <CRC_Lock>
 8000be8:	a092      	add	r0, pc, #584	; (adr r0, 8000e34 <.text_18>)
 8000bea:	6128      	str	r0, [r5, #16]
 8000bec:	f7ff fca0 	bl	8000530 <CRC_Lock>
 8000bf0:	f20f 619c 	addw	r1, pc, #1692	; 0x69c
 8000bf4:	680a      	ldr	r2, [r1, #0]
 8000bf6:	616a      	str	r2, [r5, #20]
 8000bf8:	f7ff fc9a 	bl	8000530 <CRC_Lock>
 8000bfc:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8000c00:	6801      	ldr	r1, [r0, #0]
 8000c02:	6269      	str	r1, [r5, #36]	; 0x24
 8000c04:	f7ff fc94 	bl	8000530 <CRC_Lock>
 8000c08:	f20f 628c 	addw	r2, pc, #1676	; 0x68c
 8000c0c:	6810      	ldr	r0, [r2, #0]
 8000c0e:	62a8      	str	r0, [r5, #40]	; 0x28
 8000c10:	2001      	movs	r0, #1
 8000c12:	b001      	add	sp, #4
 8000c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c18 <ai_platform_network_create>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b081      	sub	sp, #4
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	9d06      	ldr	r5, [sp, #24]
 8000c20:	4604      	mov	r4, r0
 8000c22:	9807      	ldr	r0, [sp, #28]
 8000c24:	4616      	mov	r6, r2
 8000c26:	042d      	lsls	r5, r5, #16
 8000c28:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000c2c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000c30:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8000c34:	6807      	ldr	r7, [r0, #0]
 8000c36:	f7ff fc7b 	bl	8000530 <CRC_Lock>
 8000c3a:	b924      	cbnz	r4, 8000c46 <ai_platform_network_create+0x2e>
 8000c3c:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8000c40:	b001      	add	sp, #4
 8000c42:	6800      	ldr	r0, [r0, #0]
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 800126c <.text_27>
 8000c4a:	6031      	str	r1, [r6, #0]
 8000c4c:	6026      	str	r6, [r4, #0]
 8000c4e:	f000 fb33 	bl	80012b8 <core_init>
 8000c52:	b910      	cbnz	r0, 8000c5a <ai_platform_network_create+0x42>
 8000c54:	f20f 6044 	addw	r0, pc, #1604	; 0x644
 8000c58:	e00e      	b.n	8000c78 <ai_platform_network_create+0x60>
 8000c5a:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 8001270 <.text_28>
 8000c5e:	428d      	cmp	r5, r1
 8000c60:	d303      	bcc.n	8000c6a <ai_platform_network_create+0x52>
 8000c62:	f20f 623c 	addw	r2, pc, #1596	; 0x63c
 8000c66:	6817      	ldr	r7, [r2, #0]
 8000c68:	e007      	b.n	8000c7a <ai_platform_network_create+0x62>
 8000c6a:	f20f 6038 	addw	r0, pc, #1592	; 0x638
 8000c6e:	f001 fa9b 	bl	80021a8 <ai_check_custom_types>
 8000c72:	b920      	cbnz	r0, 8000c7e <ai_platform_network_create+0x66>
 8000c74:	f20f 6030 	addw	r0, pc, #1584	; 0x630
 8000c78:	6807      	ldr	r7, [r0, #0]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	6021      	str	r1, [r4, #0]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	b001      	add	sp, #4
 8000c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c84 <ai_platform_network_destroy>:
 8000c84:	b470      	push	{r4, r5, r6}
 8000c86:	b130      	cbz	r0, 8000c96 <ai_platform_network_destroy+0x12>
 8000c88:	6801      	ldr	r1, [r0, #0]
 8000c8a:	f8df 25e0 	ldr.w	r2, [pc, #1504]	; 800126c <.text_27>
 8000c8e:	4291      	cmp	r1, r2
 8000c90:	bf08      	it	eq
 8000c92:	4602      	moveq	r2, r0
 8000c94:	d000      	beq.n	8000c98 <ai_platform_network_destroy+0x14>
 8000c96:	2200      	movs	r2, #0
 8000c98:	4967      	ldr	r1, [pc, #412]	; (8000e38 <.text_19>)
 8000c9a:	f240 4449 	movw	r4, #1097	; 0x449
 8000c9e:	680b      	ldr	r3, [r1, #0]
 8000ca0:	085b      	lsrs	r3, r3, #1
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	4965      	ldr	r1, [pc, #404]	; (8000e3c <.text_20>)
 8000ca8:	680b      	ldr	r3, [r1, #0]
 8000caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d112      	bne.n	8000cd8 <ai_platform_network_destroy+0x54>
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2400      	movs	r4, #0
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	4321      	orrs	r1, r4
 8000cba:	4319      	orrs	r1, r3
 8000cbc:	d01a      	beq.n	8000cf4 <ai_platform_network_destroy+0x70>
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <.text_21>)
 8000cc0:	2401      	movs	r4, #1
 8000cc2:	609c      	str	r4, [r3, #8]
 8000cc4:	6899      	ldr	r1, [r3, #8]
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d1fc      	bne.n	8000cc4 <ai_platform_network_destroy+0x40>
 8000cca:	4c5e      	ldr	r4, [pc, #376]	; (8000e44 <.text_22>)
 8000ccc:	4d5e      	ldr	r5, [pc, #376]	; (8000e48 <.text_23>)
 8000cce:	601c      	str	r4, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d022      	beq.n	8000d1c <ai_platform_network_destroy+0x98>
 8000cd6:	e7fe      	b.n	8000cd6 <ai_platform_network_destroy+0x52>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f240 4651 	movw	r6, #1105	; 0x451
 8000cde:	42b3      	cmp	r3, r6
 8000ce0:	bf08      	it	eq
 8000ce2:	2401      	moveq	r4, #1
 8000ce4:	d0e7      	beq.n	8000cb6 <ai_platform_network_destroy+0x32>
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	f240 4552 	movw	r5, #1106	; 0x452
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d1e2      	bne.n	8000cb6 <ai_platform_network_destroy+0x32>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e7e1      	b.n	8000cb8 <ai_platform_network_destroy+0x34>
 8000cf4:	4955      	ldr	r1, [pc, #340]	; (8000e4c <.text_24>)
 8000cf6:	680b      	ldr	r3, [r1, #0]
 8000cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cfc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000d00:	d10c      	bne.n	8000d1c <ai_platform_network_destroy+0x98>
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <.text_25>)
 8000d04:	2401      	movs	r4, #1
 8000d06:	609c      	str	r4, [r3, #8]
 8000d08:	6899      	ldr	r1, [r3, #8]
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d1fc      	bne.n	8000d08 <ai_platform_network_destroy+0x84>
 8000d0e:	4c4d      	ldr	r4, [pc, #308]	; (8000e44 <.text_22>)
 8000d10:	4d4d      	ldr	r5, [pc, #308]	; (8000e48 <.text_23>)
 8000d12:	601c      	str	r4, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d000      	beq.n	8000d1c <ai_platform_network_destroy+0x98>
 8000d1a:	e7fe      	b.n	8000d1a <ai_platform_network_destroy+0x96>
 8000d1c:	b102      	cbz	r2, 8000d20 <ai_platform_network_destroy+0x9c>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	bc70      	pop	{r4, r5, r6}
 8000d22:	4770      	bx	lr

08000d24 <ai_platform_network_init>:
 8000d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d28:	b081      	sub	sp, #4
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	b120      	cbz	r0, 8000d38 <ai_platform_network_init+0x14>
 8000d2e:	6801      	ldr	r1, [r0, #0]
 8000d30:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 800126c <.text_27>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d000      	beq.n	8000d3a <ai_platform_network_init+0x16>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	493f      	ldr	r1, [pc, #252]	; (8000e38 <.text_19>)
 8000d3c:	f240 4549 	movw	r5, #1097	; 0x449
 8000d40:	680c      	ldr	r4, [r1, #0]
 8000d42:	0864      	lsrs	r4, r4, #1
 8000d44:	0064      	lsls	r4, r4, #1
 8000d46:	600c      	str	r4, [r1, #0]
 8000d48:	493c      	ldr	r1, [pc, #240]	; (8000e3c <.text_20>)
 8000d4a:	680b      	ldr	r3, [r1, #0]
 8000d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d112      	bne.n	8000d7a <ai_platform_network_init+0x56>
 8000d54:	2101      	movs	r1, #1
 8000d56:	2400      	movs	r4, #0
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4321      	orrs	r1, r4
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	d01a      	beq.n	8000d96 <ai_platform_network_init+0x72>
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <.text_21>)
 8000d62:	2401      	movs	r4, #1
 8000d64:	609c      	str	r4, [r3, #8]
 8000d66:	6899      	ldr	r1, [r3, #8]
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d1fc      	bne.n	8000d66 <ai_platform_network_init+0x42>
 8000d6c:	4c35      	ldr	r4, [pc, #212]	; (8000e44 <.text_22>)
 8000d6e:	4d36      	ldr	r5, [pc, #216]	; (8000e48 <.text_23>)
 8000d70:	601c      	str	r4, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	42ab      	cmp	r3, r5
 8000d76:	d022      	beq.n	8000dbe <ai_platform_network_init+0x9a>
 8000d78:	e7fe      	b.n	8000d78 <ai_platform_network_init+0x54>
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f240 4651 	movw	r6, #1105	; 0x451
 8000d80:	42b3      	cmp	r3, r6
 8000d82:	bf08      	it	eq
 8000d84:	2401      	moveq	r4, #1
 8000d86:	d0e7      	beq.n	8000d58 <ai_platform_network_init+0x34>
 8000d88:	2400      	movs	r4, #0
 8000d8a:	f240 4552 	movw	r5, #1106	; 0x452
 8000d8e:	42ab      	cmp	r3, r5
 8000d90:	d1e2      	bne.n	8000d58 <ai_platform_network_init+0x34>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e7e1      	b.n	8000d5a <ai_platform_network_init+0x36>
 8000d96:	492d      	ldr	r1, [pc, #180]	; (8000e4c <.text_24>)
 8000d98:	680b      	ldr	r3, [r1, #0]
 8000d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d9e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000da2:	d10c      	bne.n	8000dbe <ai_platform_network_init+0x9a>
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <.text_25>)
 8000da6:	2401      	movs	r4, #1
 8000da8:	609c      	str	r4, [r3, #8]
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d1fc      	bne.n	8000daa <ai_platform_network_init+0x86>
 8000db0:	4c24      	ldr	r4, [pc, #144]	; (8000e44 <.text_22>)
 8000db2:	4d25      	ldr	r5, [pc, #148]	; (8000e48 <.text_23>)
 8000db4:	601c      	str	r4, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d000      	beq.n	8000dbe <ai_platform_network_init+0x9a>
 8000dbc:	e7fe      	b.n	8000dbc <ai_platform_network_init+0x98>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d035      	beq.n	8000e2e <ai_platform_network_init+0x10a>
 8000dc2:	b90a      	cbnz	r2, 8000dc8 <ai_platform_network_init+0xa4>
 8000dc4:	2211      	movs	r2, #17
 8000dc6:	e012      	b.n	8000dee <ai_platform_network_init+0xca>
 8000dc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000dca:	6913      	ldr	r3, [r2, #16]
 8000dcc:	b939      	cbnz	r1, 8000dde <ai_platform_network_init+0xba>
 8000dce:	8c14      	ldrh	r4, [r2, #32]
 8000dd0:	8bd5      	ldrh	r5, [r2, #30]
 8000dd2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000dd4:	436c      	muls	r4, r5
 8000dd6:	434c      	muls	r4, r1
 8000dd8:	bf18      	it	ne
 8000dda:	2213      	movne	r2, #19
 8000ddc:	d107      	bne.n	8000dee <ai_platform_network_init+0xca>
 8000dde:	b973      	cbnz	r3, 8000dfe <ai_platform_network_init+0xda>
 8000de0:	8911      	ldrh	r1, [r2, #8]
 8000de2:	88d4      	ldrh	r4, [r2, #6]
 8000de4:	68d3      	ldr	r3, [r2, #12]
 8000de6:	4361      	muls	r1, r4
 8000de8:	4359      	muls	r1, r3
 8000dea:	d008      	beq.n	8000dfe <ai_platform_network_init+0xda>
 8000dec:	2212      	movs	r2, #18
 8000dee:	2110      	movs	r1, #16
 8000df0:	3010      	adds	r0, #16
 8000df2:	f000 fa68 	bl	80012c6 <core_set_error>
 8000df6:	2000      	movs	r0, #0
 8000df8:	b001      	add	sp, #4
 8000dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dfe:	f100 0118 	add.w	r1, r0, #24
 8000e02:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8000e06:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000e0a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 8000e0e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000e12:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000e16:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000e18:	2103      	movs	r1, #3
 8000e1a:	60c1      	str	r1, [r0, #12]
 8000e1c:	b13a      	cbz	r2, 8000e2e <ai_platform_network_init+0x10a>
 8000e1e:	e000      	b.n	8000e22 <ai_platform_network_init+0xfe>
 8000e20:	460a      	mov	r2, r1
 8000e22:	68d1      	ldr	r1, [r2, #12]
 8000e24:	6090      	str	r0, [r2, #8]
 8000e26:	428a      	cmp	r2, r1
 8000e28:	bf18      	it	ne
 8000e2a:	2900      	cmpne	r1, #0
 8000e2c:	d1f8      	bne.n	8000e20 <ai_platform_network_init+0xfc>
 8000e2e:	b001      	add	sp, #4
 8000e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e34 <.text_18>:
 8000e34:	00000000 	.word	0x00000000

08000e38 <.text_19>:
 8000e38:	e0002000 	.word	0xe0002000

08000e3c <.text_20>:
 8000e3c:	e0042000 	.word	0xe0042000

08000e40 <.text_21>:
 8000e40:	40023000 	.word	0x40023000

08000e44 <.text_22>:
 8000e44:	f407a5c2 	.word	0xf407a5c2

08000e48 <.text_23>:
 8000e48:	b5e8b5cd 	.word	0xb5e8b5cd

08000e4c <.text_24>:
 8000e4c:	5c001000 	.word	0x5c001000

08000e50 <.text_25>:
 8000e50:	58024c00 	.word	0x58024c00

08000e54 <ai_platform_network_process>:
 8000e54:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	b120      	cbz	r0, 8000e68 <ai_platform_network_process+0x14>
 8000e5e:	6801      	ldr	r1, [r0, #0]
 8000e60:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 800126c <.text_27>
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d000      	beq.n	8000e6a <ai_platform_network_process+0x16>
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8001274 <.text_29>
 8000e6e:	f240 4549 	movw	r5, #1097	; 0x449
 8000e72:	680c      	ldr	r4, [r1, #0]
 8000e74:	0864      	lsrs	r4, r4, #1
 8000e76:	0064      	lsls	r4, r4, #1
 8000e78:	600c      	str	r4, [r1, #0]
 8000e7a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8001278 <.text_30>
 8000e7e:	680b      	ldr	r3, [r1, #0]
 8000e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e84:	42ab      	cmp	r3, r5
 8000e86:	d115      	bne.n	8000eb4 <ai_platform_network_process+0x60>
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2400      	movs	r4, #0
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4321      	orrs	r1, r4
 8000e90:	4319      	orrs	r1, r3
 8000e92:	d01d      	beq.n	8000ed0 <ai_platform_network_process+0x7c>
 8000e94:	f8df 33e4 	ldr.w	r3, [pc, #996]	; 800127c <.text_31>
 8000e98:	2401      	movs	r4, #1
 8000e9a:	609c      	str	r4, [r3, #8]
 8000e9c:	6899      	ldr	r1, [r3, #8]
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d1fc      	bne.n	8000e9c <ai_platform_network_process+0x48>
 8000ea2:	f8df 43dc 	ldr.w	r4, [pc, #988]	; 8001280 <.text_32>
 8000ea6:	f8df 53dc 	ldr.w	r5, [pc, #988]	; 8001284 <.text_33>
 8000eaa:	601c      	str	r4, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d026      	beq.n	8000f00 <ai_platform_network_process+0xac>
 8000eb2:	e7fe      	b.n	8000eb2 <ai_platform_network_process+0x5e>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f240 4a51 	movw	sl, #1105	; 0x451
 8000eba:	4553      	cmp	r3, sl
 8000ebc:	bf08      	it	eq
 8000ebe:	2401      	moveq	r4, #1
 8000ec0:	d0e4      	beq.n	8000e8c <ai_platform_network_process+0x38>
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	f240 4552 	movw	r5, #1106	; 0x452
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d1df      	bne.n	8000e8c <ai_platform_network_process+0x38>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e7de      	b.n	8000e8e <ai_platform_network_process+0x3a>
 8000ed0:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8001288 <.text_34>
 8000ed4:	680b      	ldr	r3, [r1, #0]
 8000ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eda:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000ede:	d10f      	bne.n	8000f00 <ai_platform_network_process+0xac>
 8000ee0:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 800128c <.text_35>
 8000ee4:	2401      	movs	r4, #1
 8000ee6:	609c      	str	r4, [r3, #8]
 8000ee8:	6899      	ldr	r1, [r3, #8]
 8000eea:	2900      	cmp	r1, #0
 8000eec:	d1fc      	bne.n	8000ee8 <ai_platform_network_process+0x94>
 8000eee:	f8df 4390 	ldr.w	r4, [pc, #912]	; 8001280 <.text_32>
 8000ef2:	f8df 5390 	ldr.w	r5, [pc, #912]	; 8001284 <.text_33>
 8000ef6:	601c      	str	r4, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	42ab      	cmp	r3, r5
 8000efc:	d000      	beq.n	8000f00 <ai_platform_network_process+0xac>
 8000efe:	e7fe      	b.n	8000efe <ai_platform_network_process+0xaa>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	f000 8114 	beq.w	800112e <ai_platform_network_process+0x2da>
 8000f06:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000f0a:	b101      	cbz	r1, 8000f0e <ai_platform_network_process+0xba>
 8000f0c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000f0e:	7b05      	ldrb	r5, [r0, #12]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2400      	movs	r4, #0
 8000f14:	82c3      	strh	r3, [r0, #22]
 8000f16:	8284      	strh	r4, [r0, #20]
 8000f18:	f005 0503 	and.w	r5, r5, #3
 8000f1c:	2d03      	cmp	r5, #3
 8000f1e:	d002      	beq.n	8000f26 <ai_platform_network_process+0xd2>
 8000f20:	2230      	movs	r2, #48	; 0x30
 8000f22:	2111      	movs	r1, #17
 8000f24:	e100      	b.n	8001128 <ai_platform_network_process+0x2d4>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	bf1e      	ittt	ne
 8000f2a:	2900      	cmpne	r1, #0
 8000f2c:	880b      	ldrhne	r3, [r1, #0]
 8000f2e:	2b00      	cmpne	r3, #0
 8000f30:	f000 80f8 	beq.w	8001124 <ai_platform_network_process+0x2d0>
 8000f34:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000f38:	46a0      	mov	r8, r4
 8000f3a:	46a1      	mov	r9, r4
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	1d17      	adds	r7, r2, #4
 8000f40:	4682      	mov	sl, r0
 8000f42:	9100      	str	r1, [sp, #0]
 8000f44:	e014      	b.n	8000f70 <ai_platform_network_process+0x11c>
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	f000 80ea 	beq.w	8001122 <ai_platform_network_process+0x2ce>
 8000f4e:	8838      	ldrh	r0, [r7, #0]
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d052      	beq.n	8000ffa <ai_platform_network_process+0x1a6>
 8000f54:	4558      	cmp	r0, fp
 8000f56:	4622      	mov	r2, r4
 8000f58:	f108 0801 	add.w	r8, r8, #1
 8000f5c:	f109 0904 	add.w	r9, r9, #4
 8000f60:	bf28      	it	cs
 8000f62:	4683      	movcs	fp, r0
 8000f64:	1f39      	subs	r1, r7, #4
 8000f66:	4628      	mov	r0, r5
 8000f68:	f7ff fb84 	bl	8000674 <_platform_network_state_setup>
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	3610      	adds	r6, #16
 8000f70:	9800      	ldr	r0, [sp, #0]
 8000f72:	8801      	ldrh	r1, [r0, #0]
 8000f74:	4588      	cmp	r8, r1
 8000f76:	d24a      	bcs.n	800100e <ai_platform_network_process+0x1ba>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	6850      	ldr	r0, [r2, #4]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	bf1c      	itt	ne
 8000f80:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000f84:	2c00      	cmpne	r4, #0
 8000f86:	d042      	beq.n	800100e <ai_platform_network_process+0x1ba>
 8000f88:	6891      	ldr	r1, [r2, #8]
 8000f8a:	680a      	ldr	r2, [r1, #0]
 8000f8c:	1995      	adds	r5, r2, r6
 8000f8e:	f000 80c8 	beq.w	8001122 <ai_platform_network_process+0x2ce>
 8000f92:	69a0      	ldr	r0, [r4, #24]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	88ba      	ldrh	r2, [r7, #4]
 8000f98:	6841      	ldr	r1, [r0, #4]
 8000f9a:	68b8      	ldr	r0, [r7, #8]
 8000f9c:	fb03 fc02 	mul.w	ip, r3, r2
 8000fa0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa4:	4561      	cmp	r1, ip
 8000fa6:	d32d      	bcc.n	8001004 <ai_platform_network_process+0x1b0>
 8000fa8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000fac:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000fb0:	459e      	cmp	lr, r3
 8000fb2:	bf01      	itttt	eq
 8000fb4:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000fb8:	4293      	cmpeq	r3, r2
 8000fba:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000fbe:	4282      	cmpeq	r2, r0
 8000fc0:	d120      	bne.n	8001004 <ai_platform_network_process+0x1b0>
 8000fc2:	69a0      	ldr	r0, [r4, #24]
 8000fc4:	6800      	ldr	r0, [r0, #0]
 8000fc6:	f005 fcc3 	bl	8006950 <ai_array_get_byte_size>
 8000fca:	68e1      	ldr	r1, [r4, #12]
 8000fcc:	6963      	ldr	r3, [r4, #20]
 8000fce:	68ca      	ldr	r2, [r1, #12]
 8000fd0:	68d9      	ldr	r1, [r3, #12]
 8000fd2:	434a      	muls	r2, r1
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	d315      	bcc.n	8001004 <ai_platform_network_process+0x1b0>
 8000fd8:	69a0      	ldr	r0, [r4, #24]
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	f005 fbe0 	bl	80067a0 <ai_array_to_buffer_fmt>
 8000fe0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000fe4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000fe8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000fec:	4288      	cmp	r0, r1
 8000fee:	d0aa      	beq.n	8000f46 <ai_platform_network_process+0xf2>
 8000ff0:	2219      	movs	r2, #25
 8000ff2:	2112      	movs	r1, #18
 8000ff4:	f10a 0010 	add.w	r0, sl, #16
 8000ff8:	e097      	b.n	800112a <ai_platform_network_process+0x2d6>
 8000ffa:	2221      	movs	r2, #33	; 0x21
 8000ffc:	2112      	movs	r1, #18
 8000ffe:	f10a 0010 	add.w	r0, sl, #16
 8001002:	e092      	b.n	800112a <ai_platform_network_process+0x2d6>
 8001004:	2218      	movs	r2, #24
 8001006:	2112      	movs	r1, #18
 8001008:	f10a 0010 	add.w	r0, sl, #16
 800100c:	e08d      	b.n	800112a <ai_platform_network_process+0x2d6>
 800100e:	9902      	ldr	r1, [sp, #8]
 8001010:	4655      	mov	r5, sl
 8001012:	2900      	cmp	r1, #0
 8001014:	d076      	beq.n	8001104 <ai_platform_network_process+0x2b0>
 8001016:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800101a:	2802      	cmp	r0, #2
 800101c:	db7c      	blt.n	8001118 <ai_platform_network_process+0x2c4>
 800101e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001020:	f113 000c 	adds.w	r0, r3, #12
 8001024:	bf1c      	itt	ne
 8001026:	8802      	ldrhne	r2, [r0, #0]
 8001028:	2a00      	cmpne	r2, #0
 800102a:	d075      	beq.n	8001118 <ai_platform_network_process+0x2c4>
 800102c:	f04f 0800 	mov.w	r8, #0
 8001030:	46c1      	mov	r9, r8
 8001032:	2600      	movs	r6, #0
 8001034:	1d0f      	adds	r7, r1, #4
 8001036:	9000      	str	r0, [sp, #0]
 8001038:	e013      	b.n	8001062 <ai_platform_network_process+0x20e>
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	2800      	cmp	r0, #0
 800103e:	d059      	beq.n	80010f4 <ai_platform_network_process+0x2a0>
 8001040:	8838      	ldrh	r0, [r7, #0]
 8001042:	2800      	cmp	r0, #0
 8001044:	d051      	beq.n	80010ea <ai_platform_network_process+0x296>
 8001046:	4558      	cmp	r0, fp
 8001048:	4622      	mov	r2, r4
 800104a:	f108 0801 	add.w	r8, r8, #1
 800104e:	f109 0904 	add.w	r9, r9, #4
 8001052:	bf28      	it	cs
 8001054:	4683      	movcs	fp, r0
 8001056:	1f39      	subs	r1, r7, #4
 8001058:	4628      	mov	r0, r5
 800105a:	f7ff fb0b 	bl	8000674 <_platform_network_state_setup>
 800105e:	3718      	adds	r7, #24
 8001060:	3610      	adds	r6, #16
 8001062:	9800      	ldr	r0, [sp, #0]
 8001064:	8801      	ldrh	r1, [r0, #0]
 8001066:	4588      	cmp	r8, r1
 8001068:	d249      	bcs.n	80010fe <ai_platform_network_process+0x2aa>
 800106a:	4602      	mov	r2, r0
 800106c:	6850      	ldr	r0, [r2, #4]
 800106e:	2800      	cmp	r0, #0
 8001070:	bf1c      	itt	ne
 8001072:	f850 4009 	ldrne.w	r4, [r0, r9]
 8001076:	2c00      	cmpne	r4, #0
 8001078:	d041      	beq.n	80010fe <ai_platform_network_process+0x2aa>
 800107a:	6891      	ldr	r1, [r2, #8]
 800107c:	680a      	ldr	r2, [r1, #0]
 800107e:	1995      	adds	r5, r2, r6
 8001080:	d038      	beq.n	80010f4 <ai_platform_network_process+0x2a0>
 8001082:	69a0      	ldr	r0, [r4, #24]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	6841      	ldr	r1, [r0, #4]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	fb03 fc02 	mul.w	ip, r3, r2
 8001090:	fb00 fc0c 	mul.w	ip, r0, ip
 8001094:	4561      	cmp	r1, ip
 8001096:	d33e      	bcc.n	8001116 <ai_platform_network_process+0x2c2>
 8001098:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800109c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80010a0:	459e      	cmp	lr, r3
 80010a2:	bf01      	itttt	eq
 80010a4:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 80010a8:	4293      	cmpeq	r3, r2
 80010aa:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 80010ae:	4282      	cmpeq	r2, r0
 80010b0:	d131      	bne.n	8001116 <ai_platform_network_process+0x2c2>
 80010b2:	69a0      	ldr	r0, [r4, #24]
 80010b4:	6800      	ldr	r0, [r0, #0]
 80010b6:	f005 fc4b 	bl	8006950 <ai_array_get_byte_size>
 80010ba:	68e1      	ldr	r1, [r4, #12]
 80010bc:	6963      	ldr	r3, [r4, #20]
 80010be:	68ca      	ldr	r2, [r1, #12]
 80010c0:	68d9      	ldr	r1, [r3, #12]
 80010c2:	434a      	muls	r2, r1
 80010c4:	4290      	cmp	r0, r2
 80010c6:	d326      	bcc.n	8001116 <ai_platform_network_process+0x2c2>
 80010c8:	69a0      	ldr	r0, [r4, #24]
 80010ca:	6800      	ldr	r0, [r0, #0]
 80010cc:	f005 fb68 	bl	80067a0 <ai_array_to_buffer_fmt>
 80010d0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80010d4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80010d8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80010dc:	4288      	cmp	r0, r1
 80010de:	d0ac      	beq.n	800103a <ai_platform_network_process+0x1e6>
 80010e0:	2219      	movs	r2, #25
 80010e2:	2113      	movs	r1, #19
 80010e4:	f10a 0010 	add.w	r0, sl, #16
 80010e8:	e01f      	b.n	800112a <ai_platform_network_process+0x2d6>
 80010ea:	2221      	movs	r2, #33	; 0x21
 80010ec:	2113      	movs	r1, #19
 80010ee:	f10a 0010 	add.w	r0, sl, #16
 80010f2:	e01a      	b.n	800112a <ai_platform_network_process+0x2d6>
 80010f4:	2217      	movs	r2, #23
 80010f6:	2113      	movs	r1, #19
 80010f8:	f10a 0010 	add.w	r0, sl, #16
 80010fc:	e015      	b.n	800112a <ai_platform_network_process+0x2d6>
 80010fe:	4655      	mov	r5, sl
 8001100:	f8a5 b014 	strh.w	fp, [r5, #20]
 8001104:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8001108:	2800      	cmp	r0, #0
 800110a:	bf14      	ite	ne
 800110c:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8001110:	f04f 0a00 	moveq.w	sl, #0
 8001114:	e00f      	b.n	8001136 <ai_platform_network_process+0x2e2>
 8001116:	4655      	mov	r5, sl
 8001118:	2218      	movs	r2, #24
 800111a:	2113      	movs	r1, #19
 800111c:	f105 0010 	add.w	r0, r5, #16
 8001120:	e003      	b.n	800112a <ai_platform_network_process+0x2d6>
 8001122:	4650      	mov	r0, sl
 8001124:	2217      	movs	r2, #23
 8001126:	2112      	movs	r1, #18
 8001128:	3010      	adds	r0, #16
 800112a:	f000 f8cc 	bl	80012c6 <core_set_error>
 800112e:	2000      	movs	r0, #0
 8001130:	b003      	add	sp, #12
 8001132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001136:	2802      	cmp	r0, #2
 8001138:	8aa9      	ldrh	r1, [r5, #20]
 800113a:	bfa6      	itte	ge
 800113c:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 800113e:	f100 0b0c 	addge.w	fp, r0, #12
 8001142:	f04f 0b00 	movlt.w	fp, #0
 8001146:	8ae8      	ldrh	r0, [r5, #22]
 8001148:	ebb0 0f01 	cmp.w	r0, r1
 800114c:	f080 8089 	bcs.w	8001262 <ai_platform_network_process+0x40e>
 8001150:	f04f 0800 	mov.w	r8, #0
 8001154:	4654      	mov	r4, sl
 8001156:	46c1      	mov	r9, r8
 8001158:	46c2      	mov	sl, r8
 800115a:	e018      	b.n	800118e <ai_platform_network_process+0x33a>
 800115c:	6882      	ldr	r2, [r0, #8]
 800115e:	68c3      	ldr	r3, [r0, #12]
 8001160:	6871      	ldr	r1, [r6, #4]
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	188b      	adds	r3, r1, r2
 8001166:	6083      	str	r3, [r0, #8]
 8001168:	6871      	ldr	r1, [r6, #4]
 800116a:	60c1      	str	r1, [r0, #12]
 800116c:	6870      	ldr	r0, [r6, #4]
 800116e:	68b1      	ldr	r1, [r6, #8]
 8001170:	4408      	add	r0, r1
 8001172:	6070      	str	r0, [r6, #4]
 8001174:	6831      	ldr	r1, [r6, #0]
 8001176:	4288      	cmp	r0, r1
 8001178:	d302      	bcc.n	8001180 <ai_platform_network_process+0x32c>
 800117a:	68f0      	ldr	r0, [r6, #12]
 800117c:	4240      	negs	r0, r0
 800117e:	4408      	add	r0, r1
 8001180:	6070      	str	r0, [r6, #4]
 8001182:	f10a 0a01 	add.w	sl, sl, #1
 8001186:	f109 0910 	add.w	r9, r9, #16
 800118a:	f108 0804 	add.w	r8, r8, #4
 800118e:	2c00      	cmp	r4, #0
 8001190:	bf14      	ite	ne
 8001192:	8820      	ldrhne	r0, [r4, #0]
 8001194:	2000      	moveq	r0, #0
 8001196:	4582      	cmp	sl, r0
 8001198:	d212      	bcs.n	80011c0 <ai_platform_network_process+0x36c>
 800119a:	6860      	ldr	r0, [r4, #4]
 800119c:	b180      	cbz	r0, 80011c0 <ai_platform_network_process+0x36c>
 800119e:	f850 0008 	ldr.w	r0, [r0, r8]
 80011a2:	b168      	cbz	r0, 80011c0 <ai_platform_network_process+0x36c>
 80011a4:	6980      	ldr	r0, [r0, #24]
 80011a6:	68a1      	ldr	r1, [r4, #8]
 80011a8:	6803      	ldr	r3, [r0, #0]
 80011aa:	680a      	ldr	r2, [r1, #0]
 80011ac:	0099      	lsls	r1, r3, #2
 80011ae:	eb02 0609 	add.w	r6, r2, r9
 80011b2:	d5d3      	bpl.n	800115c <ai_platform_network_process+0x308>
 80011b4:	68b2      	ldr	r2, [r6, #8]
 80011b6:	6871      	ldr	r1, [r6, #4]
 80011b8:	6880      	ldr	r0, [r0, #8]
 80011ba:	f00e fdb4 	bl	800fd26 <__aeabi_memcpy>
 80011be:	e7d5      	b.n	800116c <ai_platform_network_process+0x318>
 80011c0:	46a2      	mov	sl, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f04f 0800 	mov.w	r8, #0
 80011c8:	465c      	mov	r4, fp
 80011ca:	f001 f897 	bl	80022fc <ai_layers_forward_all>
 80011ce:	46c1      	mov	r9, r8
 80011d0:	46c3      	mov	fp, r8
 80011d2:	e019      	b.n	8001208 <ai_platform_network_process+0x3b4>
 80011d4:	6871      	ldr	r1, [r6, #4]
 80011d6:	68b2      	ldr	r2, [r6, #8]
 80011d8:	4411      	add	r1, r2
 80011da:	6071      	str	r1, [r6, #4]
 80011dc:	6832      	ldr	r2, [r6, #0]
 80011de:	4291      	cmp	r1, r2
 80011e0:	d302      	bcc.n	80011e8 <ai_platform_network_process+0x394>
 80011e2:	68f1      	ldr	r1, [r6, #12]
 80011e4:	4249      	negs	r1, r1
 80011e6:	4411      	add	r1, r2
 80011e8:	6071      	str	r1, [r6, #4]
 80011ea:	460a      	mov	r2, r1
 80011ec:	6881      	ldr	r1, [r0, #8]
 80011ee:	68c3      	ldr	r3, [r0, #12]
 80011f0:	1ac9      	subs	r1, r1, r3
 80011f2:	1853      	adds	r3, r2, r1
 80011f4:	6083      	str	r3, [r0, #8]
 80011f6:	6872      	ldr	r2, [r6, #4]
 80011f8:	f8c0 200c 	str.w	r2, [r0, #12]
 80011fc:	f10b 0b01 	add.w	fp, fp, #1
 8001200:	f109 0910 	add.w	r9, r9, #16
 8001204:	f108 0804 	add.w	r8, r8, #4
 8001208:	2c00      	cmp	r4, #0
 800120a:	bf14      	ite	ne
 800120c:	8820      	ldrhne	r0, [r4, #0]
 800120e:	2000      	moveq	r0, #0
 8001210:	4583      	cmp	fp, r0
 8001212:	d21d      	bcs.n	8001250 <ai_platform_network_process+0x3fc>
 8001214:	6860      	ldr	r0, [r4, #4]
 8001216:	b1d8      	cbz	r0, 8001250 <ai_platform_network_process+0x3fc>
 8001218:	f850 0008 	ldr.w	r0, [r0, r8]
 800121c:	b1c0      	cbz	r0, 8001250 <ai_platform_network_process+0x3fc>
 800121e:	6980      	ldr	r0, [r0, #24]
 8001220:	68a1      	ldr	r1, [r4, #8]
 8001222:	6803      	ldr	r3, [r0, #0]
 8001224:	680a      	ldr	r2, [r1, #0]
 8001226:	0099      	lsls	r1, r3, #2
 8001228:	eb02 0609 	add.w	r6, r2, r9
 800122c:	d5d2      	bpl.n	80011d4 <ai_platform_network_process+0x380>
 800122e:	6881      	ldr	r1, [r0, #8]
 8001230:	68b2      	ldr	r2, [r6, #8]
 8001232:	6870      	ldr	r0, [r6, #4]
 8001234:	f00e fd77 	bl	800fd26 <__aeabi_memcpy>
 8001238:	6870      	ldr	r0, [r6, #4]
 800123a:	68b1      	ldr	r1, [r6, #8]
 800123c:	4408      	add	r0, r1
 800123e:	6070      	str	r0, [r6, #4]
 8001240:	6831      	ldr	r1, [r6, #0]
 8001242:	4288      	cmp	r0, r1
 8001244:	d302      	bcc.n	800124c <ai_platform_network_process+0x3f8>
 8001246:	68f0      	ldr	r0, [r6, #12]
 8001248:	4240      	negs	r0, r0
 800124a:	4408      	add	r0, r1
 800124c:	6070      	str	r0, [r6, #4]
 800124e:	e7d5      	b.n	80011fc <ai_platform_network_process+0x3a8>
 8001250:	8ae8      	ldrh	r0, [r5, #22]
 8001252:	8aa9      	ldrh	r1, [r5, #20]
 8001254:	46a3      	mov	fp, r4
 8001256:	1c40      	adds	r0, r0, #1
 8001258:	82e8      	strh	r0, [r5, #22]
 800125a:	b280      	uxth	r0, r0
 800125c:	4288      	cmp	r0, r1
 800125e:	f4ff af77 	bcc.w	8001150 <ai_platform_network_process+0x2fc>
 8001262:	8ae8      	ldrh	r0, [r5, #22]
 8001264:	b003      	add	sp, #12
 8001266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800126c <.text_27>:
 800126c:	a1c00100 	.word	0xa1c00100

08001270 <.text_28>:
 8001270:	01030001 	.word	0x01030001

08001274 <.text_29>:
 8001274:	e0002000 	.word	0xe0002000

08001278 <.text_30>:
 8001278:	e0042000 	.word	0xe0042000

0800127c <.text_31>:
 800127c:	40023000 	.word	0x40023000

08001280 <.text_32>:
 8001280:	f407a5c2 	.word	0xf407a5c2

08001284 <.text_33>:
 8001284:	b5e8b5cd 	.word	0xb5e8b5cd

08001288 <.text_34>:
 8001288:	5c001000 	.word	0x5c001000

0800128c <.text_35>:
 800128c:	58024c00 	.word	0x58024c00

08001290 <.text_36>:
 8001290:	00000104 	.word	0x00000104

08001294 <.text_37>:
 8001294:	00000101 	.word	0x00000101

08001298 <.text_38>:
 8001298:	00000301 	.word	0x00000301

0800129c <.text_39>:
 800129c:	00001030 	.word	0x00001030

080012a0 <.text_40>:
 80012a0:	00001001 	.word	0x00001001

080012a4 <_platform_network_sanity_check{5}::signatures>:
 80012a4:	84048403                                ....

080012a8 <.text_42>:
 80012a8:	00001002 	.word	0x00001002

080012ac <.text_43>:
 80012ac:	00001010 	.word	0x00001010

080012b0 <.text_44>:
 80012b0:	00000000 	.word	0x00000000

080012b4 <.text_45>:
 80012b4:	00001010 	.word	0x00001010

080012b8 <core_init>:
 80012b8:	2001      	movs	r0, #1
 80012ba:	4770      	bx	lr

080012bc <core_get_error>:
 80012bc:	4601      	mov	r1, r0
 80012be:	2200      	movs	r2, #0
 80012c0:	6808      	ldr	r0, [r1, #0]
 80012c2:	600a      	str	r2, [r1, #0]
 80012c4:	4770      	bx	lr

080012c6 <core_set_error>:
 80012c6:	7803      	ldrb	r3, [r0, #0]
 80012c8:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 80012cc:	d104      	bne.n	80012d8 <core_set_error+0x12>
 80012ce:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80012d2:	6001      	str	r1, [r0, #0]
 80012d4:	2001      	movs	r0, #1
 80012d6:	4770      	bx	lr
 80012d8:	2000      	movs	r0, #0
 80012da:	4770      	bx	lr

080012dc <core_mem_alloc>:
 80012dc:	2800      	cmp	r0, #0
 80012de:	d100      	bne.n	80012e2 <core_mem_alloc+0x6>
 80012e0:	4770      	bx	lr
 80012e2:	b500      	push	{lr}
 80012e4:	b081      	sub	sp, #4
 80012e6:	1d00      	adds	r0, r0, #4
 80012e8:	f00e fd4a 	bl	800fd80 <malloc>
 80012ec:	b108      	cbz	r0, 80012f2 <core_mem_alloc+0x16>
 80012ee:	6000      	str	r0, [r0, #0]
 80012f0:	1d00      	adds	r0, r0, #4
 80012f2:	b001      	add	sp, #4
 80012f4:	bd00      	pop	{pc}

080012f6 <core_mem_free>:
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d100      	bne.n	80012fc <core_mem_free+0x6>
 80012fa:	4770      	bx	lr
 80012fc:	b500      	push	{lr}
 80012fe:	b081      	sub	sp, #4
 8001300:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001304:	1f01      	subs	r1, r0, #4
 8001306:	428a      	cmp	r2, r1
 8001308:	d106      	bne.n	8001318 <core_mem_free+0x22>
 800130a:	b129      	cbz	r1, 8001318 <core_mem_free+0x22>
 800130c:	2000      	movs	r0, #0
 800130e:	6008      	str	r0, [r1, #0]
 8001310:	4608      	mov	r0, r1
 8001312:	f00e fd3d 	bl	800fd90 <free>
 8001316:	2000      	movs	r0, #0
 8001318:	b001      	add	sp, #4
 800131a:	bd00      	pop	{pc}

0800131c <core_mem_realloc>:
 800131c:	b500      	push	{lr}
 800131e:	b081      	sub	sp, #4
 8001320:	b920      	cbnz	r0, 800132c <core_mem_realloc+0x10>
 8001322:	b1c1      	cbz	r1, 8001356 <core_mem_realloc+0x3a>
 8001324:	1d08      	adds	r0, r1, #4
 8001326:	f00e fd2b 	bl	800fd80 <malloc>
 800132a:	e00e      	b.n	800134a <core_mem_realloc+0x2e>
 800132c:	b919      	cbnz	r1, 8001336 <core_mem_realloc+0x1a>
 800132e:	b001      	add	sp, #4
 8001330:	f85d eb04 	ldr.w	lr, [sp], #4
 8001334:	e7df      	b.n	80012f6 <core_mem_free>
 8001336:	1f02      	subs	r2, r0, #4
 8001338:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800133c:	4290      	cmp	r0, r2
 800133e:	d109      	bne.n	8001354 <core_mem_realloc+0x38>
 8001340:	b142      	cbz	r2, 8001354 <core_mem_realloc+0x38>
 8001342:	1d09      	adds	r1, r1, #4
 8001344:	4610      	mov	r0, r2
 8001346:	f00e fe85 	bl	8010054 <realloc>
 800134a:	b120      	cbz	r0, 8001356 <core_mem_realloc+0x3a>
 800134c:	6000      	str	r0, [r0, #0]
 800134e:	1d00      	adds	r0, r0, #4
 8001350:	b001      	add	sp, #4
 8001352:	bd00      	pop	{pc}
 8001354:	2000      	movs	r0, #0
 8001356:	b001      	add	sp, #4
 8001358:	bd00      	pop	{pc}
	...

0800135c <_core_inspect_tensor_list>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	0004      	movs	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	b081      	sub	sp, #4
 8001364:	bf14      	ite	ne
 8001366:	2d00      	cmpne	r5, #0
 8001368:	2000      	moveq	r0, #0
 800136a:	d025      	beq.n	80013b8 <_core_inspect_tensor_list+0x5c>
 800136c:	2000      	movs	r0, #0
 800136e:	2600      	movs	r6, #0
 8001370:	6028      	str	r0, [r5, #0]
 8001372:	2700      	movs	r7, #0
 8001374:	60a8      	str	r0, [r5, #8]
 8001376:	60e8      	str	r0, [r5, #12]
 8001378:	e017      	b.n	80013aa <_core_inspect_tensor_list+0x4e>
 800137a:	6841      	ldr	r1, [r0, #4]
 800137c:	4610      	mov	r0, r2
 800137e:	f005 fae7 	bl	8006950 <ai_array_get_byte_size>
 8001382:	e00a      	b.n	800139a <_core_inspect_tensor_list+0x3e>
 8001384:	59c0      	ldr	r0, [r0, r7]
 8001386:	2800      	cmp	r0, #0
 8001388:	d015      	beq.n	80013b6 <_core_inspect_tensor_list+0x5a>
 800138a:	bf1c      	itt	ne
 800138c:	6980      	ldrne	r0, [r0, #24]
 800138e:	2800      	cmpne	r0, #0
 8001390:	d006      	beq.n	80013a0 <_core_inspect_tensor_list+0x44>
 8001392:	6802      	ldr	r2, [r0, #0]
 8001394:	0051      	lsls	r1, r2, #1
 8001396:	d5f0      	bpl.n	800137a <_core_inspect_tensor_list+0x1e>
 8001398:	2000      	movs	r0, #0
 800139a:	68aa      	ldr	r2, [r5, #8]
 800139c:	1880      	adds	r0, r0, r2
 800139e:	60a8      	str	r0, [r5, #8]
 80013a0:	6828      	ldr	r0, [r5, #0]
 80013a2:	1c76      	adds	r6, r6, #1
 80013a4:	1d3f      	adds	r7, r7, #4
 80013a6:	1c40      	adds	r0, r0, #1
 80013a8:	6028      	str	r0, [r5, #0]
 80013aa:	8821      	ldrh	r1, [r4, #0]
 80013ac:	428e      	cmp	r6, r1
 80013ae:	d202      	bcs.n	80013b6 <_core_inspect_tensor_list+0x5a>
 80013b0:	6860      	ldr	r0, [r4, #4]
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1e6      	bne.n	8001384 <_core_inspect_tensor_list+0x28>
 80013b6:	6828      	ldr	r0, [r5, #0]
 80013b8:	b001      	add	sp, #4
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013bc <_core_inspect_forward_validate>:
 80013bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c0:	b090      	sub	sp, #64	; 0x40
 80013c2:	6882      	ldr	r2, [r0, #8]
 80013c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80013c6:	6891      	ldr	r1, [r2, #8]
 80013c8:	9100      	str	r1, [sp, #0]
 80013ca:	688e      	ldr	r6, [r1, #8]
 80013cc:	09f6      	lsrs	r6, r6, #7
 80013ce:	f006 0601 	and.w	r6, r6, #1
 80013d2:	f88d 6004 	strb.w	r6, [sp, #4]
 80013d6:	6943      	ldr	r3, [r0, #20]
 80013d8:	8818      	ldrh	r0, [r3, #0]
 80013da:	2800      	cmp	r0, #0
 80013dc:	bf19      	ittee	ne
 80013de:	685c      	ldrne	r4, [r3, #4]
 80013e0:	9408      	strne	r4, [sp, #32]
 80013e2:	2500      	moveq	r5, #0
 80013e4:	9508      	streq	r5, [sp, #32]
 80013e6:	2802      	cmp	r0, #2
 80013e8:	db04      	blt.n	80013f4 <_core_inspect_forward_validate+0x38>
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	f101 030c 	add.w	r3, r1, #12
 80013f0:	9307      	str	r3, [sp, #28]
 80013f2:	e001      	b.n	80013f8 <_core_inspect_forward_validate+0x3c>
 80013f4:	2400      	movs	r4, #0
 80013f6:	9407      	str	r4, [sp, #28]
 80013f8:	8ad3      	ldrh	r3, [r2, #22]
 80013fa:	2500      	movs	r5, #0
 80013fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80013fe:	9306      	str	r3, [sp, #24]
 8001400:	8a94      	ldrh	r4, [r2, #20]
 8001402:	950d      	str	r5, [sp, #52]	; 0x34
 8001404:	940b      	str	r4, [sp, #44]	; 0x2c
 8001406:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8001408:	4281      	cmp	r1, r0
 800140a:	f040 80f8 	bne.w	80015fe <_core_inspect_forward_validate+0x242>
 800140e:	9900      	ldr	r1, [sp, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	614a      	str	r2, [r1, #20]
 8001414:	9b00      	ldr	r3, [sp, #0]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	2800      	cmp	r0, #0
 800141a:	f040 80f0 	bne.w	80015fe <_core_inspect_forward_validate+0x242>
 800141e:	4618      	mov	r0, r3
 8001420:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001422:	6983      	ldr	r3, [r0, #24]
 8001424:	2700      	movs	r7, #0
 8001426:	4690      	mov	r8, r2
 8001428:	2400      	movs	r4, #0
 800142a:	b333      	cbz	r3, 800147a <_core_inspect_forward_validate+0xbe>
 800142c:	07d9      	lsls	r1, r3, #31
 800142e:	d504      	bpl.n	800143a <_core_inspect_forward_validate+0x7e>
 8001430:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001432:	2401      	movs	r4, #1
 8001434:	68cf      	ldr	r7, [r1, #12]
 8001436:	f8d1 801c 	ldr.w	r8, [r1, #28]
 800143a:	0858      	lsrs	r0, r3, #1
 800143c:	d01d      	beq.n	800147a <_core_inspect_forward_validate+0xbe>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001442:	fa1f fc84 	uxth.w	ip, r4
 8001446:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 800144a:	1c64      	adds	r4, r4, #1
 800144c:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 8001450:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8001454:	444f      	add	r7, r9
 8001456:	f8dc a01c 	ldr.w	sl, [ip, #28]
 800145a:	fa1f fc84 	uxth.w	ip, r4
 800145e:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 8001462:	1c64      	adds	r4, r4, #1
 8001464:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8001468:	1e40      	subs	r0, r0, #1
 800146a:	44d0      	add	r8, sl
 800146c:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8001470:	69d2      	ldr	r2, [r2, #28]
 8001472:	444f      	add	r7, r9
 8001474:	4490      	add	r8, r2
 8001476:	d1e3      	bne.n	8001440 <_core_inspect_forward_validate+0x84>
 8001478:	9100      	str	r1, [sp, #0]
 800147a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800147e:	9a00      	ldr	r2, [sp, #0]
 8001480:	017f      	lsls	r7, r7, #5
 8001482:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001486:	00c9      	lsls	r1, r1, #3
 8001488:	9102      	str	r1, [sp, #8]
 800148a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800148c:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8001490:	eb01 1940 	add.w	r9, r1, r0, lsl #5
 8001494:	0030      	movs	r0, r6
 8001496:	fb0a 7a05 	mla	sl, sl, r5, r7
 800149a:	f109 093b 	add.w	r9, r9, #59	; 0x3b
 800149e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80014a2:	f10a 0a03 	add.w	sl, sl, #3
 80014a6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 80014aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80014ae:	d00a      	beq.n	80014c6 <_core_inspect_forward_validate+0x10a>
 80014b0:	9900      	ldr	r1, [sp, #0]
 80014b2:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
 80014b6:	6b88      	ldr	r0, [r1, #56]	; 0x38
 80014b8:	fb00 8005 	mla	r0, r0, r5, r8
 80014bc:	1cc0      	adds	r0, r0, #3
 80014be:	0880      	lsrs	r0, r0, #2
 80014c0:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 80014c4:	e001      	b.n	80014ca <_core_inspect_forward_validate+0x10e>
 80014c6:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80014ca:	9900      	ldr	r1, [sp, #0]
 80014cc:	6a0c      	ldr	r4, [r1, #32]
 80014ce:	b15c      	cbz	r4, 80014e8 <_core_inspect_forward_validate+0x12c>
 80014d0:	4608      	mov	r0, r1
 80014d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80014d4:	b112      	cbz	r2, 80014dc <_core_inspect_forward_validate+0x120>
 80014d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80014d8:	4621      	mov	r1, r4
 80014da:	4790      	blx	r2
 80014dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014de:	4559      	cmp	r1, fp
 80014e0:	d20a      	bcs.n	80014f8 <_core_inspect_forward_validate+0x13c>
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff07 	bl	80012f6 <core_mem_free>
 80014e8:	4658      	mov	r0, fp
 80014ea:	f7ff fef7 	bl	80012dc <core_mem_alloc>
 80014ee:	0004      	movs	r4, r0
 80014f0:	f000 8085 	beq.w	80015fe <_core_inspect_forward_validate+0x242>
 80014f4:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 80014f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80014fc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001500:	61a0      	str	r0, [r4, #24]
 8001502:	9a02      	ldr	r2, [sp, #8]
 8001504:	1888      	adds	r0, r1, r2
 8001506:	61e0      	str	r0, [r4, #28]
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800150c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001510:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8001514:	6220      	str	r0, [r4, #32]
 8001516:	b13e      	cbz	r6, 8001528 <_core_inspect_forward_validate+0x16c>
 8001518:	eb04 0089 	add.w	r0, r4, r9, lsl #2
 800151c:	eb00 010a 	add.w	r1, r0, sl
 8001520:	eb01 0308 	add.w	r3, r1, r8
 8001524:	19c2      	adds	r2, r0, r7
 8001526:	e003      	b.n	8001530 <_core_inspect_forward_validate+0x174>
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	6323      	str	r3, [r4, #48]	; 0x30
 8001532:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001534:	f8df 2880 	ldr.w	r2, [pc, #2176]	; 8001db8 <.text_9>
 8001538:	62a1      	str	r1, [r4, #40]	; 0x28
 800153a:	6260      	str	r0, [r4, #36]	; 0x24
 800153c:	9800      	ldr	r0, [sp, #0]
 800153e:	6204      	str	r4, [r0, #32]
 8001540:	9900      	ldr	r1, [sp, #0]
 8001542:	61cd      	str	r5, [r1, #28]
 8001544:	9800      	ldr	r0, [sp, #0]
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	6901      	ldr	r1, [r0, #16]
 800154a:	6023      	str	r3, [r4, #0]
 800154c:	2000      	movs	r0, #0
 800154e:	1c5b      	adds	r3, r3, #1
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	6060      	str	r0, [r4, #4]
 8001554:	9b00      	ldr	r3, [sp, #0]
 8001556:	68dd      	ldr	r5, [r3, #12]
 8001558:	60a5      	str	r5, [r4, #8]
 800155a:	9a00      	ldr	r2, [sp, #0]
 800155c:	6993      	ldr	r3, [r2, #24]
 800155e:	69a2      	ldr	r2, [r4, #24]
 8001560:	60e3      	str	r3, [r4, #12]
 8001562:	6120      	str	r0, [r4, #16]
 8001564:	6162      	str	r2, [r4, #20]
 8001566:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001568:	2a00      	cmp	r2, #0
 800156a:	d048      	beq.n	80015fe <_core_inspect_forward_validate+0x242>
 800156c:	900a      	str	r0, [sp, #40]	; 0x28
 800156e:	9203      	str	r2, [sp, #12]
 8001570:	e000      	b.n	8001574 <_core_inspect_forward_validate+0x1b8>
 8001572:	9003      	str	r0, [sp, #12]
 8001574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001576:	9a00      	ldr	r2, [sp, #0]
 8001578:	9800      	ldr	r0, [sp, #0]
 800157a:	1c59      	adds	r1, r3, #1
 800157c:	910a      	str	r1, [sp, #40]	; 0x28
 800157e:	6a11      	ldr	r1, [r2, #32]
 8001580:	9104      	str	r1, [sp, #16]
 8001582:	9903      	ldr	r1, [sp, #12]
 8001584:	69c5      	ldr	r5, [r0, #28]
 8001586:	694a      	ldr	r2, [r1, #20]
 8001588:	8810      	ldrh	r0, [r2, #0]
 800158a:	2800      	cmp	r0, #0
 800158c:	bf14      	ite	ne
 800158e:	6851      	ldrne	r1, [r2, #4]
 8001590:	2100      	moveq	r1, #0
 8001592:	2802      	cmp	r0, #2
 8001594:	db04      	blt.n	80015a0 <_core_inspect_forward_validate+0x1e4>
 8001596:	6852      	ldr	r2, [r2, #4]
 8001598:	f102 040c 	add.w	r4, r2, #12
 800159c:	940c      	str	r4, [sp, #48]	; 0x30
 800159e:	e001      	b.n	80015a4 <_core_inspect_forward_validate+0x1e8>
 80015a0:	2600      	movs	r6, #0
 80015a2:	960c      	str	r6, [sp, #48]	; 0x30
 80015a4:	9a04      	ldr	r2, [sp, #16]
 80015a6:	9f00      	ldr	r7, [sp, #0]
 80015a8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80015ac:	9800      	ldr	r0, [sp, #0]
 80015ae:	6954      	ldr	r4, [r2, #20]
 80015b0:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 80015b4:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80015b8:	9e03      	ldr	r6, [sp, #12]
 80015ba:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 80015be:	6880      	ldr	r0, [r0, #8]
 80015c0:	eb0e 03c4 	add.w	r3, lr, r4, lsl #3
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	8837      	ldrh	r7, [r6, #0]
 80015c8:	2600      	movs	r6, #0
 80015ca:	09c0      	lsrs	r0, r0, #7
 80015cc:	8017      	strh	r7, [r2, #0]
 80015ce:	f000 0001 	and.w	r0, r0, #1
 80015d2:	9b03      	ldr	r3, [sp, #12]
 80015d4:	2800      	cmp	r0, #0
 80015d6:	885c      	ldrh	r4, [r3, #2]
 80015d8:	6096      	str	r6, [r2, #8]
 80015da:	8054      	strh	r4, [r2, #2]
 80015dc:	9b02      	ldr	r3, [sp, #8]
 80015de:	68dc      	ldr	r4, [r3, #12]
 80015e0:	8194      	strh	r4, [r2, #12]
 80015e2:	9e02      	ldr	r6, [sp, #8]
 80015e4:	69f3      	ldr	r3, [r6, #28]
 80015e6:	81d3      	strh	r3, [r2, #14]
 80015e8:	d147      	bne.n	800167a <_core_inspect_forward_validate+0x2be>
 80015ea:	2100      	movs	r1, #0
 80015ec:	6150      	str	r0, [r2, #20]
 80015ee:	6111      	str	r1, [r2, #16]
 80015f0:	9803      	ldr	r0, [sp, #12]
 80015f2:	9903      	ldr	r1, [sp, #12]
 80015f4:	68c0      	ldr	r0, [r0, #12]
 80015f6:	4281      	cmp	r1, r0
 80015f8:	bf18      	it	ne
 80015fa:	2800      	cmpne	r0, #0
 80015fc:	d1b9      	bne.n	8001572 <_core_inspect_forward_validate+0x1b6>
 80015fe:	9800      	ldr	r0, [sp, #0]
 8001600:	6a02      	ldr	r2, [r0, #32]
 8001602:	6941      	ldr	r1, [r0, #20]
 8001604:	9800      	ldr	r0, [sp, #0]
 8001606:	6953      	ldr	r3, [r2, #20]
 8001608:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800160c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001610:	9403      	str	r4, [sp, #12]
 8001612:	69d5      	ldr	r5, [r2, #28]
 8001614:	9504      	str	r5, [sp, #16]
 8001616:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800161a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800161c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001620:	9806      	ldr	r0, [sp, #24]
 8001622:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001626:	9102      	str	r1, [sp, #8]
 8001628:	9903      	ldr	r1, [sp, #12]
 800162a:	1c40      	adds	r0, r0, #1
 800162c:	8088      	strh	r0, [r1, #4]
 800162e:	9a03      	ldr	r2, [sp, #12]
 8001630:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001632:	80d0      	strh	r0, [r2, #6]
 8001634:	9900      	ldr	r1, [sp, #0]
 8001636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001638:	69c8      	ldr	r0, [r1, #28]
 800163a:	4290      	cmp	r0, r2
 800163c:	d104      	bne.n	8001648 <_core_inspect_forward_validate+0x28c>
 800163e:	9902      	ldr	r1, [sp, #8]
 8001640:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 8001644:	f005 fb67 	bl	8006d16 <core_timer_reset>
 8001648:	9800      	ldr	r0, [sp, #0]
 800164a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800164c:	6841      	ldr	r1, [r0, #4]
 800164e:	6890      	ldr	r0, [r2, #8]
 8001650:	6081      	str	r1, [r0, #8]
 8001652:	9902      	ldr	r1, [sp, #8]
 8001654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001656:	684a      	ldr	r2, [r1, #4]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001662:	2800      	cmp	r0, #0
 8001664:	f000 8105 	beq.w	8001872 <_core_inspect_forward_validate+0x4b6>
 8001668:	f04f 0900 	mov.w	r9, #0
 800166c:	46ca      	mov	sl, r9
 800166e:	9c08      	ldr	r4, [sp, #32]
 8001670:	9e06      	ldr	r6, [sp, #24]
 8001672:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001674:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001678:	e0ea      	b.n	8001850 <_core_inspect_forward_validate+0x494>
 800167a:	9804      	ldr	r0, [sp, #16]
 800167c:	9c02      	ldr	r4, [sp, #8]
 800167e:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
 8001682:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001684:	6920      	ldr	r0, [r4, #16]
 8001686:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800168a:	6110      	str	r0, [r2, #16]
 800168c:	9b04      	ldr	r3, [sp, #16]
 800168e:	9e02      	ldr	r6, [sp, #8]
 8001690:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001692:	6a33      	ldr	r3, [r6, #32]
 8001694:	eb04 1743 	add.w	r7, r4, r3, lsl #5
 8001698:	6157      	str	r7, [r2, #20]
 800169a:	9c04      	ldr	r4, [sp, #16]
 800169c:	9e02      	ldr	r6, [sp, #8]
 800169e:	2700      	movs	r7, #0
 80016a0:	46b8      	mov	r8, r7
 80016a2:	46ba      	mov	sl, r7
 80016a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016a6:	69b4      	ldr	r4, [r6, #24]
 80016a8:	9109      	str	r1, [sp, #36]	; 0x24
 80016aa:	9205      	str	r2, [sp, #20]
 80016ac:	436c      	muls	r4, r5
 80016ae:	191e      	adds	r6, r3, r4
 80016b0:	1d03      	adds	r3, r0, #4
 80016b2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80016b6:	eb03 09c4 	add.w	r9, r3, r4, lsl #3
 80016ba:	e021      	b.n	8001700 <_core_inspect_forward_validate+0x344>
 80016bc:	2000      	movs	r0, #0
 80016be:	f849 0c04 	str.w	r0, [r9, #-4]
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	f8c9 0000 	str.w	r0, [r9]
 80016c8:	2800      	cmp	r0, #0
 80016ca:	bf1c      	itt	ne
 80016cc:	8840      	ldrhne	r0, [r0, #2]
 80016ce:	2800      	cmpne	r0, #0
 80016d0:	bf07      	ittee	eq
 80016d2:	2100      	moveq	r1, #0
 80016d4:	f849 1c04 	streq.w	r1, [r9, #-4]
 80016d8:	2201      	movne	r2, #1
 80016da:	f849 2c04 	strne.w	r2, [r9, #-4]
 80016de:	bf00      	nop
 80016e0:	f8cb 1014 	str.w	r1, [fp, #20]
 80016e4:	69a0      	ldr	r0, [r4, #24]
 80016e6:	1c7f      	adds	r7, r7, #1
 80016e8:	f10a 0a18 	add.w	sl, sl, #24
 80016ec:	f109 0908 	add.w	r9, r9, #8
 80016f0:	f108 0804 	add.w	r8, r8, #4
 80016f4:	6841      	ldr	r1, [r0, #4]
 80016f6:	6800      	ldr	r0, [r0, #0]
 80016f8:	f005 f92a 	bl	8006950 <ai_array_get_byte_size>
 80016fc:	4368      	muls	r0, r5
 80016fe:	4406      	add	r6, r0
 8001700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001702:	b100      	cbz	r0, 8001706 <_core_inspect_forward_validate+0x34a>
 8001704:	8800      	ldrh	r0, [r0, #0]
 8001706:	4287      	cmp	r7, r0
 8001708:	d221      	bcs.n	800174e <_core_inspect_forward_validate+0x392>
 800170a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800170c:	6840      	ldr	r0, [r0, #4]
 800170e:	b1f0      	cbz	r0, 800174e <_core_inspect_forward_validate+0x392>
 8001710:	f850 4008 	ldr.w	r4, [r0, r8]
 8001714:	b1dc      	cbz	r4, 800174e <_core_inspect_forward_validate+0x392>
 8001716:	9805      	ldr	r0, [sp, #20]
 8001718:	69a2      	ldr	r2, [r4, #24]
 800171a:	6901      	ldr	r1, [r0, #16]
 800171c:	6810      	ldr	r0, [r2, #0]
 800171e:	eb01 0b0a 	add.w	fp, r1, sl
 8001722:	f005 f83d 	bl	80067a0 <ai_array_to_buffer_fmt>
 8001726:	f8cb 0000 	str.w	r0, [fp]
 800172a:	f8ab 5004 	strh.w	r5, [fp, #4]
 800172e:	68e0      	ldr	r0, [r4, #12]
 8001730:	68c1      	ldr	r1, [r0, #12]
 8001732:	f8ab 1006 	strh.w	r1, [fp, #6]
 8001736:	6882      	ldr	r2, [r0, #8]
 8001738:	f8ab 2008 	strh.w	r2, [fp, #8]
 800173c:	6840      	ldr	r0, [r0, #4]
 800173e:	f1b9 0104 	subs.w	r1, r9, #4
 8001742:	f8cb 000c 	str.w	r0, [fp, #12]
 8001746:	f8cb 6010 	str.w	r6, [fp, #16]
 800174a:	d1b7      	bne.n	80016bc <_core_inspect_forward_validate+0x300>
 800174c:	e7c8      	b.n	80016e0 <_core_inspect_forward_validate+0x324>
 800174e:	9804      	ldr	r0, [sp, #16]
 8001750:	9b02      	ldr	r3, [sp, #8]
 8001752:	9905      	ldr	r1, [sp, #20]
 8001754:	2700      	movs	r7, #0
 8001756:	46b8      	mov	r8, r7
 8001758:	46ba      	mov	sl, r7
 800175a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800175c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800175e:	89cc      	ldrh	r4, [r1, #14]
 8001760:	4368      	muls	r0, r5
 8001762:	1816      	adds	r6, r2, r0
 8001764:	694a      	ldr	r2, [r1, #20]
 8001766:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800176a:	9502      	str	r5, [sp, #8]
 800176c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800176e:	9105      	str	r1, [sp, #20]
 8001770:	1d13      	adds	r3, r2, #4
 8001772:	eb03 09ce 	add.w	r9, r3, lr, lsl #3
 8001776:	e022      	b.n	80017be <_core_inspect_forward_validate+0x402>
 8001778:	2000      	movs	r0, #0
 800177a:	f849 0c04 	str.w	r0, [r9, #-4]
 800177e:	6828      	ldr	r0, [r5, #0]
 8001780:	f8c9 0000 	str.w	r0, [r9]
 8001784:	2800      	cmp	r0, #0
 8001786:	bf1c      	itt	ne
 8001788:	8840      	ldrhne	r0, [r0, #2]
 800178a:	2800      	cmpne	r0, #0
 800178c:	bf07      	ittee	eq
 800178e:	2100      	moveq	r1, #0
 8001790:	f849 1c04 	streq.w	r1, [r9, #-4]
 8001794:	2201      	movne	r2, #1
 8001796:	f849 2c04 	strne.w	r2, [r9, #-4]
 800179a:	bf00      	nop
 800179c:	f8cb 1014 	str.w	r1, [fp, #20]
 80017a0:	69a8      	ldr	r0, [r5, #24]
 80017a2:	9d02      	ldr	r5, [sp, #8]
 80017a4:	1c7f      	adds	r7, r7, #1
 80017a6:	f10a 0a18 	add.w	sl, sl, #24
 80017aa:	f109 0908 	add.w	r9, r9, #8
 80017ae:	6841      	ldr	r1, [r0, #4]
 80017b0:	6800      	ldr	r0, [r0, #0]
 80017b2:	f108 0804 	add.w	r8, r8, #4
 80017b6:	f005 f8cb 	bl	8006950 <ai_array_get_byte_size>
 80017ba:	4345      	muls	r5, r0
 80017bc:	442e      	add	r6, r5
 80017be:	2c00      	cmp	r4, #0
 80017c0:	bf14      	ite	ne
 80017c2:	8820      	ldrhne	r0, [r4, #0]
 80017c4:	2000      	moveq	r0, #0
 80017c6:	4287      	cmp	r7, r0
 80017c8:	f4bf af12 	bcs.w	80015f0 <_core_inspect_forward_validate+0x234>
 80017cc:	6860      	ldr	r0, [r4, #4]
 80017ce:	2800      	cmp	r0, #0
 80017d0:	bf1c      	itt	ne
 80017d2:	f850 5008 	ldrne.w	r5, [r0, r8]
 80017d6:	2d00      	cmpne	r5, #0
 80017d8:	f43f af0a 	beq.w	80015f0 <_core_inspect_forward_validate+0x234>
 80017dc:	9805      	ldr	r0, [sp, #20]
 80017de:	69aa      	ldr	r2, [r5, #24]
 80017e0:	6941      	ldr	r1, [r0, #20]
 80017e2:	6810      	ldr	r0, [r2, #0]
 80017e4:	eb01 0b0a 	add.w	fp, r1, sl
 80017e8:	f004 ffda 	bl	80067a0 <ai_array_to_buffer_fmt>
 80017ec:	f8cb 0000 	str.w	r0, [fp]
 80017f0:	9802      	ldr	r0, [sp, #8]
 80017f2:	f8ab 0004 	strh.w	r0, [fp, #4]
 80017f6:	68e8      	ldr	r0, [r5, #12]
 80017f8:	68c1      	ldr	r1, [r0, #12]
 80017fa:	f8ab 1006 	strh.w	r1, [fp, #6]
 80017fe:	6882      	ldr	r2, [r0, #8]
 8001800:	f8ab 2008 	strh.w	r2, [fp, #8]
 8001804:	6840      	ldr	r0, [r0, #4]
 8001806:	f1b9 0104 	subs.w	r1, r9, #4
 800180a:	f8cb 000c 	str.w	r0, [fp, #12]
 800180e:	f8cb 6010 	str.w	r6, [fp, #16]
 8001812:	d1b1      	bne.n	8001778 <_core_inspect_forward_validate+0x3bc>
 8001814:	e7c2      	b.n	800179c <_core_inspect_forward_validate+0x3e0>
 8001816:	69a9      	ldr	r1, [r5, #24]
 8001818:	6808      	ldr	r0, [r1, #0]
 800181a:	0042      	lsls	r2, r0, #1
 800181c:	d414      	bmi.n	8001848 <_core_inspect_forward_validate+0x48c>
 800181e:	6849      	ldr	r1, [r1, #4]
 8001820:	f005 f896 	bl	8006950 <ai_array_get_byte_size>
 8001824:	69ab      	ldr	r3, [r5, #24]
 8001826:	4602      	mov	r2, r0
 8001828:	f8d8 5010 	ldr.w	r5, [r8, #16]
 800182c:	4370      	muls	r0, r6
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8001834:	f105 0c10 	add.w	ip, r5, #16
 8001838:	1c7f      	adds	r7, r7, #1
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	f85c e003 	ldr.w	lr, [ip, r3]
 8001840:	eb0e 0000 	add.w	r0, lr, r0
 8001844:	f00e fa6f 	bl	800fd26 <__aeabi_memcpy>
 8001848:	f109 0901 	add.w	r9, r9, #1
 800184c:	f10a 0a04 	add.w	sl, sl, #4
 8001850:	2c00      	cmp	r4, #0
 8001852:	bf14      	ite	ne
 8001854:	8820      	ldrhne	r0, [r4, #0]
 8001856:	2000      	moveq	r0, #0
 8001858:	4581      	cmp	r9, r0
 800185a:	d206      	bcs.n	800186a <_core_inspect_forward_validate+0x4ae>
 800185c:	6860      	ldr	r0, [r4, #4]
 800185e:	2800      	cmp	r0, #0
 8001860:	bf1c      	itt	ne
 8001862:	f850 500a 	ldrne.w	r5, [r0, sl]
 8001866:	2d00      	cmpne	r5, #0
 8001868:	d1d5      	bne.n	8001816 <_core_inspect_forward_validate+0x45a>
 800186a:	9408      	str	r4, [sp, #32]
 800186c:	9606      	str	r6, [sp, #24]
 800186e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001872:	9a00      	ldr	r2, [sp, #0]
 8001874:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001876:	2800      	cmp	r0, #0
 8001878:	d06c      	beq.n	8001954 <_core_inspect_forward_validate+0x598>
 800187a:	9a03      	ldr	r2, [sp, #12]
 800187c:	a909      	add	r1, sp, #36	; 0x24
 800187e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001882:	e892 40f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, lr}
 8001886:	e881 40f8 	stmia.w	r1, {r3, r4, r5, r6, r7, lr}
 800188a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800188e:	2100      	movs	r1, #0
 8001890:	910e      	str	r1, [sp, #56]	; 0x38
 8001892:	2600      	movs	r6, #0
 8001894:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8001898:	2700      	movs	r7, #0
 800189a:	4688      	mov	r8, r1
 800189c:	9c08      	ldr	r4, [sp, #32]
 800189e:	e00b      	b.n	80018b8 <_core_inspect_forward_validate+0x4fc>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e003      	b.n	80018ac <_core_inspect_forward_validate+0x4f0>
 80018a4:	000a      	movs	r2, r1
 80018a6:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 80018aa:	d0f9      	beq.n	80018a0 <_core_inspect_forward_validate+0x4e4>
 80018ac:	f8c9 0014 	str.w	r0, [r9, #20]
 80018b0:	1c76      	adds	r6, r6, #1
 80018b2:	1c7f      	adds	r7, r7, #1
 80018b4:	f108 0804 	add.w	r8, r8, #4
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	bf14      	ite	ne
 80018bc:	8820      	ldrhne	r0, [r4, #0]
 80018be:	2000      	moveq	r0, #0
 80018c0:	4287      	cmp	r7, r0
 80018c2:	d235      	bcs.n	8001930 <_core_inspect_forward_validate+0x574>
 80018c4:	6860      	ldr	r0, [r4, #4]
 80018c6:	b398      	cbz	r0, 8001930 <_core_inspect_forward_validate+0x574>
 80018c8:	f850 5008 	ldr.w	r5, [r0, r8]
 80018cc:	b385      	cbz	r5, 8001930 <_core_inspect_forward_validate+0x574>
 80018ce:	69a9      	ldr	r1, [r5, #24]
 80018d0:	6808      	ldr	r0, [r1, #0]
 80018d2:	0042      	lsls	r2, r0, #1
 80018d4:	d4ed      	bmi.n	80018b2 <_core_inspect_forward_validate+0x4f6>
 80018d6:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80018da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80018dc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80018e0:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80018e4:	f004 ff5c 	bl	80067a0 <ai_array_to_buffer_fmt>
 80018e8:	f8c9 0000 	str.w	r0, [r9]
 80018ec:	2001      	movs	r0, #1
 80018ee:	f8a9 0004 	strh.w	r0, [r9, #4]
 80018f2:	68e8      	ldr	r0, [r5, #12]
 80018f4:	68c1      	ldr	r1, [r0, #12]
 80018f6:	f8a9 1006 	strh.w	r1, [r9, #6]
 80018fa:	6882      	ldr	r2, [r0, #8]
 80018fc:	f8a9 2008 	strh.w	r2, [r9, #8]
 8001900:	6840      	ldr	r0, [r0, #4]
 8001902:	f8c9 000c 	str.w	r0, [r9, #12]
 8001906:	eb1b 00c6 	adds.w	r0, fp, r6, lsl #3
 800190a:	f8c9 a010 	str.w	sl, [r9, #16]
 800190e:	d0cd      	beq.n	80018ac <_core_inspect_forward_validate+0x4f0>
 8001910:	2100      	movs	r1, #0
 8001912:	f10b 0204 	add.w	r2, fp, #4
 8001916:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 800191a:	6829      	ldr	r1, [r5, #0]
 800191c:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
 8001920:	2900      	cmp	r1, #0
 8001922:	d0bf      	beq.n	80018a4 <_core_inspect_forward_validate+0x4e8>
 8001924:	8849      	ldrh	r1, [r1, #2]
 8001926:	1e49      	subs	r1, r1, #1
 8001928:	4189      	sbcs	r1, r1
 800192a:	43c9      	mvns	r1, r1
 800192c:	0fc9      	lsrs	r1, r1, #31
 800192e:	e7b9      	b.n	80018a4 <_core_inspect_forward_validate+0x4e8>
 8001930:	9802      	ldr	r0, [sp, #8]
 8001932:	eddf 0a97 	vldr	s1, [pc, #604]	; 8001b90 <.text_5>
 8001936:	9b00      	ldr	r3, [sp, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	a909      	add	r1, sp, #36	; 0x24
 800193c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001946:	ee60 0a20 	vmul.f32	s1, s0, s1
 800194a:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
 800194e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001950:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001952:	47a0      	blx	r4
 8001954:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001956:	f9b0 0000 	ldrsh.w	r0, [r0]
 800195a:	f000 fcc1 	bl	80022e0 <ai_layer_type_is_valid>
 800195e:	b148      	cbz	r0, 8001974 <_core_inspect_forward_validate+0x5b8>
 8001960:	9802      	ldr	r0, [sp, #8]
 8001962:	302c      	adds	r0, #44	; 0x2c
 8001964:	f005 f9dd 	bl	8006d22 <core_timer_start>
 8001968:	9810      	ldr	r0, [sp, #64]	; 0x40
 800196a:	6902      	ldr	r2, [r0, #16]
 800196c:	4790      	blx	r2
 800196e:	9802      	ldr	r0, [sp, #8]
 8001970:	302c      	adds	r0, #44	; 0x2c
 8001972:	e007      	b.n	8001984 <_core_inspect_forward_validate+0x5c8>
 8001974:	9902      	ldr	r1, [sp, #8]
 8001976:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 800197a:	f005 f9d2 	bl	8006d22 <core_timer_start>
 800197e:	9a02      	ldr	r2, [sp, #8]
 8001980:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8001984:	f005 f9d7 	bl	8006d36 <core_timer_stop>
 8001988:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800198c:	b3a0      	cbz	r0, 80019f8 <_core_inspect_forward_validate+0x63c>
 800198e:	2700      	movs	r7, #0
 8001990:	46b9      	mov	r9, r7
 8001992:	46ba      	mov	sl, r7
 8001994:	9c07      	ldr	r4, [sp, #28]
 8001996:	9e06      	ldr	r6, [sp, #24]
 8001998:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800199c:	e01c      	b.n	80019d8 <_core_inspect_forward_validate+0x61c>
 800199e:	69a9      	ldr	r1, [r5, #24]
 80019a0:	6808      	ldr	r0, [r1, #0]
 80019a2:	0042      	lsls	r2, r0, #1
 80019a4:	d414      	bmi.n	80019d0 <_core_inspect_forward_validate+0x614>
 80019a6:	6849      	ldr	r1, [r1, #4]
 80019a8:	f004 ffd2 	bl	8006950 <ai_array_get_byte_size>
 80019ac:	69ab      	ldr	r3, [r5, #24]
 80019ae:	4602      	mov	r2, r0
 80019b0:	f8d8 5014 	ldr.w	r5, [r8, #20]
 80019b4:	4370      	muls	r0, r6
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80019bc:	f105 0c10 	add.w	ip, r5, #16
 80019c0:	1c7f      	adds	r7, r7, #1
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	f85c e003 	ldr.w	lr, [ip, r3]
 80019c8:	eb0e 0000 	add.w	r0, lr, r0
 80019cc:	f00e f9ab 	bl	800fd26 <__aeabi_memcpy>
 80019d0:	f109 0901 	add.w	r9, r9, #1
 80019d4:	f10a 0a04 	add.w	sl, sl, #4
 80019d8:	2c00      	cmp	r4, #0
 80019da:	bf14      	ite	ne
 80019dc:	8820      	ldrhne	r0, [r4, #0]
 80019de:	2000      	moveq	r0, #0
 80019e0:	4581      	cmp	r9, r0
 80019e2:	d206      	bcs.n	80019f2 <_core_inspect_forward_validate+0x636>
 80019e4:	6860      	ldr	r0, [r4, #4]
 80019e6:	2800      	cmp	r0, #0
 80019e8:	bf1c      	itt	ne
 80019ea:	f850 500a 	ldrne.w	r5, [r0, sl]
 80019ee:	2d00      	cmpne	r5, #0
 80019f0:	d1d5      	bne.n	800199e <_core_inspect_forward_validate+0x5e2>
 80019f2:	9407      	str	r4, [sp, #28]
 80019f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80019f8:	9a00      	ldr	r2, [sp, #0]
 80019fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019fc:	2900      	cmp	r1, #0
 80019fe:	d06b      	beq.n	8001ad8 <_core_inspect_forward_validate+0x71c>
 8001a00:	9a03      	ldr	r2, [sp, #12]
 8001a02:	a808      	add	r0, sp, #32
 8001a04:	2100      	movs	r1, #0
 8001a06:	4688      	mov	r8, r1
 8001a08:	e892 40f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, lr}
 8001a0c:	e880 40f8 	stmia.w	r0, {r3, r4, r5, r6, r7, lr}
 8001a10:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8001a14:	9904      	ldr	r1, [sp, #16]
 8001a16:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8001a1a:	2600      	movs	r6, #0
 8001a1c:	910d      	str	r1, [sp, #52]	; 0x34
 8001a1e:	2700      	movs	r7, #0
 8001a20:	9c07      	ldr	r4, [sp, #28]
 8001a22:	e00b      	b.n	8001a3c <_core_inspect_forward_validate+0x680>
 8001a24:	2000      	movs	r0, #0
 8001a26:	e003      	b.n	8001a30 <_core_inspect_forward_validate+0x674>
 8001a28:	000a      	movs	r2, r1
 8001a2a:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 8001a2e:	d0f9      	beq.n	8001a24 <_core_inspect_forward_validate+0x668>
 8001a30:	f8c9 0014 	str.w	r0, [r9, #20]
 8001a34:	1c76      	adds	r6, r6, #1
 8001a36:	1c7f      	adds	r7, r7, #1
 8001a38:	f108 0804 	add.w	r8, r8, #4
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	8820      	ldrhne	r0, [r4, #0]
 8001a42:	2000      	moveq	r0, #0
 8001a44:	4287      	cmp	r7, r0
 8001a46:	d235      	bcs.n	8001ab4 <_core_inspect_forward_validate+0x6f8>
 8001a48:	6860      	ldr	r0, [r4, #4]
 8001a4a:	b398      	cbz	r0, 8001ab4 <_core_inspect_forward_validate+0x6f8>
 8001a4c:	f850 5008 	ldr.w	r5, [r0, r8]
 8001a50:	b385      	cbz	r5, 8001ab4 <_core_inspect_forward_validate+0x6f8>
 8001a52:	69a9      	ldr	r1, [r5, #24]
 8001a54:	6808      	ldr	r0, [r1, #0]
 8001a56:	0042      	lsls	r2, r0, #1
 8001a58:	d4ed      	bmi.n	8001a36 <_core_inspect_forward_validate+0x67a>
 8001a5a:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8001a5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001a60:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001a64:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 8001a68:	f004 fe9a 	bl	80067a0 <ai_array_to_buffer_fmt>
 8001a6c:	f8c9 0000 	str.w	r0, [r9]
 8001a70:	2001      	movs	r0, #1
 8001a72:	f8a9 0004 	strh.w	r0, [r9, #4]
 8001a76:	68e8      	ldr	r0, [r5, #12]
 8001a78:	68c1      	ldr	r1, [r0, #12]
 8001a7a:	f8a9 1006 	strh.w	r1, [r9, #6]
 8001a7e:	6882      	ldr	r2, [r0, #8]
 8001a80:	f8a9 2008 	strh.w	r2, [r9, #8]
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	f8c9 000c 	str.w	r0, [r9, #12]
 8001a8a:	eb1b 00c6 	adds.w	r0, fp, r6, lsl #3
 8001a8e:	f8c9 a010 	str.w	sl, [r9, #16]
 8001a92:	d0cd      	beq.n	8001a30 <_core_inspect_forward_validate+0x674>
 8001a94:	2100      	movs	r1, #0
 8001a96:	f10b 0204 	add.w	r2, fp, #4
 8001a9a:	f84b 1036 	str.w	r1, [fp, r6, lsl #3]
 8001a9e:	6829      	ldr	r1, [r5, #0]
 8001aa0:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	d0bf      	beq.n	8001a28 <_core_inspect_forward_validate+0x66c>
 8001aa8:	8849      	ldrh	r1, [r1, #2]
 8001aaa:	1e49      	subs	r1, r1, #1
 8001aac:	4189      	sbcs	r1, r1
 8001aae:	43c9      	mvns	r1, r1
 8001ab0:	0fc9      	lsrs	r1, r1, #31
 8001ab2:	e7b9      	b.n	8001a28 <_core_inspect_forward_validate+0x66c>
 8001ab4:	9802      	ldr	r0, [sp, #8]
 8001ab6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8001b90 <.text_5>
 8001aba:	9b00      	ldr	r3, [sp, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	a908      	add	r1, sp, #32
 8001ac0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001ac4:	9800      	ldr	r0, [sp, #0]
 8001ac6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001aca:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001ace:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8001ad2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001ad4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001ad6:	47a0      	blx	r4
 8001ad8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001ada:	9800      	ldr	r0, [sp, #0]
 8001adc:	688a      	ldr	r2, [r1, #8]
 8001ade:	6090      	str	r0, [r2, #8]
 8001ae0:	9802      	ldr	r0, [sp, #8]
 8001ae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001ae4:	6881      	ldr	r1, [r0, #8]
 8001ae6:	f041 0101 	orr.w	r1, r1, #1
 8001aea:	6111      	str	r1, [r2, #16]
 8001aec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001aee:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001af0:	68c0      	ldr	r0, [r0, #12]
 8001af2:	4281      	cmp	r1, r0
 8001af4:	bf18      	it	ne
 8001af6:	2800      	cmpne	r0, #0
 8001af8:	d142      	bne.n	8001b80 <_core_inspect_forward_validate+0x7c4>
 8001afa:	9800      	ldr	r0, [sp, #0]
 8001afc:	68c2      	ldr	r2, [r0, #12]
 8001afe:	1c52      	adds	r2, r2, #1
 8001b00:	60c2      	str	r2, [r0, #12]
 8001b02:	9800      	ldr	r0, [sp, #0]
 8001b04:	9900      	ldr	r1, [sp, #0]
 8001b06:	69c0      	ldr	r0, [r0, #28]
 8001b08:	1e40      	subs	r0, r0, #1
 8001b0a:	61c8      	str	r0, [r1, #28]
 8001b0c:	d138      	bne.n	8001b80 <_core_inspect_forward_validate+0x7c4>
 8001b0e:	9800      	ldr	r0, [sp, #0]
 8001b10:	2400      	movs	r4, #0
 8001b12:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001b90 <.text_5>
 8001b16:	6a03      	ldr	r3, [r0, #32]
 8001b18:	6880      	ldr	r0, [r0, #8]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	1a52      	subs	r2, r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	09c0      	lsrs	r0, r0, #7
 8001b26:	9900      	ldr	r1, [sp, #0]
 8001b28:	f000 0001 	and.w	r0, r0, #1
 8001b2c:	698a      	ldr	r2, [r1, #24]
 8001b2e:	b33a      	cbz	r2, 8001b80 <_core_inspect_forward_validate+0x7c4>
 8001b30:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8001b32:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
 8001b36:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8001b3a:	3534      	adds	r5, #52	; 0x34
 8001b3c:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8001b40:	695d      	ldr	r5, [r3, #20]
 8001b42:	edd6 0a00 	vldr	s1, [r6]
 8001b46:	00fe      	lsls	r6, r7, #3
 8001b48:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001b4c:	f105 0c08 	add.w	ip, r5, #8
 8001b50:	44b4      	add	ip, r6
 8001b52:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001b56:	edcc 0a00 	vstr	s1, [ip]
 8001b5a:	ed93 1a04 	vldr	s2, [r3, #16]
 8001b5e:	ee71 0a20 	vadd.f32	s1, s2, s1
 8001b62:	edc3 0a04 	vstr	s1, [r3, #16]
 8001b66:	b930      	cbnz	r0, 8001b76 <_core_inspect_forward_validate+0x7ba>
 8001b68:	2700      	movs	r7, #0
 8001b6a:	f105 0c14 	add.w	ip, r5, #20
 8001b6e:	f84c 7006 	str.w	r7, [ip, r6]
 8001b72:	3510      	adds	r5, #16
 8001b74:	51af      	str	r7, [r5, r6]
 8001b76:	1c64      	adds	r4, r4, #1
 8001b78:	b2a4      	uxth	r4, r4
 8001b7a:	4294      	cmp	r4, r2
 8001b7c:	d3d8      	bcc.n	8001b30 <_core_inspect_forward_validate+0x774>
 8001b7e:	9100      	str	r1, [sp, #0]
 8001b80:	9800      	ldr	r0, [sp, #0]
 8001b82:	6941      	ldr	r1, [r0, #20]
 8001b84:	1c49      	adds	r1, r1, #1
 8001b86:	6141      	str	r1, [r0, #20]
 8001b88:	b011      	add	sp, #68	; 0x44
 8001b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001b90 <.text_5>:
 8001b90:	3a83126f 	.word	0x3a83126f

08001b94 <ai_network_inspect_init>:
 8001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	2600      	movs	r6, #0
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	f7fe fec0 	bl	8000922 <ai_platform_context_acquire>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	bf1c      	itt	ne
 8001ba8:	6d01      	ldrne	r1, [r0, #80]	; 0x50
 8001baa:	2900      	cmpne	r1, #0
 8001bac:	d010      	beq.n	8001bd0 <ai_network_inspect_init+0x3c>
 8001bae:	e000      	b.n	8001bb2 <ai_network_inspect_init+0x1e>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	68c8      	ldr	r0, [r1, #12]
 8001bb4:	1c76      	adds	r6, r6, #1
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	bf18      	it	ne
 8001bba:	2800      	cmpne	r0, #0
 8001bbc:	d1f8      	bne.n	8001bb0 <ai_network_inspect_init+0x1c>
 8001bbe:	b13e      	cbz	r6, 8001bd0 <ai_network_inspect_init+0x3c>
 8001bc0:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	3040      	adds	r0, #64	; 0x40
 8001bc8:	f7ff fb88 	bl	80012dc <core_mem_alloc>
 8001bcc:	0005      	movs	r5, r0
 8001bce:	d103      	bne.n	8001bd8 <ai_network_inspect_init+0x44>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	b003      	add	sp, #12
 8001bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	4978      	ldr	r1, [pc, #480]	; (8001dbc <.text_10>)
 8001bdc:	6001      	str	r1, [r0, #0]
 8001bde:	bf14      	ite	ne
 8001be0:	6861      	ldrne	r1, [r4, #4]
 8001be2:	2100      	moveq	r1, #0
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	6281      	str	r1, [r0, #40]	; 0x28
 8001be8:	bf14      	ite	ne
 8001bea:	68a1      	ldrne	r1, [r4, #8]
 8001bec:	2100      	moveq	r1, #0
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001bf2:	bf14      	ite	ne
 8001bf4:	68e1      	ldrne	r1, [r4, #12]
 8001bf6:	2100      	moveq	r1, #0
 8001bf8:	2c00      	cmp	r4, #0
 8001bfa:	6301      	str	r1, [r0, #48]	; 0x30
 8001bfc:	bf14      	ite	ne
 8001bfe:	7821      	ldrbne	r1, [r4, #0]
 8001c00:	2101      	moveq	r1, #1
 8001c02:	6081      	str	r1, [r0, #8]
 8001c04:	9900      	ldr	r1, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	688a      	ldr	r2, [r1, #8]
 8001c0a:	60c3      	str	r3, [r0, #12]
 8001c0c:	6042      	str	r2, [r0, #4]
 8001c0e:	9900      	ldr	r1, [sp, #0]
 8001c10:	6101      	str	r1, [r0, #16]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8001c18:	6186      	str	r6, [r0, #24]
 8001c1a:	6142      	str	r2, [r0, #20]
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	61c3      	str	r3, [r0, #28]
 8001c20:	4691      	mov	r9, r2
 8001c22:	6241      	str	r1, [r0, #36]	; 0x24
 8001c24:	4966      	ldr	r1, [pc, #408]	; (8001dc0 <.text_11>)
 8001c26:	6202      	str	r2, [r0, #32]
 8001c28:	9b00      	ldr	r3, [sp, #0]
 8001c2a:	f041 0101 	orr.w	r1, r1, #1
 8001c2e:	4690      	mov	r8, r2
 8001c30:	2600      	movs	r6, #0
 8001c32:	6098      	str	r0, [r3, #8]
 8001c34:	9102      	str	r1, [sp, #8]
 8001c36:	9a02      	ldr	r2, [sp, #8]
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	636e      	str	r6, [r5, #52]	; 0x34
 8001c3c:	63ae      	str	r6, [r5, #56]	; 0x38
 8001c3e:	9a00      	ldr	r2, [sp, #0]
 8001c40:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d054      	beq.n	8001cf0 <ai_network_inspect_init+0x15c>
 8001c46:	4607      	mov	r7, r0
 8001c48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001c4a:	ebca 01ca 	rsb	r1, sl, sl, lsl #3
 8001c4e:	9a01      	ldr	r2, [sp, #4]
 8001c50:	eb10 04c1 	adds.w	r4, r0, r1, lsl #3
 8001c54:	f10a 0a01 	add.w	sl, sl, #1
 8001c58:	60a2      	str	r2, [r4, #8]
 8001c5a:	bf08      	it	eq
 8001c5c:	f04f 0b00 	moveq.w	fp, #0
 8001c60:	d021      	beq.n	8001ca6 <ai_network_inspect_init+0x112>
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	6020      	str	r0, [r4, #0]
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	f041 0101 	orr.w	r1, r1, #1
 8001c6c:	6061      	str	r1, [r4, #4]
 8001c6e:	9a02      	ldr	r2, [sp, #8]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	613a      	str	r2, [r7, #16]
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	8808      	ldrh	r0, [r1, #0]
 8001c7a:	b108      	cbz	r0, 8001c80 <ai_network_inspect_init+0xec>
 8001c7c:	f8d1 0004 	ldr.w	r0, [r1, #4]
 8001c80:	f104 010c 	add.w	r1, r4, #12
 8001c84:	f7ff fb6a 	bl	800135c <_core_inspect_tensor_list>
 8001c88:	4683      	mov	fp, r0
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	8801      	ldrh	r1, [r0, #0]
 8001c8e:	2902      	cmp	r1, #2
 8001c90:	f104 011c 	add.w	r1, r4, #28
 8001c94:	bfa6      	itte	ge
 8001c96:	6840      	ldrge	r0, [r0, #4]
 8001c98:	300c      	addge	r0, #12
 8001c9a:	2000      	movlt	r0, #0
 8001c9c:	f7ff fb5e 	bl	800135c <_core_inspect_tensor_list>
 8001ca0:	4583      	cmp	fp, r0
 8001ca2:	bf38      	it	cc
 8001ca4:	4683      	movcc	fp, r0
 8001ca6:	68e0      	ldr	r0, [r4, #12]
 8001ca8:	f8c4 9010 	str.w	r9, [r4, #16]
 8001cac:	69e1      	ldr	r1, [r4, #28]
 8001cae:	f8c4 8020 	str.w	r8, [r4, #32]
 8001cb2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001cb4:	45b3      	cmp	fp, r6
 8001cb6:	4481      	add	r9, r0
 8001cb8:	61a2      	str	r2, [r4, #24]
 8001cba:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001cbc:	4488      	add	r8, r1
 8001cbe:	62a0      	str	r0, [r4, #40]	; 0x28
 8001cc0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001cc2:	6962      	ldr	r2, [r4, #20]
 8001cc4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001cc6:	bf28      	it	cs
 8001cc8:	465e      	movcs	r6, fp
 8001cca:	1851      	adds	r1, r2, r1
 8001ccc:	6369      	str	r1, [r5, #52]	; 0x34
 8001cce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cd0:	1808      	adds	r0, r1, r0
 8001cd2:	63a8      	str	r0, [r5, #56]	; 0x38
 8001cd4:	f9b7 0000 	ldrsh.w	r0, [r7]
 8001cd8:	f000 fa7a 	bl	80021d0 <ai_layer_type_name>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001ce2:	f005 f803 	bl	8006cec <core_timer_init>
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	4287      	cmp	r7, r0
 8001cea:	bf18      	it	ne
 8001cec:	2800      	cmpne	r0, #0
 8001cee:	d1aa      	bne.n	8001c46 <ai_network_inspect_init+0xb2>
 8001cf0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001cf2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001cf4:	1cc0      	adds	r0, r0, #3
 8001cf6:	0880      	lsrs	r0, r0, #2
 8001cf8:	0080      	lsls	r0, r0, #2
 8001cfa:	63ee      	str	r6, [r5, #60]	; 0x3c
 8001cfc:	1cc9      	adds	r1, r1, #3
 8001cfe:	0889      	lsrs	r1, r1, #2
 8001d00:	0089      	lsls	r1, r1, #2
 8001d02:	6368      	str	r0, [r5, #52]	; 0x34
 8001d04:	63a9      	str	r1, [r5, #56]	; 0x38
 8001d06:	9800      	ldr	r0, [sp, #0]
 8001d08:	b003      	add	sp, #12
 8001d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d0e:	1d01      	adds	r1, r0, #4
 8001d10:	f000 b90a 	b.w	8001f28 <core_utils_generate_network_signature>

08001d14 <ai_network_inspect_get_report>:
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	b081      	sub	sp, #4
 8001d18:	460c      	mov	r4, r1
 8001d1a:	f7fe fe02 	bl	8000922 <ai_platform_context_acquire>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	bf18      	it	ne
 8001d22:	2c00      	cmpne	r4, #0
 8001d24:	d002      	beq.n	8001d2c <ai_network_inspect_get_report+0x18>
 8001d26:	6881      	ldr	r1, [r0, #8]
 8001d28:	6a09      	ldr	r1, [r1, #32]
 8001d2a:	b911      	cbnz	r1, 8001d32 <ai_network_inspect_get_report+0x1e>
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	b001      	add	sp, #4
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	e891 10ec 	ldmia.w	r1, {r2, r3, r5, r6, r7, ip}
 8001d36:	e884 10ec 	stmia.w	r4, {r2, r3, r5, r6, r7, ip}
 8001d3a:	6840      	ldr	r0, [r0, #4]
 8001d3c:	6060      	str	r0, [r4, #4]
 8001d3e:	2001      	movs	r0, #1
 8001d40:	b001      	add	sp, #4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d44 <ai_network_inspect_destroy>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	f7fe fdec 	bl	8000922 <ai_platform_context_acquire>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2900      	cmp	r1, #0
 8001d50:	bf1c      	itt	ne
 8001d52:	688c      	ldrne	r4, [r1, #8]
 8001d54:	2c00      	cmpne	r4, #0
 8001d56:	d003      	beq.n	8001d60 <ai_network_inspect_destroy+0x1c>
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <.text_10>)
 8001d5c:	4290      	cmp	r0, r2
 8001d5e:	d001      	beq.n	8001d64 <ai_network_inspect_destroy+0x20>
 8001d60:	2000      	movs	r0, #0
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001d66:	b19a      	cbz	r2, 8001d90 <ai_network_inspect_destroy+0x4c>
 8001d68:	e000      	b.n	8001d6c <ai_network_inspect_destroy+0x28>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d6e:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8001d72:	1c5b      	adds	r3, r3, #1
 8001d74:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001d78:	b128      	cbz	r0, 8001d86 <ai_network_inspect_destroy+0x42>
 8001d7a:	6806      	ldr	r6, [r0, #0]
 8001d7c:	6056      	str	r6, [r2, #4]
 8001d7e:	6840      	ldr	r0, [r0, #4]
 8001d80:	f040 0001 	orr.w	r0, r0, #1
 8001d84:	6110      	str	r0, [r2, #16]
 8001d86:	68d0      	ldr	r0, [r2, #12]
 8001d88:	4282      	cmp	r2, r0
 8001d8a:	bf18      	it	ne
 8001d8c:	2800      	cmpne	r0, #0
 8001d8e:	d1ec      	bne.n	8001d6a <ai_network_inspect_destroy+0x26>
 8001d90:	6860      	ldr	r0, [r4, #4]
 8001d92:	6088      	str	r0, [r1, #8]
 8001d94:	6a21      	ldr	r1, [r4, #32]
 8001d96:	b921      	cbnz	r1, 8001da2 <ai_network_inspect_destroy+0x5e>
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff faac 	bl	80012f6 <core_mem_free>
 8001d9e:	2001      	movs	r0, #1
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001da4:	b10a      	cbz	r2, 8001daa <ai_network_inspect_destroy+0x66>
 8001da6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001da8:	4790      	blx	r2
 8001daa:	6a20      	ldr	r0, [r4, #32]
 8001dac:	f7ff faa3 	bl	80012f6 <core_mem_free>
 8001db0:	2000      	movs	r0, #0
 8001db2:	6220      	str	r0, [r4, #32]
 8001db4:	e7f0      	b.n	8001d98 <ai_network_inspect_destroy+0x54>
	...

08001db8 <.text_9>:
 8001db8:	20000000 	.word	0x20000000

08001dbc <.text_10>:
 8001dbc:	a1c00101 	.word	0xa1c00101

08001dc0 <.text_11>:
 8001dc0:	080013bd 	.word	0x080013bd

08001dc4 <serialize_signature_buffer_>:
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	b081      	sub	sp, #4
 8001dca:	2100      	movs	r1, #0
 8001dcc:	9100      	str	r1, [sp, #0]
 8001dce:	b10c      	cbz	r4, 8001dd4 <serialize_signature_buffer_+0x10>
 8001dd0:	6801      	ldr	r1, [r0, #0]
 8001dd2:	6021      	str	r1, [r4, #0]
 8001dd4:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8001dd6:	1d27      	adds	r7, r4, #4
 8001dd8:	2e00      	cmp	r6, #0
 8001dda:	d048      	beq.n	8001e6e <serialize_signature_buffer_+0xaa>
 8001ddc:	e000      	b.n	8001de0 <serialize_signature_buffer_+0x1c>
 8001dde:	4606      	mov	r6, r0
 8001de0:	6970      	ldr	r0, [r6, #20]
 8001de2:	8801      	ldrh	r1, [r0, #0]
 8001de4:	2902      	cmp	r1, #2
 8001de6:	bfa6      	itte	ge
 8001de8:	6840      	ldrge	r0, [r0, #4]
 8001dea:	3010      	addge	r0, #16
 8001dec:	2004      	movlt	r0, #4
 8001dee:	6800      	ldr	r0, [r0, #0]
 8001df0:	2800      	cmp	r0, #0
 8001df2:	bf14      	ite	ne
 8001df4:	6805      	ldrne	r5, [r0, #0]
 8001df6:	2500      	moveq	r5, #0
 8001df8:	9800      	ldr	r0, [sp, #0]
 8001dfa:	1c40      	adds	r0, r0, #1
 8001dfc:	9000      	str	r0, [sp, #0]
 8001dfe:	b90c      	cbnz	r4, 8001e04 <serialize_signature_buffer_+0x40>
 8001e00:	1cb8      	adds	r0, r7, #2
 8001e02:	e009      	b.n	8001e18 <serialize_signature_buffer_+0x54>
 8001e04:	7830      	ldrb	r0, [r6, #0]
 8001e06:	1cb1      	adds	r1, r6, #2
 8001e08:	7038      	strb	r0, [r7, #0]
 8001e0a:	7870      	ldrb	r0, [r6, #1]
 8001e0c:	7078      	strb	r0, [r7, #1]
 8001e0e:	780a      	ldrb	r2, [r1, #0]
 8001e10:	1cb8      	adds	r0, r7, #2
 8001e12:	7002      	strb	r2, [r0, #0]
 8001e14:	784a      	ldrb	r2, [r1, #1]
 8001e16:	7042      	strb	r2, [r0, #1]
 8001e18:	1c87      	adds	r7, r0, #2
 8001e1a:	b31d      	cbz	r5, 8001e64 <serialize_signature_buffer_+0xa0>
 8001e1c:	b194      	cbz	r4, 8001e44 <serialize_signature_buffer_+0x80>
 8001e1e:	69a8      	ldr	r0, [r5, #24]
 8001e20:	f105 0208 	add.w	r2, r5, #8
 8001e24:	6801      	ldr	r1, [r0, #0]
 8001e26:	1d38      	adds	r0, r7, #4
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	68e9      	ldr	r1, [r5, #12]
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	6003      	str	r3, [r0, #0]
 8001e30:	6853      	ldr	r3, [r2, #4]
 8001e32:	6043      	str	r3, [r0, #4]
 8001e34:	68aa      	ldr	r2, [r5, #8]
 8001e36:	f107 000c 	add.w	r0, r7, #12
 8001e3a:	0a12      	lsrs	r2, r2, #8
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	f00d ff72 	bl	800fd26 <__aeabi_memcpy>
 8001e42:	bf00      	nop
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	68af      	ldr	r7, [r5, #8]
 8001e4a:	0a3f      	lsrs	r7, r7, #8
 8001e4c:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 8001e50:	b134      	cbz	r4, 8001e60 <serialize_signature_buffer_+0x9c>
 8001e52:	f105 0110 	add.w	r1, r5, #16
 8001e56:	680a      	ldr	r2, [r1, #0]
 8001e58:	6002      	str	r2, [r0, #0]
 8001e5a:	684a      	ldr	r2, [r1, #4]
 8001e5c:	6042      	str	r2, [r0, #4]
 8001e5e:	bf00      	nop
 8001e60:	f100 0708 	add.w	r7, r0, #8
 8001e64:	68f0      	ldr	r0, [r6, #12]
 8001e66:	4286      	cmp	r6, r0
 8001e68:	bf18      	it	ne
 8001e6a:	2800      	cmpne	r0, #0
 8001e6c:	d1b7      	bne.n	8001dde <serialize_signature_buffer_+0x1a>
 8001e6e:	b10c      	cbz	r4, 8001e74 <serialize_signature_buffer_+0xb0>
 8001e70:	9900      	ldr	r1, [sp, #0]
 8001e72:	6039      	str	r1, [r7, #0]
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	1b08      	subs	r0, r1, r4
 8001e78:	b001      	add	sp, #4
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e7c <core_utils_compute_crc32>:
 8001e7c:	b470      	push	{r4, r5, r6}
 8001e7e:	0849      	lsrs	r1, r1, #1
 8001e80:	2400      	movs	r4, #0
 8001e82:	2300      	movs	r3, #0
 8001e84:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001e88:	4602      	mov	r2, r0
 8001e8a:	d32a      	bcc.n	8001ee2 <core_utils_compute_crc32+0x66>
 8001e8c:	f05f 002d 	movs.w	r0, #45	; 0x2d
 8001e90:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001e94:	1964      	adds	r4, r4, r5
 8001e96:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	1964      	adds	r4, r4, r5
 8001e9e:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001ea2:	18e3      	adds	r3, r4, r3
 8001ea4:	1964      	adds	r4, r4, r5
 8001ea6:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001eaa:	18e3      	adds	r3, r4, r3
 8001eac:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001eb0:	1964      	adds	r4, r4, r5
 8001eb2:	18e3      	adds	r3, r4, r3
 8001eb4:	19a4      	adds	r4, r4, r6
 8001eb6:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001eba:	18e3      	adds	r3, r4, r3
 8001ebc:	19a4      	adds	r4, r4, r6
 8001ebe:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001ec2:	18e3      	adds	r3, r4, r3
 8001ec4:	19a4      	adds	r4, r4, r6
 8001ec6:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001eca:	18e3      	adds	r3, r4, r3
 8001ecc:	19a4      	adds	r4, r4, r6
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	1e40      	subs	r0, r0, #1
 8001ed2:	d1dd      	bne.n	8001e90 <core_utils_compute_crc32+0x14>
 8001ed4:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 8001ed8:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001edc:	b2a4      	uxth	r4, r4
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	d2d4      	bcs.n	8001e8c <core_utils_compute_crc32+0x10>
 8001ee2:	b1e9      	cbz	r1, 8001f20 <core_utils_compute_crc32+0xa4>
 8001ee4:	f011 0003 	ands.w	r0, r1, #3
 8001ee8:	f000 8006 	beq.w	8001ef8 <core_utils_compute_crc32+0x7c>
 8001eec:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001ef0:	1964      	adds	r4, r4, r5
 8001ef2:	18e3      	adds	r3, r4, r3
 8001ef4:	1e40      	subs	r0, r0, #1
 8001ef6:	d1f9      	bne.n	8001eec <core_utils_compute_crc32+0x70>
 8001ef8:	0889      	lsrs	r1, r1, #2
 8001efa:	d011      	beq.n	8001f20 <core_utils_compute_crc32+0xa4>
 8001efc:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001f00:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001f04:	1820      	adds	r0, r4, r0
 8001f06:	18c3      	adds	r3, r0, r3
 8001f08:	f832 4b02 	ldrh.w	r4, [r2], #2
 8001f0c:	1940      	adds	r0, r0, r5
 8001f0e:	18c3      	adds	r3, r0, r3
 8001f10:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001f14:	1900      	adds	r0, r0, r4
 8001f16:	18c3      	adds	r3, r0, r3
 8001f18:	1944      	adds	r4, r0, r5
 8001f1a:	18e3      	adds	r3, r4, r3
 8001f1c:	1e49      	subs	r1, r1, #1
 8001f1e:	d1ed      	bne.n	8001efc <core_utils_compute_crc32+0x80>
 8001f20:	eac4 4003 	pkhbt	r0, r4, r3, lsl #16
 8001f24:	bc70      	pop	{r4, r5, r6}
 8001f26:	4770      	bx	lr

08001f28 <core_utils_generate_network_signature>:
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	0006      	movs	r6, r0
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	b081      	sub	sp, #4
 8001f30:	bf18      	it	ne
 8001f32:	2d00      	cmpne	r5, #0
 8001f34:	d00a      	beq.n	8001f4c <core_utils_generate_network_signature+0x24>
 8001f36:	2100      	movs	r1, #0
 8001f38:	f7ff ff44 	bl	8001dc4 <serialize_signature_buffer_>
 8001f3c:	4607      	mov	r7, r0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	6028      	str	r0, [r5, #0]
 8001f42:	4638      	mov	r0, r7
 8001f44:	f7ff f9ca 	bl	80012dc <core_mem_alloc>
 8001f48:	0004      	movs	r4, r0
 8001f4a:	d102      	bne.n	8001f52 <core_utils_generate_network_signature+0x2a>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	b001      	add	sp, #4
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f52:	4621      	mov	r1, r4
 8001f54:	4630      	mov	r0, r6
 8001f56:	f7ff ff35 	bl	8001dc4 <serialize_signature_buffer_>
 8001f5a:	4639      	mov	r1, r7
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff ff8d 	bl	8001e7c <core_utils_compute_crc32>
 8001f62:	6028      	str	r0, [r5, #0]
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff f9c6 	bl	80012f6 <core_mem_free>
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	b001      	add	sp, #4
 8001f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f70 <core_get_broadcasted_shape>:
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	4603      	mov	r3, r0
 8001f76:	6808      	ldr	r0, [r1, #0]
 8001f78:	681c      	ldr	r4, [r3, #0]
 8001f7a:	0a00      	lsrs	r0, r0, #8
 8001f7c:	f360 241f 	bfi	r4, r0, #8, #24
 8001f80:	601c      	str	r4, [r3, #0]
 8001f82:	0004      	movs	r4, r0
 8001f84:	d048      	beq.n	8002018 <core_get_broadcasted_shape+0xa8>
 8001f86:	6852      	ldr	r2, [r2, #4]
 8001f88:	684e      	ldr	r6, [r1, #4]
 8001f8a:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8001f94:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 8001f98:	1f2d      	subs	r5, r5, #4
 8001f9a:	1f0f      	subs	r7, r1, #4
 8001f9c:	f010 0103 	ands.w	r1, r0, #3
 8001fa0:	f1ac 0c04 	sub.w	ip, ip, #4
 8001fa4:	f000 800f 	beq.w	8001fc6 <core_get_broadcasted_shape+0x56>
 8001fa8:	f8d7 e000 	ldr.w	lr, [r7]
 8001fac:	f8d5 8000 	ldr.w	r8, [r5]
 8001fb0:	1e64      	subs	r4, r4, #1
 8001fb2:	45f0      	cmp	r8, lr
 8001fb4:	bf28      	it	cs
 8001fb6:	46c6      	movcs	lr, r8
 8001fb8:	1e49      	subs	r1, r1, #1
 8001fba:	1f3f      	subs	r7, r7, #4
 8001fbc:	1f2d      	subs	r5, r5, #4
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	f84c e904 	str.w	lr, [ip], #-4
 8001fc4:	d1f0      	bne.n	8001fa8 <core_get_broadcasted_shape+0x38>
 8001fc6:	0880      	lsrs	r0, r0, #2
 8001fc8:	d026      	beq.n	8002018 <core_get_broadcasted_shape+0xa8>
 8001fca:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8001fce:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8001fd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001fd6:	3910      	subs	r1, #16
 8001fd8:	3a10      	subs	r2, #16
 8001fda:	3b10      	subs	r3, #16
 8001fdc:	68d4      	ldr	r4, [r2, #12]
 8001fde:	68cd      	ldr	r5, [r1, #12]
 8001fe0:	42ac      	cmp	r4, r5
 8001fe2:	bf38      	it	cc
 8001fe4:	462c      	movcc	r4, r5
 8001fe6:	60dc      	str	r4, [r3, #12]
 8001fe8:	6894      	ldr	r4, [r2, #8]
 8001fea:	688d      	ldr	r5, [r1, #8]
 8001fec:	42ac      	cmp	r4, r5
 8001fee:	bf38      	it	cc
 8001ff0:	462c      	movcc	r4, r5
 8001ff2:	609c      	str	r4, [r3, #8]
 8001ff4:	6854      	ldr	r4, [r2, #4]
 8001ff6:	684d      	ldr	r5, [r1, #4]
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	bf38      	it	cc
 8001ffc:	462c      	movcc	r4, r5
 8001ffe:	605c      	str	r4, [r3, #4]
 8002000:	6814      	ldr	r4, [r2, #0]
 8002002:	680d      	ldr	r5, [r1, #0]
 8002004:	42a5      	cmp	r5, r4
 8002006:	bf28      	it	cs
 8002008:	462c      	movcs	r4, r5
 800200a:	1e40      	subs	r0, r0, #1
 800200c:	3a10      	subs	r2, #16
 800200e:	3910      	subs	r1, #16
 8002010:	2800      	cmp	r0, #0
 8002012:	f843 4910 	str.w	r4, [r3], #-16
 8002016:	d1e1      	bne.n	8001fdc <core_get_broadcasted_shape+0x6c>
 8002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800201c <core_compute_offsets>:
 800201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002020:	680b      	ldr	r3, [r1, #0]
 8002022:	6804      	ldr	r4, [r0, #0]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f363 241f 	bfi	r4, r3, #8, #24
 800202a:	6004      	str	r4, [r0, #0]
 800202c:	684f      	ldr	r7, [r1, #4]
 800202e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8002032:	6840      	ldr	r0, [r0, #4]
 8002034:	6839      	ldr	r1, [r7, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800203c:	f8dc 2000 	ldr.w	r2, [ip]
 8002040:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002044:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8002048:	68ff      	ldr	r7, [r7, #12]
 800204a:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800204e:	4291      	cmp	r1, r2
 8002050:	bf14      	ite	ne
 8002052:	2201      	movne	r2, #1
 8002054:	2200      	moveq	r2, #0
 8002056:	42a3      	cmp	r3, r4
 8002058:	bf14      	ite	ne
 800205a:	2401      	movne	r4, #1
 800205c:	2400      	moveq	r4, #0
 800205e:	45b0      	cmp	r8, r6
 8002060:	f084 0e01 	eor.w	lr, r4, #1
 8002064:	ea02 0e0e 	and.w	lr, r2, lr
 8002068:	bf14      	ite	ne
 800206a:	2601      	movne	r6, #1
 800206c:	2600      	moveq	r6, #0
 800206e:	4567      	cmp	r7, ip
 8002070:	f082 0c01 	eor.w	ip, r2, #1
 8002074:	f086 0501 	eor.w	r5, r6, #1
 8002078:	f8c0 c000 	str.w	ip, [r0]
 800207c:	bf14      	ite	ne
 800207e:	2701      	movne	r7, #1
 8002080:	2700      	moveq	r7, #0
 8002082:	434b      	muls	r3, r1
 8002084:	4025      	ands	r5, r4
 8002086:	4015      	ands	r5, r2
 8002088:	4361      	muls	r1, r4
 800208a:	fb08 f803 	mul.w	r8, r8, r3
 800208e:	4373      	muls	r3, r6
 8002090:	ebae 0e01 	sub.w	lr, lr, r1
 8002094:	f8c0 e004 	str.w	lr, [r0, #4]
 8002098:	1aed      	subs	r5, r5, r3
 800209a:	1949      	adds	r1, r1, r5
 800209c:	6081      	str	r1, [r0, #8]
 800209e:	f087 0101 	eor.w	r1, r7, #1
 80020a2:	400e      	ands	r6, r1
 80020a4:	4034      	ands	r4, r6
 80020a6:	4022      	ands	r2, r4
 80020a8:	fb08 2217 	mls	r2, r8, r7, r2
 80020ac:	189a      	adds	r2, r3, r2
 80020ae:	60c2      	str	r2, [r0, #12]
 80020b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020b4 <core_tensor_clone>:
 80020b4:	b470      	push	{r4, r5, r6}
 80020b6:	680a      	ldr	r2, [r1, #0]
 80020b8:	6002      	str	r2, [r0, #0]
 80020ba:	684b      	ldr	r3, [r1, #4]
 80020bc:	6043      	str	r3, [r0, #4]
 80020be:	698c      	ldr	r4, [r1, #24]
 80020c0:	6184      	str	r4, [r0, #24]
 80020c2:	688a      	ldr	r2, [r1, #8]
 80020c4:	6883      	ldr	r3, [r0, #8]
 80020c6:	0a12      	lsrs	r2, r2, #8
 80020c8:	f362 231f 	bfi	r3, r2, #8, #24
 80020cc:	6083      	str	r3, [r0, #8]
 80020ce:	6882      	ldr	r2, [r0, #8]
 80020d0:	2300      	movs	r3, #0
 80020d2:	0a12      	lsrs	r2, r2, #8
 80020d4:	d025      	beq.n	8002122 <core_tensor_clone+0x6e>
 80020d6:	68cc      	ldr	r4, [r1, #12]
 80020d8:	68c2      	ldr	r2, [r0, #12]
 80020da:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80020de:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80020e2:	1c5b      	adds	r3, r3, #1
 80020e4:	6886      	ldr	r6, [r0, #8]
 80020e6:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 80020ea:	d21a      	bcs.n	8002122 <core_tensor_clone+0x6e>
 80020ec:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80020f0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80020f4:	1c5b      	adds	r3, r3, #1
 80020f6:	6886      	ldr	r6, [r0, #8]
 80020f8:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 80020fc:	d211      	bcs.n	8002122 <core_tensor_clone+0x6e>
 80020fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002102:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002106:	1c5b      	adds	r3, r3, #1
 8002108:	6886      	ldr	r6, [r0, #8]
 800210a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800210e:	d208      	bcs.n	8002122 <core_tensor_clone+0x6e>
 8002110:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8002114:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8002118:	1c5b      	adds	r3, r3, #1
 800211a:	6882      	ldr	r2, [r0, #8]
 800211c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8002120:	d3d9      	bcc.n	80020d6 <core_tensor_clone+0x22>
 8002122:	690a      	ldr	r2, [r1, #16]
 8002124:	6903      	ldr	r3, [r0, #16]
 8002126:	0a12      	lsrs	r2, r2, #8
 8002128:	f362 231f 	bfi	r3, r2, #8, #24
 800212c:	6103      	str	r3, [r0, #16]
 800212e:	6902      	ldr	r2, [r0, #16]
 8002130:	2300      	movs	r3, #0
 8002132:	0a12      	lsrs	r2, r2, #8
 8002134:	d025      	beq.n	8002182 <core_tensor_clone+0xce>
 8002136:	694c      	ldr	r4, [r1, #20]
 8002138:	6942      	ldr	r2, [r0, #20]
 800213a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800213e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002142:	1c5b      	adds	r3, r3, #1
 8002144:	6906      	ldr	r6, [r0, #16]
 8002146:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800214a:	d21a      	bcs.n	8002182 <core_tensor_clone+0xce>
 800214c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002150:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002154:	1c5b      	adds	r3, r3, #1
 8002156:	6906      	ldr	r6, [r0, #16]
 8002158:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800215c:	d211      	bcs.n	8002182 <core_tensor_clone+0xce>
 800215e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002162:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8002166:	1c5b      	adds	r3, r3, #1
 8002168:	6906      	ldr	r6, [r0, #16]
 800216a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800216e:	d208      	bcs.n	8002182 <core_tensor_clone+0xce>
 8002170:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8002174:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8002178:	1c5b      	adds	r3, r3, #1
 800217a:	6902      	ldr	r2, [r0, #16]
 800217c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8002180:	d3d9      	bcc.n	8002136 <core_tensor_clone+0x82>
 8002182:	bc70      	pop	{r4, r5, r6}
 8002184:	4770      	bx	lr

08002186 <core_array_clone>:
 8002186:	b430      	push	{r4, r5}
 8002188:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 800218c:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
 8002190:	bc30      	pop	{r4, r5}
 8002192:	4770      	bx	lr

08002194 <ai_layers_forward_layer>:
 8002194:	b510      	push	{r4, lr}
 8002196:	4604      	mov	r4, r0
 8002198:	6921      	ldr	r1, [r4, #16]
 800219a:	4788      	blx	r1
 800219c:	68e0      	ldr	r0, [r4, #12]
 800219e:	42a0      	cmp	r0, r4
 80021a0:	bf08      	it	eq
 80021a2:	2000      	moveq	r0, #0
 80021a4:	bd10      	pop	{r4, pc}
	...

080021a8 <ai_check_custom_types>:
 80021a8:	b500      	push	{lr}
 80021aa:	b081      	sub	sp, #4
 80021ac:	b160      	cbz	r0, 80021c8 <ai_check_custom_types+0x20>
 80021ae:	7801      	ldrb	r1, [r0, #0]
 80021b0:	2903      	cmp	r1, #3
 80021b2:	d109      	bne.n	80021c8 <ai_check_custom_types+0x20>
 80021b4:	f05f 0204 	movs.w	r2, #4
 80021b8:	a18d      	add	r1, pc, #564	; (adr r1, 80023f0 <ai_check_custom_types::ref_signatures>)
 80021ba:	f00d fdf1 	bl	800fda0 <memcmp>
 80021be:	1e40      	subs	r0, r0, #1
 80021c0:	4180      	sbcs	r0, r0
 80021c2:	0fc0      	lsrs	r0, r0, #31
 80021c4:	b001      	add	sp, #4
 80021c6:	bd00      	pop	{pc}
 80021c8:	2000      	movs	r0, #0
 80021ca:	b001      	add	sp, #4
 80021cc:	bd00      	pop	{pc}
	...

080021d0 <ai_layer_type_name>:
 80021d0:	f242 7211 	movw	r2, #10001	; 0x2711
 80021d4:	1a81      	subs	r1, r0, r2
 80021d6:	2901      	cmp	r1, #1
 80021d8:	bf81      	itttt	hi
 80021da:	1ec9      	subhi	r1, r1, #3
 80021dc:	290d      	cmphi	r1, #13
 80021de:	390f      	subhi	r1, #15
 80021e0:	2909      	cmphi	r1, #9
 80021e2:	f200 806b 	bhi.w	80022bc <ai_layer_type_name+0xec>
 80021e6:	1a80      	subs	r0, r0, r2
 80021e8:	d033      	beq.n	8002252 <ai_layer_type_name+0x82>
 80021ea:	1e40      	subs	r0, r0, #1
 80021ec:	d033      	beq.n	8002256 <ai_layer_type_name+0x86>
 80021ee:	1e80      	subs	r0, r0, #2
 80021f0:	d033      	beq.n	800225a <ai_layer_type_name+0x8a>
 80021f2:	1e40      	subs	r0, r0, #1
 80021f4:	d034      	beq.n	8002260 <ai_layer_type_name+0x90>
 80021f6:	1e40      	subs	r0, r0, #1
 80021f8:	d034      	beq.n	8002264 <ai_layer_type_name+0x94>
 80021fa:	1e40      	subs	r0, r0, #1
 80021fc:	d034      	beq.n	8002268 <ai_layer_type_name+0x98>
 80021fe:	1e40      	subs	r0, r0, #1
 8002200:	d034      	beq.n	800226c <ai_layer_type_name+0x9c>
 8002202:	1e40      	subs	r0, r0, #1
 8002204:	d034      	beq.n	8002270 <ai_layer_type_name+0xa0>
 8002206:	1e40      	subs	r0, r0, #1
 8002208:	d034      	beq.n	8002274 <ai_layer_type_name+0xa4>
 800220a:	1e40      	subs	r0, r0, #1
 800220c:	d034      	beq.n	8002278 <ai_layer_type_name+0xa8>
 800220e:	1e40      	subs	r0, r0, #1
 8002210:	d034      	beq.n	800227c <ai_layer_type_name+0xac>
 8002212:	1e40      	subs	r0, r0, #1
 8002214:	d034      	beq.n	8002280 <ai_layer_type_name+0xb0>
 8002216:	1e40      	subs	r0, r0, #1
 8002218:	d034      	beq.n	8002284 <ai_layer_type_name+0xb4>
 800221a:	1e40      	subs	r0, r0, #1
 800221c:	d034      	beq.n	8002288 <ai_layer_type_name+0xb8>
 800221e:	1e40      	subs	r0, r0, #1
 8002220:	d034      	beq.n	800228c <ai_layer_type_name+0xbc>
 8002222:	1e40      	subs	r0, r0, #1
 8002224:	d034      	beq.n	8002290 <ai_layer_type_name+0xc0>
 8002226:	1e80      	subs	r0, r0, #2
 8002228:	d034      	beq.n	8002294 <ai_layer_type_name+0xc4>
 800222a:	1e40      	subs	r0, r0, #1
 800222c:	d034      	beq.n	8002298 <ai_layer_type_name+0xc8>
 800222e:	1e40      	subs	r0, r0, #1
 8002230:	d034      	beq.n	800229c <ai_layer_type_name+0xcc>
 8002232:	1e40      	subs	r0, r0, #1
 8002234:	d034      	beq.n	80022a0 <ai_layer_type_name+0xd0>
 8002236:	1e40      	subs	r0, r0, #1
 8002238:	d034      	beq.n	80022a4 <ai_layer_type_name+0xd4>
 800223a:	1e40      	subs	r0, r0, #1
 800223c:	d034      	beq.n	80022a8 <ai_layer_type_name+0xd8>
 800223e:	1e40      	subs	r0, r0, #1
 8002240:	d034      	beq.n	80022ac <ai_layer_type_name+0xdc>
 8002242:	1e40      	subs	r0, r0, #1
 8002244:	d034      	beq.n	80022b0 <ai_layer_type_name+0xe0>
 8002246:	1e40      	subs	r0, r0, #1
 8002248:	d034      	beq.n	80022b4 <ai_layer_type_name+0xe4>
 800224a:	1e40      	subs	r0, r0, #1
 800224c:	d034      	beq.n	80022b8 <ai_layer_type_name+0xe8>
 800224e:	a01c      	add	r0, pc, #112	; (adr r0, 80022c0 <.text_5>)
 8002250:	4770      	bx	lr
 8002252:	a01c      	add	r0, pc, #112	; (adr r0, 80022c4 <.text_6>)
 8002254:	4770      	bx	lr
 8002256:	a01c      	add	r0, pc, #112	; (adr r0, 80022c8 <.text_7>)
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	a031      	add	r0, pc, #196	; (adr r0, 8002324 <.text_15>)
 800225e:	4770      	bx	lr
 8002260:	a032      	add	r0, pc, #200	; (adr r0, 800232c <.text_16>)
 8002262:	4770      	bx	lr
 8002264:	a019      	add	r0, pc, #100	; (adr r0, 80022cc <.text_8>)
 8002266:	4770      	bx	lr
 8002268:	a019      	add	r0, pc, #100	; (adr r0, 80022d0 <.text_9>)
 800226a:	4770      	bx	lr
 800226c:	a031      	add	r0, pc, #196	; (adr r0, 8002334 <.text_17>)
 800226e:	4770      	bx	lr
 8002270:	a018      	add	r0, pc, #96	; (adr r0, 80022d4 <.text_10>)
 8002272:	4770      	bx	lr
 8002274:	a031      	add	r0, pc, #196	; (adr r0, 800233c <.text_18>)
 8002276:	4770      	bx	lr
 8002278:	a032      	add	r0, pc, #200	; (adr r0, 8002344 <.text_19>)
 800227a:	4770      	bx	lr
 800227c:	a036      	add	r0, pc, #216	; (adr r0, 8002358 <.text_20>)
 800227e:	4770      	bx	lr
 8002280:	a038      	add	r0, pc, #224	; (adr r0, 8002364 <.text_21>)
 8002282:	4770      	bx	lr
 8002284:	a014      	add	r0, pc, #80	; (adr r0, 80022d8 <.text_11>)
 8002286:	4770      	bx	lr
 8002288:	a038      	add	r0, pc, #224	; (adr r0, 800236c <.text_22>)
 800228a:	4770      	bx	lr
 800228c:	a039      	add	r0, pc, #228	; (adr r0, 8002374 <.text_23>)
 800228e:	4770      	bx	lr
 8002290:	a03b      	add	r0, pc, #236	; (adr r0, 8002380 <.text_24>)
 8002292:	4770      	bx	lr
 8002294:	a03f      	add	r0, pc, #252	; (adr r0, 8002394 <.text_25>)
 8002296:	4770      	bx	lr
 8002298:	a040      	add	r0, pc, #256	; (adr r0, 800239c <.text_26>)
 800229a:	4770      	bx	lr
 800229c:	a041      	add	r0, pc, #260	; (adr r0, 80023a4 <.text_27>)
 800229e:	4770      	bx	lr
 80022a0:	a043      	add	r0, pc, #268	; (adr r0, 80023b0 <.text_28>)
 80022a2:	4770      	bx	lr
 80022a4:	a044      	add	r0, pc, #272	; (adr r0, 80023b8 <.text_29>)
 80022a6:	4770      	bx	lr
 80022a8:	a045      	add	r0, pc, #276	; (adr r0, 80023c0 <.text_30>)
 80022aa:	4770      	bx	lr
 80022ac:	a00b      	add	r0, pc, #44	; (adr r0, 80022dc <.text_12>)
 80022ae:	4770      	bx	lr
 80022b0:	a049      	add	r0, pc, #292	; (adr r0, 80023d8 <.text_31>)
 80022b2:	4770      	bx	lr
 80022b4:	a04a      	add	r0, pc, #296	; (adr r0, 80023e0 <.text_32>)
 80022b6:	4770      	bx	lr
 80022b8:	a04b      	add	r0, pc, #300	; (adr r0, 80023e8 <.text_33>)
 80022ba:	4770      	bx	lr
 80022bc:	a000      	add	r0, pc, #0	; (adr r0, 80022c0 <.text_5>)
 80022be:	4770      	bx	lr

080022c0 <.text_5>:
 80022c0:	00000000 	.word	0x00000000

080022c4 <.text_6>:
 80022c4:	00444441 	.word	0x00444441

080022c8 <.text_7>:
 80022c8:	00004e42 	.word	0x00004e42

080022cc <.text_8>:
 80022cc:	00555247 	.word	0x00555247

080022d0 <.text_9>:
 80022d0:	004e524c 	.word	0x004e524c

080022d4 <.text_10>:
 80022d4:	00004c4e 	.word	0x00004c4e

080022d8 <.text_11>:
 80022d8:	00004d53 	.word	0x00004d53

080022dc <.text_12>:
 80022dc:	00444150 	.word	0x00444150

080022e0 <ai_layer_type_is_valid>:
 80022e0:	f242 7111 	movw	r1, #10001	; 0x2711
 80022e4:	1a40      	subs	r0, r0, r1
 80022e6:	2801      	cmp	r0, #1
 80022e8:	bf81      	itttt	hi
 80022ea:	1ec0      	subhi	r0, r0, #3
 80022ec:	280d      	cmphi	r0, #13
 80022ee:	380f      	subhi	r0, #15
 80022f0:	2809      	cmphi	r0, #9
 80022f2:	d801      	bhi.n	80022f8 <ai_layer_type_is_valid+0x18>
 80022f4:	2001      	movs	r0, #1
 80022f6:	4770      	bx	lr
 80022f8:	2000      	movs	r0, #0
 80022fa:	4770      	bx	lr

080022fc <ai_layers_forward_all>:
 80022fc:	b530      	push	{r4, r5, lr}
 80022fe:	b081      	sub	sp, #4
 8002300:	4604      	mov	r4, r0
 8002302:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002304:	b158      	cbz	r0, 800231e <ai_layers_forward_all+0x22>
 8002306:	6560      	str	r0, [r4, #84]	; 0x54
 8002308:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800230a:	6929      	ldr	r1, [r5, #16]
 800230c:	4628      	mov	r0, r5
 800230e:	4788      	blx	r1
 8002310:	68e8      	ldr	r0, [r5, #12]
 8002312:	42a8      	cmp	r0, r5
 8002314:	bf08      	it	eq
 8002316:	2000      	moveq	r0, #0
 8002318:	2800      	cmp	r0, #0
 800231a:	6560      	str	r0, [r4, #84]	; 0x54
 800231c:	d1f4      	bne.n	8002308 <ai_layers_forward_all+0xc>
 800231e:	b001      	add	sp, #4
 8002320:	bd30      	pop	{r4, r5, pc}
	...

08002324 <.text_15>:
 8002324:	564e4f43 	.word	0x564e4f43
 8002328:	00004432 	.word	0x00004432

0800232c <.text_16>:
 800232c:	534e4544 	.word	0x534e4544
 8002330:	0045      	.short	0x0045
	...

08002334 <.text_17>:
 8002334:	4d54534c 	.word	0x4d54534c
 8002338:	00          	.byte	0x00
 8002339:	00          	.byte	0x00
	...

0800233c <.text_18>:
 800233c:	4d524f4e 	.word	0x4d524f4e
 8002340:	00          	.byte	0x00
 8002341:	00          	.byte	0x00
	...

08002344 <.text_19>:
 8002344:	4954504f 	.word	0x4954504f
 8002348:	455a494d 	.word	0x455a494d
 800234c:	4f435f44 	.word	0x4f435f44
 8002350:	4432564e 	.word	0x4432564e
 8002354:	00          	.byte	0x00
 8002355:	00          	.byte	0x00
	...

08002358 <.text_20>:
 8002358:	4e415254 	.word	0x4e415254
 800235c:	534f5053 	.word	0x534f5053
 8002360:	0045      	.short	0x0045
	...

08002364 <.text_21>:
 8002364:	4c4f4f50 	.word	0x4c4f4f50
 8002368:	00          	.byte	0x00
 8002369:	00          	.byte	0x00
	...

0800236c <.text_22>:
 800236c:	494c5053 	.word	0x494c5053
 8002370:	0054      	.short	0x0054
	...

08002374 <.text_23>:
 8002374:	454d4954 	.word	0x454d4954
 8002378:	4c45445f 	.word	0x4c45445f
 800237c:	00005941 	.word	0x00005941

08002380 <.text_24>:
 8002380:	454d4954 	.word	0x454d4954
 8002384:	5349445f 	.word	0x5349445f
 8002388:	42495254 	.word	0x42495254
 800238c:	44455455 	.word	0x44455455
 8002390:	00          	.byte	0x00
 8002391:	00          	.byte	0x00
	...

08002394 <.text_25>:
 8002394:	434e4f43 	.word	0x434e4f43
 8002398:	00005441 	.word	0x00005441

0800239c <.text_26>:
 800239c:	4d4d4547 	.word	0x4d4d4547
 80023a0:	00          	.byte	0x00
 80023a1:	00          	.byte	0x00
	...

080023a4 <.text_27>:
 80023a4:	41535055 	.word	0x41535055
 80023a8:	454c504d 	.word	0x454c504d
 80023ac:	00          	.byte	0x00
 80023ad:	00          	.byte	0x00
	...

080023b0 <.text_28>:
 80023b0:	57544c45 	.word	0x57544c45
 80023b4:	00455349 	.word	0x00455349

080023b8 <.text_29>:
 80023b8:	454e4547 	.word	0x454e4547
 80023bc:	00434952 	.word	0x00434952

080023c0 <.text_30>:
 80023c0:	54534e49 	.word	0x54534e49
 80023c4:	45434e41 	.word	0x45434e41
 80023c8:	4d524f4e 	.word	0x4d524f4e
 80023cc:	5a494c41 	.word	0x5a494c41
 80023d0:	4f495441 	.word	0x4f495441
 80023d4:	004e      	.short	0x004e
	...

080023d8 <.text_31>:
 80023d8:	43494c53 	.word	0x43494c53
 80023dc:	0045      	.short	0x0045
	...

080023e0 <.text_32>:
 80023e0:	454c4954 	.word	0x454c4954
 80023e4:	00          	.byte	0x00
 80023e5:	00          	.byte	0x00
	...

080023e8 <.text_33>:
 80023e8:	55444552 	.word	0x55444552
 80023ec:	00004543 	.word	0x00004543

080023f0 <ai_check_custom_types::ref_signatures>:
 80023f0:	84048403                                ....

080023f4 <ai_conv2d_stripe_f32>:
 80023f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f8:	b098      	sub	sp, #96	; 0x60
 80023fa:	9825      	ldr	r0, [sp, #148]	; 0x94
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f000 82e3 	beq.w	80029c8 <ai_conv2d_stripe_f32+0x5d4>
 8002402:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8002404:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8002408:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800240a:	9004      	str	r0, [sp, #16]
 800240c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800240e:	f9bd a0c0 	ldrsh.w	sl, [sp, #192]	; 0xc0
 8002412:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8002414:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002418:	fb0e 6707 	mla	r7, lr, r7, r6
 800241c:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8002420:	9705      	str	r7, [sp, #20]
 8002422:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8002424:	9100      	str	r1, [sp, #0]
 8002426:	9217      	str	r2, [sp, #92]	; 0x5c
 8002428:	fb0e f707 	mul.w	r7, lr, r7
 800242c:	1986      	adds	r6, r0, r6
 800242e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002430:	1e76      	subs	r6, r6, #1
 8002432:	fb96 fafa 	sdiv	sl, r6, sl
 8002436:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8002438:	f9bd e0c0 	ldrsh.w	lr, [sp, #192]	; 0xc0
 800243c:	fb0a fa00 	mul.w	sl, sl, r0
 8002440:	9306      	str	r3, [sp, #24]
 8002442:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 8002446:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 800244a:	4377      	muls	r7, r6
 800244c:	970b      	str	r7, [sp, #44]	; 0x2c
 800244e:	f9bd 70bc 	ldrsh.w	r7, [sp, #188]	; 0xbc
 8002452:	4377      	muls	r7, r6
 8002454:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8002456:	9715      	str	r7, [sp, #84]	; 0x54
 8002458:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 800245c:	eba7 070a 	sub.w	r7, r7, sl
 8002460:	9713      	str	r7, [sp, #76]	; 0x4c
 8002462:	4657      	mov	r7, sl
 8002464:	4347      	muls	r7, r0
 8002466:	9711      	str	r7, [sp, #68]	; 0x44
 8002468:	fb06 fe0e 	mul.w	lr, r6, lr
 800246c:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 8002470:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8002474:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8002478:	fb00 fe0a 	mul.w	lr, r0, sl
 800247c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8002480:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8002484:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8002488:	fb16 f707 	smulbb	r7, r6, r7
 800248c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800248e:	970a      	str	r7, [sp, #40]	; 0x28
 8002490:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8002492:	fb00 fe0e 	mul.w	lr, r0, lr
 8002496:	fbba f6f6 	udiv	r6, sl, r6
 800249a:	9610      	str	r6, [sp, #64]	; 0x40
 800249c:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 80024a0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80024a2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80024a6:	fbb7 fafa 	udiv	sl, r7, sl
 80024aa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80024ae:	fbb6 f7f7 	udiv	r7, r6, r7
 80024b2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80024b4:	970e      	str	r7, [sp, #56]	; 0x38
 80024b6:	1bad      	subs	r5, r5, r6
 80024b8:	950c      	str	r5, [sp, #48]	; 0x30
 80024ba:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80024bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80024be:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80024c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80024c2:	4264      	negs	r4, r4
 80024c4:	bfd8      	it	le
 80024c6:	2400      	movle	r4, #0
 80024c8:	1a09      	subs	r1, r1, r0
 80024ca:	4291      	cmp	r1, r2
 80024cc:	bf3a      	itte	cc
 80024ce:	9924      	ldrcc	r1, [sp, #144]	; 0x90
 80024d0:	1a0e      	subcc	r6, r1, r0
 80024d2:	4616      	movcs	r6, r2
 80024d4:	9a05      	ldr	r2, [sp, #20]
 80024d6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80024d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80024da:	18a2      	adds	r2, r4, r2
 80024dc:	434a      	muls	r2, r1
 80024de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80024e2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80024e4:	b900      	cbnz	r0, 80024e8 <ai_conv2d_stripe_f32+0xf4>
 80024e6:	9800      	ldr	r0, [sp, #0]
 80024e8:	9001      	str	r0, [sp, #4]
 80024ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80024ec:	1b36      	subs	r6, r6, r4
 80024ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024f0:	2801      	cmp	r0, #1
 80024f2:	bf04      	itt	eq
 80024f4:	990a      	ldreq	r1, [sp, #40]	; 0x28
 80024f6:	2901      	cmpeq	r1, #1
 80024f8:	f040 80ad 	bne.w	8002656 <ai_conv2d_stripe_f32+0x262>
 80024fc:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8002500:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002502:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002504:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002508:	ebaa 0a06 	sub.w	sl, sl, r6
 800250c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800250e:	1b9b      	subs	r3, r3, r6
 8002510:	f8dd e000 	ldr.w	lr, [sp]
 8002514:	fb0a fa00 	mul.w	sl, sl, r0
 8002518:	fb03 f100 	mul.w	r1, r3, r0
 800251c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800251e:	9b06      	ldr	r3, [sp, #24]
 8002520:	19e4      	adds	r4, r4, r7
 8002522:	1b40      	subs	r0, r0, r5
 8002524:	fb00 fc0c 	mul.w	ip, r0, ip
 8002528:	9822      	ldr	r0, [sp, #136]	; 0x88
 800252a:	4344      	muls	r4, r0
 800252c:	4370      	muls	r0, r6
 800252e:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 8002532:	9e01      	ldr	r6, [sp, #4]
 8002534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002536:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800253a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800253c:	4576      	cmp	r6, lr
 800253e:	bf0c      	ite	eq
 8002540:	eddf 0ab0 	vldreq	s1, [pc, #704]	; 8002804 <ai_conv2d_stripe_f32+0x410>
 8002544:	eef0 0a40 	vmovne.f32	s1, s0
 8002548:	2a00      	cmp	r2, #0
 800254a:	f000 8229 	beq.w	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 800254e:	46b0      	mov	r8, r6
 8002550:	4613      	mov	r3, r2
 8002552:	462e      	mov	r6, r5
 8002554:	463a      	mov	r2, r7
 8002556:	f8cd c008 	str.w	ip, [sp, #8]
 800255a:	461d      	mov	r5, r3
 800255c:	4607      	mov	r7, r0
 800255e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002562:	46c4      	mov	ip, r8
 8002564:	9b00      	ldr	r3, [sp, #0]
 8002566:	f027 0403 	bic.w	r4, r7, #3
 800256a:	2e00      	cmp	r6, #0
 800256c:	ed9c 1a00 	vldr	s2, [ip]
 8002570:	ee21 1a20 	vmul.f32	s2, s2, s1
 8002574:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002578:	dd60      	ble.n	800263c <ai_conv2d_stripe_f32+0x248>
 800257a:	4630      	mov	r0, r6
 800257c:	2c00      	cmp	r4, #0
 800257e:	f04f 0900 	mov.w	r9, #0
 8002582:	dd1e      	ble.n	80025c2 <ai_conv2d_stripe_f32+0x1ce>
 8002584:	edd2 4a00 	vldr	s9, [r2]
 8002588:	f109 0904 	add.w	r9, r9, #4
 800258c:	ed98 5a00 	vldr	s10, [r8]
 8002590:	edd2 3a01 	vldr	s7, [r2, #4]
 8002594:	ed98 4a01 	vldr	s8, [r8, #4]
 8002598:	ee04 1a85 	vmla.f32	s2, s9, s10
 800259c:	edd2 2a02 	vldr	s5, [r2, #8]
 80025a0:	ed98 3a02 	vldr	s6, [r8, #8]
 80025a4:	ee03 1a84 	vmla.f32	s2, s7, s8
 80025a8:	edd2 1a03 	vldr	s3, [r2, #12]
 80025ac:	3210      	adds	r2, #16
 80025ae:	45a1      	cmp	r9, r4
 80025b0:	ed98 2a03 	vldr	s4, [r8, #12]
 80025b4:	ee02 1a83 	vmla.f32	s2, s5, s6
 80025b8:	f108 0810 	add.w	r8, r8, #16
 80025bc:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025c0:	dbe0      	blt.n	8002584 <ai_conv2d_stripe_f32+0x190>
 80025c2:	45b9      	cmp	r9, r7
 80025c4:	f280 8034 	bge.w	8002630 <ai_conv2d_stripe_f32+0x23c>
 80025c8:	f109 0901 	add.w	r9, r9, #1
 80025cc:	edd2 2a00 	vldr	s5, [r2]
 80025d0:	1d12      	adds	r2, r2, #4
 80025d2:	edd8 1a00 	vldr	s3, [r8]
 80025d6:	45b9      	cmp	r9, r7
 80025d8:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80025dc:	f108 0804 	add.w	r8, r8, #4
 80025e0:	da26      	bge.n	8002630 <ai_conv2d_stripe_f32+0x23c>
 80025e2:	f109 0901 	add.w	r9, r9, #1
 80025e6:	ed92 3a00 	vldr	s6, [r2]
 80025ea:	1d12      	adds	r2, r2, #4
 80025ec:	ed98 2a00 	vldr	s4, [r8]
 80025f0:	45b9      	cmp	r9, r7
 80025f2:	ee03 1a02 	vmla.f32	s2, s6, s4
 80025f6:	f108 0804 	add.w	r8, r8, #4
 80025fa:	da19      	bge.n	8002630 <ai_conv2d_stripe_f32+0x23c>
 80025fc:	f109 0901 	add.w	r9, r9, #1
 8002600:	edd2 2a00 	vldr	s5, [r2]
 8002604:	1d12      	adds	r2, r2, #4
 8002606:	edd8 1a00 	vldr	s3, [r8]
 800260a:	45b9      	cmp	r9, r7
 800260c:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8002610:	f108 0804 	add.w	r8, r8, #4
 8002614:	da0c      	bge.n	8002630 <ai_conv2d_stripe_f32+0x23c>
 8002616:	f109 0901 	add.w	r9, r9, #1
 800261a:	ed92 2a00 	vldr	s4, [r2]
 800261e:	1d12      	adds	r2, r2, #4
 8002620:	ed98 3a00 	vldr	s6, [r8]
 8002624:	45b9      	cmp	r9, r7
 8002626:	ee02 1a03 	vmla.f32	s2, s4, s6
 800262a:	f108 0804 	add.w	r8, r8, #4
 800262e:	dbcb      	blt.n	80025c8 <ai_conv2d_stripe_f32+0x1d4>
 8002630:	1e40      	subs	r0, r0, #1
 8002632:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8002636:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800263a:	d19f      	bne.n	800257c <ai_conv2d_stripe_f32+0x188>
 800263c:	1e6d      	subs	r5, r5, #1
 800263e:	9802      	ldr	r0, [sp, #8]
 8002640:	ed8e 1a00 	vstr	s2, [lr]
 8002644:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8002648:	f10e 0e04 	add.w	lr, lr, #4
 800264c:	f10c 0c04 	add.w	ip, ip, #4
 8002650:	d18b      	bne.n	800256a <ai_conv2d_stripe_f32+0x176>
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	e1a4      	b.n	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 8002656:	9922      	ldr	r1, [sp, #136]	; 0x88
 8002658:	4288      	cmp	r0, r1
 800265a:	bf04      	itt	eq
 800265c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 800265e:	2b01      	cmpeq	r3, #1
 8002660:	f040 80d2 	bne.w	8002808 <ai_conv2d_stripe_f32+0x414>
 8002664:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8002666:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002668:	990e      	ldr	r1, [sp, #56]	; 0x38
 800266a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800266e:	9102      	str	r1, [sp, #8]
 8002670:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002672:	1bbf      	subs	r7, r7, r6
 8002674:	9b06      	ldr	r3, [sp, #24]
 8002676:	4347      	muls	r7, r0
 8002678:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800267a:	4454      	add	r4, sl
 800267c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002680:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 8002684:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8002688:	1b40      	subs	r0, r0, r5
 800268a:	4341      	muls	r1, r0
 800268c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8002690:	9b00      	ldr	r3, [sp, #0]
 8002692:	ebac 0c06 	sub.w	ip, ip, r6
 8002696:	459e      	cmp	lr, r3
 8002698:	eb02 0e8a 	add.w	lr, r2, sl, lsl #2
 800269c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800269e:	f04f 0a00 	mov.w	sl, #0
 80026a2:	eb0e 0883 	add.w	r8, lr, r3, lsl #2
 80026a6:	bf0c      	ite	eq
 80026a8:	eddf 0a56 	vldreq	s1, [pc, #344]	; 8002804 <ai_conv2d_stripe_f32+0x410>
 80026ac:	eef0 0a40 	vmovne.f32	s1, s0
 80026b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80026b4:	45c6      	cmp	lr, r8
 80026b6:	f080 8173 	bcs.w	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 80026ba:	9b00      	ldr	r3, [sp, #0]
 80026bc:	9a02      	ldr	r2, [sp, #8]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	f000 8099 	beq.w	80027f6 <ai_conv2d_stripe_f32+0x402>
 80026c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80026c8:	9500      	str	r5, [sp, #0]
 80026ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80026ce:	f8dd b008 	ldr.w	fp, [sp, #8]
 80026d2:	9108      	str	r1, [sp, #32]
 80026d4:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 80026d8:	f8cd e01c 	str.w	lr, [sp, #28]
 80026dc:	4615      	mov	r5, r2
 80026de:	9a00      	ldr	r2, [sp, #0]
 80026e0:	ed94 1a00 	vldr	s2, [r4]
 80026e4:	ee21 1a20 	vmul.f32	s2, s2, s1
 80026e8:	9907      	ldr	r1, [sp, #28]
 80026ea:	2a00      	cmp	r2, #0
 80026ec:	f340 8072 	ble.w	80027d4 <ai_conv2d_stripe_f32+0x3e0>
 80026f0:	f026 0e03 	bic.w	lr, r6, #3
 80026f4:	f1be 0f00 	cmp.w	lr, #0
 80026f8:	f04f 0900 	mov.w	r9, #0
 80026fc:	f340 8029 	ble.w	8002752 <ai_conv2d_stripe_f32+0x35e>
 8002700:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8002704:	edd0 1a00 	vldr	s3, [r0]
 8002708:	f109 0904 	add.w	r9, r9, #4
 800270c:	ed91 2a00 	vldr	s4, [r1]
 8002710:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002714:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002718:	edd0 2a01 	vldr	s5, [r0, #4]
 800271c:	edd0 1a02 	vldr	s3, [r0, #8]
 8002720:	ed91 3a00 	vldr	s6, [r1]
 8002724:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002728:	ee02 1a83 	vmla.f32	s2, s5, s6
 800272c:	edd0 2a03 	vldr	s5, [r0, #12]
 8002730:	3010      	adds	r0, #16
 8002732:	45f1      	cmp	r9, lr
 8002734:	ed91 2a00 	vldr	s4, [r1]
 8002738:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800273c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002740:	ed91 3a00 	vldr	s6, [r1]
 8002744:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002748:	ee02 1a83 	vmla.f32	s2, s5, s6
 800274c:	dbda      	blt.n	8002704 <ai_conv2d_stripe_f32+0x310>
 800274e:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8002752:	45b1      	cmp	r9, r6
 8002754:	f280 8038 	bge.w	80027c8 <ai_conv2d_stripe_f32+0x3d4>
 8002758:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 800275c:	f109 0901 	add.w	r9, r9, #1
 8002760:	edd0 1a00 	vldr	s3, [r0]
 8002764:	1d00      	adds	r0, r0, #4
 8002766:	ed91 2a00 	vldr	s4, [r1]
 800276a:	45b1      	cmp	r9, r6
 800276c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002770:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8002774:	da26      	bge.n	80027c4 <ai_conv2d_stripe_f32+0x3d0>
 8002776:	f109 0901 	add.w	r9, r9, #1
 800277a:	ed90 2a00 	vldr	s4, [r0]
 800277e:	1d00      	adds	r0, r0, #4
 8002780:	edd1 1a00 	vldr	s3, [r1]
 8002784:	45b1      	cmp	r9, r6
 8002786:	ee02 1a21 	vmla.f32	s2, s4, s3
 800278a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800278e:	da19      	bge.n	80027c4 <ai_conv2d_stripe_f32+0x3d0>
 8002790:	f109 0901 	add.w	r9, r9, #1
 8002794:	edd0 1a00 	vldr	s3, [r0]
 8002798:	1d00      	adds	r0, r0, #4
 800279a:	ed91 2a00 	vldr	s4, [r1]
 800279e:	45b1      	cmp	r9, r6
 80027a0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80027a4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80027a8:	da0c      	bge.n	80027c4 <ai_conv2d_stripe_f32+0x3d0>
 80027aa:	f109 0901 	add.w	r9, r9, #1
 80027ae:	ed90 2a00 	vldr	s4, [r0]
 80027b2:	1d00      	adds	r0, r0, #4
 80027b4:	edd1 1a00 	vldr	s3, [r1]
 80027b8:	45b1      	cmp	r9, r6
 80027ba:	ee02 1a21 	vmla.f32	s2, s4, s3
 80027be:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80027c2:	dbcb      	blt.n	800275c <ai_conv2d_stripe_f32+0x368>
 80027c4:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 80027c8:	1e52      	subs	r2, r2, #1
 80027ca:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80027ce:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80027d2:	d18d      	bne.n	80026f0 <ai_conv2d_stripe_f32+0x2fc>
 80027d4:	1d24      	adds	r4, r4, #4
 80027d6:	9908      	ldr	r1, [sp, #32]
 80027d8:	ed85 1a00 	vstr	s2, [r5]
 80027dc:	1d2d      	adds	r5, r5, #4
 80027de:	f1bb 0b01 	subs.w	fp, fp, #1
 80027e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80027e6:	f10a 0a01 	add.w	sl, sl, #1
 80027ea:	f47f af78 	bne.w	80026de <ai_conv2d_stripe_f32+0x2ea>
 80027ee:	9d00      	ldr	r5, [sp, #0]
 80027f0:	9908      	ldr	r1, [sp, #32]
 80027f2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80027f6:	9a03      	ldr	r2, [sp, #12]
 80027f8:	f10e 0e04 	add.w	lr, lr, #4
 80027fc:	4596      	cmp	lr, r2
 80027fe:	f4bf af28 	bcs.w	8002652 <ai_conv2d_stripe_f32+0x25e>
 8002802:	e75b      	b.n	80026bc <ai_conv2d_stripe_f32+0x2c8>
 8002804:	00000000 	.word	0x00000000
 8002808:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 800280c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8002810:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8002814:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8002818:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 800281c:	4608      	mov	r0, r1
 800281e:	1b0b      	subs	r3, r1, r4
 8002820:	1876      	adds	r6, r6, r1
 8002822:	fb94 faf0 	sdiv	sl, r4, r0
 8002826:	fb00 300a 	mla	r0, r0, sl, r3
 800282a:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 800282e:	1e76      	subs	r6, r6, #1
 8002830:	1864      	adds	r4, r4, r1
 8002832:	1e64      	subs	r4, r4, #1
 8002834:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8002838:	fb90 f7f1 	sdiv	r7, r0, r1
 800283c:	fb01 0717 	mls	r7, r1, r7, r0
 8002840:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8002842:	fb90 f0f3 	sdiv	r0, r0, r3
 8002846:	fb03 c000 	mla	r0, r3, r0, ip
 800284a:	1bf6      	subs	r6, r6, r7
 800284c:	fb90 fbf3 	sdiv	fp, r0, r3
 8002850:	fb03 0b1b 	mls	fp, r3, fp, r0
 8002854:	fb96 f0f1 	sdiv	r0, r6, r1
 8002858:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800285a:	fb00 9911 	mls	r9, r0, r1, r9
 800285e:	9609      	str	r6, [sp, #36]	; 0x24
 8002860:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8002862:	fb94 f1f1 	sdiv	r1, r4, r1
 8002866:	9c00      	ldr	r4, [sp, #0]
 8002868:	eba5 050b 	sub.w	r5, r5, fp
 800286c:	195d      	adds	r5, r3, r5
 800286e:	1e6d      	subs	r5, r5, #1
 8002870:	fb95 fcf3 	sdiv	ip, r5, r3
 8002874:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002876:	eba6 060c 	sub.w	r6, r6, ip
 800287a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800287c:	eba8 0800 	sub.w	r8, r8, r0
 8002880:	fb05 f909 	mul.w	r9, r5, r9
 8002884:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002886:	fb0e fe03 	mul.w	lr, lr, r3
 800288a:	ebaa 0a03 	sub.w	sl, sl, r3
 800288e:	fb08 f803 	mul.w	r8, r8, r3
 8002892:	194d      	adds	r5, r1, r5
 8002894:	fb06 fe0e 	mul.w	lr, r6, lr
 8002898:	9e06      	ldr	r6, [sp, #24]
 800289a:	435d      	muls	r5, r3
 800289c:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80028a0:	9d01      	ldr	r5, [sp, #4]
 80028a2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80028a4:	42a5      	cmp	r5, r4
 80028a6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80028a8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80028aa:	44b3      	add	fp, r6
 80028ac:	fb04 770b 	mla	r7, r4, fp, r7
 80028b0:	bf0c      	ite	eq
 80028b2:	eddf 0a47 	vldreq	s1, [pc, #284]	; 80029d0 <.text_3>
 80028b6:	eef0 0a40 	vmovne.f32	s1, s0
 80028ba:	436f      	muls	r7, r5
 80028bc:	eb02 0487 	add.w	r4, r2, r7, lsl #2
 80028c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80028c2:	2500      	movs	r5, #0
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	d06b      	beq.n	80029a0 <ai_conv2d_stripe_f32+0x5ac>
 80028c8:	9202      	str	r2, [sp, #8]
 80028ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d061      	beq.n	8002994 <ai_conv2d_stripe_f32+0x5a0>
 80028d0:	9a00      	ldr	r2, [sp, #0]
 80028d2:	9e01      	ldr	r6, [sp, #4]
 80028d4:	f8cd c00c 	str.w	ip, [sp, #12]
 80028d8:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 80028dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028de:	f8cd e020 	str.w	lr, [sp, #32]
 80028e2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80028e6:	9407      	str	r4, [sp, #28]
 80028e8:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80028ec:	ed96 1a00 	vldr	s2, [r6]
 80028f0:	ee21 1a20 	vmul.f32	s2, s2, s1
 80028f4:	9c07      	ldr	r4, [sp, #28]
 80028f6:	f1be 0f00 	cmp.w	lr, #0
 80028fa:	dd3b      	ble.n	8002974 <ai_conv2d_stripe_f32+0x580>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	dd32      	ble.n	8002966 <ai_conv2d_stripe_f32+0x572>
 8002900:	ea4f 0c00 	mov.w	ip, r0
 8002904:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
 8002908:	455c      	cmp	r4, fp
 800290a:	d227      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 800290c:	edd1 2a00 	vldr	s5, [r1]
 8002910:	1d09      	adds	r1, r1, #4
 8002912:	edd4 1a00 	vldr	s3, [r4]
 8002916:	1d24      	adds	r4, r4, #4
 8002918:	455c      	cmp	r4, fp
 800291a:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800291e:	d21d      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 8002920:	ed91 3a00 	vldr	s6, [r1]
 8002924:	1d09      	adds	r1, r1, #4
 8002926:	ed94 2a00 	vldr	s4, [r4]
 800292a:	1d24      	adds	r4, r4, #4
 800292c:	455c      	cmp	r4, fp
 800292e:	ee03 1a02 	vmla.f32	s2, s6, s4
 8002932:	d213      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 8002934:	edd1 2a00 	vldr	s5, [r1]
 8002938:	1d09      	adds	r1, r1, #4
 800293a:	edd4 1a00 	vldr	s3, [r4]
 800293e:	1d24      	adds	r4, r4, #4
 8002940:	455c      	cmp	r4, fp
 8002942:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8002946:	d209      	bcs.n	800295c <ai_conv2d_stripe_f32+0x568>
 8002948:	ed91 2a00 	vldr	s4, [r1]
 800294c:	1d09      	adds	r1, r1, #4
 800294e:	ed94 3a00 	vldr	s6, [r4]
 8002952:	1d24      	adds	r4, r4, #4
 8002954:	455c      	cmp	r4, fp
 8002956:	ee02 1a03 	vmla.f32	s2, s4, s6
 800295a:	d3d7      	bcc.n	800290c <ai_conv2d_stripe_f32+0x518>
 800295c:	f1bc 0c01 	subs.w	ip, ip, #1
 8002960:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8002964:	d1ce      	bne.n	8002904 <ai_conv2d_stripe_f32+0x510>
 8002966:	f1be 0e01 	subs.w	lr, lr, #1
 800296a:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 800296e:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8002972:	d1c3      	bne.n	80028fc <ai_conv2d_stripe_f32+0x508>
 8002974:	1c6d      	adds	r5, r5, #1
 8002976:	f8dd c020 	ldr.w	ip, [sp, #32]
 800297a:	ed87 1a00 	vstr	s2, [r7]
 800297e:	1d3f      	adds	r7, r7, #4
 8002980:	1d36      	adds	r6, r6, #4
 8002982:	1e52      	subs	r2, r2, #1
 8002984:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8002988:	d1ae      	bne.n	80028e8 <ai_conv2d_stripe_f32+0x4f4>
 800298a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800298e:	f8dd e020 	ldr.w	lr, [sp, #32]
 8002992:	9c07      	ldr	r4, [sp, #28]
 8002994:	9f02      	ldr	r7, [sp, #8]
 8002996:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800299a:	1e7f      	subs	r7, r7, #1
 800299c:	9702      	str	r7, [sp, #8]
 800299e:	d194      	bne.n	80028ca <ai_conv2d_stripe_f32+0x4d6>
 80029a0:	9900      	ldr	r1, [sp, #0]
 80029a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80029a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80029a8:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80029ac:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	9b05      	ldr	r3, [sp, #20]
 80029b2:	188a      	adds	r2, r1, r2
 80029b4:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80029b8:	922c      	str	r2, [sp, #176]	; 0xb0
 80029ba:	9a04      	ldr	r2, [sp, #16]
 80029bc:	1859      	adds	r1, r3, r1
 80029be:	9105      	str	r1, [sp, #20]
 80029c0:	1e52      	subs	r2, r2, #1
 80029c2:	9204      	str	r2, [sp, #16]
 80029c4:	f47f ad79 	bne.w	80024ba <ai_conv2d_stripe_f32+0xc6>
 80029c8:	b018      	add	sp, #96	; 0x60
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080029d0 <.text_3>:
 80029d0:	00000000 	.word	0x00000000

080029d4 <func_dummy>:
 80029d4:	4770      	bx	lr
	...

080029d8 <ai_dict8_dot_array_f32>:
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	9805      	ldr	r0, [sp, #20]
 80029de:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80029e2:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002cb4 <.text_6>
 80029e6:	3d20      	subs	r5, #32
 80029e8:	2808      	cmp	r0, #8
 80029ea:	d231      	bcs.n	8002a50 <ai_dict8_dot_array_f32+0x78>
 80029ec:	3520      	adds	r5, #32
 80029ee:	42ab      	cmp	r3, r5
 80029f0:	f080 8159 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 80029f4:	780e      	ldrb	r6, [r1, #0]
 80029f6:	edd3 0a00 	vldr	s1, [r3]
 80029fa:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 80029fe:	ed90 1a00 	vldr	s2, [r0]
 8002a02:	1d18      	adds	r0, r3, #4
 8002a04:	42a8      	cmp	r0, r5
 8002a06:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a0a:	f080 814c 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a0e:	784e      	ldrb	r6, [r1, #1]
 8002a10:	edd0 0a00 	vldr	s1, [r0]
 8002a14:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002a18:	1d00      	adds	r0, r0, #4
 8002a1a:	42a8      	cmp	r0, r5
 8002a1c:	ed93 1a00 	vldr	s2, [r3]
 8002a20:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a24:	f080 813f 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a28:	788e      	ldrb	r6, [r1, #2]
 8002a2a:	1cc9      	adds	r1, r1, #3
 8002a2c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002a30:	edd0 0a00 	vldr	s1, [r0]
 8002a34:	ed93 1a00 	vldr	s2, [r3]
 8002a38:	1d03      	adds	r3, r0, #4
 8002a3a:	42ab      	cmp	r3, r5
 8002a3c:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a40:	d3d8      	bcc.n	80029f4 <ai_dict8_dot_array_f32+0x1c>
 8002a42:	edd4 0a00 	vldr	s1, [r4]
 8002a46:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002a4a:	ed84 0a00 	vstr	s0, [r4]
 8002a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a50:	f001 0003 	and.w	r0, r1, #3
 8002a54:	2803      	cmp	r0, #3
 8002a56:	f200 8126 	bhi.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a5a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002a5e:	0004      	.short	0x0004
 8002a60:	00940089 	.word	0x00940089
 8002a64:	009f      	.short	0x009f
 8002a66:	429d      	cmp	r5, r3
 8002a68:	d231      	bcs.n	8002ace <ai_dict8_dot_array_f32+0xf6>
 8002a6a:	3520      	adds	r5, #32
 8002a6c:	42ab      	cmp	r3, r5
 8002a6e:	f080 811a 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a72:	780e      	ldrb	r6, [r1, #0]
 8002a74:	edd3 0a00 	vldr	s1, [r3]
 8002a78:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8002a7c:	ed90 1a00 	vldr	s2, [r0]
 8002a80:	1d18      	adds	r0, r3, #4
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002a88:	f080 810d 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002a8c:	784e      	ldrb	r6, [r1, #1]
 8002a8e:	edd0 0a00 	vldr	s1, [r0]
 8002a92:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002a96:	1d00      	adds	r0, r0, #4
 8002a98:	42a8      	cmp	r0, r5
 8002a9a:	ed93 1a00 	vldr	s2, [r3]
 8002a9e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002aa2:	f080 8100 	bcs.w	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002aa6:	788e      	ldrb	r6, [r1, #2]
 8002aa8:	1cc9      	adds	r1, r1, #3
 8002aaa:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002aae:	edd0 0a00 	vldr	s1, [r0]
 8002ab2:	ed93 1a00 	vldr	s2, [r3]
 8002ab6:	1d03      	adds	r3, r0, #4
 8002ab8:	42ab      	cmp	r3, r5
 8002aba:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002abe:	d3d8      	bcc.n	8002a72 <ai_dict8_dot_array_f32+0x9a>
 8002ac0:	edd4 0a00 	vldr	s1, [r4]
 8002ac4:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002ac8:	ed84 0a00 	vstr	s0, [r4]
 8002acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ace:	78cf      	ldrb	r7, [r1, #3]
 8002ad0:	f891 e000 	ldrb.w	lr, [r1]
 8002ad4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002ad8:	788f      	ldrb	r7, [r1, #2]
 8002ada:	f103 0010 	add.w	r0, r3, #16
 8002ade:	ed93 4a00 	vldr	s8, [r3]
 8002ae2:	ed93 3a01 	vldr	s6, [r3, #4]
 8002ae6:	ed93 2a02 	vldr	s4, [r3, #8]
 8002aea:	eddc 0a00 	vldr	s1, [ip]
 8002aee:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002af2:	784f      	ldrb	r7, [r1, #1]
 8002af4:	ed93 1a03 	vldr	s2, [r3, #12]
 8002af8:	790b      	ldrb	r3, [r1, #4]
 8002afa:	eddc 1a00 	vldr	s3, [ip]
 8002afe:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002b02:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8002b06:	edd7 3a00 	vldr	s7, [r7]
 8002b0a:	794f      	ldrb	r7, [r1, #5]
 8002b0c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002b10:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002b14:	eddc 2a00 	vldr	s5, [ip]
 8002b18:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002b1c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002b20:	798b      	ldrb	r3, [r1, #6]
 8002b22:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002b26:	79cf      	ldrb	r7, [r1, #7]
 8002b28:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002b2c:	3108      	adds	r1, #8
 8002b2e:	eddc 0a00 	vldr	s1, [ip]
 8002b32:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002b36:	ed9e 1a00 	vldr	s2, [lr]
 8002b3a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002b3e:	ed90 4a00 	vldr	s8, [r0]
 8002b42:	f100 0310 	add.w	r3, r0, #16
 8002b46:	edd0 3a01 	vldr	s7, [r0, #4]
 8002b4a:	429d      	cmp	r5, r3
 8002b4c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8002b50:	eddc 1a00 	vldr	s3, [ip]
 8002b54:	ed90 3a02 	vldr	s6, [r0, #8]
 8002b58:	ee01 0a23 	vmla.f32	s0, s2, s7
 8002b5c:	ed9e 2a00 	vldr	s4, [lr]
 8002b60:	edd0 2a03 	vldr	s5, [r0, #12]
 8002b64:	ee01 0a83 	vmla.f32	s0, s3, s6
 8002b68:	ee02 0a22 	vmla.f32	s0, s4, s5
 8002b6c:	d2af      	bcs.n	8002ace <ai_dict8_dot_array_f32+0xf6>
 8002b6e:	e77c      	b.n	8002a6a <ai_dict8_dot_array_f32+0x92>
 8002b70:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002b74:	edd3 0a00 	vldr	s1, [r3]
 8002b78:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002b7c:	1d1b      	adds	r3, r3, #4
 8002b7e:	ed96 0a00 	vldr	s0, [r6]
 8002b82:	ee20 0a20 	vmul.f32	s0, s0, s1
 8002b86:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002b8a:	edd3 0a00 	vldr	s1, [r3]
 8002b8e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002b92:	1d1b      	adds	r3, r3, #4
 8002b94:	ed96 1a00 	vldr	s2, [r6]
 8002b98:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002b9c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002ba0:	edd3 0a00 	vldr	s1, [r3]
 8002ba4:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002ba8:	1d1b      	adds	r3, r3, #4
 8002baa:	429d      	cmp	r5, r3
 8002bac:	ed96 1a00 	vldr	s2, [r6]
 8002bb0:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002bb4:	d34f      	bcc.n	8002c56 <ai_dict8_dot_array_f32+0x27e>
 8002bb6:	78cf      	ldrb	r7, [r1, #3]
 8002bb8:	f891 e000 	ldrb.w	lr, [r1]
 8002bbc:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002bc0:	788f      	ldrb	r7, [r1, #2]
 8002bc2:	f103 0010 	add.w	r0, r3, #16
 8002bc6:	ed93 4a00 	vldr	s8, [r3]
 8002bca:	ed93 3a01 	vldr	s6, [r3, #4]
 8002bce:	ed93 2a02 	vldr	s4, [r3, #8]
 8002bd2:	eddc 0a00 	vldr	s1, [ip]
 8002bd6:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002bda:	784f      	ldrb	r7, [r1, #1]
 8002bdc:	ed93 1a03 	vldr	s2, [r3, #12]
 8002be0:	790b      	ldrb	r3, [r1, #4]
 8002be2:	eddc 1a00 	vldr	s3, [ip]
 8002be6:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002bea:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8002bee:	edd7 3a00 	vldr	s7, [r7]
 8002bf2:	794f      	ldrb	r7, [r1, #5]
 8002bf4:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002bf8:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002bfc:	eddc 2a00 	vldr	s5, [ip]
 8002c00:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002c04:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002c08:	798b      	ldrb	r3, [r1, #6]
 8002c0a:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002c0e:	79cf      	ldrb	r7, [r1, #7]
 8002c10:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002c14:	3108      	adds	r1, #8
 8002c16:	eddc 0a00 	vldr	s1, [ip]
 8002c1a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002c1e:	ed9e 1a00 	vldr	s2, [lr]
 8002c22:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002c26:	ed90 4a00 	vldr	s8, [r0]
 8002c2a:	f100 0310 	add.w	r3, r0, #16
 8002c2e:	edd0 3a01 	vldr	s7, [r0, #4]
 8002c32:	429d      	cmp	r5, r3
 8002c34:	ee00 0a84 	vmla.f32	s0, s1, s8
 8002c38:	eddc 1a00 	vldr	s3, [ip]
 8002c3c:	ed90 3a02 	vldr	s6, [r0, #8]
 8002c40:	ee01 0a23 	vmla.f32	s0, s2, s7
 8002c44:	ed9e 2a00 	vldr	s4, [lr]
 8002c48:	edd0 2a03 	vldr	s5, [r0, #12]
 8002c4c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8002c50:	ee02 0a22 	vmla.f32	s0, s4, s5
 8002c54:	d2af      	bcs.n	8002bb6 <ai_dict8_dot_array_f32+0x1de>
 8002c56:	3520      	adds	r5, #32
 8002c58:	42ab      	cmp	r3, r5
 8002c5a:	d224      	bcs.n	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002c5c:	780e      	ldrb	r6, [r1, #0]
 8002c5e:	edd3 0a00 	vldr	s1, [r3]
 8002c62:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8002c66:	ed90 1a00 	vldr	s2, [r0]
 8002c6a:	1d18      	adds	r0, r3, #4
 8002c6c:	42a8      	cmp	r0, r5
 8002c6e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002c72:	d218      	bcs.n	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002c74:	784e      	ldrb	r6, [r1, #1]
 8002c76:	edd0 0a00 	vldr	s1, [r0]
 8002c7a:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002c7e:	1d00      	adds	r0, r0, #4
 8002c80:	42a8      	cmp	r0, r5
 8002c82:	ed93 1a00 	vldr	s2, [r3]
 8002c86:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002c8a:	d20c      	bcs.n	8002ca6 <ai_dict8_dot_array_f32+0x2ce>
 8002c8c:	788e      	ldrb	r6, [r1, #2]
 8002c8e:	1cc9      	adds	r1, r1, #3
 8002c90:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8002c94:	edd0 0a00 	vldr	s1, [r0]
 8002c98:	ed93 1a00 	vldr	s2, [r3]
 8002c9c:	1d03      	adds	r3, r0, #4
 8002c9e:	42ab      	cmp	r3, r5
 8002ca0:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002ca4:	d3da      	bcc.n	8002c5c <ai_dict8_dot_array_f32+0x284>
 8002ca6:	edd4 0a00 	vldr	s1, [r4]
 8002caa:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002cae:	ed84 0a00 	vstr	s0, [r4]
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb4 <.text_6>:
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <ai_dict4_dot_array_f32>:
 8002cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cbc:	4680      	mov	r8, r0
 8002cbe:	461e      	mov	r6, r3
 8002cc0:	ed2d 8b02 	vpush	{d8}
 8002cc4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8002cc8:	460c      	mov	r4, r1
 8002cca:	4615      	mov	r5, r2
 8002ccc:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002e1c <.text_8>
 8002cd0:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8002cd4:	0040      	lsls	r0, r0, #1
 8002cd6:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 8002cda:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 8002cde:	d053      	beq.n	8002d88 <ai_dict4_dot_array_f32+0xd0>
 8002ce0:	ed96 8a00 	vldr	s16, [r6]
 8002ce4:	7820      	ldrb	r0, [r4, #0]
 8002ce6:	ed96 7a01 	vldr	s14, [r6, #4]
 8002cea:	7861      	ldrb	r1, [r4, #1]
 8002cec:	ed96 6a02 	vldr	s12, [r6, #8]
 8002cf0:	78a2      	ldrb	r2, [r4, #2]
 8002cf2:	ed96 5a03 	vldr	s10, [r6, #12]
 8002cf6:	78e7      	ldrb	r7, [r4, #3]
 8002cf8:	ed96 4a04 	vldr	s8, [r6, #16]
 8002cfc:	1d24      	adds	r4, r4, #4
 8002cfe:	ed96 3a05 	vldr	s6, [r6, #20]
 8002d02:	ed96 2a06 	vldr	s4, [r6, #24]
 8002d06:	f007 090f 	and.w	r9, r7, #15
 8002d0a:	093f      	lsrs	r7, r7, #4
 8002d0c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8002d10:	ed96 1a07 	vldr	s2, [r6, #28]
 8002d14:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 8002d18:	f002 090f 	and.w	r9, r2, #15
 8002d1c:	0912      	lsrs	r2, r2, #4
 8002d1e:	3620      	adds	r6, #32
 8002d20:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002d24:	edd7 1a00 	vldr	s3, [r7]
 8002d28:	f001 070f 	and.w	r7, r1, #15
 8002d2c:	0909      	lsrs	r1, r1, #4
 8002d2e:	edda 0a00 	vldr	s1, [sl]
 8002d32:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002d36:	edd2 3a00 	vldr	s7, [r2]
 8002d3a:	f000 020f 	and.w	r2, r0, #15
 8002d3e:	0900      	lsrs	r0, r0, #4
 8002d40:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 8002d44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002d48:	1e5b      	subs	r3, r3, #1
 8002d4a:	eb05 0987 	add.w	r9, r5, r7, lsl #2
 8002d4e:	edd1 5a00 	vldr	s11, [r1]
 8002d52:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8002d56:	edda 2a00 	vldr	s5, [sl]
 8002d5a:	edd0 7a00 	vldr	s15, [r0]
 8002d5e:	ee07 0a88 	vmla.f32	s0, s15, s16
 8002d62:	edd7 6a00 	vldr	s13, [r7]
 8002d66:	ee06 0a87 	vmla.f32	s0, s13, s14
 8002d6a:	edd9 4a00 	vldr	s9, [r9]
 8002d6e:	ee05 0a86 	vmla.f32	s0, s11, s12
 8002d72:	ee04 0a85 	vmla.f32	s0, s9, s10
 8002d76:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002d7a:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002d7e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002d82:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002d86:	d1ab      	bne.n	8002ce0 <ai_dict4_dot_array_f32+0x28>
 8002d88:	4576      	cmp	r6, lr
 8002d8a:	d22f      	bcs.n	8002dec <ai_dict4_dot_array_f32+0x134>
 8002d8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d90:	edd6 1a00 	vldr	s3, [r6]
 8002d94:	edd6 0a01 	vldr	s1, [r6, #4]
 8002d98:	3608      	adds	r6, #8
 8002d9a:	f000 010f 	and.w	r1, r0, #15
 8002d9e:	0900      	lsrs	r0, r0, #4
 8002da0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002da4:	4576      	cmp	r6, lr
 8002da6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8002daa:	ed90 2a00 	vldr	s4, [r0]
 8002dae:	ee02 0a21 	vmla.f32	s0, s4, s3
 8002db2:	ed92 1a00 	vldr	s2, [r2]
 8002db6:	ee01 0a20 	vmla.f32	s0, s2, s1
 8002dba:	d217      	bcs.n	8002dec <ai_dict4_dot_array_f32+0x134>
 8002dbc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002dc0:	ed96 1a00 	vldr	s2, [r6]
 8002dc4:	ed96 2a01 	vldr	s4, [r6, #4]
 8002dc8:	3608      	adds	r6, #8
 8002dca:	f000 010f 	and.w	r1, r0, #15
 8002dce:	0900      	lsrs	r0, r0, #4
 8002dd0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002dd4:	4576      	cmp	r6, lr
 8002dd6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8002dda:	edd0 1a00 	vldr	s3, [r0]
 8002dde:	ee01 0a81 	vmla.f32	s0, s3, s2
 8002de2:	edd2 0a00 	vldr	s1, [r2]
 8002de6:	ee00 0a82 	vmla.f32	s0, s1, s4
 8002dea:	d3cf      	bcc.n	8002d8c <ai_dict4_dot_array_f32+0xd4>
 8002dec:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 8002df0:	d509      	bpl.n	8002e06 <ai_dict4_dot_array_f32+0x14e>
 8002df2:	7821      	ldrb	r1, [r4, #0]
 8002df4:	ed96 1a00 	vldr	s2, [r6]
 8002df8:	0909      	lsrs	r1, r1, #4
 8002dfa:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8002dfe:	edd2 0a00 	vldr	s1, [r2]
 8002e02:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002e06:	edd8 1a00 	vldr	s3, [r8]
 8002e0a:	ee31 0a80 	vadd.f32	s0, s3, s0
 8002e0e:	ed88 0a00 	vstr	s0, [r8]
 8002e12:	ecbd 8b02 	vpop	{d8}
 8002e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002e1c <.text_8>:
 8002e1c:	00000000 	.word	0x00000000

08002e20 <ai_dict_decompress_f32>:
 8002e20:	b4f0      	push	{r4, r5, r6, r7}
 8002e22:	4604      	mov	r4, r0
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	9805      	ldr	r0, [sp, #20]
 8002e28:	9e04      	ldr	r6, [sp, #16]
 8002e2a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002e2e:	d003      	beq.n	8002e38 <ai_dict_decompress_f32+0x18>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d03f      	beq.n	8002eb4 <ai_dict_decompress_f32+0x94>
 8002e34:	bcf0      	pop	{r4, r5, r6, r7}
 8002e36:	4770      	bx	lr
 8002e38:	42ac      	cmp	r4, r5
 8002e3a:	d25a      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002e3c:	0870      	lsrs	r0, r6, #1
 8002e3e:	d02f      	beq.n	8002ea0 <ai_dict_decompress_f32+0x80>
 8002e40:	07c3      	lsls	r3, r0, #31
 8002e42:	d50d      	bpl.n	8002e60 <ai_dict_decompress_f32+0x40>
 8002e44:	780f      	ldrb	r7, [r1, #0]
 8002e46:	093f      	lsrs	r7, r7, #4
 8002e48:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8002e4c:	f8c4 c000 	str.w	ip, [r4]
 8002e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002e5c:	6067      	str	r7, [r4, #4]
 8002e5e:	3408      	adds	r4, #8
 8002e60:	0840      	lsrs	r0, r0, #1
 8002e62:	d01d      	beq.n	8002ea0 <ai_dict_decompress_f32+0x80>
 8002e64:	780b      	ldrb	r3, [r1, #0]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002e6c:	6027      	str	r7, [r4, #0]
 8002e6e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002e72:	f00c 0c0f 	and.w	ip, ip, #15
 8002e76:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8002e7a:	6063      	str	r3, [r4, #4]
 8002e7c:	f104 0308 	add.w	r3, r4, #8
 8002e80:	780c      	ldrb	r4, [r1, #0]
 8002e82:	0924      	lsrs	r4, r4, #4
 8002e84:	1e40      	subs	r0, r0, #1
 8002e86:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8002e8a:	601f      	str	r7, [r3, #0]
 8002e8c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002e90:	f00c 0c0f 	and.w	ip, ip, #15
 8002e94:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8002e98:	605c      	str	r4, [r3, #4]
 8002e9a:	f103 0408 	add.w	r4, r3, #8
 8002e9e:	d1e1      	bne.n	8002e64 <ai_dict_decompress_f32+0x44>
 8002ea0:	07f0      	lsls	r0, r6, #31
 8002ea2:	d5c9      	bpl.n	8002e38 <ai_dict_decompress_f32+0x18>
 8002ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002eae:	f844 7b04 	str.w	r7, [r4], #4
 8002eb2:	e7c1      	b.n	8002e38 <ai_dict_decompress_f32+0x18>
 8002eb4:	42ac      	cmp	r4, r5
 8002eb6:	d21c      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002eb8:	7808      	ldrb	r0, [r1, #0]
 8002eba:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002ebe:	6020      	str	r0, [r4, #0]
 8002ec0:	1d20      	adds	r0, r4, #4
 8002ec2:	42a8      	cmp	r0, r5
 8002ec4:	bf3f      	itttt	cc
 8002ec6:	784c      	ldrbcc	r4, [r1, #1]
 8002ec8:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8002ecc:	f840 3b04 	strcc.w	r3, [r0], #4
 8002ed0:	42a8      	cmpcc	r0, r5
 8002ed2:	d20e      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002ed4:	788b      	ldrb	r3, [r1, #2]
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	f840 3b04 	str.w	r3, [r0], #4
 8002ede:	42a8      	cmp	r0, r5
 8002ee0:	d207      	bcs.n	8002ef2 <ai_dict_decompress_f32+0xd2>
 8002ee2:	78cc      	ldrb	r4, [r1, #3]
 8002ee4:	1d09      	adds	r1, r1, #4
 8002ee6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002eea:	1d04      	adds	r4, r0, #4
 8002eec:	42ac      	cmp	r4, r5
 8002eee:	6003      	str	r3, [r0, #0]
 8002ef0:	d3e2      	bcc.n	8002eb8 <ai_dict_decompress_f32+0x98>
 8002ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ef4:	4770      	bx	lr

08002ef6 <forward_conv2d>:
 8002ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efa:	b0a9      	sub	sp, #164	; 0xa4
 8002efc:	4605      	mov	r5, r0
 8002efe:	696b      	ldr	r3, [r5, #20]
 8002f00:	8819      	ldrh	r1, [r3, #0]
 8002f02:	2900      	cmp	r1, #0
 8002f04:	bf1a      	itte	ne
 8002f06:	6858      	ldrne	r0, [r3, #4]
 8002f08:	1d00      	addne	r0, r0, #4
 8002f0a:	2004      	moveq	r0, #4
 8002f0c:	6800      	ldr	r0, [r0, #0]
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	bf14      	ite	ne
 8002f12:	6802      	ldrne	r2, [r0, #0]
 8002f14:	2200      	moveq	r2, #0
 8002f16:	2901      	cmp	r1, #1
 8002f18:	bfc6      	itte	gt
 8002f1a:	6858      	ldrgt	r0, [r3, #4]
 8002f1c:	3010      	addgt	r0, #16
 8002f1e:	2004      	movle	r0, #4
 8002f20:	6800      	ldr	r0, [r0, #0]
 8002f22:	2800      	cmp	r0, #0
 8002f24:	bf14      	ite	ne
 8002f26:	f8d0 a000 	ldrne.w	sl, [r0]
 8002f2a:	f04f 0a00 	moveq.w	sl, #0
 8002f2e:	2902      	cmp	r1, #2
 8002f30:	bfc6      	itte	gt
 8002f32:	6858      	ldrgt	r0, [r3, #4]
 8002f34:	f100 091c 	addgt.w	r9, r0, #28
 8002f38:	f04f 0904 	movle.w	r9, #4
 8002f3c:	f8d9 0000 	ldr.w	r0, [r9]
 8002f40:	2800      	cmp	r0, #0
 8002f42:	bf14      	ite	ne
 8002f44:	6806      	ldrne	r6, [r0, #0]
 8002f46:	2600      	moveq	r6, #0
 8002f48:	2902      	cmp	r1, #2
 8002f4a:	dd0a      	ble.n	8002f62 <forward_conv2d+0x6c>
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f113 0118 	adds.w	r1, r3, #24
 8002f52:	d006      	beq.n	8002f62 <forward_conv2d+0x6c>
 8002f54:	8b1f      	ldrh	r7, [r3, #24]
 8002f56:	2f01      	cmp	r7, #1
 8002f58:	dd03      	ble.n	8002f62 <forward_conv2d+0x6c>
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	b109      	cbz	r1, 8002f62 <forward_conv2d+0x6c>
 8002f5e:	6849      	ldr	r1, [r1, #4]
 8002f60:	e000      	b.n	8002f64 <forward_conv2d+0x6e>
 8002f62:	2100      	movs	r1, #0
 8002f64:	b100      	cbz	r0, 8002f68 <forward_conv2d+0x72>
 8002f66:	6880      	ldr	r0, [r0, #8]
 8002f68:	68d7      	ldr	r7, [r2, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8002f6e:	f8da c00c 	ldr.w	ip, [sl, #12]
 8002f72:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8002f76:	f8cd 9010 	str.w	r9, [sp, #16]
 8002f7a:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8002f7e:	f8dc e008 	ldr.w	lr, [ip, #8]
 8002f82:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8002f86:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8002f8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8002f8e:	68bf      	ldr	r7, [r7, #8]
 8002f90:	9720      	str	r7, [sp, #128]	; 0x80
 8002f92:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8002f96:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
 8002f9a:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8002f9c:	971f      	str	r7, [sp, #124]	; 0x7c
 8002f9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002fa0:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
 8002fa4:	681f      	ldr	r7, [r3, #0]
 8002fa6:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002faa:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8002fae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8002fb0:	9418      	str	r4, [sp, #96]	; 0x60
 8002fb2:	68f3      	ldr	r3, [r6, #12]
 8002fb4:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002fb8:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8002fbc:	685c      	ldr	r4, [r3, #4]
 8002fbe:	9412      	str	r4, [sp, #72]	; 0x48
 8002fc0:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8002fc4:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8002fc8:	6994      	ldr	r4, [r2, #24]
 8002fca:	68a3      	ldr	r3, [r4, #8]
 8002fcc:	931d      	str	r3, [sp, #116]	; 0x74
 8002fce:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8002fd2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8002fd6:	b119      	cbz	r1, 8002fe0 <forward_conv2d+0xea>
 8002fd8:	698a      	ldr	r2, [r1, #24]
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fde:	e003      	b.n	8002fe8 <forward_conv2d+0xf2>
 8002fe0:	f04f 0e00 	mov.w	lr, #0
 8002fe4:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8002fe8:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002fec:	688a      	ldr	r2, [r1, #8]
 8002fee:	9203      	str	r2, [sp, #12]
 8002ff0:	69e9      	ldr	r1, [r5, #28]
 8002ff2:	b118      	cbz	r0, 8002ffc <forward_conv2d+0x106>
 8002ff4:	6981      	ldr	r1, [r0, #24]
 8002ff6:	688a      	ldr	r2, [r1, #8]
 8002ff8:	9215      	str	r2, [sp, #84]	; 0x54
 8002ffa:	e005      	b.n	8003008 <forward_conv2d+0x112>
 8002ffc:	b111      	cbz	r1, 8003004 <forward_conv2d+0x10e>
 8002ffe:	688a      	ldr	r2, [r1, #8]
 8003000:	9215      	str	r2, [sp, #84]	; 0x54
 8003002:	e001      	b.n	8003008 <forward_conv2d+0x112>
 8003004:	2300      	movs	r3, #0
 8003006:	9315      	str	r3, [sp, #84]	; 0x54
 8003008:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800300a:	9202      	str	r2, [sp, #8]
 800300c:	b920      	cbnz	r0, 8003018 <forward_conv2d+0x122>
 800300e:	2100      	movs	r1, #0
 8003010:	2201      	movs	r2, #1
 8003012:	9124      	str	r1, [sp, #144]	; 0x90
 8003014:	9223      	str	r2, [sp, #140]	; 0x8c
 8003016:	e008      	b.n	800302a <forward_conv2d+0x134>
 8003018:	6941      	ldr	r1, [r0, #20]
 800301a:	688a      	ldr	r2, [r1, #8]
 800301c:	9224      	str	r2, [sp, #144]	; 0x90
 800301e:	6980      	ldr	r0, [r0, #24]
 8003020:	6841      	ldr	r1, [r0, #4]
 8003022:	6800      	ldr	r0, [r0, #0]
 8003024:	f003 fc94 	bl	8006950 <ai_array_get_byte_size>
 8003028:	9023      	str	r0, [sp, #140]	; 0x8c
 800302a:	6a28      	ldr	r0, [r5, #32]
 800302c:	2800      	cmp	r0, #0
 800302e:	bf12      	itee	ne
 8003030:	9022      	strne	r0, [sp, #136]	; 0x88
 8003032:	f8df 1d7c 	ldreq.w	r1, [pc, #3452]	; 8003db0 <.text_16>
 8003036:	9122      	streq	r1, [sp, #136]	; 0x88
 8003038:	a818      	add	r0, sp, #96	; 0x60
 800303a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800303c:	8803      	ldrh	r3, [r0, #0]
 800303e:	1e51      	subs	r1, r2, #1
 8003040:	1e5b      	subs	r3, r3, #1
 8003042:	fb03 2201 	mla	r2, r3, r1, r2
 8003046:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003048:	9216      	str	r2, [sp, #88]	; 0x58
 800304a:	aa19      	add	r2, sp, #100	; 0x64
 800304c:	8813      	ldrh	r3, [r2, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	1e48      	subs	r0, r1, #1
 8003052:	1e5b      	subs	r3, r3, #1
 8003054:	fb03 1100 	mla	r1, r3, r0, r1
 8003058:	2000      	movs	r0, #0
 800305a:	911c      	str	r1, [sp, #112]	; 0x70
 800305c:	69b6      	ldr	r6, [r6, #24]
 800305e:	4683      	mov	fp, r0
 8003060:	6831      	ldr	r1, [r6, #0]
 8003062:	11cb      	asrs	r3, r1, #7
 8003064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003068:	ea4f 5c61 	mov.w	ip, r1, asr #21
 800306c:	1449      	asrs	r1, r1, #17
 800306e:	f001 010f 	and.w	r1, r1, #15
 8003072:	f00c 0c03 	and.w	ip, ip, #3
 8003076:	2904      	cmp	r1, #4
 8003078:	fa23 f30c 	lsr.w	r3, r3, ip
 800307c:	bf14      	ite	ne
 800307e:	2908      	cmpne	r1, #8
 8003080:	68f2      	ldreq	r2, [r6, #12]
 8003082:	b1da      	cbz	r2, 80030bc <forward_conv2d+0x1c6>
 8003084:	6969      	ldr	r1, [r5, #20]
 8003086:	880d      	ldrh	r5, [r1, #0]
 8003088:	2d04      	cmp	r5, #4
 800308a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800308c:	bfa6      	itte	ge
 800308e:	6849      	ldrge	r1, [r1, #4]
 8003090:	3128      	addge	r1, #40	; 0x28
 8003092:	2104      	movlt	r1, #4
 8003094:	6809      	ldr	r1, [r1, #0]
 8003096:	2900      	cmp	r1, #0
 8003098:	bf1f      	itttt	ne
 800309a:	6808      	ldrne	r0, [r1, #0]
 800309c:	2800      	cmpne	r0, #0
 800309e:	6981      	ldrne	r1, [r0, #24]
 80030a0:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 80030a4:	6980      	ldr	r0, [r0, #24]
 80030a6:	6841      	ldr	r1, [r0, #4]
 80030a8:	9500      	str	r5, [sp, #0]
 80030aa:	9101      	str	r1, [sp, #4]
 80030ac:	68b1      	ldr	r1, [r6, #8]
 80030ae:	4658      	mov	r0, fp
 80030b0:	f7ff feb6 	bl	8002e20 <ai_dict_decompress_f32>
 80030b4:	f1bb 0f00 	cmp.w	fp, #0
 80030b8:	bf18      	it	ne
 80030ba:	465c      	movne	r4, fp
 80030bc:	b2bf      	uxth	r7, r7
 80030be:	427f      	negs	r7, r7
 80030c0:	f1b9 0f00 	cmp.w	r9, #0
 80030c4:	d06f      	beq.n	80031a6 <forward_conv2d+0x2b0>
 80030c6:	464a      	mov	r2, r9
 80030c8:	f1c8 0800 	rsb	r8, r8, #0
 80030cc:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80030d0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80030d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80030d8:	9427      	str	r4, [sp, #156]	; 0x9c
 80030da:	9711      	str	r7, [sp, #68]	; 0x44
 80030dc:	9e02      	ldr	r6, [sp, #8]
 80030de:	9221      	str	r2, [sp, #132]	; 0x84
 80030e0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80030e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80030e4:	9025      	str	r0, [sp, #148]	; 0x94
 80030e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80030e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80030ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80030ec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80030ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80030f2:	4240      	negs	r0, r0
 80030f4:	950d      	str	r5, [sp, #52]	; 0x34
 80030f6:	bfd8      	it	le
 80030f8:	2000      	movle	r0, #0
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	4299      	cmp	r1, r3
 80030fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003100:	9009      	str	r0, [sp, #36]	; 0x24
 8003102:	bf28      	it	cs
 8003104:	4619      	movcs	r1, r3
 8003106:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003108:	910a      	str	r1, [sp, #40]	; 0x28
 800310a:	b212      	sxth	r2, r2
 800310c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800310e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003110:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003112:	920c      	str	r2, [sp, #48]	; 0x30
 8003114:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8003118:	b21b      	sxth	r3, r3
 800311a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800311c:	930e      	str	r3, [sp, #56]	; 0x38
 800311e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003120:	9008      	str	r0, [sp, #32]
 8003122:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003124:	9107      	str	r1, [sp, #28]
 8003126:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003128:	9206      	str	r2, [sp, #24]
 800312a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800312c:	930b      	str	r3, [sp, #44]	; 0x2c
 800312e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003130:	9005      	str	r0, [sp, #20]
 8003132:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003134:	9104      	str	r1, [sp, #16]
 8003136:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003138:	9203      	str	r2, [sp, #12]
 800313a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800313c:	9001      	str	r0, [sp, #4]
 800313e:	2000      	movs	r0, #0
 8003140:	9100      	str	r1, [sp, #0]
 8003142:	4659      	mov	r1, fp
 8003144:	f7ff f956 	bl	80023f4 <ai_conv2d_stripe_f32>
 8003148:	9814      	ldr	r0, [sp, #80]	; 0x50
 800314a:	b300      	cbz	r0, 800318e <forward_conv2d+0x298>
 800314c:	f8cd a000 	str.w	sl, [sp]
 8003150:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003152:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8003154:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8003158:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800315a:	4682      	mov	sl, r0
 800315c:	9800      	ldr	r0, [sp, #0]
 800315e:	462b      	mov	r3, r5
 8003160:	464a      	mov	r2, r9
 8003162:	443d      	add	r5, r7
 8003164:	6981      	ldr	r1, [r0, #24]
 8003166:	f8c1 b008 	str.w	fp, [r1, #8]
 800316a:	eb0b 0b89 	add.w	fp, fp, r9, lsl #2
 800316e:	4608      	mov	r0, r1
 8003170:	47a0      	blx	r4
 8003172:	1ba9      	subs	r1, r5, r6
 8003174:	4541      	cmp	r1, r8
 8003176:	bfa8      	it	ge
 8003178:	4635      	movge	r5, r6
 800317a:	f1ba 0a01 	subs.w	sl, sl, #1
 800317e:	d1ed      	bne.n	800315c <forward_conv2d+0x266>
 8003180:	f8dd a000 	ldr.w	sl, [sp]
 8003184:	9515      	str	r5, [sp, #84]	; 0x54
 8003186:	9724      	str	r7, [sp, #144]	; 0x90
 8003188:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 800318c:	9422      	str	r4, [sp, #136]	; 0x88
 800318e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8003192:	68c1      	ldr	r1, [r0, #12]
 8003194:	6081      	str	r1, [r0, #8]
 8003196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800319a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800319c:	189a      	adds	r2, r3, r2
 800319e:	9211      	str	r2, [sp, #68]	; 0x44
 80031a0:	1e49      	subs	r1, r1, #1
 80031a2:	9121      	str	r1, [sp, #132]	; 0x84
 80031a4:	d19c      	bne.n	80030e0 <forward_conv2d+0x1ea>
 80031a6:	b029      	add	sp, #164	; 0xa4
 80031a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080031ac <forward_conv2d_nl_pool>:
 80031ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b0:	b0b9      	sub	sp, #228	; 0xe4
 80031b2:	4604      	mov	r4, r0
 80031b4:	6963      	ldr	r3, [r4, #20]
 80031b6:	8819      	ldrh	r1, [r3, #0]
 80031b8:	2900      	cmp	r1, #0
 80031ba:	bf1a      	itte	ne
 80031bc:	6858      	ldrne	r0, [r3, #4]
 80031be:	1d00      	addne	r0, r0, #4
 80031c0:	2004      	moveq	r0, #4
 80031c2:	6800      	ldr	r0, [r0, #0]
 80031c4:	2800      	cmp	r0, #0
 80031c6:	bf14      	ite	ne
 80031c8:	6802      	ldrne	r2, [r0, #0]
 80031ca:	2200      	moveq	r2, #0
 80031cc:	2901      	cmp	r1, #1
 80031ce:	bfc6      	itte	gt
 80031d0:	6858      	ldrgt	r0, [r3, #4]
 80031d2:	3010      	addgt	r0, #16
 80031d4:	2004      	movle	r0, #4
 80031d6:	6800      	ldr	r0, [r0, #0]
 80031d8:	2800      	cmp	r0, #0
 80031da:	bf14      	ite	ne
 80031dc:	f8d0 a000 	ldrne.w	sl, [r0]
 80031e0:	f04f 0a00 	moveq.w	sl, #0
 80031e4:	2902      	cmp	r1, #2
 80031e6:	bfc6      	itte	gt
 80031e8:	6858      	ldrgt	r0, [r3, #4]
 80031ea:	f100 071c 	addgt.w	r7, r0, #28
 80031ee:	2704      	movle	r7, #4
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	2800      	cmp	r0, #0
 80031f4:	bf14      	ite	ne
 80031f6:	6806      	ldrne	r6, [r0, #0]
 80031f8:	2600      	moveq	r6, #0
 80031fa:	2902      	cmp	r1, #2
 80031fc:	dd0c      	ble.n	8003218 <forward_conv2d_nl_pool+0x6c>
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f113 0118 	adds.w	r1, r3, #24
 8003204:	d008      	beq.n	8003218 <forward_conv2d_nl_pool+0x6c>
 8003206:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 800320a:	f1bc 0f01 	cmp.w	ip, #1
 800320e:	dd03      	ble.n	8003218 <forward_conv2d_nl_pool+0x6c>
 8003210:	69d9      	ldr	r1, [r3, #28]
 8003212:	b109      	cbz	r1, 8003218 <forward_conv2d_nl_pool+0x6c>
 8003214:	6849      	ldr	r1, [r1, #4]
 8003216:	e000      	b.n	800321a <forward_conv2d_nl_pool+0x6e>
 8003218:	2100      	movs	r1, #0
 800321a:	b100      	cbz	r0, 800321e <forward_conv2d_nl_pool+0x72>
 800321c:	6880      	ldr	r0, [r0, #8]
 800321e:	68d7      	ldr	r7, [r2, #12]
 8003220:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8003224:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 8003228:	f8da e00c 	ldr.w	lr, [sl, #12]
 800322c:	f8de 8004 	ldr.w	r8, [lr, #4]
 8003230:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003234:	f8de 900c 	ldr.w	r9, [lr, #12]
 8003238:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800323c:	f8de e008 	ldr.w	lr, [lr, #8]
 8003240:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 8003244:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003248:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800324c:	68bf      	ldr	r7, [r7, #8]
 800324e:	972d      	str	r7, [sp, #180]	; 0xb4
 8003250:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8003254:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8003258:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 800325a:	9720      	str	r7, [sp, #128]	; 0x80
 800325c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800325e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8003262:	881f      	ldrh	r7, [r3, #0]
 8003264:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8003268:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800326c:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 8003270:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003272:	951f      	str	r5, [sp, #124]	; 0x7c
 8003274:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 8003278:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800327c:	68f3      	ldr	r3, [r6, #12]
 800327e:	685d      	ldr	r5, [r3, #4]
 8003280:	951a      	str	r5, [sp, #104]	; 0x68
 8003282:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8003286:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800328a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800328c:	952b      	str	r5, [sp, #172]	; 0xac
 800328e:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8003292:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8003296:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003298:	9511      	str	r5, [sp, #68]	; 0x44
 800329a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800329c:	681d      	ldr	r5, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80032a2:	f8d2 e018 	ldr.w	lr, [r2, #24]
 80032a6:	f8de b008 	ldr.w	fp, [lr, #8]
 80032aa:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 80032ae:	69b3      	ldr	r3, [r6, #24]
 80032b0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80032b4:	b119      	cbz	r1, 80032be <forward_conv2d_nl_pool+0x112>
 80032b6:	698a      	ldr	r2, [r1, #24]
 80032b8:	6893      	ldr	r3, [r2, #8]
 80032ba:	931d      	str	r3, [sp, #116]	; 0x74
 80032bc:	e003      	b.n	80032c6 <forward_conv2d_nl_pool+0x11a>
 80032be:	f04f 0e00 	mov.w	lr, #0
 80032c2:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 80032c6:	69e1      	ldr	r1, [r4, #28]
 80032c8:	b118      	cbz	r0, 80032d2 <forward_conv2d_nl_pool+0x126>
 80032ca:	6981      	ldr	r1, [r0, #24]
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	921c      	str	r2, [sp, #112]	; 0x70
 80032d0:	e005      	b.n	80032de <forward_conv2d_nl_pool+0x132>
 80032d2:	b111      	cbz	r1, 80032da <forward_conv2d_nl_pool+0x12e>
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	921c      	str	r2, [sp, #112]	; 0x70
 80032d8:	e001      	b.n	80032de <forward_conv2d_nl_pool+0x132>
 80032da:	2300      	movs	r3, #0
 80032dc:	931c      	str	r3, [sp, #112]	; 0x70
 80032de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80032e0:	9202      	str	r2, [sp, #8]
 80032e2:	b920      	cbnz	r0, 80032ee <forward_conv2d_nl_pool+0x142>
 80032e4:	2100      	movs	r1, #0
 80032e6:	2201      	movs	r2, #1
 80032e8:	9116      	str	r1, [sp, #88]	; 0x58
 80032ea:	9215      	str	r2, [sp, #84]	; 0x54
 80032ec:	e008      	b.n	8003300 <forward_conv2d_nl_pool+0x154>
 80032ee:	6941      	ldr	r1, [r0, #20]
 80032f0:	688a      	ldr	r2, [r1, #8]
 80032f2:	9216      	str	r2, [sp, #88]	; 0x58
 80032f4:	6980      	ldr	r0, [r0, #24]
 80032f6:	6841      	ldr	r1, [r0, #4]
 80032f8:	6800      	ldr	r0, [r0, #0]
 80032fa:	f003 fb29 	bl	8006950 <ai_array_get_byte_size>
 80032fe:	9015      	str	r0, [sp, #84]	; 0x54
 8003300:	6a20      	ldr	r0, [r4, #32]
 8003302:	2800      	cmp	r0, #0
 8003304:	bf12      	itee	ne
 8003306:	9030      	strne	r0, [sp, #192]	; 0xc0
 8003308:	f8df 1aa4 	ldreq.w	r1, [pc, #2724]	; 8003db0 <.text_16>
 800330c:	9130      	streq	r1, [sp, #192]	; 0xc0
 800330e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003310:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003312:	9227      	str	r2, [sp, #156]	; 0x9c
 8003314:	aa1e      	add	r2, sp, #120	; 0x78
 8003316:	8813      	ldrh	r3, [r2, #0]
 8003318:	1e41      	subs	r1, r0, #1
 800331a:	1e5b      	subs	r3, r3, #1
 800331c:	fb03 0001 	mla	r0, r3, r1, r0
 8003320:	ab1f      	add	r3, sp, #124	; 0x7c
 8003322:	f8b3 e000 	ldrh.w	lr, [r3]
 8003326:	9018      	str	r0, [sp, #96]	; 0x60
 8003328:	991a      	ldr	r1, [sp, #104]	; 0x68
 800332a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800332c:	1e4a      	subs	r2, r1, #1
 800332e:	f1ae 0e01 	sub.w	lr, lr, #1
 8003332:	fb0e 1102 	mla	r1, lr, r2, r1
 8003336:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003338:	9126      	str	r1, [sp, #152]	; 0x98
 800333a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800333c:	9112      	str	r1, [sp, #72]	; 0x48
 800333e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8003340:	1a12      	subs	r2, r2, r0
 8003342:	18ba      	adds	r2, r7, r2
 8003344:	fa12 f089 	uxtah	r0, r2, r9
 8003348:	2200      	movs	r2, #0
 800334a:	fbb0 f1f1 	udiv	r1, r0, r1
 800334e:	1c49      	adds	r1, r1, #1
 8003350:	2000      	movs	r0, #0
 8003352:	9114      	str	r1, [sp, #80]	; 0x50
 8003354:	69b6      	ldr	r6, [r6, #24]
 8003356:	4681      	mov	r9, r0
 8003358:	6831      	ldr	r1, [r6, #0]
 800335a:	11cb      	asrs	r3, r1, #7
 800335c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003360:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8003364:	1449      	asrs	r1, r1, #17
 8003366:	f001 010f 	and.w	r1, r1, #15
 800336a:	f00c 0c03 	and.w	ip, ip, #3
 800336e:	2904      	cmp	r1, #4
 8003370:	fa23 f30c 	lsr.w	r3, r3, ip
 8003374:	bf14      	ite	ne
 8003376:	2908      	cmpne	r1, #8
 8003378:	68f2      	ldreq	r2, [r6, #12]
 800337a:	b302      	cbz	r2, 80033be <forward_conv2d_nl_pool+0x212>
 800337c:	6961      	ldr	r1, [r4, #20]
 800337e:	f8b1 c000 	ldrh.w	ip, [r1]
 8003382:	f1bc 0f04 	cmp.w	ip, #4
 8003386:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 800338a:	bfa6      	itte	ge
 800338c:	6849      	ldrge	r1, [r1, #4]
 800338e:	3128      	addge	r1, #40	; 0x28
 8003390:	2104      	movlt	r1, #4
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	2900      	cmp	r1, #0
 8003396:	bf1f      	itttt	ne
 8003398:	6848      	ldrne	r0, [r1, #4]
 800339a:	2800      	cmpne	r0, #0
 800339c:	6981      	ldrne	r1, [r0, #24]
 800339e:	f8d1 9008 	ldrne.w	r9, [r1, #8]
 80033a2:	6980      	ldr	r0, [r0, #24]
 80033a4:	6841      	ldr	r1, [r0, #4]
 80033a6:	f8cd c000 	str.w	ip, [sp]
 80033aa:	9101      	str	r1, [sp, #4]
 80033ac:	68b1      	ldr	r1, [r6, #8]
 80033ae:	4648      	mov	r0, r9
 80033b0:	f7ff fd36 	bl	8002e20 <ai_dict_decompress_f32>
 80033b4:	f1b9 0f00 	cmp.w	r9, #0
 80033b8:	bf18      	it	ne
 80033ba:	4648      	movne	r0, r9
 80033bc:	d100      	bne.n	80033c0 <forward_conv2d_nl_pool+0x214>
 80033be:	4658      	mov	r0, fp
 80033c0:	6963      	ldr	r3, [r4, #20]
 80033c2:	2600      	movs	r6, #0
 80033c4:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80033c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80033cc:	b22d      	sxth	r5, r5
 80033ce:	f1c8 0800 	rsb	r8, r8, #0
 80033d2:	881c      	ldrh	r4, [r3, #0]
 80033d4:	46aa      	mov	sl, r5
 80033d6:	2c04      	cmp	r4, #4
 80033d8:	bfa6      	itte	ge
 80033da:	685b      	ldrge	r3, [r3, #4]
 80033dc:	3328      	addge	r3, #40	; 0x28
 80033de:	2304      	movlt	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	f8d3 9000 	ldrne.w	r9, [r3]
 80033ea:	46b1      	moveq	r9, r6
 80033ec:	f8d9 4018 	ldr.w	r4, [r9, #24]
 80033f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80033f4:	427f      	negs	r7, r7
 80033f6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80033fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8003402:	435c      	muls	r4, r3
 8003404:	fb0e f404 	mul.w	r4, lr, r4
 8003408:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 800340c:	9437      	str	r4, [sp, #220]	; 0xdc
 800340e:	ac11      	add	r4, sp, #68	; 0x44
 8003410:	f9b4 c000 	ldrsh.w	ip, [r4]
 8003414:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003416:	fb0e f404 	mul.w	r4, lr, r4
 800341a:	9435      	str	r4, [sp, #212]	; 0xd4
 800341c:	ac12      	add	r4, sp, #72	; 0x48
 800341e:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 8003422:	f9b4 c000 	ldrsh.w	ip, [r4]
 8003426:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003428:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 800342c:	435c      	muls	r4, r3
 800342e:	9433      	str	r4, [sp, #204]	; 0xcc
 8003430:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8003432:	2c00      	cmp	r4, #0
 8003434:	f000 812d 	beq.w	8003692 <forward_conv2d_nl_pool+0x4e6>
 8003438:	9038      	str	r0, [sp, #224]	; 0xe0
 800343a:	462c      	mov	r4, r5
 800343c:	9125      	str	r1, [sp, #148]	; 0x94
 800343e:	962f      	str	r6, [sp, #188]	; 0xbc
 8003440:	962e      	str	r6, [sp, #184]	; 0xb8
 8003442:	9324      	str	r3, [sp, #144]	; 0x90
 8003444:	9717      	str	r7, [sp, #92]	; 0x5c
 8003446:	9d02      	ldr	r5, [sp, #8]
 8003448:	9814      	ldr	r0, [sp, #80]	; 0x50
 800344a:	2800      	cmp	r0, #0
 800344c:	dd68      	ble.n	8003520 <forward_conv2d_nl_pool+0x374>
 800344e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003450:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8003452:	9131      	str	r1, [sp, #196]	; 0xc4
 8003454:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003456:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003458:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800345a:	4240      	negs	r0, r0
 800345c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800345e:	960d      	str	r6, [sp, #52]	; 0x34
 8003460:	bfd8      	it	le
 8003462:	2000      	movle	r0, #0
 8003464:	1a89      	subs	r1, r1, r2
 8003466:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003468:	4299      	cmp	r1, r3
 800346a:	9009      	str	r0, [sp, #36]	; 0x24
 800346c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800346e:	b212      	sxth	r2, r2
 8003470:	9008      	str	r0, [sp, #32]
 8003472:	920f      	str	r2, [sp, #60]	; 0x3c
 8003474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003476:	bf28      	it	cs
 8003478:	4619      	movcs	r1, r3
 800347a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800347c:	920c      	str	r2, [sp, #48]	; 0x30
 800347e:	910a      	str	r1, [sp, #40]	; 0x28
 8003480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003482:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8003486:	9206      	str	r2, [sp, #24]
 8003488:	b21b      	sxth	r3, r3
 800348a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800348c:	930e      	str	r3, [sp, #56]	; 0x38
 800348e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8003490:	9107      	str	r1, [sp, #28]
 8003492:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003494:	9203      	str	r2, [sp, #12]
 8003496:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003498:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800349a:	930b      	str	r3, [sp, #44]	; 0x2c
 800349c:	9005      	str	r0, [sp, #20]
 800349e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80034a0:	9104      	str	r1, [sp, #16]
 80034a2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80034a4:	9200      	str	r2, [sp, #0]
 80034a6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80034a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80034aa:	9002      	str	r0, [sp, #8]
 80034ac:	9101      	str	r1, [sp, #4]
 80034ae:	4659      	mov	r1, fp
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fe ff9f 	bl	80023f4 <ai_conv2d_stripe_f32>
 80034b6:	9824      	ldr	r0, [sp, #144]	; 0x90
 80034b8:	b350      	cbz	r0, 8003510 <forward_conv2d_nl_pool+0x364>
 80034ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80034bc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80034be:	9502      	str	r5, [sp, #8]
 80034c0:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 80034c4:	ea4f 0500 	mov.w	r5, r0
 80034c8:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80034cc:	463b      	mov	r3, r7
 80034ce:	4632      	mov	r2, r6
 80034d0:	f8c1 b008 	str.w	fp, [r1, #8]
 80034d4:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 80034d8:	4608      	mov	r0, r1
 80034da:	47c0      	blx	r8
 80034dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80034de:	9902      	ldr	r1, [sp, #8]
 80034e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80034e2:	4407      	add	r7, r0
 80034e4:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80034e8:	1a79      	subs	r1, r7, r1
 80034ea:	4291      	cmp	r1, r2
 80034ec:	6841      	ldr	r1, [r0, #4]
 80034ee:	68c0      	ldr	r0, [r0, #12]
 80034f0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80034f4:	bfa8      	it	ge
 80034f6:	9f02      	ldrge	r7, [sp, #8]
 80034f8:	4593      	cmp	fp, r2
 80034fa:	d302      	bcc.n	8003502 <forward_conv2d_nl_pool+0x356>
 80034fc:	0089      	lsls	r1, r1, #2
 80034fe:	4249      	negs	r1, r1
 8003500:	448b      	add	fp, r1
 8003502:	1e6d      	subs	r5, r5, #1
 8003504:	d1e0      	bne.n	80034c8 <forward_conv2d_nl_pool+0x31c>
 8003506:	9610      	str	r6, [sp, #64]	; 0x40
 8003508:	971c      	str	r7, [sp, #112]	; 0x70
 800350a:	9d02      	ldr	r5, [sp, #8]
 800350c:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8003510:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8003514:	f10a 0a01 	add.w	sl, sl, #1
 8003518:	fa0f fa8a 	sxth.w	sl, sl
 800351c:	68c1      	ldr	r1, [r0, #12]
 800351e:	6081      	str	r1, [r0, #8]
 8003520:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003522:	1e40      	subs	r0, r0, #1
 8003524:	9014      	str	r0, [sp, #80]	; 0x50
 8003526:	d56d      	bpl.n	8003604 <forward_conv2d_nl_pool+0x458>
 8003528:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800352a:	4659      	mov	r1, fp
 800352c:	fb00 f00a 	mul.w	r0, r0, sl
 8003530:	0080      	lsls	r0, r0, #2
 8003532:	4240      	negs	r0, r0
 8003534:	eb0b 0200 	add.w	r2, fp, r0
 8003538:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800353c:	68c3      	ldr	r3, [r0, #12]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf3c      	itt	cc
 8003542:	6847      	ldrcc	r7, [r0, #4]
 8003544:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8003548:	4293      	cmp	r3, r2
 800354a:	d237      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 800354c:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 800354e:	45b2      	cmp	sl, r6
 8003550:	d034      	beq.n	80035bc <forward_conv2d_nl_pool+0x410>
 8003552:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003556:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800355a:	429a      	cmp	r2, r3
 800355c:	f080 802e 	bcs.w	80035bc <forward_conv2d_nl_pool+0x410>
 8003560:	ed92 0a00 	vldr	s0, [r2]
 8003564:	1d12      	adds	r2, r2, #4
 8003566:	ed8b 0a00 	vstr	s0, [fp]
 800356a:	68c6      	ldr	r6, [r0, #12]
 800356c:	6843      	ldr	r3, [r0, #4]
 800356e:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 8003572:	42ba      	cmp	r2, r7
 8003574:	d222      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 8003576:	edd2 0a00 	vldr	s1, [r2]
 800357a:	1d12      	adds	r2, r2, #4
 800357c:	edcb 0a01 	vstr	s1, [fp, #4]
 8003580:	68c3      	ldr	r3, [r0, #12]
 8003582:	6846      	ldr	r6, [r0, #4]
 8003584:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8003588:	42ba      	cmp	r2, r7
 800358a:	d217      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 800358c:	ed92 0a00 	vldr	s0, [r2]
 8003590:	1d12      	adds	r2, r2, #4
 8003592:	ed8b 0a02 	vstr	s0, [fp, #8]
 8003596:	68c3      	ldr	r3, [r0, #12]
 8003598:	6846      	ldr	r6, [r0, #4]
 800359a:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 800359e:	42ba      	cmp	r2, r7
 80035a0:	d20c      	bcs.n	80035bc <forward_conv2d_nl_pool+0x410>
 80035a2:	edd2 0a00 	vldr	s1, [r2]
 80035a6:	1d12      	adds	r2, r2, #4
 80035a8:	edcb 0a03 	vstr	s1, [fp, #12]
 80035ac:	68c3      	ldr	r3, [r0, #12]
 80035ae:	6846      	ldr	r6, [r0, #4]
 80035b0:	f10b 0b10 	add.w	fp, fp, #16
 80035b4:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80035b8:	42ba      	cmp	r2, r7
 80035ba:	d3d1      	bcc.n	8003560 <forward_conv2d_nl_pool+0x3b4>
 80035bc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80035be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80035c2:	189a      	adds	r2, r3, r2
 80035c4:	eba2 020a 	sub.w	r2, r2, sl
 80035c8:	922f      	str	r2, [sp, #188]	; 0xbc
 80035ca:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80035cc:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 80035d0:	68c1      	ldr	r1, [r0, #12]
 80035d2:	6843      	ldr	r3, [r0, #4]
 80035d4:	44b2      	add	sl, r6
 80035d6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80035da:	fa0f fa8a 	sxth.w	sl, sl
 80035de:	460b      	mov	r3, r1
 80035e0:	4593      	cmp	fp, r2
 80035e2:	d30f      	bcc.n	8003604 <forward_conv2d_nl_pool+0x458>
 80035e4:	6841      	ldr	r1, [r0, #4]
 80035e6:	008a      	lsls	r2, r1, #2
 80035e8:	4252      	negs	r2, r2
 80035ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80035ee:	4493      	add	fp, r2
 80035f0:	458b      	cmp	fp, r1
 80035f2:	bf24      	itt	cs
 80035f4:	4493      	addcs	fp, r2
 80035f6:	458b      	cmpcs	fp, r1
 80035f8:	bf21      	itttt	cs
 80035fa:	4493      	addcs	fp, r2
 80035fc:	458b      	cmpcs	fp, r1
 80035fe:	4493      	addcs	fp, r2
 8003600:	458b      	cmpcs	fp, r1
 8003602:	d2ef      	bcs.n	80035e4 <forward_conv2d_nl_pool+0x438>
 8003604:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003606:	4582      	cmp	sl, r0
 8003608:	d339      	bcc.n	800367e <forward_conv2d_nl_pool+0x4d2>
 800360a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800360c:	9825      	ldr	r0, [sp, #148]	; 0x94
 800360e:	9008      	str	r0, [sp, #32]
 8003610:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8003612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003614:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8003616:	1c52      	adds	r2, r2, #1
 8003618:	9911      	ldr	r1, [sp, #68]	; 0x44
 800361a:	922e      	str	r2, [sp, #184]	; 0xb8
 800361c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800361e:	b280      	uxth	r0, r0
 8003620:	b29b      	uxth	r3, r3
 8003622:	9004      	str	r0, [sp, #16]
 8003624:	b2a0      	uxth	r0, r4
 8003626:	b292      	uxth	r2, r2
 8003628:	9003      	str	r0, [sp, #12]
 800362a:	9206      	str	r2, [sp, #24]
 800362c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800362e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8003630:	9305      	str	r3, [sp, #20]
 8003632:	b292      	uxth	r2, r2
 8003634:	ebaa 0a01 	sub.w	sl, sl, r1
 8003638:	2101      	movs	r1, #1
 800363a:	9201      	str	r2, [sp, #4]
 800363c:	9107      	str	r1, [sp, #28]
 800363e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8003640:	b280      	uxth	r0, r0
 8003642:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003644:	9000      	str	r0, [sp, #0]
 8003646:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8003648:	b289      	uxth	r1, r1
 800364a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800364c:	9102      	str	r1, [sp, #8]
 800364e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003650:	1a12      	subs	r2, r2, r0
 8003652:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8003656:	b29b      	uxth	r3, r3
 8003658:	b292      	uxth	r2, r2
 800365a:	b289      	uxth	r1, r1
 800365c:	fa0f fa8a 	sxth.w	sl, sl
 8003660:	47b0      	blx	r6
 8003662:	9825      	ldr	r0, [sp, #148]	; 0x94
 8003664:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8003666:	6881      	ldr	r1, [r0, #8]
 8003668:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800366c:	6083      	str	r3, [r0, #8]
 800366e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8003670:	1a61      	subs	r1, r4, r1
 8003672:	2900      	cmp	r1, #0
 8003674:	bfc3      	ittte	gt
 8003676:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8003678:	1a24      	subgt	r4, r4, r0
 800367a:	b224      	sxthgt	r4, r4
 800367c:	2400      	movle	r4, #0
 800367e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003680:	9820      	ldr	r0, [sp, #128]	; 0x80
 8003682:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8003684:	1841      	adds	r1, r0, r1
 8003686:	9117      	str	r1, [sp, #92]	; 0x5c
 8003688:	9922      	ldr	r1, [sp, #136]	; 0x88
 800368a:	428a      	cmp	r2, r1
 800368c:	f4ff aedc 	bcc.w	8003448 <forward_conv2d_nl_pool+0x29c>
 8003690:	9925      	ldr	r1, [sp, #148]	; 0x94
 8003692:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8003696:	68c2      	ldr	r2, [r0, #12]
 8003698:	6082      	str	r2, [r0, #8]
 800369a:	68c8      	ldr	r0, [r1, #12]
 800369c:	6088      	str	r0, [r1, #8]
 800369e:	b039      	add	sp, #228	; 0xe4
 80036a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080036a4 <forward_dense>:
 80036a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a8:	b081      	sub	sp, #4
 80036aa:	ed2d 8b02 	vpush	{d8}
 80036ae:	b088      	sub	sp, #32
 80036b0:	6944      	ldr	r4, [r0, #20]
 80036b2:	8820      	ldrh	r0, [r4, #0]
 80036b4:	2800      	cmp	r0, #0
 80036b6:	bf1a      	itte	ne
 80036b8:	6861      	ldrne	r1, [r4, #4]
 80036ba:	1d09      	addne	r1, r1, #4
 80036bc:	2104      	moveq	r1, #4
 80036be:	6809      	ldr	r1, [r1, #0]
 80036c0:	2900      	cmp	r1, #0
 80036c2:	bf14      	ite	ne
 80036c4:	680a      	ldrne	r2, [r1, #0]
 80036c6:	2200      	moveq	r2, #0
 80036c8:	2802      	cmp	r0, #2
 80036ca:	bfa6      	itte	ge
 80036cc:	6861      	ldrge	r1, [r4, #4]
 80036ce:	3110      	addge	r1, #16
 80036d0:	2104      	movlt	r1, #4
 80036d2:	6809      	ldr	r1, [r1, #0]
 80036d4:	2900      	cmp	r1, #0
 80036d6:	bf14      	ite	ne
 80036d8:	680f      	ldrne	r7, [r1, #0]
 80036da:	2700      	moveq	r7, #0
 80036dc:	2802      	cmp	r0, #2
 80036de:	bfc6      	itte	gt
 80036e0:	6861      	ldrgt	r1, [r4, #4]
 80036e2:	311c      	addgt	r1, #28
 80036e4:	2104      	movle	r1, #4
 80036e6:	6809      	ldr	r1, [r1, #0]
 80036e8:	2900      	cmp	r1, #0
 80036ea:	bf14      	ite	ne
 80036ec:	680b      	ldrne	r3, [r1, #0]
 80036ee:	2300      	moveq	r3, #0
 80036f0:	2802      	cmp	r0, #2
 80036f2:	dd0b      	ble.n	800370c <forward_dense+0x68>
 80036f4:	6861      	ldr	r1, [r4, #4]
 80036f6:	f111 0018 	adds.w	r0, r1, #24
 80036fa:	d007      	beq.n	800370c <forward_dense+0x68>
 80036fc:	8b0c      	ldrh	r4, [r1, #24]
 80036fe:	2c02      	cmp	r4, #2
 8003700:	db04      	blt.n	800370c <forward_dense+0x68>
 8003702:	69c8      	ldr	r0, [r1, #28]
 8003704:	b110      	cbz	r0, 800370c <forward_dense+0x68>
 8003706:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800370a:	e001      	b.n	8003710 <forward_dense+0x6c>
 800370c:	f04f 0a00 	mov.w	sl, #0
 8003710:	68d0      	ldr	r0, [r2, #12]
 8003712:	699e      	ldr	r6, [r3, #24]
 8003714:	6992      	ldr	r2, [r2, #24]
 8003716:	6844      	ldr	r4, [r0, #4]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800371e:	f8d6 e000 	ldr.w	lr, [r6]
 8003722:	69bf      	ldr	r7, [r7, #24]
 8003724:	6881      	ldr	r1, [r0, #8]
 8003726:	68c0      	ldr	r0, [r0, #12]
 8003728:	ea4f 19ee 	mov.w	r9, lr, asr #7
 800372c:	ea4f 586e 	mov.w	r8, lr, asr #21
 8003730:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8003734:	f00e 0e0f 	and.w	lr, lr, #15
 8003738:	4341      	muls	r1, r0
 800373a:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 800373e:	f008 0803 	and.w	r8, r8, #3
 8003742:	fa29 f908 	lsr.w	r9, r9, r8
 8003746:	2000      	movs	r0, #0
 8003748:	f1be 0f04 	cmp.w	lr, #4
 800374c:	68bf      	ldr	r7, [r7, #8]
 800374e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8003752:	bf14      	ite	ne
 8003754:	f1be 0f08 	cmpne.w	lr, #8
 8003758:	68f0      	ldreq	r0, [r6, #12]
 800375a:	695e      	ldr	r6, [r3, #20]
 800375c:	2900      	cmp	r1, #0
 800375e:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8003762:	6876      	ldr	r6, [r6, #4]
 8003764:	f000 80ee 	beq.w	8003944 <forward_dense+0x2a0>
 8003768:	9307      	str	r3, [sp, #28]
 800376a:	f8cd a014 	str.w	sl, [sp, #20]
 800376e:	f8cd c018 	str.w	ip, [sp, #24]
 8003772:	9201      	str	r2, [sp, #4]
 8003774:	9104      	str	r1, [sp, #16]
 8003776:	9907      	ldr	r1, [sp, #28]
 8003778:	698b      	ldr	r3, [r1, #24]
 800377a:	9905      	ldr	r1, [sp, #20]
 800377c:	2900      	cmp	r1, #0
 800377e:	bf1a      	itte	ne
 8003780:	6989      	ldrne	r1, [r1, #24]
 8003782:	688a      	ldrne	r2, [r1, #8]
 8003784:	2200      	moveq	r2, #0
 8003786:	2800      	cmp	r0, #0
 8003788:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800378c:	9b01      	ldr	r3, [sp, #4]
 800378e:	f040 80ab 	bne.w	80038e8 <forward_dense+0x244>
 8003792:	429f      	cmp	r7, r3
 8003794:	f080 80c9 	bcs.w	800392a <forward_dense+0x286>
 8003798:	9003      	str	r0, [sp, #12]
 800379a:	2a00      	cmp	r2, #0
 800379c:	4620      	mov	r0, r4
 800379e:	46c6      	mov	lr, r8
 80037a0:	46dc      	mov	ip, fp
 80037a2:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8003950 <.text_13>
 80037a6:	bf0e      	itee	eq
 80037a8:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 8003950 <.text_13>
 80037ac:	ed92 0a00 	vldrne	s0, [r2]
 80037b0:	1d12      	addne	r2, r2, #4
 80037b2:	2c04      	cmp	r4, #4
 80037b4:	d35d      	bcc.n	8003872 <forward_dense+0x1ce>
 80037b6:	08a1      	lsrs	r1, r4, #2
 80037b8:	07cd      	lsls	r5, r1, #31
 80037ba:	d51c      	bpl.n	80037f6 <forward_dense+0x152>
 80037bc:	ed9c 4a00 	vldr	s8, [ip]
 80037c0:	1f00      	subs	r0, r0, #4
 80037c2:	edde 4a00 	vldr	s9, [lr]
 80037c6:	ed9c 3a01 	vldr	s6, [ip, #4]
 80037ca:	edde 3a01 	vldr	s7, [lr, #4]
 80037ce:	ee44 0a24 	vmla.f32	s1, s8, s9
 80037d2:	ed9c 2a02 	vldr	s4, [ip, #8]
 80037d6:	edde 2a02 	vldr	s5, [lr, #8]
 80037da:	ee43 0a23 	vmla.f32	s1, s6, s7
 80037de:	ed9c 1a03 	vldr	s2, [ip, #12]
 80037e2:	f10c 0c10 	add.w	ip, ip, #16
 80037e6:	edde 1a03 	vldr	s3, [lr, #12]
 80037ea:	f10e 0e10 	add.w	lr, lr, #16
 80037ee:	ee42 0a22 	vmla.f32	s1, s4, s5
 80037f2:	ee41 0a21 	vmla.f32	s1, s2, s3
 80037f6:	0849      	lsrs	r1, r1, #1
 80037f8:	f000 803b 	beq.w	8003872 <forward_dense+0x1ce>
 80037fc:	ed9c 1a03 	vldr	s2, [ip, #12]
 8003800:	3808      	subs	r0, #8
 8003802:	edde 1a03 	vldr	s3, [lr, #12]
 8003806:	1e49      	subs	r1, r1, #1
 8003808:	ed9c 2a02 	vldr	s4, [ip, #8]
 800380c:	edde 2a02 	vldr	s5, [lr, #8]
 8003810:	ed9c 3a01 	vldr	s6, [ip, #4]
 8003814:	edde 3a01 	vldr	s7, [lr, #4]
 8003818:	ed9c 4a00 	vldr	s8, [ip]
 800381c:	f10c 0c10 	add.w	ip, ip, #16
 8003820:	edde 4a00 	vldr	s9, [lr]
 8003824:	f10e 0e10 	add.w	lr, lr, #16
 8003828:	ee44 0a24 	vmla.f32	s1, s8, s9
 800382c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8003830:	ee42 0a22 	vmla.f32	s1, s4, s5
 8003834:	ed9c 8a00 	vldr	s16, [ip]
 8003838:	edde 8a00 	vldr	s17, [lr]
 800383c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8003840:	ed9c 7a01 	vldr	s14, [ip, #4]
 8003844:	edde 7a01 	vldr	s15, [lr, #4]
 8003848:	ee48 0a28 	vmla.f32	s1, s16, s17
 800384c:	ed9c 6a02 	vldr	s12, [ip, #8]
 8003850:	edde 6a02 	vldr	s13, [lr, #8]
 8003854:	ee47 0a27 	vmla.f32	s1, s14, s15
 8003858:	ed9c 5a03 	vldr	s10, [ip, #12]
 800385c:	f10c 0c10 	add.w	ip, ip, #16
 8003860:	edde 5a03 	vldr	s11, [lr, #12]
 8003864:	f10e 0e10 	add.w	lr, lr, #16
 8003868:	ee46 0a26 	vmla.f32	s1, s12, s13
 800386c:	ee45 0a25 	vmla.f32	s1, s10, s11
 8003870:	d1c4      	bne.n	80037fc <forward_dense+0x158>
 8003872:	b378      	cbz	r0, 80038d4 <forward_dense+0x230>
 8003874:	f010 0103 	ands.w	r1, r0, #3
 8003878:	d00b      	beq.n	8003892 <forward_dense+0x1ee>
 800387a:	1e49      	subs	r1, r1, #1
 800387c:	ed9c 1a00 	vldr	s2, [ip]
 8003880:	edde 1a00 	vldr	s3, [lr]
 8003884:	f10e 0e04 	add.w	lr, lr, #4
 8003888:	ee41 0a21 	vmla.f32	s1, s2, s3
 800388c:	f10c 0c04 	add.w	ip, ip, #4
 8003890:	d1f3      	bne.n	800387a <forward_dense+0x1d6>
 8003892:	0880      	lsrs	r0, r0, #2
 8003894:	f000 801e 	beq.w	80038d4 <forward_dense+0x230>
 8003898:	ed9c 2a00 	vldr	s4, [ip]
 800389c:	1e40      	subs	r0, r0, #1
 800389e:	ed9e 1a00 	vldr	s2, [lr]
 80038a2:	eddc 1a01 	vldr	s3, [ip, #4]
 80038a6:	edde 2a01 	vldr	s5, [lr, #4]
 80038aa:	ee42 0a01 	vmla.f32	s1, s4, s2
 80038ae:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80038b2:	ed9c 2a02 	vldr	s4, [ip, #8]
 80038b6:	ed9e 1a02 	vldr	s2, [lr, #8]
 80038ba:	eddc 1a03 	vldr	s3, [ip, #12]
 80038be:	f10c 0c10 	add.w	ip, ip, #16
 80038c2:	edde 2a03 	vldr	s5, [lr, #12]
 80038c6:	f10e 0e10 	add.w	lr, lr, #16
 80038ca:	ee42 0a01 	vmla.f32	s1, s4, s2
 80038ce:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80038d2:	d1e1      	bne.n	8003898 <forward_dense+0x1f4>
 80038d4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80038d8:	44b3      	add	fp, r6
 80038da:	ed87 0a00 	vstr	s0, [r7]
 80038de:	1d3f      	adds	r7, r7, #4
 80038e0:	429f      	cmp	r7, r3
 80038e2:	f4ff af5a 	bcc.w	800379a <forward_dense+0xf6>
 80038e6:	e01f      	b.n	8003928 <forward_dense+0x284>
 80038e8:	429f      	cmp	r7, r3
 80038ea:	d21e      	bcs.n	800392a <forward_dense+0x286>
 80038ec:	469a      	mov	sl, r3
 80038ee:	9003      	str	r0, [sp, #12]
 80038f0:	4615      	mov	r5, r2
 80038f2:	2d00      	cmp	r5, #0
 80038f4:	a802      	add	r0, sp, #8
 80038f6:	bf19      	ittee	ne
 80038f8:	f855 1b04 	ldrne.w	r1, [r5], #4
 80038fc:	9102      	strne	r1, [sp, #8]
 80038fe:	2300      	moveq	r3, #0
 8003900:	9302      	streq	r3, [sp, #8]
 8003902:	f1b9 0f04 	cmp.w	r9, #4
 8003906:	9400      	str	r4, [sp, #0]
 8003908:	4643      	mov	r3, r8
 800390a:	9a03      	ldr	r2, [sp, #12]
 800390c:	4659      	mov	r1, fp
 800390e:	d103      	bne.n	8003918 <forward_dense+0x274>
 8003910:	f7ff f9d2 	bl	8002cb8 <ai_dict4_dot_array_f32>
 8003914:	e002      	b.n	800391c <forward_dense+0x278>
 8003916:	bf00      	nop
 8003918:	f7ff f85e 	bl	80029d8 <ai_dict8_dot_array_f32>
 800391c:	9802      	ldr	r0, [sp, #8]
 800391e:	44b3      	add	fp, r6
 8003920:	f847 0b04 	str.w	r0, [r7], #4
 8003924:	4557      	cmp	r7, sl
 8003926:	d3e4      	bcc.n	80038f2 <forward_dense+0x24e>
 8003928:	9803      	ldr	r0, [sp, #12]
 800392a:	9a01      	ldr	r2, [sp, #4]
 800392c:	9b06      	ldr	r3, [sp, #24]
 800392e:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8003932:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8003936:	9a04      	ldr	r2, [sp, #16]
 8003938:	f8cd e004 	str.w	lr, [sp, #4]
 800393c:	1e52      	subs	r2, r2, #1
 800393e:	9204      	str	r2, [sp, #16]
 8003940:	f47f af19 	bne.w	8003776 <forward_dense+0xd2>
 8003944:	b008      	add	sp, #32
 8003946:	ecbd 8b02 	vpop	{d8}
 800394a:	b001      	add	sp, #4
 800394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003950 <.text_13>:
 8003950:	00000000 	.word	0x00000000

08003954 <forward_gemm>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b091      	sub	sp, #68	; 0x44
 800395a:	4604      	mov	r4, r0
 800395c:	6961      	ldr	r1, [r4, #20]
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	8808      	ldrh	r0, [r1, #0]
 8003962:	2800      	cmp	r0, #0
 8003964:	bf1a      	itte	ne
 8003966:	6849      	ldrne	r1, [r1, #4]
 8003968:	1d0a      	addne	r2, r1, #4
 800396a:	2204      	moveq	r2, #4
 800396c:	6810      	ldr	r0, [r2, #0]
 800396e:	8819      	ldrh	r1, [r3, #0]
 8003970:	2800      	cmp	r0, #0
 8003972:	bf14      	ite	ne
 8003974:	6805      	ldrne	r5, [r0, #0]
 8003976:	2500      	moveq	r5, #0
 8003978:	2900      	cmp	r1, #0
 800397a:	bf1d      	ittte	ne
 800397c:	6858      	ldrne	r0, [r3, #4]
 800397e:	2800      	cmpne	r0, #0
 8003980:	f8b0 c000 	ldrhne.w	ip, [r0]
 8003984:	f04f 0c00 	moveq.w	ip, #0
 8003988:	2902      	cmp	r1, #2
 800398a:	bfa6      	itte	ge
 800398c:	6858      	ldrge	r0, [r3, #4]
 800398e:	3010      	addge	r0, #16
 8003990:	2004      	movlt	r0, #4
 8003992:	6800      	ldr	r0, [r0, #0]
 8003994:	2800      	cmp	r0, #0
 8003996:	bf14      	ite	ne
 8003998:	6801      	ldrne	r1, [r0, #0]
 800399a:	2100      	moveq	r1, #0
 800399c:	2600      	movs	r6, #0
 800399e:	2700      	movs	r7, #0
 80039a0:	f1bc 0f03 	cmp.w	ip, #3
 80039a4:	d106      	bne.n	80039b4 <forward_gemm+0x60>
 80039a6:	6810      	ldr	r0, [r2, #0]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d023      	beq.n	80039f4 <forward_gemm+0xa0>
 80039ac:	6846      	ldr	r6, [r0, #4]
 80039ae:	d021      	beq.n	80039f4 <forward_gemm+0xa0>
 80039b0:	6887      	ldr	r7, [r0, #8]
 80039b2:	e01f      	b.n	80039f4 <forward_gemm+0xa0>
 80039b4:	f1bc 0f02 	cmp.w	ip, #2
 80039b8:	d10c      	bne.n	80039d4 <forward_gemm+0x80>
 80039ba:	6810      	ldr	r0, [r2, #0]
 80039bc:	b100      	cbz	r0, 80039c0 <forward_gemm+0x6c>
 80039be:	6846      	ldr	r6, [r0, #4]
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	2a02      	cmp	r2, #2
 80039c4:	bfc6      	itte	gt
 80039c6:	6858      	ldrgt	r0, [r3, #4]
 80039c8:	301c      	addgt	r0, #28
 80039ca:	2004      	movle	r0, #4
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	b188      	cbz	r0, 80039f4 <forward_gemm+0xa0>
 80039d0:	6807      	ldr	r7, [r0, #0]
 80039d2:	e00f      	b.n	80039f4 <forward_gemm+0xa0>
 80039d4:	f1bc 0f01 	cmp.w	ip, #1
 80039d8:	d10c      	bne.n	80039f4 <forward_gemm+0xa0>
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	2a02      	cmp	r2, #2
 80039de:	bfc6      	itte	gt
 80039e0:	6858      	ldrgt	r0, [r3, #4]
 80039e2:	f100 021c 	addgt.w	r2, r0, #28
 80039e6:	2204      	movle	r2, #4
 80039e8:	6810      	ldr	r0, [r2, #0]
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d002      	beq.n	80039f4 <forward_gemm+0xa0>
 80039ee:	6806      	ldr	r6, [r0, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6847      	ldrne	r7, [r0, #4]
 80039f4:	68c8      	ldr	r0, [r1, #12]
 80039f6:	6989      	ldr	r1, [r1, #24]
 80039f8:	688b      	ldr	r3, [r1, #8]
 80039fa:	68c1      	ldr	r1, [r0, #12]
 80039fc:	6842      	ldr	r2, [r0, #4]
 80039fe:	a806      	add	r0, sp, #24
 8003a00:	b292      	uxth	r2, r2
 8003a02:	b289      	uxth	r1, r1
 8003a04:	f003 f96a 	bl	8006cdc <arm_mat_init_f32>
 8003a08:	69a9      	ldr	r1, [r5, #24]
 8003a0a:	68e8      	ldr	r0, [r5, #12]
 8003a0c:	688b      	ldr	r3, [r1, #8]
 8003a0e:	6842      	ldr	r2, [r0, #4]
 8003a10:	68c1      	ldr	r1, [r0, #12]
 8003a12:	a804      	add	r0, sp, #16
 8003a14:	b292      	uxth	r2, r2
 8003a16:	b289      	uxth	r1, r1
 8003a18:	f003 f960 	bl	8006cdc <arm_mat_init_f32>
 8003a1c:	69b1      	ldr	r1, [r6, #24]
 8003a1e:	68f0      	ldr	r0, [r6, #12]
 8003a20:	688b      	ldr	r3, [r1, #8]
 8003a22:	6842      	ldr	r2, [r0, #4]
 8003a24:	68c1      	ldr	r1, [r0, #12]
 8003a26:	a802      	add	r0, sp, #8
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	b289      	uxth	r1, r1
 8003a2c:	f003 f956 	bl	8006cdc <arm_mat_init_f32>
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	688b      	ldr	r3, [r1, #8]
 8003a36:	6842      	ldr	r2, [r0, #4]
 8003a38:	68c1      	ldr	r1, [r0, #12]
 8003a3a:	4668      	mov	r0, sp
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	b289      	uxth	r1, r1
 8003a40:	f003 f94c 	bl	8006cdc <arm_mat_init_f32>
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	f8bd e010 	ldrh.w	lr, [sp, #16]
 8003a4a:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 8003a4e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8003a52:	ed94 0a07 	vldr	s0, [r4, #28]
 8003a56:	9a05      	ldr	r2, [sp, #20]
 8003a58:	edd4 0a06 	vldr	s1, [r4, #24]
 8003a5c:	9308      	str	r3, [sp, #32]
 8003a5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8003a66:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003a70:	f8bd c000 	ldrh.w	ip, [sp]
 8003a74:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a78:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8003a7c:	9c07      	ldr	r4, [sp, #28]
 8003a7e:	bf0c      	ite	eq
 8003a80:	4672      	moveq	r2, lr
 8003a82:	4642      	movne	r2, r8
 8003a84:	f1ba 0f01 	cmp.w	sl, #1
 8003a88:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8003a8c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003a90:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8003a94:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8003a98:	bf0c      	ite	eq
 8003a9a:	4699      	moveq	r9, r3
 8003a9c:	f04f 0904 	movne.w	r9, #4
 8003aa0:	f1bc 0f01 	cmp.w	ip, #1
 8003aa4:	d105      	bne.n	8003ab2 <forward_gemm+0x15e>
 8003aa6:	f1ba 0f01 	cmp.w	sl, #1
 8003aaa:	d005      	beq.n	8003ab8 <forward_gemm+0x164>
 8003aac:	f1cb 0a00 	rsb	sl, fp, #0
 8003ab0:	e003      	b.n	8003aba <forward_gemm+0x166>
 8003ab2:	f1ba 0f01 	cmp.w	sl, #1
 8003ab6:	d000      	beq.n	8003aba <forward_gemm+0x166>
 8003ab8:	469a      	mov	sl, r3
 8003aba:	2800      	cmp	r0, #0
 8003abc:	fa0f fa8a 	sxth.w	sl, sl
 8003ac0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003ac4:	bf0c      	ite	eq
 8003ac6:	46f4      	moveq	ip, lr
 8003ac8:	46c4      	movne	ip, r8
 8003aca:	45b4      	cmp	ip, r6
 8003acc:	f040 808d 	bne.w	8003bea <forward_gemm+0x296>
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	9109      	streq	r1, [sp, #36]	; 0x24
 8003ad6:	9709      	strne	r7, [sp, #36]	; 0x24
 8003ad8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8003adc:	45dc      	cmp	ip, fp
 8003ade:	f040 8084 	bne.w	8003bea <forward_gemm+0x296>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	bf0c      	ite	eq
 8003ae6:	46c4      	moveq	ip, r8
 8003ae8:	46f4      	movne	ip, lr
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	bf0c      	ite	eq
 8003aee:	46ba      	moveq	sl, r7
 8003af0:	468a      	movne	sl, r1
 8003af2:	45d4      	cmp	ip, sl
 8003af4:	d179      	bne.n	8003bea <forward_gemm+0x296>
 8003af6:	9e08      	ldr	r6, [sp, #32]
 8003af8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003afc:	9410      	str	r4, [sp, #64]	; 0x40
 8003afe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8003b02:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003b06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b08:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 8003b0c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b12:	eb02 0a84 	add.w	sl, r2, r4, lsl #2
 8003b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b18:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8003b1c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8003b20:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8003b24:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8003db4 <.text_17>
 8003b2e:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8003b32:	bf0c      	ite	eq
 8003b34:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 8003b38:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 8003b3c:	fa1f fb88 	uxth.w	fp, r8
 8003b40:	f1bb 0f00 	cmp.w	fp, #0
 8003b44:	d019      	beq.n	8003b7a <forward_gemm+0x226>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f1a8 0801 	sub.w	r8, r8, #1
 8003b4c:	edde 1a00 	vldr	s3, [lr]
 8003b50:	ed93 2a00 	vldr	s4, [r3]
 8003b54:	bf0c      	ite	eq
 8003b56:	f04f 0b04 	moveq.w	fp, #4
 8003b5a:	46a3      	movne	fp, r4
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	44de      	add	lr, fp
 8003b60:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003b64:	bf0c      	ite	eq
 8003b66:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8003b6a:	f04f 0b04 	movne.w	fp, #4
 8003b6e:	445b      	add	r3, fp
 8003b70:	fa1f fb88 	uxth.w	fp, r8
 8003b74:	f1bb 0f00 	cmp.w	fp, #0
 8003b78:	d1e5      	bne.n	8003b46 <forward_gemm+0x1f2>
 8003b7a:	1e52      	subs	r2, r2, #1
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	002b      	movs	r3, r5
 8003b80:	ee20 1a81 	vmul.f32	s2, s1, s2
 8003b84:	edd6 1a00 	vldr	s3, [r6]
 8003b88:	444e      	add	r6, r9
 8003b8a:	ee00 1a21 	vmla.f32	s2, s0, s3
 8003b8e:	ed8a 1a00 	vstr	s2, [sl]
 8003b92:	f10a 0a04 	add.w	sl, sl, #4
 8003b96:	bf0e      	itee	eq
 8003b98:	1a8b      	subeq	r3, r1, r2
 8003b9a:	1abb      	subne	r3, r7, r2
 8003b9c:	434b      	mulne	r3, r1
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8003ba4:	d1c0      	bne.n	8003b28 <forward_gemm+0x1d4>
 8003ba6:	f8bd a022 	ldrh.w	sl, [sp, #34]	; 0x22
 8003baa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bb0:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 8003bb4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003bb8:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003bbc:	44da      	add	sl, fp
 8003bbe:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
 8003bc2:	b100      	cbz	r0, 8003bc6 <forward_gemm+0x272>
 8003bc4:	2404      	movs	r4, #4
 8003bc6:	eb02 0c04 	add.w	ip, r2, r4
 8003bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bcc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003bd0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8003bd4:	f1a4 0a01 	sub.w	sl, r4, #1
 8003bd8:	f8ad a020 	strh.w	sl, [sp, #32]
 8003bdc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	d190      	bne.n	8003b06 <forward_gemm+0x1b2>
 8003be4:	b011      	add	sp, #68	; 0x44
 8003be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bea:	fb0b f606 	mul.w	r6, fp, r6
 8003bee:	2e00      	cmp	r6, #0
 8003bf0:	ddf8      	ble.n	8003be4 <forward_gemm+0x290>
 8003bf2:	f016 0003 	ands.w	r0, r6, #3
 8003bf6:	d003      	beq.n	8003c00 <forward_gemm+0x2ac>
 8003bf8:	1e40      	subs	r0, r0, #1
 8003bfa:	f844 3b04 	str.w	r3, [r4], #4
 8003bfe:	d1fb      	bne.n	8003bf8 <forward_gemm+0x2a4>
 8003c00:	08b1      	lsrs	r1, r6, #2
 8003c02:	d0ef      	beq.n	8003be4 <forward_gemm+0x290>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	6063      	str	r3, [r4, #4]
 8003c08:	60a3      	str	r3, [r4, #8]
 8003c0a:	60e3      	str	r3, [r4, #12]
 8003c0c:	3410      	adds	r4, #16
 8003c0e:	1e49      	subs	r1, r1, #1
 8003c10:	d1f8      	bne.n	8003c04 <forward_gemm+0x2b0>
 8003c12:	b011      	add	sp, #68	; 0x44
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c18 <forward_matmul>:
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1c:	b08b      	sub	sp, #44	; 0x2c
 8003c1e:	6944      	ldr	r4, [r0, #20]
 8003c20:	8822      	ldrh	r2, [r4, #0]
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	bf1a      	itte	ne
 8003c26:	6860      	ldrne	r0, [r4, #4]
 8003c28:	1d03      	addne	r3, r0, #4
 8003c2a:	2304      	moveq	r3, #4
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	2900      	cmp	r1, #0
 8003c30:	bf14      	ite	ne
 8003c32:	6808      	ldrne	r0, [r1, #0]
 8003c34:	2000      	moveq	r0, #0
 8003c36:	2900      	cmp	r1, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8003c3e:	f04f 0b00 	moveq.w	fp, #0
 8003c42:	2a02      	cmp	r2, #2
 8003c44:	bfa6      	itte	ge
 8003c46:	6861      	ldrge	r1, [r4, #4]
 8003c48:	3110      	addge	r1, #16
 8003c4a:	2104      	movlt	r1, #4
 8003c4c:	6809      	ldr	r1, [r1, #0]
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	bf14      	ite	ne
 8003c52:	680b      	ldrne	r3, [r1, #0]
 8003c54:	2300      	moveq	r3, #0
 8003c56:	f1bb 0f00 	cmp.w	fp, #0
 8003c5a:	d108      	bne.n	8003c6e <forward_matmul+0x56>
 8003c5c:	2a02      	cmp	r2, #2
 8003c5e:	bfc6      	itte	gt
 8003c60:	6861      	ldrgt	r1, [r4, #4]
 8003c62:	311c      	addgt	r1, #28
 8003c64:	2104      	movle	r1, #4
 8003c66:	6809      	ldr	r1, [r1, #0]
 8003c68:	b109      	cbz	r1, 8003c6e <forward_matmul+0x56>
 8003c6a:	f8d1 b000 	ldr.w	fp, [r1]
 8003c6e:	68dd      	ldr	r5, [r3, #12]
 8003c70:	68c4      	ldr	r4, [r0, #12]
 8003c72:	f8db 900c 	ldr.w	r9, [fp, #12]
 8003c76:	686e      	ldr	r6, [r5, #4]
 8003c78:	f8d4 e000 	ldr.w	lr, [r4]
 8003c7c:	f8d5 a000 	ldr.w	sl, [r5]
 8003c80:	f8d9 2000 	ldr.w	r2, [r9]
 8003c84:	68a1      	ldr	r1, [r4, #8]
 8003c86:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8003c8a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8003c8e:	68ef      	ldr	r7, [r5, #12]
 8003c90:	9706      	str	r7, [sp, #24]
 8003c92:	68e7      	ldr	r7, [r4, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	fb01 f50e 	mul.w	r5, r1, lr
 8003c9a:	434f      	muls	r7, r1
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	fb0e f707 	mul.w	r7, lr, r7
 8003ca2:	970a      	str	r7, [sp, #40]	; 0x28
 8003ca4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8003ca8:	fb08 f404 	mul.w	r4, r8, r4
 8003cac:	fb08 f802 	mul.w	r8, r8, r2
 8003cb0:	4354      	muls	r4, r2
 8003cb2:	9409      	str	r4, [sp, #36]	; 0x24
 8003cb4:	2e00      	cmp	r6, #0
 8003cb6:	d077      	beq.n	8003da8 <forward_matmul+0x190>
 8003cb8:	2400      	movs	r4, #0
 8003cba:	46a1      	mov	r9, r4
 8003cbc:	9602      	str	r6, [sp, #8]
 8003cbe:	9e06      	ldr	r6, [sp, #24]
 8003cc0:	2e00      	cmp	r6, #0
 8003cc2:	d067      	beq.n	8003d94 <forward_matmul+0x17c>
 8003cc4:	9f06      	ldr	r7, [sp, #24]
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	9701      	str	r7, [sp, #4]
 8003cca:	f8cd c00c 	str.w	ip, [sp, #12]
 8003cce:	9505      	str	r5, [sp, #20]
 8003cd0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003cd4:	f1bc 0f00 	cmp.w	ip, #0
 8003cd8:	d051      	beq.n	8003d7e <forward_matmul+0x166>
 8003cda:	f8cd a010 	str.w	sl, [sp, #16]
 8003cde:	f04f 0a00 	mov.w	sl, #0
 8003ce2:	f8cd c000 	str.w	ip, [sp]
 8003ce6:	9207      	str	r2, [sp, #28]
 8003ce8:	9a04      	ldr	r2, [sp, #16]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d03e      	beq.n	8003d6c <forward_matmul+0x154>
 8003cee:	f04f 0c00 	mov.w	ip, #0
 8003cf2:	9008      	str	r0, [sp, #32]
 8003cf4:	9808      	ldr	r0, [sp, #32]
 8003cf6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003db4 <.text_17>
 8003cfa:	6987      	ldr	r7, [r0, #24]
 8003cfc:	f8db 0018 	ldr.w	r0, [fp, #24]
 8003d00:	68bd      	ldr	r5, [r7, #8]
 8003d02:	6887      	ldr	r7, [r0, #8]
 8003d04:	192d      	adds	r5, r5, r4
 8003d06:	19ad      	adds	r5, r5, r6
 8003d08:	4465      	add	r5, ip
 8003d0a:	444f      	add	r7, r9
 8003d0c:	4457      	add	r7, sl
 8003d0e:	4467      	add	r7, ip
 8003d10:	b321      	cbz	r1, 8003d5c <forward_matmul+0x144>
 8003d12:	07c8      	lsls	r0, r1, #31
 8003d14:	d509      	bpl.n	8003d2a <forward_matmul+0x112>
 8003d16:	edd5 0a00 	vldr	s1, [r5]
 8003d1a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003d1e:	ed97 1a00 	vldr	s2, [r7]
 8003d22:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003d26:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003d2a:	0848      	lsrs	r0, r1, #1
 8003d2c:	f000 8016 	beq.w	8003d5c <forward_matmul+0x144>
 8003d30:	edd5 0a00 	vldr	s1, [r5]
 8003d34:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003d38:	ed97 1a00 	vldr	s2, [r7]
 8003d3c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003d40:	1e40      	subs	r0, r0, #1
 8003d42:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003d46:	edd5 1a00 	vldr	s3, [r5]
 8003d4a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003d4e:	ed97 2a00 	vldr	s4, [r7]
 8003d52:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8003d56:	ee01 0a82 	vmla.f32	s0, s3, s4
 8003d5a:	d1e9      	bne.n	8003d30 <forward_matmul+0x118>
 8003d5c:	ed83 0a00 	vstr	s0, [r3]
 8003d60:	1d1b      	adds	r3, r3, #4
 8003d62:	1e52      	subs	r2, r2, #1
 8003d64:	f10c 0c04 	add.w	ip, ip, #4
 8003d68:	d1c4      	bne.n	8003cf4 <forward_matmul+0xdc>
 8003d6a:	9808      	ldr	r0, [sp, #32]
 8003d6c:	9d00      	ldr	r5, [sp, #0]
 8003d6e:	9a07      	ldr	r2, [sp, #28]
 8003d70:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8003d74:	1e6d      	subs	r5, r5, #1
 8003d76:	9500      	str	r5, [sp, #0]
 8003d78:	d1b6      	bne.n	8003ce8 <forward_matmul+0xd0>
 8003d7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003d7e:	9f01      	ldr	r7, [sp, #4]
 8003d80:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003d84:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8003d88:	1e7f      	subs	r7, r7, #1
 8003d8a:	9701      	str	r7, [sp, #4]
 8003d8c:	d1a0      	bne.n	8003cd0 <forward_matmul+0xb8>
 8003d8e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003d92:	9d05      	ldr	r5, [sp, #20]
 8003d94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003d96:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8003d9a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003d9c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8003da0:	9e02      	ldr	r6, [sp, #8]
 8003da2:	1e76      	subs	r6, r6, #1
 8003da4:	9602      	str	r6, [sp, #8]
 8003da6:	d18a      	bne.n	8003cbe <forward_matmul+0xa6>
 8003da8:	b00b      	add	sp, #44	; 0x2c
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003db0 <.text_16>:
 8003db0:	080029d5 	.word	0x080029d5

08003db4 <.text_17>:
 8003db4:	00000000 	.word	0x00000000

08003db8 <ai_shape_get_size>:
 8003db8:	b470      	push	{r4, r5, r6}
 8003dba:	4601      	mov	r1, r0
 8003dbc:	f04f 0201 	mov.w	r2, #1
 8003dc0:	680b      	ldr	r3, [r1, #0]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	d01e      	beq.n	8003e04 <ai_shape_get_size+0x4c>
 8003dc6:	684c      	ldr	r4, [r1, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8003dce:	1f0d      	subs	r5, r1, #4
 8003dd0:	f010 0103 	ands.w	r1, r0, #3
 8003dd4:	f000 8006 	beq.w	8003de4 <ai_shape_get_size+0x2c>
 8003dd8:	f855 6904 	ldr.w	r6, [r5], #-4
 8003ddc:	1e5b      	subs	r3, r3, #1
 8003dde:	4372      	muls	r2, r6
 8003de0:	1e49      	subs	r1, r1, #1
 8003de2:	d1f9      	bne.n	8003dd8 <ai_shape_get_size+0x20>
 8003de4:	0880      	lsrs	r0, r0, #2
 8003de6:	d00d      	beq.n	8003e04 <ai_shape_get_size+0x4c>
 8003de8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8003dec:	3910      	subs	r1, #16
 8003dee:	68cb      	ldr	r3, [r1, #12]
 8003df0:	688c      	ldr	r4, [r1, #8]
 8003df2:	684d      	ldr	r5, [r1, #4]
 8003df4:	f851 6910 	ldr.w	r6, [r1], #-16
 8003df8:	4363      	muls	r3, r4
 8003dfa:	436b      	muls	r3, r5
 8003dfc:	4373      	muls	r3, r6
 8003dfe:	435a      	muls	r2, r3
 8003e00:	1e40      	subs	r0, r0, #1
 8003e02:	d1f4      	bne.n	8003dee <ai_shape_get_size+0x36>
 8003e04:	4610      	mov	r0, r2
 8003e06:	bc70      	pop	{r4, r5, r6}
 8003e08:	4770      	bx	lr
	...

08003e0c <nl_func_acos_array_f32>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	688c      	ldr	r4, [r1, #8]
 8003e10:	6880      	ldr	r0, [r0, #8]
 8003e12:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e1a:	1f0d      	subs	r5, r1, #4
 8003e1c:	1f16      	subs	r6, r2, #4
 8003e1e:	42a5      	cmp	r5, r4
 8003e20:	f0c0 800a 	bcc.w	8003e38 <nl_func_acos_array_f32+0x2c>
 8003e24:	ed95 0a00 	vldr	s0, [r5]
 8003e28:	1f2d      	subs	r5, r5, #4
 8003e2a:	f00d ffc1 	bl	8011db0 <acosf>
 8003e2e:	ed86 0a00 	vstr	s0, [r6]
 8003e32:	1f36      	subs	r6, r6, #4
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d2f5      	bcs.n	8003e24 <nl_func_acos_array_f32+0x18>
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e3c <forward_acos>:
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b081      	sub	sp, #4
 8003e40:	6942      	ldr	r2, [r0, #20]
 8003e42:	f04f 0501 	mov.w	r5, #1
 8003e46:	8811      	ldrh	r1, [r2, #0]
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	bf1a      	itte	ne
 8003e4c:	6850      	ldrne	r0, [r2, #4]
 8003e4e:	1d00      	addne	r0, r0, #4
 8003e50:	2004      	moveq	r0, #4
 8003e52:	6800      	ldr	r0, [r0, #0]
 8003e54:	2800      	cmp	r0, #0
 8003e56:	bf14      	ite	ne
 8003e58:	6803      	ldrne	r3, [r0, #0]
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	2902      	cmp	r1, #2
 8003e5e:	bfa6      	itte	ge
 8003e60:	6850      	ldrge	r0, [r2, #4]
 8003e62:	3010      	addge	r0, #16
 8003e64:	2004      	movlt	r0, #4
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	bf19      	ittee	ne
 8003e6c:	6800      	ldrne	r0, [r0, #0]
 8003e6e:	f100 0418 	addne.w	r4, r0, #24
 8003e72:	2100      	moveq	r1, #0
 8003e74:	f101 0418 	addeq.w	r4, r1, #24
 8003e78:	f103 0108 	add.w	r1, r3, #8
 8003e7c:	680a      	ldr	r2, [r1, #0]
 8003e7e:	0a12      	lsrs	r2, r2, #8
 8003e80:	d01f      	beq.n	8003ec2 <forward_acos+0x86>
 8003e82:	684e      	ldr	r6, [r1, #4]
 8003e84:	4610      	mov	r0, r2
 8003e86:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e8a:	1f0f      	subs	r7, r1, #4
 8003e8c:	f010 0103 	ands.w	r1, r0, #3
 8003e90:	d006      	beq.n	8003ea0 <forward_acos+0x64>
 8003e92:	1e52      	subs	r2, r2, #1
 8003e94:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e98:	1e49      	subs	r1, r1, #1
 8003e9a:	fb0c f505 	mul.w	r5, ip, r5
 8003e9e:	d1f8      	bne.n	8003e92 <forward_acos+0x56>
 8003ea0:	0880      	lsrs	r0, r0, #2
 8003ea2:	d00e      	beq.n	8003ec2 <forward_acos+0x86>
 8003ea4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ea8:	3910      	subs	r1, #16
 8003eaa:	68ca      	ldr	r2, [r1, #12]
 8003eac:	688e      	ldr	r6, [r1, #8]
 8003eae:	684f      	ldr	r7, [r1, #4]
 8003eb0:	f851 c910 	ldr.w	ip, [r1], #-16
 8003eb4:	4372      	muls	r2, r6
 8003eb6:	437a      	muls	r2, r7
 8003eb8:	fb0c f202 	mul.w	r2, ip, r2
 8003ebc:	4355      	muls	r5, r2
 8003ebe:	1e40      	subs	r0, r0, #1
 8003ec0:	d1f3      	bne.n	8003eaa <forward_acos+0x6e>
 8003ec2:	6998      	ldr	r0, [r3, #24]
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	6886      	ldr	r6, [r0, #8]
 8003ec8:	688a      	ldr	r2, [r1, #8]
 8003eca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003ece:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003ed2:	1f07      	subs	r7, r0, #4
 8003ed4:	1f1c      	subs	r4, r3, #4
 8003ed6:	42b7      	cmp	r7, r6
 8003ed8:	f0c0 800a 	bcc.w	8003ef0 <forward_acos+0xb4>
 8003edc:	ed97 0a00 	vldr	s0, [r7]
 8003ee0:	1f3f      	subs	r7, r7, #4
 8003ee2:	f00d ff65 	bl	8011db0 <acosf>
 8003ee6:	ed84 0a00 	vstr	s0, [r4]
 8003eea:	1f24      	subs	r4, r4, #4
 8003eec:	42b7      	cmp	r7, r6
 8003eee:	d2f5      	bcs.n	8003edc <forward_acos+0xa0>
 8003ef0:	b001      	add	sp, #4
 8003ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ef4 <nl_func_acosh_array_f32>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	688c      	ldr	r4, [r1, #8]
 8003ef8:	6880      	ldr	r0, [r0, #8]
 8003efa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003efe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f02:	1f0d      	subs	r5, r1, #4
 8003f04:	1f16      	subs	r6, r2, #4
 8003f06:	42a5      	cmp	r5, r4
 8003f08:	f0c0 800a 	bcc.w	8003f20 <nl_func_acosh_array_f32+0x2c>
 8003f0c:	ed95 0a00 	vldr	s0, [r5]
 8003f10:	1f2d      	subs	r5, r5, #4
 8003f12:	f00d ffa1 	bl	8011e58 <acoshf>
 8003f16:	ed86 0a00 	vstr	s0, [r6]
 8003f1a:	1f36      	subs	r6, r6, #4
 8003f1c:	42a5      	cmp	r5, r4
 8003f1e:	d2f5      	bcs.n	8003f0c <nl_func_acosh_array_f32+0x18>
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f24 <forward_acosh>:
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b081      	sub	sp, #4
 8003f28:	6942      	ldr	r2, [r0, #20]
 8003f2a:	f04f 0501 	mov.w	r5, #1
 8003f2e:	8811      	ldrh	r1, [r2, #0]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	bf1a      	itte	ne
 8003f34:	6850      	ldrne	r0, [r2, #4]
 8003f36:	1d00      	addne	r0, r0, #4
 8003f38:	2004      	moveq	r0, #4
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	6803      	ldrne	r3, [r0, #0]
 8003f42:	2300      	moveq	r3, #0
 8003f44:	2902      	cmp	r1, #2
 8003f46:	bfa6      	itte	ge
 8003f48:	6850      	ldrge	r0, [r2, #4]
 8003f4a:	3010      	addge	r0, #16
 8003f4c:	2004      	movlt	r0, #4
 8003f4e:	6800      	ldr	r0, [r0, #0]
 8003f50:	2800      	cmp	r0, #0
 8003f52:	bf19      	ittee	ne
 8003f54:	6800      	ldrne	r0, [r0, #0]
 8003f56:	f100 0418 	addne.w	r4, r0, #24
 8003f5a:	2100      	moveq	r1, #0
 8003f5c:	f101 0418 	addeq.w	r4, r1, #24
 8003f60:	f103 0108 	add.w	r1, r3, #8
 8003f64:	680a      	ldr	r2, [r1, #0]
 8003f66:	0a12      	lsrs	r2, r2, #8
 8003f68:	d01f      	beq.n	8003faa <forward_acosh+0x86>
 8003f6a:	684e      	ldr	r6, [r1, #4]
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f72:	1f0f      	subs	r7, r1, #4
 8003f74:	f010 0103 	ands.w	r1, r0, #3
 8003f78:	d006      	beq.n	8003f88 <forward_acosh+0x64>
 8003f7a:	1e52      	subs	r2, r2, #1
 8003f7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003f80:	1e49      	subs	r1, r1, #1
 8003f82:	fb0c f505 	mul.w	r5, ip, r5
 8003f86:	d1f8      	bne.n	8003f7a <forward_acosh+0x56>
 8003f88:	0880      	lsrs	r0, r0, #2
 8003f8a:	d00e      	beq.n	8003faa <forward_acosh+0x86>
 8003f8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f90:	3910      	subs	r1, #16
 8003f92:	68ca      	ldr	r2, [r1, #12]
 8003f94:	688e      	ldr	r6, [r1, #8]
 8003f96:	684f      	ldr	r7, [r1, #4]
 8003f98:	f851 c910 	ldr.w	ip, [r1], #-16
 8003f9c:	4372      	muls	r2, r6
 8003f9e:	437a      	muls	r2, r7
 8003fa0:	fb0c f202 	mul.w	r2, ip, r2
 8003fa4:	4355      	muls	r5, r2
 8003fa6:	1e40      	subs	r0, r0, #1
 8003fa8:	d1f3      	bne.n	8003f92 <forward_acosh+0x6e>
 8003faa:	6998      	ldr	r0, [r3, #24]
 8003fac:	6821      	ldr	r1, [r4, #0]
 8003fae:	6886      	ldr	r6, [r0, #8]
 8003fb0:	688a      	ldr	r2, [r1, #8]
 8003fb2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003fb6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003fba:	1f07      	subs	r7, r0, #4
 8003fbc:	1f1c      	subs	r4, r3, #4
 8003fbe:	42b7      	cmp	r7, r6
 8003fc0:	f0c0 800a 	bcc.w	8003fd8 <forward_acosh+0xb4>
 8003fc4:	ed97 0a00 	vldr	s0, [r7]
 8003fc8:	1f3f      	subs	r7, r7, #4
 8003fca:	f00d ff45 	bl	8011e58 <acoshf>
 8003fce:	ed84 0a00 	vstr	s0, [r4]
 8003fd2:	1f24      	subs	r4, r4, #4
 8003fd4:	42b7      	cmp	r7, r6
 8003fd6:	d2f5      	bcs.n	8003fc4 <forward_acosh+0xa0>
 8003fd8:	b001      	add	sp, #4
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fdc <nl_func_asin_array_f32>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	688c      	ldr	r4, [r1, #8]
 8003fe0:	6880      	ldr	r0, [r0, #8]
 8003fe2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003fe6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003fea:	1f0d      	subs	r5, r1, #4
 8003fec:	1f16      	subs	r6, r2, #4
 8003fee:	42a5      	cmp	r5, r4
 8003ff0:	f0c0 800a 	bcc.w	8004008 <nl_func_asin_array_f32+0x2c>
 8003ff4:	ed95 0a00 	vldr	s0, [r5]
 8003ff8:	1f2d      	subs	r5, r5, #4
 8003ffa:	f00d ff7d 	bl	8011ef8 <asinf>
 8003ffe:	ed86 0a00 	vstr	s0, [r6]
 8004002:	1f36      	subs	r6, r6, #4
 8004004:	42a5      	cmp	r5, r4
 8004006:	d2f5      	bcs.n	8003ff4 <nl_func_asin_array_f32+0x18>
 8004008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800400c <forward_asin>:
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b081      	sub	sp, #4
 8004010:	6942      	ldr	r2, [r0, #20]
 8004012:	f04f 0501 	mov.w	r5, #1
 8004016:	8811      	ldrh	r1, [r2, #0]
 8004018:	2900      	cmp	r1, #0
 800401a:	bf1a      	itte	ne
 800401c:	6850      	ldrne	r0, [r2, #4]
 800401e:	1d00      	addne	r0, r0, #4
 8004020:	2004      	moveq	r0, #4
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	2800      	cmp	r0, #0
 8004026:	bf14      	ite	ne
 8004028:	6803      	ldrne	r3, [r0, #0]
 800402a:	2300      	moveq	r3, #0
 800402c:	2902      	cmp	r1, #2
 800402e:	bfa6      	itte	ge
 8004030:	6850      	ldrge	r0, [r2, #4]
 8004032:	3010      	addge	r0, #16
 8004034:	2004      	movlt	r0, #4
 8004036:	6800      	ldr	r0, [r0, #0]
 8004038:	2800      	cmp	r0, #0
 800403a:	bf19      	ittee	ne
 800403c:	6800      	ldrne	r0, [r0, #0]
 800403e:	f100 0418 	addne.w	r4, r0, #24
 8004042:	2100      	moveq	r1, #0
 8004044:	f101 0418 	addeq.w	r4, r1, #24
 8004048:	f103 0108 	add.w	r1, r3, #8
 800404c:	680a      	ldr	r2, [r1, #0]
 800404e:	0a12      	lsrs	r2, r2, #8
 8004050:	d01f      	beq.n	8004092 <forward_asin+0x86>
 8004052:	684e      	ldr	r6, [r1, #4]
 8004054:	4610      	mov	r0, r2
 8004056:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800405a:	1f0f      	subs	r7, r1, #4
 800405c:	f010 0103 	ands.w	r1, r0, #3
 8004060:	d006      	beq.n	8004070 <forward_asin+0x64>
 8004062:	1e52      	subs	r2, r2, #1
 8004064:	f857 c904 	ldr.w	ip, [r7], #-4
 8004068:	1e49      	subs	r1, r1, #1
 800406a:	fb0c f505 	mul.w	r5, ip, r5
 800406e:	d1f8      	bne.n	8004062 <forward_asin+0x56>
 8004070:	0880      	lsrs	r0, r0, #2
 8004072:	d00e      	beq.n	8004092 <forward_asin+0x86>
 8004074:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004078:	3910      	subs	r1, #16
 800407a:	68ca      	ldr	r2, [r1, #12]
 800407c:	688e      	ldr	r6, [r1, #8]
 800407e:	684f      	ldr	r7, [r1, #4]
 8004080:	f851 c910 	ldr.w	ip, [r1], #-16
 8004084:	4372      	muls	r2, r6
 8004086:	437a      	muls	r2, r7
 8004088:	fb0c f202 	mul.w	r2, ip, r2
 800408c:	4355      	muls	r5, r2
 800408e:	1e40      	subs	r0, r0, #1
 8004090:	d1f3      	bne.n	800407a <forward_asin+0x6e>
 8004092:	6998      	ldr	r0, [r3, #24]
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	6886      	ldr	r6, [r0, #8]
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800409e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80040a2:	1f07      	subs	r7, r0, #4
 80040a4:	1f1c      	subs	r4, r3, #4
 80040a6:	42b7      	cmp	r7, r6
 80040a8:	f0c0 800a 	bcc.w	80040c0 <forward_asin+0xb4>
 80040ac:	ed97 0a00 	vldr	s0, [r7]
 80040b0:	1f3f      	subs	r7, r7, #4
 80040b2:	f00d ff21 	bl	8011ef8 <asinf>
 80040b6:	ed84 0a00 	vstr	s0, [r4]
 80040ba:	1f24      	subs	r4, r4, #4
 80040bc:	42b7      	cmp	r7, r6
 80040be:	d2f5      	bcs.n	80040ac <forward_asin+0xa0>
 80040c0:	b001      	add	sp, #4
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c4 <nl_func_asinh_array_f32>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	688c      	ldr	r4, [r1, #8]
 80040c8:	6880      	ldr	r0, [r0, #8]
 80040ca:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80040ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040d2:	1f0d      	subs	r5, r1, #4
 80040d4:	1f16      	subs	r6, r2, #4
 80040d6:	42a5      	cmp	r5, r4
 80040d8:	f0c0 800a 	bcc.w	80040f0 <nl_func_asinh_array_f32+0x2c>
 80040dc:	ed95 0a00 	vldr	s0, [r5]
 80040e0:	1f2d      	subs	r5, r5, #4
 80040e2:	f00c fe59 	bl	8010d98 <asinhf>
 80040e6:	ed86 0a00 	vstr	s0, [r6]
 80040ea:	1f36      	subs	r6, r6, #4
 80040ec:	42a5      	cmp	r5, r4
 80040ee:	d2f5      	bcs.n	80040dc <nl_func_asinh_array_f32+0x18>
 80040f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080040f4 <forward_asinh>:
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	b081      	sub	sp, #4
 80040f8:	6942      	ldr	r2, [r0, #20]
 80040fa:	f04f 0501 	mov.w	r5, #1
 80040fe:	8811      	ldrh	r1, [r2, #0]
 8004100:	2900      	cmp	r1, #0
 8004102:	bf1a      	itte	ne
 8004104:	6850      	ldrne	r0, [r2, #4]
 8004106:	1d00      	addne	r0, r0, #4
 8004108:	2004      	moveq	r0, #4
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	2800      	cmp	r0, #0
 800410e:	bf14      	ite	ne
 8004110:	6803      	ldrne	r3, [r0, #0]
 8004112:	2300      	moveq	r3, #0
 8004114:	2902      	cmp	r1, #2
 8004116:	bfa6      	itte	ge
 8004118:	6850      	ldrge	r0, [r2, #4]
 800411a:	3010      	addge	r0, #16
 800411c:	2004      	movlt	r0, #4
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	2800      	cmp	r0, #0
 8004122:	bf19      	ittee	ne
 8004124:	6800      	ldrne	r0, [r0, #0]
 8004126:	f100 0418 	addne.w	r4, r0, #24
 800412a:	2100      	moveq	r1, #0
 800412c:	f101 0418 	addeq.w	r4, r1, #24
 8004130:	f103 0108 	add.w	r1, r3, #8
 8004134:	680a      	ldr	r2, [r1, #0]
 8004136:	0a12      	lsrs	r2, r2, #8
 8004138:	d01f      	beq.n	800417a <forward_asinh+0x86>
 800413a:	684e      	ldr	r6, [r1, #4]
 800413c:	4610      	mov	r0, r2
 800413e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004142:	1f0f      	subs	r7, r1, #4
 8004144:	f010 0103 	ands.w	r1, r0, #3
 8004148:	d006      	beq.n	8004158 <forward_asinh+0x64>
 800414a:	1e52      	subs	r2, r2, #1
 800414c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004150:	1e49      	subs	r1, r1, #1
 8004152:	fb0c f505 	mul.w	r5, ip, r5
 8004156:	d1f8      	bne.n	800414a <forward_asinh+0x56>
 8004158:	0880      	lsrs	r0, r0, #2
 800415a:	d00e      	beq.n	800417a <forward_asinh+0x86>
 800415c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004160:	3910      	subs	r1, #16
 8004162:	68ca      	ldr	r2, [r1, #12]
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	684f      	ldr	r7, [r1, #4]
 8004168:	f851 c910 	ldr.w	ip, [r1], #-16
 800416c:	4372      	muls	r2, r6
 800416e:	437a      	muls	r2, r7
 8004170:	fb0c f202 	mul.w	r2, ip, r2
 8004174:	4355      	muls	r5, r2
 8004176:	1e40      	subs	r0, r0, #1
 8004178:	d1f3      	bne.n	8004162 <forward_asinh+0x6e>
 800417a:	6998      	ldr	r0, [r3, #24]
 800417c:	6821      	ldr	r1, [r4, #0]
 800417e:	6886      	ldr	r6, [r0, #8]
 8004180:	688a      	ldr	r2, [r1, #8]
 8004182:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004186:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800418a:	1f07      	subs	r7, r0, #4
 800418c:	1f1c      	subs	r4, r3, #4
 800418e:	42b7      	cmp	r7, r6
 8004190:	f0c0 800a 	bcc.w	80041a8 <forward_asinh+0xb4>
 8004194:	ed97 0a00 	vldr	s0, [r7]
 8004198:	1f3f      	subs	r7, r7, #4
 800419a:	f00c fdfd 	bl	8010d98 <asinhf>
 800419e:	ed84 0a00 	vstr	s0, [r4]
 80041a2:	1f24      	subs	r4, r4, #4
 80041a4:	42b7      	cmp	r7, r6
 80041a6:	d2f5      	bcs.n	8004194 <forward_asinh+0xa0>
 80041a8:	b001      	add	sp, #4
 80041aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ac <nl_func_atan_array_f32>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	688c      	ldr	r4, [r1, #8]
 80041b0:	6880      	ldr	r0, [r0, #8]
 80041b2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80041b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80041ba:	1f0d      	subs	r5, r1, #4
 80041bc:	1f16      	subs	r6, r2, #4
 80041be:	42a5      	cmp	r5, r4
 80041c0:	f0c0 800a 	bcc.w	80041d8 <nl_func_atan_array_f32+0x2c>
 80041c4:	ed95 0a00 	vldr	s0, [r5]
 80041c8:	1f2d      	subs	r5, r5, #4
 80041ca:	f00c fe4d 	bl	8010e68 <atanf>
 80041ce:	ed86 0a00 	vstr	s0, [r6]
 80041d2:	1f36      	subs	r6, r6, #4
 80041d4:	42a5      	cmp	r5, r4
 80041d6:	d2f5      	bcs.n	80041c4 <nl_func_atan_array_f32+0x18>
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080041dc <forward_atan>:
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	b081      	sub	sp, #4
 80041e0:	6942      	ldr	r2, [r0, #20]
 80041e2:	f04f 0501 	mov.w	r5, #1
 80041e6:	8811      	ldrh	r1, [r2, #0]
 80041e8:	2900      	cmp	r1, #0
 80041ea:	bf1a      	itte	ne
 80041ec:	6850      	ldrne	r0, [r2, #4]
 80041ee:	1d00      	addne	r0, r0, #4
 80041f0:	2004      	moveq	r0, #4
 80041f2:	6800      	ldr	r0, [r0, #0]
 80041f4:	2800      	cmp	r0, #0
 80041f6:	bf14      	ite	ne
 80041f8:	6803      	ldrne	r3, [r0, #0]
 80041fa:	2300      	moveq	r3, #0
 80041fc:	2902      	cmp	r1, #2
 80041fe:	bfa6      	itte	ge
 8004200:	6850      	ldrge	r0, [r2, #4]
 8004202:	3010      	addge	r0, #16
 8004204:	2004      	movlt	r0, #4
 8004206:	6800      	ldr	r0, [r0, #0]
 8004208:	2800      	cmp	r0, #0
 800420a:	bf19      	ittee	ne
 800420c:	6800      	ldrne	r0, [r0, #0]
 800420e:	f100 0418 	addne.w	r4, r0, #24
 8004212:	2100      	moveq	r1, #0
 8004214:	f101 0418 	addeq.w	r4, r1, #24
 8004218:	f103 0108 	add.w	r1, r3, #8
 800421c:	680a      	ldr	r2, [r1, #0]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	d01f      	beq.n	8004262 <forward_atan+0x86>
 8004222:	684e      	ldr	r6, [r1, #4]
 8004224:	4610      	mov	r0, r2
 8004226:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800422a:	1f0f      	subs	r7, r1, #4
 800422c:	f010 0103 	ands.w	r1, r0, #3
 8004230:	d006      	beq.n	8004240 <forward_atan+0x64>
 8004232:	1e52      	subs	r2, r2, #1
 8004234:	f857 c904 	ldr.w	ip, [r7], #-4
 8004238:	1e49      	subs	r1, r1, #1
 800423a:	fb0c f505 	mul.w	r5, ip, r5
 800423e:	d1f8      	bne.n	8004232 <forward_atan+0x56>
 8004240:	0880      	lsrs	r0, r0, #2
 8004242:	d00e      	beq.n	8004262 <forward_atan+0x86>
 8004244:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004248:	3910      	subs	r1, #16
 800424a:	68ca      	ldr	r2, [r1, #12]
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	684f      	ldr	r7, [r1, #4]
 8004250:	f851 c910 	ldr.w	ip, [r1], #-16
 8004254:	4372      	muls	r2, r6
 8004256:	437a      	muls	r2, r7
 8004258:	fb0c f202 	mul.w	r2, ip, r2
 800425c:	4355      	muls	r5, r2
 800425e:	1e40      	subs	r0, r0, #1
 8004260:	d1f3      	bne.n	800424a <forward_atan+0x6e>
 8004262:	6998      	ldr	r0, [r3, #24]
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	6886      	ldr	r6, [r0, #8]
 8004268:	688a      	ldr	r2, [r1, #8]
 800426a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800426e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004272:	1f07      	subs	r7, r0, #4
 8004274:	1f1c      	subs	r4, r3, #4
 8004276:	42b7      	cmp	r7, r6
 8004278:	f0c0 800a 	bcc.w	8004290 <forward_atan+0xb4>
 800427c:	ed97 0a00 	vldr	s0, [r7]
 8004280:	1f3f      	subs	r7, r7, #4
 8004282:	f00c fdf1 	bl	8010e68 <atanf>
 8004286:	ed84 0a00 	vstr	s0, [r4]
 800428a:	1f24      	subs	r4, r4, #4
 800428c:	42b7      	cmp	r7, r6
 800428e:	d2f5      	bcs.n	800427c <forward_atan+0xa0>
 8004290:	b001      	add	sp, #4
 8004292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004294 <nl_func_atanh_array_f32>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	688c      	ldr	r4, [r1, #8]
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800429e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80042a2:	1f0d      	subs	r5, r1, #4
 80042a4:	1f16      	subs	r6, r2, #4
 80042a6:	42a5      	cmp	r5, r4
 80042a8:	f0c0 800a 	bcc.w	80042c0 <nl_func_atanh_array_f32+0x2c>
 80042ac:	ed95 0a00 	vldr	s0, [r5]
 80042b0:	1f2d      	subs	r5, r5, #4
 80042b2:	f00d fe75 	bl	8011fa0 <atanhf>
 80042b6:	ed86 0a00 	vstr	s0, [r6]
 80042ba:	1f36      	subs	r6, r6, #4
 80042bc:	42a5      	cmp	r5, r4
 80042be:	d2f5      	bcs.n	80042ac <nl_func_atanh_array_f32+0x18>
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042c4 <forward_atanh>:
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b081      	sub	sp, #4
 80042c8:	6942      	ldr	r2, [r0, #20]
 80042ca:	f04f 0501 	mov.w	r5, #1
 80042ce:	8811      	ldrh	r1, [r2, #0]
 80042d0:	2900      	cmp	r1, #0
 80042d2:	bf1a      	itte	ne
 80042d4:	6850      	ldrne	r0, [r2, #4]
 80042d6:	1d00      	addne	r0, r0, #4
 80042d8:	2004      	moveq	r0, #4
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	2800      	cmp	r0, #0
 80042de:	bf14      	ite	ne
 80042e0:	6803      	ldrne	r3, [r0, #0]
 80042e2:	2300      	moveq	r3, #0
 80042e4:	2902      	cmp	r1, #2
 80042e6:	bfa6      	itte	ge
 80042e8:	6850      	ldrge	r0, [r2, #4]
 80042ea:	3010      	addge	r0, #16
 80042ec:	2004      	movlt	r0, #4
 80042ee:	6800      	ldr	r0, [r0, #0]
 80042f0:	2800      	cmp	r0, #0
 80042f2:	bf19      	ittee	ne
 80042f4:	6800      	ldrne	r0, [r0, #0]
 80042f6:	f100 0418 	addne.w	r4, r0, #24
 80042fa:	2100      	moveq	r1, #0
 80042fc:	f101 0418 	addeq.w	r4, r1, #24
 8004300:	f103 0108 	add.w	r1, r3, #8
 8004304:	680a      	ldr	r2, [r1, #0]
 8004306:	0a12      	lsrs	r2, r2, #8
 8004308:	d01f      	beq.n	800434a <forward_atanh+0x86>
 800430a:	684e      	ldr	r6, [r1, #4]
 800430c:	4610      	mov	r0, r2
 800430e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004312:	1f0f      	subs	r7, r1, #4
 8004314:	f010 0103 	ands.w	r1, r0, #3
 8004318:	d006      	beq.n	8004328 <forward_atanh+0x64>
 800431a:	1e52      	subs	r2, r2, #1
 800431c:	f857 c904 	ldr.w	ip, [r7], #-4
 8004320:	1e49      	subs	r1, r1, #1
 8004322:	fb0c f505 	mul.w	r5, ip, r5
 8004326:	d1f8      	bne.n	800431a <forward_atanh+0x56>
 8004328:	0880      	lsrs	r0, r0, #2
 800432a:	d00e      	beq.n	800434a <forward_atanh+0x86>
 800432c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004330:	3910      	subs	r1, #16
 8004332:	68ca      	ldr	r2, [r1, #12]
 8004334:	688e      	ldr	r6, [r1, #8]
 8004336:	684f      	ldr	r7, [r1, #4]
 8004338:	f851 c910 	ldr.w	ip, [r1], #-16
 800433c:	4372      	muls	r2, r6
 800433e:	437a      	muls	r2, r7
 8004340:	fb0c f202 	mul.w	r2, ip, r2
 8004344:	4355      	muls	r5, r2
 8004346:	1e40      	subs	r0, r0, #1
 8004348:	d1f3      	bne.n	8004332 <forward_atanh+0x6e>
 800434a:	6998      	ldr	r0, [r3, #24]
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	6886      	ldr	r6, [r0, #8]
 8004350:	688a      	ldr	r2, [r1, #8]
 8004352:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004356:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800435a:	1f07      	subs	r7, r0, #4
 800435c:	1f1c      	subs	r4, r3, #4
 800435e:	42b7      	cmp	r7, r6
 8004360:	f0c0 800a 	bcc.w	8004378 <forward_atanh+0xb4>
 8004364:	ed97 0a00 	vldr	s0, [r7]
 8004368:	1f3f      	subs	r7, r7, #4
 800436a:	f00d fe19 	bl	8011fa0 <atanhf>
 800436e:	ed84 0a00 	vstr	s0, [r4]
 8004372:	1f24      	subs	r4, r4, #4
 8004374:	42b7      	cmp	r7, r6
 8004376:	d2f5      	bcs.n	8004364 <forward_atanh+0xa0>
 8004378:	b001      	add	sp, #4
 800437a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800437c <nl_func_cos_array_f32>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	688c      	ldr	r4, [r1, #8]
 8004380:	6880      	ldr	r0, [r0, #8]
 8004382:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004386:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800438a:	1f0d      	subs	r5, r1, #4
 800438c:	1f16      	subs	r6, r2, #4
 800438e:	42a5      	cmp	r5, r4
 8004390:	f0c0 800a 	bcc.w	80043a8 <nl_func_cos_array_f32+0x2c>
 8004394:	ed95 0a00 	vldr	s0, [r5]
 8004398:	1f2d      	subs	r5, r5, #4
 800439a:	f00c fe77 	bl	801108c <cosf>
 800439e:	ed86 0a00 	vstr	s0, [r6]
 80043a2:	1f36      	subs	r6, r6, #4
 80043a4:	42a5      	cmp	r5, r4
 80043a6:	d2f5      	bcs.n	8004394 <nl_func_cos_array_f32+0x18>
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080043ac <forward_cos>:
 80043ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ae:	b081      	sub	sp, #4
 80043b0:	6942      	ldr	r2, [r0, #20]
 80043b2:	f04f 0501 	mov.w	r5, #1
 80043b6:	8811      	ldrh	r1, [r2, #0]
 80043b8:	2900      	cmp	r1, #0
 80043ba:	bf1a      	itte	ne
 80043bc:	6850      	ldrne	r0, [r2, #4]
 80043be:	1d00      	addne	r0, r0, #4
 80043c0:	2004      	moveq	r0, #4
 80043c2:	6800      	ldr	r0, [r0, #0]
 80043c4:	2800      	cmp	r0, #0
 80043c6:	bf14      	ite	ne
 80043c8:	6803      	ldrne	r3, [r0, #0]
 80043ca:	2300      	moveq	r3, #0
 80043cc:	2902      	cmp	r1, #2
 80043ce:	bfa6      	itte	ge
 80043d0:	6850      	ldrge	r0, [r2, #4]
 80043d2:	3010      	addge	r0, #16
 80043d4:	2004      	movlt	r0, #4
 80043d6:	6800      	ldr	r0, [r0, #0]
 80043d8:	2800      	cmp	r0, #0
 80043da:	bf19      	ittee	ne
 80043dc:	6800      	ldrne	r0, [r0, #0]
 80043de:	f100 0418 	addne.w	r4, r0, #24
 80043e2:	2100      	moveq	r1, #0
 80043e4:	f101 0418 	addeq.w	r4, r1, #24
 80043e8:	f103 0108 	add.w	r1, r3, #8
 80043ec:	680a      	ldr	r2, [r1, #0]
 80043ee:	0a12      	lsrs	r2, r2, #8
 80043f0:	d01f      	beq.n	8004432 <forward_cos+0x86>
 80043f2:	684e      	ldr	r6, [r1, #4]
 80043f4:	4610      	mov	r0, r2
 80043f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80043fa:	1f0f      	subs	r7, r1, #4
 80043fc:	f010 0103 	ands.w	r1, r0, #3
 8004400:	d006      	beq.n	8004410 <forward_cos+0x64>
 8004402:	1e52      	subs	r2, r2, #1
 8004404:	f857 c904 	ldr.w	ip, [r7], #-4
 8004408:	1e49      	subs	r1, r1, #1
 800440a:	fb0c f505 	mul.w	r5, ip, r5
 800440e:	d1f8      	bne.n	8004402 <forward_cos+0x56>
 8004410:	0880      	lsrs	r0, r0, #2
 8004412:	d00e      	beq.n	8004432 <forward_cos+0x86>
 8004414:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004418:	3910      	subs	r1, #16
 800441a:	68ca      	ldr	r2, [r1, #12]
 800441c:	688e      	ldr	r6, [r1, #8]
 800441e:	684f      	ldr	r7, [r1, #4]
 8004420:	f851 c910 	ldr.w	ip, [r1], #-16
 8004424:	4372      	muls	r2, r6
 8004426:	437a      	muls	r2, r7
 8004428:	fb0c f202 	mul.w	r2, ip, r2
 800442c:	4355      	muls	r5, r2
 800442e:	1e40      	subs	r0, r0, #1
 8004430:	d1f3      	bne.n	800441a <forward_cos+0x6e>
 8004432:	6998      	ldr	r0, [r3, #24]
 8004434:	6821      	ldr	r1, [r4, #0]
 8004436:	6886      	ldr	r6, [r0, #8]
 8004438:	688a      	ldr	r2, [r1, #8]
 800443a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800443e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004442:	1f07      	subs	r7, r0, #4
 8004444:	1f1c      	subs	r4, r3, #4
 8004446:	42b7      	cmp	r7, r6
 8004448:	f0c0 800a 	bcc.w	8004460 <forward_cos+0xb4>
 800444c:	ed97 0a00 	vldr	s0, [r7]
 8004450:	1f3f      	subs	r7, r7, #4
 8004452:	f00c fe1b 	bl	801108c <cosf>
 8004456:	ed84 0a00 	vstr	s0, [r4]
 800445a:	1f24      	subs	r4, r4, #4
 800445c:	42b7      	cmp	r7, r6
 800445e:	d2f5      	bcs.n	800444c <forward_cos+0xa0>
 8004460:	b001      	add	sp, #4
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004464 <nl_func_cosh_array_f32>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	688c      	ldr	r4, [r1, #8]
 8004468:	6880      	ldr	r0, [r0, #8]
 800446a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800446e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004472:	1f0d      	subs	r5, r1, #4
 8004474:	1f16      	subs	r6, r2, #4
 8004476:	42a5      	cmp	r5, r4
 8004478:	f0c0 800a 	bcc.w	8004490 <nl_func_cosh_array_f32+0x2c>
 800447c:	ed95 0a00 	vldr	s0, [r5]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	f00d fdf5 	bl	8012070 <coshf>
 8004486:	ed86 0a00 	vstr	s0, [r6]
 800448a:	1f36      	subs	r6, r6, #4
 800448c:	42a5      	cmp	r5, r4
 800448e:	d2f5      	bcs.n	800447c <nl_func_cosh_array_f32+0x18>
 8004490:	bd70      	pop	{r4, r5, r6, pc}
	...

08004494 <forward_cosh>:
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	b081      	sub	sp, #4
 8004498:	6942      	ldr	r2, [r0, #20]
 800449a:	f04f 0501 	mov.w	r5, #1
 800449e:	8811      	ldrh	r1, [r2, #0]
 80044a0:	2900      	cmp	r1, #0
 80044a2:	bf1a      	itte	ne
 80044a4:	6850      	ldrne	r0, [r2, #4]
 80044a6:	1d00      	addne	r0, r0, #4
 80044a8:	2004      	moveq	r0, #4
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	2800      	cmp	r0, #0
 80044ae:	bf14      	ite	ne
 80044b0:	6803      	ldrne	r3, [r0, #0]
 80044b2:	2300      	moveq	r3, #0
 80044b4:	2902      	cmp	r1, #2
 80044b6:	bfa6      	itte	ge
 80044b8:	6850      	ldrge	r0, [r2, #4]
 80044ba:	3010      	addge	r0, #16
 80044bc:	2004      	movlt	r0, #4
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	2800      	cmp	r0, #0
 80044c2:	bf19      	ittee	ne
 80044c4:	6800      	ldrne	r0, [r0, #0]
 80044c6:	f100 0418 	addne.w	r4, r0, #24
 80044ca:	2100      	moveq	r1, #0
 80044cc:	f101 0418 	addeq.w	r4, r1, #24
 80044d0:	f103 0108 	add.w	r1, r3, #8
 80044d4:	680a      	ldr	r2, [r1, #0]
 80044d6:	0a12      	lsrs	r2, r2, #8
 80044d8:	d01f      	beq.n	800451a <forward_cosh+0x86>
 80044da:	684e      	ldr	r6, [r1, #4]
 80044dc:	4610      	mov	r0, r2
 80044de:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044e2:	1f0f      	subs	r7, r1, #4
 80044e4:	f010 0103 	ands.w	r1, r0, #3
 80044e8:	d006      	beq.n	80044f8 <forward_cosh+0x64>
 80044ea:	1e52      	subs	r2, r2, #1
 80044ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80044f0:	1e49      	subs	r1, r1, #1
 80044f2:	fb0c f505 	mul.w	r5, ip, r5
 80044f6:	d1f8      	bne.n	80044ea <forward_cosh+0x56>
 80044f8:	0880      	lsrs	r0, r0, #2
 80044fa:	d00e      	beq.n	800451a <forward_cosh+0x86>
 80044fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004500:	3910      	subs	r1, #16
 8004502:	68ca      	ldr	r2, [r1, #12]
 8004504:	688e      	ldr	r6, [r1, #8]
 8004506:	684f      	ldr	r7, [r1, #4]
 8004508:	f851 c910 	ldr.w	ip, [r1], #-16
 800450c:	4372      	muls	r2, r6
 800450e:	437a      	muls	r2, r7
 8004510:	fb0c f202 	mul.w	r2, ip, r2
 8004514:	4355      	muls	r5, r2
 8004516:	1e40      	subs	r0, r0, #1
 8004518:	d1f3      	bne.n	8004502 <forward_cosh+0x6e>
 800451a:	6998      	ldr	r0, [r3, #24]
 800451c:	6821      	ldr	r1, [r4, #0]
 800451e:	6886      	ldr	r6, [r0, #8]
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004526:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800452a:	1f07      	subs	r7, r0, #4
 800452c:	1f1c      	subs	r4, r3, #4
 800452e:	42b7      	cmp	r7, r6
 8004530:	f0c0 800a 	bcc.w	8004548 <forward_cosh+0xb4>
 8004534:	ed97 0a00 	vldr	s0, [r7]
 8004538:	1f3f      	subs	r7, r7, #4
 800453a:	f00d fd99 	bl	8012070 <coshf>
 800453e:	ed84 0a00 	vstr	s0, [r4]
 8004542:	1f24      	subs	r4, r4, #4
 8004544:	42b7      	cmp	r7, r6
 8004546:	d2f5      	bcs.n	8004534 <forward_cosh+0xa0>
 8004548:	b001      	add	sp, #4
 800454a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800454c <nl_func_erf_array_f32>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	688c      	ldr	r4, [r1, #8]
 8004550:	6880      	ldr	r0, [r0, #8]
 8004552:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004556:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800455a:	1f0d      	subs	r5, r1, #4
 800455c:	1f16      	subs	r6, r2, #4
 800455e:	42a5      	cmp	r5, r4
 8004560:	f0c0 800a 	bcc.w	8004578 <nl_func_erf_array_f32+0x2c>
 8004564:	ed95 0a00 	vldr	s0, [r5]
 8004568:	1f2d      	subs	r5, r5, #4
 800456a:	f00c fdcf 	bl	801110c <erff>
 800456e:	ed86 0a00 	vstr	s0, [r6]
 8004572:	1f36      	subs	r6, r6, #4
 8004574:	42a5      	cmp	r5, r4
 8004576:	d2f5      	bcs.n	8004564 <nl_func_erf_array_f32+0x18>
 8004578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800457c <forward_erf>:
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	b081      	sub	sp, #4
 8004580:	6942      	ldr	r2, [r0, #20]
 8004582:	f04f 0501 	mov.w	r5, #1
 8004586:	8811      	ldrh	r1, [r2, #0]
 8004588:	2900      	cmp	r1, #0
 800458a:	bf1a      	itte	ne
 800458c:	6850      	ldrne	r0, [r2, #4]
 800458e:	1d00      	addne	r0, r0, #4
 8004590:	2004      	moveq	r0, #4
 8004592:	6800      	ldr	r0, [r0, #0]
 8004594:	2800      	cmp	r0, #0
 8004596:	bf14      	ite	ne
 8004598:	6803      	ldrne	r3, [r0, #0]
 800459a:	2300      	moveq	r3, #0
 800459c:	2902      	cmp	r1, #2
 800459e:	bfa6      	itte	ge
 80045a0:	6850      	ldrge	r0, [r2, #4]
 80045a2:	3010      	addge	r0, #16
 80045a4:	2004      	movlt	r0, #4
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	2800      	cmp	r0, #0
 80045aa:	bf19      	ittee	ne
 80045ac:	6800      	ldrne	r0, [r0, #0]
 80045ae:	f100 0418 	addne.w	r4, r0, #24
 80045b2:	2100      	moveq	r1, #0
 80045b4:	f101 0418 	addeq.w	r4, r1, #24
 80045b8:	f103 0108 	add.w	r1, r3, #8
 80045bc:	680a      	ldr	r2, [r1, #0]
 80045be:	0a12      	lsrs	r2, r2, #8
 80045c0:	d01f      	beq.n	8004602 <forward_erf+0x86>
 80045c2:	684e      	ldr	r6, [r1, #4]
 80045c4:	4610      	mov	r0, r2
 80045c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045ca:	1f0f      	subs	r7, r1, #4
 80045cc:	f010 0103 	ands.w	r1, r0, #3
 80045d0:	d006      	beq.n	80045e0 <forward_erf+0x64>
 80045d2:	1e52      	subs	r2, r2, #1
 80045d4:	f857 c904 	ldr.w	ip, [r7], #-4
 80045d8:	1e49      	subs	r1, r1, #1
 80045da:	fb0c f505 	mul.w	r5, ip, r5
 80045de:	d1f8      	bne.n	80045d2 <forward_erf+0x56>
 80045e0:	0880      	lsrs	r0, r0, #2
 80045e2:	d00e      	beq.n	8004602 <forward_erf+0x86>
 80045e4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045e8:	3910      	subs	r1, #16
 80045ea:	68ca      	ldr	r2, [r1, #12]
 80045ec:	688e      	ldr	r6, [r1, #8]
 80045ee:	684f      	ldr	r7, [r1, #4]
 80045f0:	f851 c910 	ldr.w	ip, [r1], #-16
 80045f4:	4372      	muls	r2, r6
 80045f6:	437a      	muls	r2, r7
 80045f8:	fb0c f202 	mul.w	r2, ip, r2
 80045fc:	4355      	muls	r5, r2
 80045fe:	1e40      	subs	r0, r0, #1
 8004600:	d1f3      	bne.n	80045ea <forward_erf+0x6e>
 8004602:	6998      	ldr	r0, [r3, #24]
 8004604:	6821      	ldr	r1, [r4, #0]
 8004606:	6886      	ldr	r6, [r0, #8]
 8004608:	688a      	ldr	r2, [r1, #8]
 800460a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800460e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004612:	1f07      	subs	r7, r0, #4
 8004614:	1f1c      	subs	r4, r3, #4
 8004616:	42b7      	cmp	r7, r6
 8004618:	f0c0 800a 	bcc.w	8004630 <forward_erf+0xb4>
 800461c:	ed97 0a00 	vldr	s0, [r7]
 8004620:	1f3f      	subs	r7, r7, #4
 8004622:	f00c fd73 	bl	801110c <erff>
 8004626:	ed84 0a00 	vstr	s0, [r4]
 800462a:	1f24      	subs	r4, r4, #4
 800462c:	42b7      	cmp	r7, r6
 800462e:	d2f5      	bcs.n	800461c <forward_erf+0xa0>
 8004630:	b001      	add	sp, #4
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004634 <nl_func_log_array_f32>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	688c      	ldr	r4, [r1, #8]
 8004638:	6880      	ldr	r0, [r0, #8]
 800463a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800463e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004642:	1f0d      	subs	r5, r1, #4
 8004644:	1f16      	subs	r6, r2, #4
 8004646:	42a5      	cmp	r5, r4
 8004648:	f0c0 800a 	bcc.w	8004660 <nl_func_log_array_f32+0x2c>
 800464c:	ed95 0a00 	vldr	s0, [r5]
 8004650:	1f2d      	subs	r5, r5, #4
 8004652:	f00d f803 	bl	801165c <logf>
 8004656:	ed86 0a00 	vstr	s0, [r6]
 800465a:	1f36      	subs	r6, r6, #4
 800465c:	42a5      	cmp	r5, r4
 800465e:	d2f5      	bcs.n	800464c <nl_func_log_array_f32+0x18>
 8004660:	bd70      	pop	{r4, r5, r6, pc}
	...

08004664 <forward_log>:
 8004664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004666:	b081      	sub	sp, #4
 8004668:	6942      	ldr	r2, [r0, #20]
 800466a:	f04f 0501 	mov.w	r5, #1
 800466e:	8811      	ldrh	r1, [r2, #0]
 8004670:	2900      	cmp	r1, #0
 8004672:	bf1a      	itte	ne
 8004674:	6850      	ldrne	r0, [r2, #4]
 8004676:	1d00      	addne	r0, r0, #4
 8004678:	2004      	moveq	r0, #4
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	2800      	cmp	r0, #0
 800467e:	bf14      	ite	ne
 8004680:	6803      	ldrne	r3, [r0, #0]
 8004682:	2300      	moveq	r3, #0
 8004684:	2902      	cmp	r1, #2
 8004686:	bfa6      	itte	ge
 8004688:	6850      	ldrge	r0, [r2, #4]
 800468a:	3010      	addge	r0, #16
 800468c:	2004      	movlt	r0, #4
 800468e:	6800      	ldr	r0, [r0, #0]
 8004690:	2800      	cmp	r0, #0
 8004692:	bf19      	ittee	ne
 8004694:	6800      	ldrne	r0, [r0, #0]
 8004696:	f100 0418 	addne.w	r4, r0, #24
 800469a:	2100      	moveq	r1, #0
 800469c:	f101 0418 	addeq.w	r4, r1, #24
 80046a0:	f103 0108 	add.w	r1, r3, #8
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	0a12      	lsrs	r2, r2, #8
 80046a8:	d01f      	beq.n	80046ea <forward_log+0x86>
 80046aa:	684e      	ldr	r6, [r1, #4]
 80046ac:	4610      	mov	r0, r2
 80046ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80046b2:	1f0f      	subs	r7, r1, #4
 80046b4:	f010 0103 	ands.w	r1, r0, #3
 80046b8:	d006      	beq.n	80046c8 <forward_log+0x64>
 80046ba:	1e52      	subs	r2, r2, #1
 80046bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80046c0:	1e49      	subs	r1, r1, #1
 80046c2:	fb0c f505 	mul.w	r5, ip, r5
 80046c6:	d1f8      	bne.n	80046ba <forward_log+0x56>
 80046c8:	0880      	lsrs	r0, r0, #2
 80046ca:	d00e      	beq.n	80046ea <forward_log+0x86>
 80046cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80046d0:	3910      	subs	r1, #16
 80046d2:	68ca      	ldr	r2, [r1, #12]
 80046d4:	688e      	ldr	r6, [r1, #8]
 80046d6:	684f      	ldr	r7, [r1, #4]
 80046d8:	f851 c910 	ldr.w	ip, [r1], #-16
 80046dc:	4372      	muls	r2, r6
 80046de:	437a      	muls	r2, r7
 80046e0:	fb0c f202 	mul.w	r2, ip, r2
 80046e4:	4355      	muls	r5, r2
 80046e6:	1e40      	subs	r0, r0, #1
 80046e8:	d1f3      	bne.n	80046d2 <forward_log+0x6e>
 80046ea:	6998      	ldr	r0, [r3, #24]
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	6886      	ldr	r6, [r0, #8]
 80046f0:	688a      	ldr	r2, [r1, #8]
 80046f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80046f6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80046fa:	1f07      	subs	r7, r0, #4
 80046fc:	1f1c      	subs	r4, r3, #4
 80046fe:	42b7      	cmp	r7, r6
 8004700:	f0c0 800a 	bcc.w	8004718 <forward_log+0xb4>
 8004704:	ed97 0a00 	vldr	s0, [r7]
 8004708:	1f3f      	subs	r7, r7, #4
 800470a:	f00c ffa7 	bl	801165c <logf>
 800470e:	ed84 0a00 	vstr	s0, [r4]
 8004712:	1f24      	subs	r4, r4, #4
 8004714:	42b7      	cmp	r7, r6
 8004716:	d2f5      	bcs.n	8004704 <forward_log+0xa0>
 8004718:	b001      	add	sp, #4
 800471a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800471c <nl_func_rsqrt_array_f32>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	6880      	ldr	r0, [r0, #8]
 8004722:	68a1      	ldr	r1, [r4, #8]
 8004724:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004728:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800472c:	1f1d      	subs	r5, r3, #4
 800472e:	1f16      	subs	r6, r2, #4
 8004730:	428d      	cmp	r5, r1
 8004732:	d30e      	bcc.n	8004752 <nl_func_rsqrt_array_f32+0x36>
 8004734:	ed95 0a00 	vldr	s0, [r5]
 8004738:	1f2d      	subs	r5, r5, #4
 800473a:	f002 fa49 	bl	8006bd0 <ai_math_sqrt>
 800473e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004742:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8004746:	edc6 0a00 	vstr	s1, [r6]
 800474a:	68a0      	ldr	r0, [r4, #8]
 800474c:	1f36      	subs	r6, r6, #4
 800474e:	4285      	cmp	r5, r0
 8004750:	d2f0      	bcs.n	8004734 <nl_func_rsqrt_array_f32+0x18>
 8004752:	bd70      	pop	{r4, r5, r6, pc}

08004754 <forward_rsqrt>:
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	b081      	sub	sp, #4
 8004758:	6942      	ldr	r2, [r0, #20]
 800475a:	f04f 0501 	mov.w	r5, #1
 800475e:	8811      	ldrh	r1, [r2, #0]
 8004760:	2900      	cmp	r1, #0
 8004762:	bf1a      	itte	ne
 8004764:	6850      	ldrne	r0, [r2, #4]
 8004766:	1d00      	addne	r0, r0, #4
 8004768:	2004      	moveq	r0, #4
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	2800      	cmp	r0, #0
 800476e:	bf14      	ite	ne
 8004770:	6803      	ldrne	r3, [r0, #0]
 8004772:	2300      	moveq	r3, #0
 8004774:	2902      	cmp	r1, #2
 8004776:	bfa6      	itte	ge
 8004778:	6850      	ldrge	r0, [r2, #4]
 800477a:	3010      	addge	r0, #16
 800477c:	2004      	movlt	r0, #4
 800477e:	6800      	ldr	r0, [r0, #0]
 8004780:	2800      	cmp	r0, #0
 8004782:	bf19      	ittee	ne
 8004784:	6800      	ldrne	r0, [r0, #0]
 8004786:	f100 0418 	addne.w	r4, r0, #24
 800478a:	2100      	moveq	r1, #0
 800478c:	f101 0418 	addeq.w	r4, r1, #24
 8004790:	f103 0108 	add.w	r1, r3, #8
 8004794:	680a      	ldr	r2, [r1, #0]
 8004796:	0a12      	lsrs	r2, r2, #8
 8004798:	d01f      	beq.n	80047da <forward_rsqrt+0x86>
 800479a:	684e      	ldr	r6, [r1, #4]
 800479c:	4610      	mov	r0, r2
 800479e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80047a2:	1f0f      	subs	r7, r1, #4
 80047a4:	f010 0103 	ands.w	r1, r0, #3
 80047a8:	d006      	beq.n	80047b8 <forward_rsqrt+0x64>
 80047aa:	1e52      	subs	r2, r2, #1
 80047ac:	f857 c904 	ldr.w	ip, [r7], #-4
 80047b0:	1e49      	subs	r1, r1, #1
 80047b2:	fb0c f505 	mul.w	r5, ip, r5
 80047b6:	d1f8      	bne.n	80047aa <forward_rsqrt+0x56>
 80047b8:	0880      	lsrs	r0, r0, #2
 80047ba:	d00e      	beq.n	80047da <forward_rsqrt+0x86>
 80047bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80047c0:	3910      	subs	r1, #16
 80047c2:	68ca      	ldr	r2, [r1, #12]
 80047c4:	688e      	ldr	r6, [r1, #8]
 80047c6:	684f      	ldr	r7, [r1, #4]
 80047c8:	f851 c910 	ldr.w	ip, [r1], #-16
 80047cc:	4372      	muls	r2, r6
 80047ce:	437a      	muls	r2, r7
 80047d0:	fb0c f202 	mul.w	r2, ip, r2
 80047d4:	4355      	muls	r5, r2
 80047d6:	1e40      	subs	r0, r0, #1
 80047d8:	d1f3      	bne.n	80047c2 <forward_rsqrt+0x6e>
 80047da:	699e      	ldr	r6, [r3, #24]
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	68b0      	ldr	r0, [r6, #8]
 80047e0:	6893      	ldr	r3, [r2, #8]
 80047e2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80047e6:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80047ea:	1f0f      	subs	r7, r1, #4
 80047ec:	1f24      	subs	r4, r4, #4
 80047ee:	4287      	cmp	r7, r0
 80047f0:	f0c0 800f 	bcc.w	8004812 <forward_rsqrt+0xbe>
 80047f4:	ed97 0a00 	vldr	s0, [r7]
 80047f8:	1f3f      	subs	r7, r7, #4
 80047fa:	f002 f9e9 	bl	8006bd0 <ai_math_sqrt>
 80047fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004802:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8004806:	edc4 0a00 	vstr	s1, [r4]
 800480a:	68b0      	ldr	r0, [r6, #8]
 800480c:	1f24      	subs	r4, r4, #4
 800480e:	4287      	cmp	r7, r0
 8004810:	d2f0      	bcs.n	80047f4 <forward_rsqrt+0xa0>
 8004812:	b001      	add	sp, #4
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004818 <nl_func_sin_array_f32>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	688c      	ldr	r4, [r1, #8]
 800481c:	6880      	ldr	r0, [r0, #8]
 800481e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004822:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004826:	1f0d      	subs	r5, r1, #4
 8004828:	1f16      	subs	r6, r2, #4
 800482a:	42a5      	cmp	r5, r4
 800482c:	f0c0 800a 	bcc.w	8004844 <nl_func_sin_array_f32+0x2c>
 8004830:	ed95 0a00 	vldr	s0, [r5]
 8004834:	1f2d      	subs	r5, r5, #4
 8004836:	f00d f9ff 	bl	8011c38 <sinf>
 800483a:	ed86 0a00 	vstr	s0, [r6]
 800483e:	1f36      	subs	r6, r6, #4
 8004840:	42a5      	cmp	r5, r4
 8004842:	d2f5      	bcs.n	8004830 <nl_func_sin_array_f32+0x18>
 8004844:	bd70      	pop	{r4, r5, r6, pc}
	...

08004848 <forward_sin>:
 8004848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484a:	b081      	sub	sp, #4
 800484c:	6942      	ldr	r2, [r0, #20]
 800484e:	f04f 0501 	mov.w	r5, #1
 8004852:	8811      	ldrh	r1, [r2, #0]
 8004854:	2900      	cmp	r1, #0
 8004856:	bf1a      	itte	ne
 8004858:	6850      	ldrne	r0, [r2, #4]
 800485a:	1d00      	addne	r0, r0, #4
 800485c:	2004      	moveq	r0, #4
 800485e:	6800      	ldr	r0, [r0, #0]
 8004860:	2800      	cmp	r0, #0
 8004862:	bf14      	ite	ne
 8004864:	6803      	ldrne	r3, [r0, #0]
 8004866:	2300      	moveq	r3, #0
 8004868:	2902      	cmp	r1, #2
 800486a:	bfa6      	itte	ge
 800486c:	6850      	ldrge	r0, [r2, #4]
 800486e:	3010      	addge	r0, #16
 8004870:	2004      	movlt	r0, #4
 8004872:	6800      	ldr	r0, [r0, #0]
 8004874:	2800      	cmp	r0, #0
 8004876:	bf19      	ittee	ne
 8004878:	6800      	ldrne	r0, [r0, #0]
 800487a:	f100 0418 	addne.w	r4, r0, #24
 800487e:	2100      	moveq	r1, #0
 8004880:	f101 0418 	addeq.w	r4, r1, #24
 8004884:	f103 0108 	add.w	r1, r3, #8
 8004888:	680a      	ldr	r2, [r1, #0]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	d01f      	beq.n	80048ce <forward_sin+0x86>
 800488e:	684e      	ldr	r6, [r1, #4]
 8004890:	4610      	mov	r0, r2
 8004892:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004896:	1f0f      	subs	r7, r1, #4
 8004898:	f010 0103 	ands.w	r1, r0, #3
 800489c:	d006      	beq.n	80048ac <forward_sin+0x64>
 800489e:	1e52      	subs	r2, r2, #1
 80048a0:	f857 c904 	ldr.w	ip, [r7], #-4
 80048a4:	1e49      	subs	r1, r1, #1
 80048a6:	fb0c f505 	mul.w	r5, ip, r5
 80048aa:	d1f8      	bne.n	800489e <forward_sin+0x56>
 80048ac:	0880      	lsrs	r0, r0, #2
 80048ae:	d00e      	beq.n	80048ce <forward_sin+0x86>
 80048b0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048b4:	3910      	subs	r1, #16
 80048b6:	68ca      	ldr	r2, [r1, #12]
 80048b8:	688e      	ldr	r6, [r1, #8]
 80048ba:	684f      	ldr	r7, [r1, #4]
 80048bc:	f851 c910 	ldr.w	ip, [r1], #-16
 80048c0:	4372      	muls	r2, r6
 80048c2:	437a      	muls	r2, r7
 80048c4:	fb0c f202 	mul.w	r2, ip, r2
 80048c8:	4355      	muls	r5, r2
 80048ca:	1e40      	subs	r0, r0, #1
 80048cc:	d1f3      	bne.n	80048b6 <forward_sin+0x6e>
 80048ce:	6998      	ldr	r0, [r3, #24]
 80048d0:	6821      	ldr	r1, [r4, #0]
 80048d2:	6886      	ldr	r6, [r0, #8]
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80048da:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80048de:	1f07      	subs	r7, r0, #4
 80048e0:	1f1c      	subs	r4, r3, #4
 80048e2:	42b7      	cmp	r7, r6
 80048e4:	f0c0 800a 	bcc.w	80048fc <forward_sin+0xb4>
 80048e8:	ed97 0a00 	vldr	s0, [r7]
 80048ec:	1f3f      	subs	r7, r7, #4
 80048ee:	f00d f9a3 	bl	8011c38 <sinf>
 80048f2:	ed84 0a00 	vstr	s0, [r4]
 80048f6:	1f24      	subs	r4, r4, #4
 80048f8:	42b7      	cmp	r7, r6
 80048fa:	d2f5      	bcs.n	80048e8 <forward_sin+0xa0>
 80048fc:	b001      	add	sp, #4
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004900 <nl_func_sinh_array_f32>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	688c      	ldr	r4, [r1, #8]
 8004904:	6880      	ldr	r0, [r0, #8]
 8004906:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800490a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800490e:	1f0d      	subs	r5, r1, #4
 8004910:	1f16      	subs	r6, r2, #4
 8004912:	42a5      	cmp	r5, r4
 8004914:	f0c0 800a 	bcc.w	800492c <nl_func_sinh_array_f32+0x2c>
 8004918:	ed95 0a00 	vldr	s0, [r5]
 800491c:	1f2d      	subs	r5, r5, #4
 800491e:	f00d fc5b 	bl	80121d8 <sinhf>
 8004922:	ed86 0a00 	vstr	s0, [r6]
 8004926:	1f36      	subs	r6, r6, #4
 8004928:	42a5      	cmp	r5, r4
 800492a:	d2f5      	bcs.n	8004918 <nl_func_sinh_array_f32+0x18>
 800492c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004930 <forward_sinh>:
 8004930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004932:	b081      	sub	sp, #4
 8004934:	6942      	ldr	r2, [r0, #20]
 8004936:	f04f 0501 	mov.w	r5, #1
 800493a:	8811      	ldrh	r1, [r2, #0]
 800493c:	2900      	cmp	r1, #0
 800493e:	bf1a      	itte	ne
 8004940:	6850      	ldrne	r0, [r2, #4]
 8004942:	1d00      	addne	r0, r0, #4
 8004944:	2004      	moveq	r0, #4
 8004946:	6800      	ldr	r0, [r0, #0]
 8004948:	2800      	cmp	r0, #0
 800494a:	bf14      	ite	ne
 800494c:	6803      	ldrne	r3, [r0, #0]
 800494e:	2300      	moveq	r3, #0
 8004950:	2902      	cmp	r1, #2
 8004952:	bfa6      	itte	ge
 8004954:	6850      	ldrge	r0, [r2, #4]
 8004956:	3010      	addge	r0, #16
 8004958:	2004      	movlt	r0, #4
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	2800      	cmp	r0, #0
 800495e:	bf19      	ittee	ne
 8004960:	6800      	ldrne	r0, [r0, #0]
 8004962:	f100 0418 	addne.w	r4, r0, #24
 8004966:	2100      	moveq	r1, #0
 8004968:	f101 0418 	addeq.w	r4, r1, #24
 800496c:	f103 0108 	add.w	r1, r3, #8
 8004970:	680a      	ldr	r2, [r1, #0]
 8004972:	0a12      	lsrs	r2, r2, #8
 8004974:	d01f      	beq.n	80049b6 <forward_sinh+0x86>
 8004976:	684e      	ldr	r6, [r1, #4]
 8004978:	4610      	mov	r0, r2
 800497a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800497e:	1f0f      	subs	r7, r1, #4
 8004980:	f010 0103 	ands.w	r1, r0, #3
 8004984:	d006      	beq.n	8004994 <forward_sinh+0x64>
 8004986:	1e52      	subs	r2, r2, #1
 8004988:	f857 c904 	ldr.w	ip, [r7], #-4
 800498c:	1e49      	subs	r1, r1, #1
 800498e:	fb0c f505 	mul.w	r5, ip, r5
 8004992:	d1f8      	bne.n	8004986 <forward_sinh+0x56>
 8004994:	0880      	lsrs	r0, r0, #2
 8004996:	d00e      	beq.n	80049b6 <forward_sinh+0x86>
 8004998:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800499c:	3910      	subs	r1, #16
 800499e:	68ca      	ldr	r2, [r1, #12]
 80049a0:	688e      	ldr	r6, [r1, #8]
 80049a2:	684f      	ldr	r7, [r1, #4]
 80049a4:	f851 c910 	ldr.w	ip, [r1], #-16
 80049a8:	4372      	muls	r2, r6
 80049aa:	437a      	muls	r2, r7
 80049ac:	fb0c f202 	mul.w	r2, ip, r2
 80049b0:	4355      	muls	r5, r2
 80049b2:	1e40      	subs	r0, r0, #1
 80049b4:	d1f3      	bne.n	800499e <forward_sinh+0x6e>
 80049b6:	6998      	ldr	r0, [r3, #24]
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	6886      	ldr	r6, [r0, #8]
 80049bc:	688a      	ldr	r2, [r1, #8]
 80049be:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80049c2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80049c6:	1f07      	subs	r7, r0, #4
 80049c8:	1f1c      	subs	r4, r3, #4
 80049ca:	42b7      	cmp	r7, r6
 80049cc:	f0c0 800a 	bcc.w	80049e4 <forward_sinh+0xb4>
 80049d0:	ed97 0a00 	vldr	s0, [r7]
 80049d4:	1f3f      	subs	r7, r7, #4
 80049d6:	f00d fbff 	bl	80121d8 <sinhf>
 80049da:	ed84 0a00 	vstr	s0, [r4]
 80049de:	1f24      	subs	r4, r4, #4
 80049e0:	42b7      	cmp	r7, r6
 80049e2:	d2f5      	bcs.n	80049d0 <forward_sinh+0xa0>
 80049e4:	b001      	add	sp, #4
 80049e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e8 <nl_func_tan_array_f32>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	688c      	ldr	r4, [r1, #8]
 80049ec:	6880      	ldr	r0, [r0, #8]
 80049ee:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80049f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80049f6:	1f0d      	subs	r5, r1, #4
 80049f8:	1f16      	subs	r6, r2, #4
 80049fa:	42a5      	cmp	r5, r4
 80049fc:	f0c0 800a 	bcc.w	8004a14 <nl_func_tan_array_f32+0x2c>
 8004a00:	ed95 0a00 	vldr	s0, [r5]
 8004a04:	1f2d      	subs	r5, r5, #4
 8004a06:	f00d f959 	bl	8011cbc <tanf>
 8004a0a:	ed86 0a00 	vstr	s0, [r6]
 8004a0e:	1f36      	subs	r6, r6, #4
 8004a10:	42a5      	cmp	r5, r4
 8004a12:	d2f5      	bcs.n	8004a00 <nl_func_tan_array_f32+0x18>
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a18 <forward_tan>:
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	b081      	sub	sp, #4
 8004a1c:	6942      	ldr	r2, [r0, #20]
 8004a1e:	f04f 0501 	mov.w	r5, #1
 8004a22:	8811      	ldrh	r1, [r2, #0]
 8004a24:	2900      	cmp	r1, #0
 8004a26:	bf1a      	itte	ne
 8004a28:	6850      	ldrne	r0, [r2, #4]
 8004a2a:	1d00      	addne	r0, r0, #4
 8004a2c:	2004      	moveq	r0, #4
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	2800      	cmp	r0, #0
 8004a32:	bf14      	ite	ne
 8004a34:	6803      	ldrne	r3, [r0, #0]
 8004a36:	2300      	moveq	r3, #0
 8004a38:	2902      	cmp	r1, #2
 8004a3a:	bfa6      	itte	ge
 8004a3c:	6850      	ldrge	r0, [r2, #4]
 8004a3e:	3010      	addge	r0, #16
 8004a40:	2004      	movlt	r0, #4
 8004a42:	6800      	ldr	r0, [r0, #0]
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bf19      	ittee	ne
 8004a48:	6800      	ldrne	r0, [r0, #0]
 8004a4a:	f100 0418 	addne.w	r4, r0, #24
 8004a4e:	2100      	moveq	r1, #0
 8004a50:	f101 0418 	addeq.w	r4, r1, #24
 8004a54:	f103 0108 	add.w	r1, r3, #8
 8004a58:	680a      	ldr	r2, [r1, #0]
 8004a5a:	0a12      	lsrs	r2, r2, #8
 8004a5c:	d01f      	beq.n	8004a9e <forward_tan+0x86>
 8004a5e:	684e      	ldr	r6, [r1, #4]
 8004a60:	4610      	mov	r0, r2
 8004a62:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a66:	1f0f      	subs	r7, r1, #4
 8004a68:	f010 0103 	ands.w	r1, r0, #3
 8004a6c:	d006      	beq.n	8004a7c <forward_tan+0x64>
 8004a6e:	1e52      	subs	r2, r2, #1
 8004a70:	f857 c904 	ldr.w	ip, [r7], #-4
 8004a74:	1e49      	subs	r1, r1, #1
 8004a76:	fb0c f505 	mul.w	r5, ip, r5
 8004a7a:	d1f8      	bne.n	8004a6e <forward_tan+0x56>
 8004a7c:	0880      	lsrs	r0, r0, #2
 8004a7e:	d00e      	beq.n	8004a9e <forward_tan+0x86>
 8004a80:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004a84:	3910      	subs	r1, #16
 8004a86:	68ca      	ldr	r2, [r1, #12]
 8004a88:	688e      	ldr	r6, [r1, #8]
 8004a8a:	684f      	ldr	r7, [r1, #4]
 8004a8c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004a90:	4372      	muls	r2, r6
 8004a92:	437a      	muls	r2, r7
 8004a94:	fb0c f202 	mul.w	r2, ip, r2
 8004a98:	4355      	muls	r5, r2
 8004a9a:	1e40      	subs	r0, r0, #1
 8004a9c:	d1f3      	bne.n	8004a86 <forward_tan+0x6e>
 8004a9e:	6998      	ldr	r0, [r3, #24]
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	6886      	ldr	r6, [r0, #8]
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004aaa:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004aae:	1f07      	subs	r7, r0, #4
 8004ab0:	1f1c      	subs	r4, r3, #4
 8004ab2:	42b7      	cmp	r7, r6
 8004ab4:	f0c0 800a 	bcc.w	8004acc <forward_tan+0xb4>
 8004ab8:	ed97 0a00 	vldr	s0, [r7]
 8004abc:	1f3f      	subs	r7, r7, #4
 8004abe:	f00d f8fd 	bl	8011cbc <tanf>
 8004ac2:	ed84 0a00 	vstr	s0, [r4]
 8004ac6:	1f24      	subs	r4, r4, #4
 8004ac8:	42b7      	cmp	r7, r6
 8004aca:	d2f5      	bcs.n	8004ab8 <forward_tan+0xa0>
 8004acc:	b001      	add	sp, #4
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad0 <nl_func_abs_array_f32>:
 8004ad0:	6889      	ldr	r1, [r1, #8]
 8004ad2:	6880      	ldr	r0, [r0, #8]
 8004ad4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004ad8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004adc:	1f1b      	subs	r3, r3, #4
 8004ade:	1f10      	subs	r0, r2, #4
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	d307      	bcc.n	8004af4 <nl_func_abs_array_f32+0x24>
 8004ae4:	f853 c904 	ldr.w	ip, [r3], #-4
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8004aee:	f840 2904 	str.w	r2, [r0], #-4
 8004af2:	d2f7      	bcs.n	8004ae4 <nl_func_abs_array_f32+0x14>
 8004af4:	4770      	bx	lr
	...

08004af8 <forward_abs>:
 8004af8:	b4f0      	push	{r4, r5, r6, r7}
 8004afa:	6942      	ldr	r2, [r0, #20]
 8004afc:	f04f 0501 	mov.w	r5, #1
 8004b00:	8811      	ldrh	r1, [r2, #0]
 8004b02:	2900      	cmp	r1, #0
 8004b04:	bf1a      	itte	ne
 8004b06:	6850      	ldrne	r0, [r2, #4]
 8004b08:	1d00      	addne	r0, r0, #4
 8004b0a:	2004      	moveq	r0, #4
 8004b0c:	6800      	ldr	r0, [r0, #0]
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	bf14      	ite	ne
 8004b12:	6803      	ldrne	r3, [r0, #0]
 8004b14:	2300      	moveq	r3, #0
 8004b16:	2902      	cmp	r1, #2
 8004b18:	bfa6      	itte	ge
 8004b1a:	6850      	ldrge	r0, [r2, #4]
 8004b1c:	3010      	addge	r0, #16
 8004b1e:	2004      	movlt	r0, #4
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	2800      	cmp	r0, #0
 8004b24:	bf19      	ittee	ne
 8004b26:	6800      	ldrne	r0, [r0, #0]
 8004b28:	f100 0418 	addne.w	r4, r0, #24
 8004b2c:	2100      	moveq	r1, #0
 8004b2e:	f101 0418 	addeq.w	r4, r1, #24
 8004b32:	f103 0108 	add.w	r1, r3, #8
 8004b36:	680a      	ldr	r2, [r1, #0]
 8004b38:	0a12      	lsrs	r2, r2, #8
 8004b3a:	d01f      	beq.n	8004b7c <forward_abs+0x84>
 8004b3c:	684e      	ldr	r6, [r1, #4]
 8004b3e:	4610      	mov	r0, r2
 8004b40:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b44:	1f0f      	subs	r7, r1, #4
 8004b46:	f010 0103 	ands.w	r1, r0, #3
 8004b4a:	d006      	beq.n	8004b5a <forward_abs+0x62>
 8004b4c:	1e52      	subs	r2, r2, #1
 8004b4e:	f857 c904 	ldr.w	ip, [r7], #-4
 8004b52:	1e49      	subs	r1, r1, #1
 8004b54:	fb0c f505 	mul.w	r5, ip, r5
 8004b58:	d1f8      	bne.n	8004b4c <forward_abs+0x54>
 8004b5a:	0880      	lsrs	r0, r0, #2
 8004b5c:	d00e      	beq.n	8004b7c <forward_abs+0x84>
 8004b5e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004b62:	3910      	subs	r1, #16
 8004b64:	68ca      	ldr	r2, [r1, #12]
 8004b66:	688e      	ldr	r6, [r1, #8]
 8004b68:	684f      	ldr	r7, [r1, #4]
 8004b6a:	f851 c910 	ldr.w	ip, [r1], #-16
 8004b6e:	4372      	muls	r2, r6
 8004b70:	437a      	muls	r2, r7
 8004b72:	fb0c f202 	mul.w	r2, ip, r2
 8004b76:	4355      	muls	r5, r2
 8004b78:	1e40      	subs	r0, r0, #1
 8004b7a:	d1f3      	bne.n	8004b64 <forward_abs+0x6c>
 8004b7c:	6998      	ldr	r0, [r3, #24]
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	6880      	ldr	r0, [r0, #8]
 8004b82:	6893      	ldr	r3, [r2, #8]
 8004b84:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004b88:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004b8c:	1f09      	subs	r1, r1, #4
 8004b8e:	1f22      	subs	r2, r4, #4
 8004b90:	4281      	cmp	r1, r0
 8004b92:	d307      	bcc.n	8004ba4 <forward_abs+0xac>
 8004b94:	f851 5904 	ldr.w	r5, [r1], #-4
 8004b98:	4281      	cmp	r1, r0
 8004b9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b9e:	f842 3904 	str.w	r3, [r2], #-4
 8004ba2:	d2f7      	bcs.n	8004b94 <forward_abs+0x9c>
 8004ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8004ba6:	4770      	bx	lr

08004ba8 <nl_func_ceil_array_f32>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	688c      	ldr	r4, [r1, #8]
 8004bac:	6880      	ldr	r0, [r0, #8]
 8004bae:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004bb2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004bb6:	1f0d      	subs	r5, r1, #4
 8004bb8:	1f16      	subs	r6, r2, #4
 8004bba:	42a5      	cmp	r5, r4
 8004bbc:	f0c0 800a 	bcc.w	8004bd4 <nl_func_ceil_array_f32+0x2c>
 8004bc0:	ed95 0a00 	vldr	s0, [r5]
 8004bc4:	1f2d      	subs	r5, r5, #4
 8004bc6:	f00c fa21 	bl	801100c <ceilf>
 8004bca:	ed86 0a00 	vstr	s0, [r6]
 8004bce:	1f36      	subs	r6, r6, #4
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d2f5      	bcs.n	8004bc0 <nl_func_ceil_array_f32+0x18>
 8004bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bd8 <forward_ceil>:
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	b081      	sub	sp, #4
 8004bdc:	6942      	ldr	r2, [r0, #20]
 8004bde:	f04f 0501 	mov.w	r5, #1
 8004be2:	8811      	ldrh	r1, [r2, #0]
 8004be4:	2900      	cmp	r1, #0
 8004be6:	bf1a      	itte	ne
 8004be8:	6850      	ldrne	r0, [r2, #4]
 8004bea:	1d00      	addne	r0, r0, #4
 8004bec:	2004      	moveq	r0, #4
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	6803      	ldrne	r3, [r0, #0]
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	2902      	cmp	r1, #2
 8004bfa:	bfa6      	itte	ge
 8004bfc:	6850      	ldrge	r0, [r2, #4]
 8004bfe:	3010      	addge	r0, #16
 8004c00:	2004      	movlt	r0, #4
 8004c02:	6800      	ldr	r0, [r0, #0]
 8004c04:	2800      	cmp	r0, #0
 8004c06:	bf19      	ittee	ne
 8004c08:	6800      	ldrne	r0, [r0, #0]
 8004c0a:	f100 0418 	addne.w	r4, r0, #24
 8004c0e:	2100      	moveq	r1, #0
 8004c10:	f101 0418 	addeq.w	r4, r1, #24
 8004c14:	f103 0108 	add.w	r1, r3, #8
 8004c18:	680a      	ldr	r2, [r1, #0]
 8004c1a:	0a12      	lsrs	r2, r2, #8
 8004c1c:	d01f      	beq.n	8004c5e <forward_ceil+0x86>
 8004c1e:	684e      	ldr	r6, [r1, #4]
 8004c20:	4610      	mov	r0, r2
 8004c22:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c26:	1f0f      	subs	r7, r1, #4
 8004c28:	f010 0103 	ands.w	r1, r0, #3
 8004c2c:	d006      	beq.n	8004c3c <forward_ceil+0x64>
 8004c2e:	1e52      	subs	r2, r2, #1
 8004c30:	f857 c904 	ldr.w	ip, [r7], #-4
 8004c34:	1e49      	subs	r1, r1, #1
 8004c36:	fb0c f505 	mul.w	r5, ip, r5
 8004c3a:	d1f8      	bne.n	8004c2e <forward_ceil+0x56>
 8004c3c:	0880      	lsrs	r0, r0, #2
 8004c3e:	d00e      	beq.n	8004c5e <forward_ceil+0x86>
 8004c40:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004c44:	3910      	subs	r1, #16
 8004c46:	68ca      	ldr	r2, [r1, #12]
 8004c48:	688e      	ldr	r6, [r1, #8]
 8004c4a:	684f      	ldr	r7, [r1, #4]
 8004c4c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004c50:	4372      	muls	r2, r6
 8004c52:	437a      	muls	r2, r7
 8004c54:	fb0c f202 	mul.w	r2, ip, r2
 8004c58:	4355      	muls	r5, r2
 8004c5a:	1e40      	subs	r0, r0, #1
 8004c5c:	d1f3      	bne.n	8004c46 <forward_ceil+0x6e>
 8004c5e:	6998      	ldr	r0, [r3, #24]
 8004c60:	6821      	ldr	r1, [r4, #0]
 8004c62:	6886      	ldr	r6, [r0, #8]
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004c6a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004c6e:	1f07      	subs	r7, r0, #4
 8004c70:	1f1c      	subs	r4, r3, #4
 8004c72:	42b7      	cmp	r7, r6
 8004c74:	f0c0 800a 	bcc.w	8004c8c <forward_ceil+0xb4>
 8004c78:	ed97 0a00 	vldr	s0, [r7]
 8004c7c:	1f3f      	subs	r7, r7, #4
 8004c7e:	f00c f9c5 	bl	801100c <ceilf>
 8004c82:	ed84 0a00 	vstr	s0, [r4]
 8004c86:	1f24      	subs	r4, r4, #4
 8004c88:	42b7      	cmp	r7, r6
 8004c8a:	d2f5      	bcs.n	8004c78 <forward_ceil+0xa0>
 8004c8c:	b001      	add	sp, #4
 8004c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c90 <nl_func_floor_array_f32>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	688c      	ldr	r4, [r1, #8]
 8004c94:	6880      	ldr	r0, [r0, #8]
 8004c96:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004c9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c9e:	1f0d      	subs	r5, r1, #4
 8004ca0:	1f16      	subs	r6, r2, #4
 8004ca2:	42a5      	cmp	r5, r4
 8004ca4:	f0c0 800a 	bcc.w	8004cbc <nl_func_floor_array_f32+0x2c>
 8004ca8:	ed95 0a00 	vldr	s0, [r5]
 8004cac:	1f2d      	subs	r5, r5, #4
 8004cae:	f00c fc93 	bl	80115d8 <floorf>
 8004cb2:	ed86 0a00 	vstr	s0, [r6]
 8004cb6:	1f36      	subs	r6, r6, #4
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	d2f5      	bcs.n	8004ca8 <nl_func_floor_array_f32+0x18>
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cc0 <forward_floor>:
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b081      	sub	sp, #4
 8004cc4:	6942      	ldr	r2, [r0, #20]
 8004cc6:	f04f 0501 	mov.w	r5, #1
 8004cca:	8811      	ldrh	r1, [r2, #0]
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	bf1a      	itte	ne
 8004cd0:	6850      	ldrne	r0, [r2, #4]
 8004cd2:	1d00      	addne	r0, r0, #4
 8004cd4:	2004      	moveq	r0, #4
 8004cd6:	6800      	ldr	r0, [r0, #0]
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	bf14      	ite	ne
 8004cdc:	6803      	ldrne	r3, [r0, #0]
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	2902      	cmp	r1, #2
 8004ce2:	bfa6      	itte	ge
 8004ce4:	6850      	ldrge	r0, [r2, #4]
 8004ce6:	3010      	addge	r0, #16
 8004ce8:	2004      	movlt	r0, #4
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	2800      	cmp	r0, #0
 8004cee:	bf19      	ittee	ne
 8004cf0:	6800      	ldrne	r0, [r0, #0]
 8004cf2:	f100 0418 	addne.w	r4, r0, #24
 8004cf6:	2100      	moveq	r1, #0
 8004cf8:	f101 0418 	addeq.w	r4, r1, #24
 8004cfc:	f103 0108 	add.w	r1, r3, #8
 8004d00:	680a      	ldr	r2, [r1, #0]
 8004d02:	0a12      	lsrs	r2, r2, #8
 8004d04:	d01f      	beq.n	8004d46 <forward_floor+0x86>
 8004d06:	684e      	ldr	r6, [r1, #4]
 8004d08:	4610      	mov	r0, r2
 8004d0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d0e:	1f0f      	subs	r7, r1, #4
 8004d10:	f010 0103 	ands.w	r1, r0, #3
 8004d14:	d006      	beq.n	8004d24 <forward_floor+0x64>
 8004d16:	1e52      	subs	r2, r2, #1
 8004d18:	f857 c904 	ldr.w	ip, [r7], #-4
 8004d1c:	1e49      	subs	r1, r1, #1
 8004d1e:	fb0c f505 	mul.w	r5, ip, r5
 8004d22:	d1f8      	bne.n	8004d16 <forward_floor+0x56>
 8004d24:	0880      	lsrs	r0, r0, #2
 8004d26:	d00e      	beq.n	8004d46 <forward_floor+0x86>
 8004d28:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004d2c:	3910      	subs	r1, #16
 8004d2e:	68ca      	ldr	r2, [r1, #12]
 8004d30:	688e      	ldr	r6, [r1, #8]
 8004d32:	684f      	ldr	r7, [r1, #4]
 8004d34:	f851 c910 	ldr.w	ip, [r1], #-16
 8004d38:	4372      	muls	r2, r6
 8004d3a:	437a      	muls	r2, r7
 8004d3c:	fb0c f202 	mul.w	r2, ip, r2
 8004d40:	4355      	muls	r5, r2
 8004d42:	1e40      	subs	r0, r0, #1
 8004d44:	d1f3      	bne.n	8004d2e <forward_floor+0x6e>
 8004d46:	6998      	ldr	r0, [r3, #24]
 8004d48:	6821      	ldr	r1, [r4, #0]
 8004d4a:	6886      	ldr	r6, [r0, #8]
 8004d4c:	688a      	ldr	r2, [r1, #8]
 8004d4e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004d52:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004d56:	1f07      	subs	r7, r0, #4
 8004d58:	1f1c      	subs	r4, r3, #4
 8004d5a:	42b7      	cmp	r7, r6
 8004d5c:	f0c0 800a 	bcc.w	8004d74 <forward_floor+0xb4>
 8004d60:	ed97 0a00 	vldr	s0, [r7]
 8004d64:	1f3f      	subs	r7, r7, #4
 8004d66:	f00c fc37 	bl	80115d8 <floorf>
 8004d6a:	ed84 0a00 	vstr	s0, [r4]
 8004d6e:	1f24      	subs	r4, r4, #4
 8004d70:	42b7      	cmp	r7, r6
 8004d72:	d2f5      	bcs.n	8004d60 <forward_floor+0xa0>
 8004d74:	b001      	add	sp, #4
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d78 <nl_func_round_array_f32>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	688c      	ldr	r4, [r1, #8]
 8004d7c:	6880      	ldr	r0, [r0, #8]
 8004d7e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004d82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d86:	1f0d      	subs	r5, r1, #4
 8004d88:	1f16      	subs	r6, r2, #4
 8004d8a:	42a5      	cmp	r5, r4
 8004d8c:	f0c0 800a 	bcc.w	8004da4 <nl_func_round_array_f32+0x2c>
 8004d90:	ed95 0a00 	vldr	s0, [r5]
 8004d94:	1f2d      	subs	r5, r5, #4
 8004d96:	f00c ff29 	bl	8011bec <roundf>
 8004d9a:	ed86 0a00 	vstr	s0, [r6]
 8004d9e:	1f36      	subs	r6, r6, #4
 8004da0:	42a5      	cmp	r5, r4
 8004da2:	d2f5      	bcs.n	8004d90 <nl_func_round_array_f32+0x18>
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004da8 <forward_round>:
 8004da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004daa:	b081      	sub	sp, #4
 8004dac:	6942      	ldr	r2, [r0, #20]
 8004dae:	f04f 0501 	mov.w	r5, #1
 8004db2:	8811      	ldrh	r1, [r2, #0]
 8004db4:	2900      	cmp	r1, #0
 8004db6:	bf1a      	itte	ne
 8004db8:	6850      	ldrne	r0, [r2, #4]
 8004dba:	1d00      	addne	r0, r0, #4
 8004dbc:	2004      	moveq	r0, #4
 8004dbe:	6800      	ldr	r0, [r0, #0]
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	bf14      	ite	ne
 8004dc4:	6803      	ldrne	r3, [r0, #0]
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	2902      	cmp	r1, #2
 8004dca:	bfa6      	itte	ge
 8004dcc:	6850      	ldrge	r0, [r2, #4]
 8004dce:	3010      	addge	r0, #16
 8004dd0:	2004      	movlt	r0, #4
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	bf19      	ittee	ne
 8004dd8:	6800      	ldrne	r0, [r0, #0]
 8004dda:	f100 0418 	addne.w	r4, r0, #24
 8004dde:	2100      	moveq	r1, #0
 8004de0:	f101 0418 	addeq.w	r4, r1, #24
 8004de4:	f103 0108 	add.w	r1, r3, #8
 8004de8:	680a      	ldr	r2, [r1, #0]
 8004dea:	0a12      	lsrs	r2, r2, #8
 8004dec:	d01f      	beq.n	8004e2e <forward_round+0x86>
 8004dee:	684e      	ldr	r6, [r1, #4]
 8004df0:	4610      	mov	r0, r2
 8004df2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004df6:	1f0f      	subs	r7, r1, #4
 8004df8:	f010 0103 	ands.w	r1, r0, #3
 8004dfc:	d006      	beq.n	8004e0c <forward_round+0x64>
 8004dfe:	1e52      	subs	r2, r2, #1
 8004e00:	f857 c904 	ldr.w	ip, [r7], #-4
 8004e04:	1e49      	subs	r1, r1, #1
 8004e06:	fb0c f505 	mul.w	r5, ip, r5
 8004e0a:	d1f8      	bne.n	8004dfe <forward_round+0x56>
 8004e0c:	0880      	lsrs	r0, r0, #2
 8004e0e:	d00e      	beq.n	8004e2e <forward_round+0x86>
 8004e10:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004e14:	3910      	subs	r1, #16
 8004e16:	68ca      	ldr	r2, [r1, #12]
 8004e18:	688e      	ldr	r6, [r1, #8]
 8004e1a:	684f      	ldr	r7, [r1, #4]
 8004e1c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004e20:	4372      	muls	r2, r6
 8004e22:	437a      	muls	r2, r7
 8004e24:	fb0c f202 	mul.w	r2, ip, r2
 8004e28:	4355      	muls	r5, r2
 8004e2a:	1e40      	subs	r0, r0, #1
 8004e2c:	d1f3      	bne.n	8004e16 <forward_round+0x6e>
 8004e2e:	6998      	ldr	r0, [r3, #24]
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	6886      	ldr	r6, [r0, #8]
 8004e34:	688a      	ldr	r2, [r1, #8]
 8004e36:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004e3a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004e3e:	1f07      	subs	r7, r0, #4
 8004e40:	1f1c      	subs	r4, r3, #4
 8004e42:	42b7      	cmp	r7, r6
 8004e44:	f0c0 800a 	bcc.w	8004e5c <forward_round+0xb4>
 8004e48:	ed97 0a00 	vldr	s0, [r7]
 8004e4c:	1f3f      	subs	r7, r7, #4
 8004e4e:	f00c fecd 	bl	8011bec <roundf>
 8004e52:	ed84 0a00 	vstr	s0, [r4]
 8004e56:	1f24      	subs	r4, r4, #4
 8004e58:	42b7      	cmp	r7, r6
 8004e5a:	d2f5      	bcs.n	8004e48 <forward_round+0xa0>
 8004e5c:	b001      	add	sp, #4
 8004e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e60 <nl_func_neg_array_f32>:
 8004e60:	6889      	ldr	r1, [r1, #8]
 8004e62:	6880      	ldr	r0, [r0, #8]
 8004e64:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004e68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004e6c:	1f1b      	subs	r3, r3, #4
 8004e6e:	1f12      	subs	r2, r2, #4
 8004e70:	428b      	cmp	r3, r1
 8004e72:	d32b      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004e74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004e78:	1f18      	subs	r0, r3, #4
 8004e7a:	edd3 0a00 	vldr	s1, [r3]
 8004e7e:	4288      	cmp	r0, r1
 8004e80:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004e84:	edc2 0a00 	vstr	s1, [r2]
 8004e88:	d320      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004e8a:	ed90 1a00 	vldr	s2, [r0]
 8004e8e:	1f00      	subs	r0, r0, #4
 8004e90:	1f13      	subs	r3, r2, #4
 8004e92:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004e96:	4288      	cmp	r0, r1
 8004e98:	ed83 1a00 	vstr	s2, [r3]
 8004e9c:	d316      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004e9e:	edd0 0a00 	vldr	s1, [r0]
 8004ea2:	1f00      	subs	r0, r0, #4
 8004ea4:	f1a2 0c08 	sub.w	ip, r2, #8
 8004ea8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004eac:	4288      	cmp	r0, r1
 8004eae:	edcc 0a00 	vstr	s1, [ip]
 8004eb2:	d30b      	bcc.n	8004ecc <nl_func_neg_array_f32+0x6c>
 8004eb4:	ed90 1a00 	vldr	s2, [r0]
 8004eb8:	f1a2 030c 	sub.w	r3, r2, #12
 8004ebc:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004ec0:	3a10      	subs	r2, #16
 8004ec2:	ed83 1a00 	vstr	s2, [r3]
 8004ec6:	1f03      	subs	r3, r0, #4
 8004ec8:	428b      	cmp	r3, r1
 8004eca:	d2d5      	bcs.n	8004e78 <nl_func_neg_array_f32+0x18>
 8004ecc:	4770      	bx	lr
	...

08004ed0 <forward_neg>:
 8004ed0:	b4f0      	push	{r4, r5, r6, r7}
 8004ed2:	6942      	ldr	r2, [r0, #20]
 8004ed4:	f04f 0501 	mov.w	r5, #1
 8004ed8:	8811      	ldrh	r1, [r2, #0]
 8004eda:	2900      	cmp	r1, #0
 8004edc:	bf1a      	itte	ne
 8004ede:	6850      	ldrne	r0, [r2, #4]
 8004ee0:	1d00      	addne	r0, r0, #4
 8004ee2:	2004      	moveq	r0, #4
 8004ee4:	6800      	ldr	r0, [r0, #0]
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	6803      	ldrne	r3, [r0, #0]
 8004eec:	2300      	moveq	r3, #0
 8004eee:	2902      	cmp	r1, #2
 8004ef0:	bfa6      	itte	ge
 8004ef2:	6850      	ldrge	r0, [r2, #4]
 8004ef4:	3010      	addge	r0, #16
 8004ef6:	2004      	movlt	r0, #4
 8004ef8:	6800      	ldr	r0, [r0, #0]
 8004efa:	2800      	cmp	r0, #0
 8004efc:	bf19      	ittee	ne
 8004efe:	6800      	ldrne	r0, [r0, #0]
 8004f00:	f100 0418 	addne.w	r4, r0, #24
 8004f04:	2100      	moveq	r1, #0
 8004f06:	f101 0418 	addeq.w	r4, r1, #24
 8004f0a:	f103 0108 	add.w	r1, r3, #8
 8004f0e:	680a      	ldr	r2, [r1, #0]
 8004f10:	0a12      	lsrs	r2, r2, #8
 8004f12:	d01f      	beq.n	8004f54 <forward_neg+0x84>
 8004f14:	684e      	ldr	r6, [r1, #4]
 8004f16:	4610      	mov	r0, r2
 8004f18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f1c:	1f0f      	subs	r7, r1, #4
 8004f1e:	f010 0103 	ands.w	r1, r0, #3
 8004f22:	d006      	beq.n	8004f32 <forward_neg+0x62>
 8004f24:	1e52      	subs	r2, r2, #1
 8004f26:	f857 c904 	ldr.w	ip, [r7], #-4
 8004f2a:	1e49      	subs	r1, r1, #1
 8004f2c:	fb0c f505 	mul.w	r5, ip, r5
 8004f30:	d1f8      	bne.n	8004f24 <forward_neg+0x54>
 8004f32:	0880      	lsrs	r0, r0, #2
 8004f34:	d00e      	beq.n	8004f54 <forward_neg+0x84>
 8004f36:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004f3a:	3910      	subs	r1, #16
 8004f3c:	68ca      	ldr	r2, [r1, #12]
 8004f3e:	688e      	ldr	r6, [r1, #8]
 8004f40:	684f      	ldr	r7, [r1, #4]
 8004f42:	f851 c910 	ldr.w	ip, [r1], #-16
 8004f46:	4372      	muls	r2, r6
 8004f48:	437a      	muls	r2, r7
 8004f4a:	fb0c f202 	mul.w	r2, ip, r2
 8004f4e:	4355      	muls	r5, r2
 8004f50:	1e40      	subs	r0, r0, #1
 8004f52:	d1f3      	bne.n	8004f3c <forward_neg+0x6c>
 8004f54:	6998      	ldr	r0, [r3, #24]
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	6880      	ldr	r0, [r0, #8]
 8004f5a:	6893      	ldr	r3, [r2, #8]
 8004f5c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004f60:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004f64:	1f09      	subs	r1, r1, #4
 8004f66:	1f22      	subs	r2, r4, #4
 8004f68:	4281      	cmp	r1, r0
 8004f6a:	d32b      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004f6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004f70:	edd1 0a00 	vldr	s1, [r1]
 8004f74:	1f09      	subs	r1, r1, #4
 8004f76:	4281      	cmp	r1, r0
 8004f78:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004f7c:	edc2 0a00 	vstr	s1, [r2]
 8004f80:	d320      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004f82:	ed91 1a00 	vldr	s2, [r1]
 8004f86:	1f09      	subs	r1, r1, #4
 8004f88:	1f13      	subs	r3, r2, #4
 8004f8a:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004f8e:	4281      	cmp	r1, r0
 8004f90:	ed83 1a00 	vstr	s2, [r3]
 8004f94:	d316      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004f96:	edd1 0a00 	vldr	s1, [r1]
 8004f9a:	1f09      	subs	r1, r1, #4
 8004f9c:	f1a2 0408 	sub.w	r4, r2, #8
 8004fa0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004fa4:	4281      	cmp	r1, r0
 8004fa6:	edc4 0a00 	vstr	s1, [r4]
 8004faa:	d30b      	bcc.n	8004fc4 <forward_neg+0xf4>
 8004fac:	ed91 1a00 	vldr	s2, [r1]
 8004fb0:	f1a2 030c 	sub.w	r3, r2, #12
 8004fb4:	1f09      	subs	r1, r1, #4
 8004fb6:	3a10      	subs	r2, #16
 8004fb8:	4281      	cmp	r1, r0
 8004fba:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004fbe:	ed83 1a00 	vstr	s2, [r3]
 8004fc2:	d2d5      	bcs.n	8004f70 <forward_neg+0xa0>
 8004fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8004fc6:	4770      	bx	lr

08004fc8 <nl_func_reciprocal_array_f32>:
 8004fc8:	6889      	ldr	r1, [r1, #8]
 8004fca:	6880      	ldr	r0, [r0, #8]
 8004fcc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004fd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004fd4:	1f1b      	subs	r3, r3, #4
 8004fd6:	1f12      	subs	r2, r2, #4
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	d331      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 8004fdc:	1f18      	subs	r0, r3, #4
 8004fde:	ed93 0a00 	vldr	s0, [r3]
 8004fe2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004fe6:	4288      	cmp	r0, r1
 8004fe8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8004fec:	ed82 0a00 	vstr	s0, [r2]
 8004ff0:	d326      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 8004ff2:	edd0 0a00 	vldr	s1, [r0]
 8004ff6:	1f00      	subs	r0, r0, #4
 8004ff8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004ffc:	1f13      	subs	r3, r2, #4
 8004ffe:	4288      	cmp	r0, r1
 8005000:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005004:	ed83 1a00 	vstr	s2, [r3]
 8005008:	d31a      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 800500a:	ed90 0a00 	vldr	s0, [r0]
 800500e:	1f00      	subs	r0, r0, #4
 8005010:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005014:	f1a2 0c08 	sub.w	ip, r2, #8
 8005018:	4288      	cmp	r0, r1
 800501a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800501e:	ed8c 0a00 	vstr	s0, [ip]
 8005022:	d30d      	bcc.n	8005040 <nl_func_reciprocal_array_f32+0x78>
 8005024:	edd0 0a00 	vldr	s1, [r0]
 8005028:	f1a2 030c 	sub.w	r3, r2, #12
 800502c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005030:	3a10      	subs	r2, #16
 8005032:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005036:	ed83 1a00 	vstr	s2, [r3]
 800503a:	1f03      	subs	r3, r0, #4
 800503c:	428b      	cmp	r3, r1
 800503e:	d2cd      	bcs.n	8004fdc <nl_func_reciprocal_array_f32+0x14>
 8005040:	4770      	bx	lr
	...

08005044 <forward_reciprocal>:
 8005044:	b4f0      	push	{r4, r5, r6, r7}
 8005046:	6942      	ldr	r2, [r0, #20]
 8005048:	f04f 0501 	mov.w	r5, #1
 800504c:	8811      	ldrh	r1, [r2, #0]
 800504e:	2900      	cmp	r1, #0
 8005050:	bf1a      	itte	ne
 8005052:	6850      	ldrne	r0, [r2, #4]
 8005054:	1d00      	addne	r0, r0, #4
 8005056:	2004      	moveq	r0, #4
 8005058:	6800      	ldr	r0, [r0, #0]
 800505a:	2800      	cmp	r0, #0
 800505c:	bf14      	ite	ne
 800505e:	6803      	ldrne	r3, [r0, #0]
 8005060:	2300      	moveq	r3, #0
 8005062:	2902      	cmp	r1, #2
 8005064:	bfa6      	itte	ge
 8005066:	6850      	ldrge	r0, [r2, #4]
 8005068:	3010      	addge	r0, #16
 800506a:	2004      	movlt	r0, #4
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	2800      	cmp	r0, #0
 8005070:	bf19      	ittee	ne
 8005072:	6800      	ldrne	r0, [r0, #0]
 8005074:	f100 0418 	addne.w	r4, r0, #24
 8005078:	2100      	moveq	r1, #0
 800507a:	f101 0418 	addeq.w	r4, r1, #24
 800507e:	f103 0108 	add.w	r1, r3, #8
 8005082:	680a      	ldr	r2, [r1, #0]
 8005084:	0a12      	lsrs	r2, r2, #8
 8005086:	d01f      	beq.n	80050c8 <forward_reciprocal+0x84>
 8005088:	684e      	ldr	r6, [r1, #4]
 800508a:	4610      	mov	r0, r2
 800508c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8005090:	1f0f      	subs	r7, r1, #4
 8005092:	f010 0103 	ands.w	r1, r0, #3
 8005096:	d006      	beq.n	80050a6 <forward_reciprocal+0x62>
 8005098:	1e52      	subs	r2, r2, #1
 800509a:	f857 c904 	ldr.w	ip, [r7], #-4
 800509e:	1e49      	subs	r1, r1, #1
 80050a0:	fb0c f505 	mul.w	r5, ip, r5
 80050a4:	d1f8      	bne.n	8005098 <forward_reciprocal+0x54>
 80050a6:	0880      	lsrs	r0, r0, #2
 80050a8:	d00e      	beq.n	80050c8 <forward_reciprocal+0x84>
 80050aa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80050ae:	3910      	subs	r1, #16
 80050b0:	68ca      	ldr	r2, [r1, #12]
 80050b2:	688e      	ldr	r6, [r1, #8]
 80050b4:	684f      	ldr	r7, [r1, #4]
 80050b6:	f851 c910 	ldr.w	ip, [r1], #-16
 80050ba:	4372      	muls	r2, r6
 80050bc:	437a      	muls	r2, r7
 80050be:	fb0c f202 	mul.w	r2, ip, r2
 80050c2:	4355      	muls	r5, r2
 80050c4:	1e40      	subs	r0, r0, #1
 80050c6:	d1f3      	bne.n	80050b0 <forward_reciprocal+0x6c>
 80050c8:	6998      	ldr	r0, [r3, #24]
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	6880      	ldr	r0, [r0, #8]
 80050ce:	6893      	ldr	r3, [r2, #8]
 80050d0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80050d4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80050d8:	1f09      	subs	r1, r1, #4
 80050da:	1f22      	subs	r2, r4, #4
 80050dc:	4281      	cmp	r1, r0
 80050de:	d331      	bcc.n	8005144 <forward_reciprocal+0x100>
 80050e0:	ed91 0a00 	vldr	s0, [r1]
 80050e4:	1f09      	subs	r1, r1, #4
 80050e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80050ea:	4281      	cmp	r1, r0
 80050ec:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80050f0:	ed82 0a00 	vstr	s0, [r2]
 80050f4:	d326      	bcc.n	8005144 <forward_reciprocal+0x100>
 80050f6:	edd1 0a00 	vldr	s1, [r1]
 80050fa:	1f09      	subs	r1, r1, #4
 80050fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005100:	1f13      	subs	r3, r2, #4
 8005102:	4281      	cmp	r1, r0
 8005104:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005108:	ed83 1a00 	vstr	s2, [r3]
 800510c:	d31a      	bcc.n	8005144 <forward_reciprocal+0x100>
 800510e:	ed91 0a00 	vldr	s0, [r1]
 8005112:	1f09      	subs	r1, r1, #4
 8005114:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005118:	f1a2 0408 	sub.w	r4, r2, #8
 800511c:	4281      	cmp	r1, r0
 800511e:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005122:	ed84 0a00 	vstr	s0, [r4]
 8005126:	d30d      	bcc.n	8005144 <forward_reciprocal+0x100>
 8005128:	edd1 0a00 	vldr	s1, [r1]
 800512c:	f1a2 030c 	sub.w	r3, r2, #12
 8005130:	1f09      	subs	r1, r1, #4
 8005132:	3a10      	subs	r2, #16
 8005134:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005138:	4281      	cmp	r1, r0
 800513a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800513e:	ed83 1a00 	vstr	s2, [r3]
 8005142:	d2cd      	bcs.n	80050e0 <forward_reciprocal+0x9c>
 8005144:	bcf0      	pop	{r4, r5, r6, r7}
 8005146:	4770      	bx	lr

08005148 <nl_func_exp_array_f32>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	688c      	ldr	r4, [r1, #8]
 800514c:	6880      	ldr	r0, [r0, #8]
 800514e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005152:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005156:	1f0d      	subs	r5, r1, #4
 8005158:	1f16      	subs	r6, r2, #4
 800515a:	42a5      	cmp	r5, r4
 800515c:	f0c0 800a 	bcc.w	8005174 <nl_func_exp_array_f32+0x2c>
 8005160:	ed95 0a00 	vldr	s0, [r5]
 8005164:	1f2d      	subs	r5, r5, #4
 8005166:	f00c f9b1 	bl	80114cc <expf>
 800516a:	ed86 0a00 	vstr	s0, [r6]
 800516e:	1f36      	subs	r6, r6, #4
 8005170:	42a5      	cmp	r5, r4
 8005172:	d2f5      	bcs.n	8005160 <nl_func_exp_array_f32+0x18>
 8005174:	bd70      	pop	{r4, r5, r6, pc}
	...

08005178 <forward_exp>:
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	b081      	sub	sp, #4
 800517c:	6942      	ldr	r2, [r0, #20]
 800517e:	f04f 0501 	mov.w	r5, #1
 8005182:	8811      	ldrh	r1, [r2, #0]
 8005184:	2900      	cmp	r1, #0
 8005186:	bf1a      	itte	ne
 8005188:	6850      	ldrne	r0, [r2, #4]
 800518a:	1d00      	addne	r0, r0, #4
 800518c:	2004      	moveq	r0, #4
 800518e:	6800      	ldr	r0, [r0, #0]
 8005190:	2800      	cmp	r0, #0
 8005192:	bf14      	ite	ne
 8005194:	6803      	ldrne	r3, [r0, #0]
 8005196:	2300      	moveq	r3, #0
 8005198:	2902      	cmp	r1, #2
 800519a:	bfa6      	itte	ge
 800519c:	6850      	ldrge	r0, [r2, #4]
 800519e:	3010      	addge	r0, #16
 80051a0:	2004      	movlt	r0, #4
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	2800      	cmp	r0, #0
 80051a6:	bf19      	ittee	ne
 80051a8:	6800      	ldrne	r0, [r0, #0]
 80051aa:	f100 0418 	addne.w	r4, r0, #24
 80051ae:	2100      	moveq	r1, #0
 80051b0:	f101 0418 	addeq.w	r4, r1, #24
 80051b4:	f103 0108 	add.w	r1, r3, #8
 80051b8:	680a      	ldr	r2, [r1, #0]
 80051ba:	0a12      	lsrs	r2, r2, #8
 80051bc:	d01f      	beq.n	80051fe <forward_exp+0x86>
 80051be:	684e      	ldr	r6, [r1, #4]
 80051c0:	4610      	mov	r0, r2
 80051c2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80051c6:	1f0f      	subs	r7, r1, #4
 80051c8:	f010 0103 	ands.w	r1, r0, #3
 80051cc:	d006      	beq.n	80051dc <forward_exp+0x64>
 80051ce:	1e52      	subs	r2, r2, #1
 80051d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80051d4:	1e49      	subs	r1, r1, #1
 80051d6:	fb0c f505 	mul.w	r5, ip, r5
 80051da:	d1f8      	bne.n	80051ce <forward_exp+0x56>
 80051dc:	0880      	lsrs	r0, r0, #2
 80051de:	d00e      	beq.n	80051fe <forward_exp+0x86>
 80051e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80051e4:	3910      	subs	r1, #16
 80051e6:	68ca      	ldr	r2, [r1, #12]
 80051e8:	688e      	ldr	r6, [r1, #8]
 80051ea:	684f      	ldr	r7, [r1, #4]
 80051ec:	f851 c910 	ldr.w	ip, [r1], #-16
 80051f0:	4372      	muls	r2, r6
 80051f2:	437a      	muls	r2, r7
 80051f4:	fb0c f202 	mul.w	r2, ip, r2
 80051f8:	4355      	muls	r5, r2
 80051fa:	1e40      	subs	r0, r0, #1
 80051fc:	d1f3      	bne.n	80051e6 <forward_exp+0x6e>
 80051fe:	6998      	ldr	r0, [r3, #24]
 8005200:	6821      	ldr	r1, [r4, #0]
 8005202:	6886      	ldr	r6, [r0, #8]
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800520a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800520e:	1f07      	subs	r7, r0, #4
 8005210:	1f1c      	subs	r4, r3, #4
 8005212:	42b7      	cmp	r7, r6
 8005214:	f0c0 800a 	bcc.w	800522c <forward_exp+0xb4>
 8005218:	ed97 0a00 	vldr	s0, [r7]
 800521c:	1f3f      	subs	r7, r7, #4
 800521e:	f00c f955 	bl	80114cc <expf>
 8005222:	ed84 0a00 	vstr	s0, [r4]
 8005226:	1f24      	subs	r4, r4, #4
 8005228:	42b7      	cmp	r7, r6
 800522a:	d2f5      	bcs.n	8005218 <forward_exp+0xa0>
 800522c:	b001      	add	sp, #4
 800522e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005230 <nl_func_sigmoid_array_f32>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	688c      	ldr	r4, [r1, #8]
 8005234:	6880      	ldr	r0, [r0, #8]
 8005236:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800523a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800523e:	1f0d      	subs	r5, r1, #4
 8005240:	1f16      	subs	r6, r2, #4
 8005242:	42a5      	cmp	r5, r4
 8005244:	f0c0 8014 	bcc.w	8005270 <nl_func_sigmoid_array_f32+0x40>
 8005248:	ed95 0a00 	vldr	s0, [r5]
 800524c:	1f2d      	subs	r5, r5, #4
 800524e:	eeb1 0a40 	vneg.f32	s0, s0
 8005252:	f00c f93b 	bl	80114cc <expf>
 8005256:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800525a:	ee70 0a20 	vadd.f32	s1, s0, s1
 800525e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005262:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005266:	ed86 1a00 	vstr	s2, [r6]
 800526a:	1f36      	subs	r6, r6, #4
 800526c:	42a5      	cmp	r5, r4
 800526e:	d2eb      	bcs.n	8005248 <nl_func_sigmoid_array_f32+0x18>
 8005270:	bd70      	pop	{r4, r5, r6, pc}
	...

08005274 <forward_sigmoid>:
 8005274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005276:	b081      	sub	sp, #4
 8005278:	6942      	ldr	r2, [r0, #20]
 800527a:	f04f 0501 	mov.w	r5, #1
 800527e:	8811      	ldrh	r1, [r2, #0]
 8005280:	2900      	cmp	r1, #0
 8005282:	bf1a      	itte	ne
 8005284:	6850      	ldrne	r0, [r2, #4]
 8005286:	1d00      	addne	r0, r0, #4
 8005288:	2004      	moveq	r0, #4
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	2800      	cmp	r0, #0
 800528e:	bf14      	ite	ne
 8005290:	6803      	ldrne	r3, [r0, #0]
 8005292:	2300      	moveq	r3, #0
 8005294:	2902      	cmp	r1, #2
 8005296:	bfa6      	itte	ge
 8005298:	6850      	ldrge	r0, [r2, #4]
 800529a:	3010      	addge	r0, #16
 800529c:	2004      	movlt	r0, #4
 800529e:	6800      	ldr	r0, [r0, #0]
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bf19      	ittee	ne
 80052a4:	6800      	ldrne	r0, [r0, #0]
 80052a6:	f100 0418 	addne.w	r4, r0, #24
 80052aa:	2100      	moveq	r1, #0
 80052ac:	f101 0418 	addeq.w	r4, r1, #24
 80052b0:	f103 0108 	add.w	r1, r3, #8
 80052b4:	680a      	ldr	r2, [r1, #0]
 80052b6:	0a12      	lsrs	r2, r2, #8
 80052b8:	d01f      	beq.n	80052fa <forward_sigmoid+0x86>
 80052ba:	684e      	ldr	r6, [r1, #4]
 80052bc:	4610      	mov	r0, r2
 80052be:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80052c2:	1f0f      	subs	r7, r1, #4
 80052c4:	f010 0103 	ands.w	r1, r0, #3
 80052c8:	d006      	beq.n	80052d8 <forward_sigmoid+0x64>
 80052ca:	1e52      	subs	r2, r2, #1
 80052cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80052d0:	1e49      	subs	r1, r1, #1
 80052d2:	fb0c f505 	mul.w	r5, ip, r5
 80052d6:	d1f8      	bne.n	80052ca <forward_sigmoid+0x56>
 80052d8:	0880      	lsrs	r0, r0, #2
 80052da:	d00e      	beq.n	80052fa <forward_sigmoid+0x86>
 80052dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80052e0:	3910      	subs	r1, #16
 80052e2:	68ca      	ldr	r2, [r1, #12]
 80052e4:	688e      	ldr	r6, [r1, #8]
 80052e6:	684f      	ldr	r7, [r1, #4]
 80052e8:	f851 c910 	ldr.w	ip, [r1], #-16
 80052ec:	4372      	muls	r2, r6
 80052ee:	437a      	muls	r2, r7
 80052f0:	fb0c f202 	mul.w	r2, ip, r2
 80052f4:	4355      	muls	r5, r2
 80052f6:	1e40      	subs	r0, r0, #1
 80052f8:	d1f3      	bne.n	80052e2 <forward_sigmoid+0x6e>
 80052fa:	6998      	ldr	r0, [r3, #24]
 80052fc:	6821      	ldr	r1, [r4, #0]
 80052fe:	6886      	ldr	r6, [r0, #8]
 8005300:	688a      	ldr	r2, [r1, #8]
 8005302:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8005306:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800530a:	1f07      	subs	r7, r0, #4
 800530c:	1f1c      	subs	r4, r3, #4
 800530e:	42b7      	cmp	r7, r6
 8005310:	f0c0 8014 	bcc.w	800533c <forward_sigmoid+0xc8>
 8005314:	ed97 0a00 	vldr	s0, [r7]
 8005318:	1f3f      	subs	r7, r7, #4
 800531a:	eeb1 0a40 	vneg.f32	s0, s0
 800531e:	f00c f8d5 	bl	80114cc <expf>
 8005322:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005326:	ee70 0a20 	vadd.f32	s1, s0, s1
 800532a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800532e:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8005332:	ed84 1a00 	vstr	s2, [r4]
 8005336:	1f24      	subs	r4, r4, #4
 8005338:	42b7      	cmp	r7, r6
 800533a:	d2eb      	bcs.n	8005314 <forward_sigmoid+0xa0>
 800533c:	b001      	add	sp, #4
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005340 <nl_func_sign_array_f32>:
 8005340:	6889      	ldr	r1, [r1, #8]
 8005342:	6880      	ldr	r0, [r0, #8]
 8005344:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005348:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800534c:	1f1b      	subs	r3, r3, #4
 800534e:	1f10      	subs	r0, r2, #4
 8005350:	428b      	cmp	r3, r1
 8005352:	d314      	bcc.n	800537e <nl_func_sign_array_f32+0x3e>
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	ed93 0a00 	vldr	s0, [r3]
 800535c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	bfcc      	ite	gt
 8005366:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 800544c <.text_49>
 800536a:	ee00 2a10 	vmovle	s0, r2
 800536e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005372:	1f1b      	subs	r3, r3, #4
 8005374:	ed80 0a00 	vstr	s0, [r0]
 8005378:	1f00      	subs	r0, r0, #4
 800537a:	428b      	cmp	r3, r1
 800537c:	d2ec      	bcs.n	8005358 <nl_func_sign_array_f32+0x18>
 800537e:	4770      	bx	lr

08005380 <forward_sign>:
 8005380:	b4f0      	push	{r4, r5, r6, r7}
 8005382:	6942      	ldr	r2, [r0, #20]
 8005384:	f04f 0501 	mov.w	r5, #1
 8005388:	8811      	ldrh	r1, [r2, #0]
 800538a:	2900      	cmp	r1, #0
 800538c:	bf1a      	itte	ne
 800538e:	6850      	ldrne	r0, [r2, #4]
 8005390:	1d00      	addne	r0, r0, #4
 8005392:	2004      	moveq	r0, #4
 8005394:	6800      	ldr	r0, [r0, #0]
 8005396:	2800      	cmp	r0, #0
 8005398:	bf14      	ite	ne
 800539a:	6803      	ldrne	r3, [r0, #0]
 800539c:	2300      	moveq	r3, #0
 800539e:	2901      	cmp	r1, #1
 80053a0:	bfc6      	itte	gt
 80053a2:	6850      	ldrgt	r0, [r2, #4]
 80053a4:	3010      	addgt	r0, #16
 80053a6:	2004      	movle	r0, #4
 80053a8:	6800      	ldr	r0, [r0, #0]
 80053aa:	2800      	cmp	r0, #0
 80053ac:	bf19      	ittee	ne
 80053ae:	6800      	ldrne	r0, [r0, #0]
 80053b0:	f100 0418 	addne.w	r4, r0, #24
 80053b4:	2100      	moveq	r1, #0
 80053b6:	f101 0418 	addeq.w	r4, r1, #24
 80053ba:	f103 0108 	add.w	r1, r3, #8
 80053be:	680a      	ldr	r2, [r1, #0]
 80053c0:	0a12      	lsrs	r2, r2, #8
 80053c2:	d01f      	beq.n	8005404 <forward_sign+0x84>
 80053c4:	684e      	ldr	r6, [r1, #4]
 80053c6:	4610      	mov	r0, r2
 80053c8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80053cc:	1f0f      	subs	r7, r1, #4
 80053ce:	f010 0103 	ands.w	r1, r0, #3
 80053d2:	d006      	beq.n	80053e2 <forward_sign+0x62>
 80053d4:	1e52      	subs	r2, r2, #1
 80053d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80053da:	1e49      	subs	r1, r1, #1
 80053dc:	fb0c f505 	mul.w	r5, ip, r5
 80053e0:	d1f8      	bne.n	80053d4 <forward_sign+0x54>
 80053e2:	0880      	lsrs	r0, r0, #2
 80053e4:	d00e      	beq.n	8005404 <forward_sign+0x84>
 80053e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80053ea:	3910      	subs	r1, #16
 80053ec:	68ca      	ldr	r2, [r1, #12]
 80053ee:	688e      	ldr	r6, [r1, #8]
 80053f0:	684f      	ldr	r7, [r1, #4]
 80053f2:	f851 c910 	ldr.w	ip, [r1], #-16
 80053f6:	4372      	muls	r2, r6
 80053f8:	437a      	muls	r2, r7
 80053fa:	fb0c f202 	mul.w	r2, ip, r2
 80053fe:	4355      	muls	r5, r2
 8005400:	1e40      	subs	r0, r0, #1
 8005402:	d1f3      	bne.n	80053ec <forward_sign+0x6c>
 8005404:	6998      	ldr	r0, [r3, #24]
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6880      	ldr	r0, [r0, #8]
 800540a:	6893      	ldr	r3, [r2, #8]
 800540c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005410:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005414:	1f09      	subs	r1, r1, #4
 8005416:	1f22      	subs	r2, r4, #4
 8005418:	4281      	cmp	r1, r0
 800541a:	d314      	bcc.n	8005446 <forward_sign+0xc6>
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	ed91 0a00 	vldr	s0, [r1]
 8005424:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	bfcc      	ite	gt
 800542e:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 800544c <.text_49>
 8005432:	ee00 3a10 	vmovle	s0, r3
 8005436:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800543a:	1f09      	subs	r1, r1, #4
 800543c:	ed82 0a00 	vstr	s0, [r2]
 8005440:	1f12      	subs	r2, r2, #4
 8005442:	4281      	cmp	r1, r0
 8005444:	d2ec      	bcs.n	8005420 <forward_sign+0xa0>
 8005446:	bcf0      	pop	{r4, r5, r6, r7}
 8005448:	4770      	bx	lr
	...

0800544c <.text_49>:
 800544c:	00000001 	.word	0x00000001

08005450 <nl_func_sqrt_array_f32>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	6880      	ldr	r0, [r0, #8]
 8005456:	68a1      	ldr	r1, [r4, #8]
 8005458:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800545c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005460:	1f1d      	subs	r5, r3, #4
 8005462:	1f16      	subs	r6, r2, #4
 8005464:	428d      	cmp	r5, r1
 8005466:	d30a      	bcc.n	800547e <nl_func_sqrt_array_f32+0x2e>
 8005468:	ed95 0a00 	vldr	s0, [r5]
 800546c:	1f2d      	subs	r5, r5, #4
 800546e:	f001 fbaf 	bl	8006bd0 <ai_math_sqrt>
 8005472:	ed86 0a00 	vstr	s0, [r6]
 8005476:	68a0      	ldr	r0, [r4, #8]
 8005478:	1f36      	subs	r6, r6, #4
 800547a:	4285      	cmp	r5, r0
 800547c:	d2f4      	bcs.n	8005468 <nl_func_sqrt_array_f32+0x18>
 800547e:	bd70      	pop	{r4, r5, r6, pc}

08005480 <forward_sqrt>:
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005482:	b081      	sub	sp, #4
 8005484:	6942      	ldr	r2, [r0, #20]
 8005486:	f04f 0501 	mov.w	r5, #1
 800548a:	8811      	ldrh	r1, [r2, #0]
 800548c:	2900      	cmp	r1, #0
 800548e:	bf1a      	itte	ne
 8005490:	6850      	ldrne	r0, [r2, #4]
 8005492:	1d00      	addne	r0, r0, #4
 8005494:	2004      	moveq	r0, #4
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	2800      	cmp	r0, #0
 800549a:	bf14      	ite	ne
 800549c:	6803      	ldrne	r3, [r0, #0]
 800549e:	2300      	moveq	r3, #0
 80054a0:	2902      	cmp	r1, #2
 80054a2:	bfa6      	itte	ge
 80054a4:	6850      	ldrge	r0, [r2, #4]
 80054a6:	3010      	addge	r0, #16
 80054a8:	2004      	movlt	r0, #4
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	bf19      	ittee	ne
 80054b0:	6800      	ldrne	r0, [r0, #0]
 80054b2:	f100 0418 	addne.w	r4, r0, #24
 80054b6:	2100      	moveq	r1, #0
 80054b8:	f101 0418 	addeq.w	r4, r1, #24
 80054bc:	f103 0108 	add.w	r1, r3, #8
 80054c0:	680a      	ldr	r2, [r1, #0]
 80054c2:	0a12      	lsrs	r2, r2, #8
 80054c4:	d01f      	beq.n	8005506 <forward_sqrt+0x86>
 80054c6:	684e      	ldr	r6, [r1, #4]
 80054c8:	4610      	mov	r0, r2
 80054ca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80054ce:	1f0f      	subs	r7, r1, #4
 80054d0:	f010 0103 	ands.w	r1, r0, #3
 80054d4:	d006      	beq.n	80054e4 <forward_sqrt+0x64>
 80054d6:	1e52      	subs	r2, r2, #1
 80054d8:	f857 c904 	ldr.w	ip, [r7], #-4
 80054dc:	1e49      	subs	r1, r1, #1
 80054de:	fb0c f505 	mul.w	r5, ip, r5
 80054e2:	d1f8      	bne.n	80054d6 <forward_sqrt+0x56>
 80054e4:	0880      	lsrs	r0, r0, #2
 80054e6:	d00e      	beq.n	8005506 <forward_sqrt+0x86>
 80054e8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80054ec:	3910      	subs	r1, #16
 80054ee:	68ca      	ldr	r2, [r1, #12]
 80054f0:	688e      	ldr	r6, [r1, #8]
 80054f2:	684f      	ldr	r7, [r1, #4]
 80054f4:	f851 c910 	ldr.w	ip, [r1], #-16
 80054f8:	4372      	muls	r2, r6
 80054fa:	437a      	muls	r2, r7
 80054fc:	fb0c f202 	mul.w	r2, ip, r2
 8005500:	4355      	muls	r5, r2
 8005502:	1e40      	subs	r0, r0, #1
 8005504:	d1f3      	bne.n	80054ee <forward_sqrt+0x6e>
 8005506:	699e      	ldr	r6, [r3, #24]
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	68b0      	ldr	r0, [r6, #8]
 800550c:	6893      	ldr	r3, [r2, #8]
 800550e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005512:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005516:	1f0f      	subs	r7, r1, #4
 8005518:	1f24      	subs	r4, r4, #4
 800551a:	4287      	cmp	r7, r0
 800551c:	f0c0 800b 	bcc.w	8005536 <forward_sqrt+0xb6>
 8005520:	ed97 0a00 	vldr	s0, [r7]
 8005524:	1f3f      	subs	r7, r7, #4
 8005526:	f001 fb53 	bl	8006bd0 <ai_math_sqrt>
 800552a:	ed84 0a00 	vstr	s0, [r4]
 800552e:	68b0      	ldr	r0, [r6, #8]
 8005530:	1f24      	subs	r4, r4, #4
 8005532:	4287      	cmp	r7, r0
 8005534:	d2f4      	bcs.n	8005520 <forward_sqrt+0xa0>
 8005536:	b001      	add	sp, #4
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800553c <nl_func_soft_plus_array_f32>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	688c      	ldr	r4, [r1, #8]
 8005540:	6880      	ldr	r0, [r0, #8]
 8005542:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005546:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800554a:	1f0d      	subs	r5, r1, #4
 800554c:	1f16      	subs	r6, r2, #4
 800554e:	42a5      	cmp	r5, r4
 8005550:	f0c0 8010 	bcc.w	8005574 <nl_func_soft_plus_array_f32+0x38>
 8005554:	ed95 0a00 	vldr	s0, [r5]
 8005558:	1f2d      	subs	r5, r5, #4
 800555a:	f00b ffb7 	bl	80114cc <expf>
 800555e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005562:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005566:	f00c f879 	bl	801165c <logf>
 800556a:	ed86 0a00 	vstr	s0, [r6]
 800556e:	1f36      	subs	r6, r6, #4
 8005570:	42a5      	cmp	r5, r4
 8005572:	d2ef      	bcs.n	8005554 <nl_func_soft_plus_array_f32+0x18>
 8005574:	bd70      	pop	{r4, r5, r6, pc}
	...

08005578 <forward_soft_plus>:
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	b081      	sub	sp, #4
 800557c:	6942      	ldr	r2, [r0, #20]
 800557e:	f04f 0501 	mov.w	r5, #1
 8005582:	8811      	ldrh	r1, [r2, #0]
 8005584:	2900      	cmp	r1, #0
 8005586:	bf1a      	itte	ne
 8005588:	6850      	ldrne	r0, [r2, #4]
 800558a:	1d00      	addne	r0, r0, #4
 800558c:	2004      	moveq	r0, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	2800      	cmp	r0, #0
 8005592:	bf14      	ite	ne
 8005594:	6803      	ldrne	r3, [r0, #0]
 8005596:	2300      	moveq	r3, #0
 8005598:	2902      	cmp	r1, #2
 800559a:	bfa6      	itte	ge
 800559c:	6850      	ldrge	r0, [r2, #4]
 800559e:	3010      	addge	r0, #16
 80055a0:	2004      	movlt	r0, #4
 80055a2:	6800      	ldr	r0, [r0, #0]
 80055a4:	2800      	cmp	r0, #0
 80055a6:	bf19      	ittee	ne
 80055a8:	6800      	ldrne	r0, [r0, #0]
 80055aa:	f100 0418 	addne.w	r4, r0, #24
 80055ae:	2100      	moveq	r1, #0
 80055b0:	f101 0418 	addeq.w	r4, r1, #24
 80055b4:	f103 0108 	add.w	r1, r3, #8
 80055b8:	680a      	ldr	r2, [r1, #0]
 80055ba:	0a12      	lsrs	r2, r2, #8
 80055bc:	d01f      	beq.n	80055fe <forward_soft_plus+0x86>
 80055be:	684e      	ldr	r6, [r1, #4]
 80055c0:	4610      	mov	r0, r2
 80055c2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80055c6:	1f0f      	subs	r7, r1, #4
 80055c8:	f010 0103 	ands.w	r1, r0, #3
 80055cc:	d006      	beq.n	80055dc <forward_soft_plus+0x64>
 80055ce:	1e52      	subs	r2, r2, #1
 80055d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80055d4:	1e49      	subs	r1, r1, #1
 80055d6:	fb0c f505 	mul.w	r5, ip, r5
 80055da:	d1f8      	bne.n	80055ce <forward_soft_plus+0x56>
 80055dc:	0880      	lsrs	r0, r0, #2
 80055de:	d00e      	beq.n	80055fe <forward_soft_plus+0x86>
 80055e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80055e4:	3910      	subs	r1, #16
 80055e6:	68ca      	ldr	r2, [r1, #12]
 80055e8:	688e      	ldr	r6, [r1, #8]
 80055ea:	684f      	ldr	r7, [r1, #4]
 80055ec:	f851 c910 	ldr.w	ip, [r1], #-16
 80055f0:	4372      	muls	r2, r6
 80055f2:	437a      	muls	r2, r7
 80055f4:	fb0c f202 	mul.w	r2, ip, r2
 80055f8:	4355      	muls	r5, r2
 80055fa:	1e40      	subs	r0, r0, #1
 80055fc:	d1f3      	bne.n	80055e6 <forward_soft_plus+0x6e>
 80055fe:	6998      	ldr	r0, [r3, #24]
 8005600:	6821      	ldr	r1, [r4, #0]
 8005602:	6886      	ldr	r6, [r0, #8]
 8005604:	688a      	ldr	r2, [r1, #8]
 8005606:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800560a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800560e:	1f07      	subs	r7, r0, #4
 8005610:	1f1c      	subs	r4, r3, #4
 8005612:	42b7      	cmp	r7, r6
 8005614:	f0c0 8010 	bcc.w	8005638 <forward_soft_plus+0xc0>
 8005618:	ed97 0a00 	vldr	s0, [r7]
 800561c:	1f3f      	subs	r7, r7, #4
 800561e:	f00b ff55 	bl	80114cc <expf>
 8005622:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005626:	ee30 0a20 	vadd.f32	s0, s0, s1
 800562a:	f00c f817 	bl	801165c <logf>
 800562e:	ed84 0a00 	vstr	s0, [r4]
 8005632:	1f24      	subs	r4, r4, #4
 8005634:	42b7      	cmp	r7, r6
 8005636:	d2ef      	bcs.n	8005618 <forward_soft_plus+0xa0>
 8005638:	b001      	add	sp, #4
 800563a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563c <nl_func_soft_sign_array_f32>:
 800563c:	6889      	ldr	r1, [r1, #8]
 800563e:	6880      	ldr	r0, [r0, #8]
 8005640:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005644:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005648:	1f1b      	subs	r3, r3, #4
 800564a:	1f10      	subs	r0, r2, #4
 800564c:	428b      	cmp	r3, r1
 800564e:	d30f      	bcc.n	8005670 <nl_func_soft_sign_array_f32+0x34>
 8005650:	ed93 0a00 	vldr	s0, [r3]
 8005654:	1f1b      	subs	r3, r3, #4
 8005656:	eef0 0ac0 	vabs.f32	s1, s0
 800565a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800565e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005662:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005666:	ed80 0a00 	vstr	s0, [r0]
 800566a:	1f00      	subs	r0, r0, #4
 800566c:	428b      	cmp	r3, r1
 800566e:	d2ef      	bcs.n	8005650 <nl_func_soft_sign_array_f32+0x14>
 8005670:	4770      	bx	lr
	...

08005674 <forward_soft_sign>:
 8005674:	b4f0      	push	{r4, r5, r6, r7}
 8005676:	6942      	ldr	r2, [r0, #20]
 8005678:	f04f 0501 	mov.w	r5, #1
 800567c:	8811      	ldrh	r1, [r2, #0]
 800567e:	2900      	cmp	r1, #0
 8005680:	bf1a      	itte	ne
 8005682:	6850      	ldrne	r0, [r2, #4]
 8005684:	1d00      	addne	r0, r0, #4
 8005686:	2004      	moveq	r0, #4
 8005688:	6800      	ldr	r0, [r0, #0]
 800568a:	2800      	cmp	r0, #0
 800568c:	bf14      	ite	ne
 800568e:	6803      	ldrne	r3, [r0, #0]
 8005690:	2300      	moveq	r3, #0
 8005692:	2902      	cmp	r1, #2
 8005694:	bfa6      	itte	ge
 8005696:	6850      	ldrge	r0, [r2, #4]
 8005698:	3010      	addge	r0, #16
 800569a:	2004      	movlt	r0, #4
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	2800      	cmp	r0, #0
 80056a0:	bf19      	ittee	ne
 80056a2:	6800      	ldrne	r0, [r0, #0]
 80056a4:	f100 0418 	addne.w	r4, r0, #24
 80056a8:	2100      	moveq	r1, #0
 80056aa:	f101 0418 	addeq.w	r4, r1, #24
 80056ae:	f103 0108 	add.w	r1, r3, #8
 80056b2:	680a      	ldr	r2, [r1, #0]
 80056b4:	0a12      	lsrs	r2, r2, #8
 80056b6:	d01f      	beq.n	80056f8 <forward_soft_sign+0x84>
 80056b8:	684e      	ldr	r6, [r1, #4]
 80056ba:	4610      	mov	r0, r2
 80056bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80056c0:	1f0f      	subs	r7, r1, #4
 80056c2:	f010 0103 	ands.w	r1, r0, #3
 80056c6:	d006      	beq.n	80056d6 <forward_soft_sign+0x62>
 80056c8:	1e52      	subs	r2, r2, #1
 80056ca:	f857 c904 	ldr.w	ip, [r7], #-4
 80056ce:	1e49      	subs	r1, r1, #1
 80056d0:	fb0c f505 	mul.w	r5, ip, r5
 80056d4:	d1f8      	bne.n	80056c8 <forward_soft_sign+0x54>
 80056d6:	0880      	lsrs	r0, r0, #2
 80056d8:	d00e      	beq.n	80056f8 <forward_soft_sign+0x84>
 80056da:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80056de:	3910      	subs	r1, #16
 80056e0:	68ca      	ldr	r2, [r1, #12]
 80056e2:	688e      	ldr	r6, [r1, #8]
 80056e4:	684f      	ldr	r7, [r1, #4]
 80056e6:	f851 c910 	ldr.w	ip, [r1], #-16
 80056ea:	4372      	muls	r2, r6
 80056ec:	437a      	muls	r2, r7
 80056ee:	fb0c f202 	mul.w	r2, ip, r2
 80056f2:	4355      	muls	r5, r2
 80056f4:	1e40      	subs	r0, r0, #1
 80056f6:	d1f3      	bne.n	80056e0 <forward_soft_sign+0x6c>
 80056f8:	6998      	ldr	r0, [r3, #24]
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	6880      	ldr	r0, [r0, #8]
 80056fe:	6893      	ldr	r3, [r2, #8]
 8005700:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8005704:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005708:	1f09      	subs	r1, r1, #4
 800570a:	1f22      	subs	r2, r4, #4
 800570c:	4281      	cmp	r1, r0
 800570e:	d30f      	bcc.n	8005730 <forward_soft_sign+0xbc>
 8005710:	ed91 0a00 	vldr	s0, [r1]
 8005714:	1f09      	subs	r1, r1, #4
 8005716:	eef0 0ac0 	vabs.f32	s1, s0
 800571a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800571e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005722:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005726:	ed82 0a00 	vstr	s0, [r2]
 800572a:	1f12      	subs	r2, r2, #4
 800572c:	4281      	cmp	r1, r0
 800572e:	d2ef      	bcs.n	8005710 <forward_soft_sign+0x9c>
 8005730:	bcf0      	pop	{r4, r5, r6, r7}
 8005732:	4770      	bx	lr

08005734 <nl_func_tanh_array_f32>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	688c      	ldr	r4, [r1, #8]
 8005738:	6880      	ldr	r0, [r0, #8]
 800573a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800573e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005742:	1f0d      	subs	r5, r1, #4
 8005744:	1f16      	subs	r6, r2, #4
 8005746:	42a5      	cmp	r5, r4
 8005748:	f0c0 800a 	bcc.w	8005760 <nl_func_tanh_array_f32+0x2c>
 800574c:	ed95 0a00 	vldr	s0, [r5]
 8005750:	1f2d      	subs	r5, r5, #4
 8005752:	f00c fadb 	bl	8011d0c <tanhf>
 8005756:	ed86 0a00 	vstr	s0, [r6]
 800575a:	1f36      	subs	r6, r6, #4
 800575c:	42a5      	cmp	r5, r4
 800575e:	d2f5      	bcs.n	800574c <nl_func_tanh_array_f32+0x18>
 8005760:	bd70      	pop	{r4, r5, r6, pc}
	...

08005764 <forward_tanh>:
 8005764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005766:	b081      	sub	sp, #4
 8005768:	6942      	ldr	r2, [r0, #20]
 800576a:	f04f 0501 	mov.w	r5, #1
 800576e:	8811      	ldrh	r1, [r2, #0]
 8005770:	2900      	cmp	r1, #0
 8005772:	bf1a      	itte	ne
 8005774:	6850      	ldrne	r0, [r2, #4]
 8005776:	1d00      	addne	r0, r0, #4
 8005778:	2004      	moveq	r0, #4
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	2800      	cmp	r0, #0
 800577e:	bf14      	ite	ne
 8005780:	6803      	ldrne	r3, [r0, #0]
 8005782:	2300      	moveq	r3, #0
 8005784:	2902      	cmp	r1, #2
 8005786:	bfa6      	itte	ge
 8005788:	6850      	ldrge	r0, [r2, #4]
 800578a:	3010      	addge	r0, #16
 800578c:	2004      	movlt	r0, #4
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	2800      	cmp	r0, #0
 8005792:	bf19      	ittee	ne
 8005794:	6800      	ldrne	r0, [r0, #0]
 8005796:	f100 0418 	addne.w	r4, r0, #24
 800579a:	2100      	moveq	r1, #0
 800579c:	f101 0418 	addeq.w	r4, r1, #24
 80057a0:	f103 0108 	add.w	r1, r3, #8
 80057a4:	680a      	ldr	r2, [r1, #0]
 80057a6:	0a12      	lsrs	r2, r2, #8
 80057a8:	d01f      	beq.n	80057ea <forward_tanh+0x86>
 80057aa:	684e      	ldr	r6, [r1, #4]
 80057ac:	4610      	mov	r0, r2
 80057ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80057b2:	1f0f      	subs	r7, r1, #4
 80057b4:	f010 0103 	ands.w	r1, r0, #3
 80057b8:	d006      	beq.n	80057c8 <forward_tanh+0x64>
 80057ba:	1e52      	subs	r2, r2, #1
 80057bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80057c0:	1e49      	subs	r1, r1, #1
 80057c2:	fb0c f505 	mul.w	r5, ip, r5
 80057c6:	d1f8      	bne.n	80057ba <forward_tanh+0x56>
 80057c8:	0880      	lsrs	r0, r0, #2
 80057ca:	d00e      	beq.n	80057ea <forward_tanh+0x86>
 80057cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80057d0:	3910      	subs	r1, #16
 80057d2:	68ca      	ldr	r2, [r1, #12]
 80057d4:	688e      	ldr	r6, [r1, #8]
 80057d6:	684f      	ldr	r7, [r1, #4]
 80057d8:	f851 c910 	ldr.w	ip, [r1], #-16
 80057dc:	4372      	muls	r2, r6
 80057de:	437a      	muls	r2, r7
 80057e0:	fb0c f202 	mul.w	r2, ip, r2
 80057e4:	4355      	muls	r5, r2
 80057e6:	1e40      	subs	r0, r0, #1
 80057e8:	d1f3      	bne.n	80057d2 <forward_tanh+0x6e>
 80057ea:	6998      	ldr	r0, [r3, #24]
 80057ec:	6821      	ldr	r1, [r4, #0]
 80057ee:	6886      	ldr	r6, [r0, #8]
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80057f6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80057fa:	1f07      	subs	r7, r0, #4
 80057fc:	1f1c      	subs	r4, r3, #4
 80057fe:	42b7      	cmp	r7, r6
 8005800:	f0c0 800a 	bcc.w	8005818 <forward_tanh+0xb4>
 8005804:	ed97 0a00 	vldr	s0, [r7]
 8005808:	1f3f      	subs	r7, r7, #4
 800580a:	f00c fa7f 	bl	8011d0c <tanhf>
 800580e:	ed84 0a00 	vstr	s0, [r4]
 8005812:	1f24      	subs	r4, r4, #4
 8005814:	42b7      	cmp	r7, r6
 8005816:	d2f5      	bcs.n	8005804 <forward_tanh+0xa0>
 8005818:	b001      	add	sp, #4
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800581c <nl_func_relu_array_f32>:
 800581c:	6889      	ldr	r1, [r1, #8]
 800581e:	6880      	ldr	r0, [r0, #8]
 8005820:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005824:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005828:	1f1b      	subs	r3, r3, #4
 800582a:	1f10      	subs	r0, r2, #4
 800582c:	428b      	cmp	r3, r1
 800582e:	d30e      	bcc.n	800584e <nl_func_relu_array_f32+0x32>
 8005830:	ed93 0a00 	vldr	s0, [r3]
 8005834:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	bf48      	it	mi
 800583e:	ed9f 0a7c 	vldrmi	s0, [pc, #496]	; 8005a30 <.text_62>
 8005842:	ed80 0a00 	vstr	s0, [r0]
 8005846:	1f1b      	subs	r3, r3, #4
 8005848:	1f00      	subs	r0, r0, #4
 800584a:	428b      	cmp	r3, r1
 800584c:	d2f0      	bcs.n	8005830 <nl_func_relu_array_f32+0x14>
 800584e:	4770      	bx	lr

08005850 <nl_func_sm_channel_f32>:
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4614      	mov	r4, r2
 8005856:	2c02      	cmp	r4, #2
 8005858:	ed2d 8b02 	vpush	{d8}
 800585c:	688f      	ldr	r7, [r1, #8]
 800585e:	6886      	ldr	r6, [r0, #8]
 8005860:	eddf 8a73 	vldr	s17, [pc, #460]	; 8005a30 <.text_62>
 8005864:	ed97 8a00 	vldr	s16, [r7]
 8005868:	d33d      	bcc.n	80058e6 <nl_func_sm_channel_f32+0x96>
 800586a:	1e61      	subs	r1, r4, #1
 800586c:	1d3a      	adds	r2, r7, #4
 800586e:	f011 0003 	ands.w	r0, r1, #3
 8005872:	d00c      	beq.n	800588e <nl_func_sm_channel_f32+0x3e>
 8005874:	ed92 0a00 	vldr	s0, [r2]
 8005878:	f102 0204 	add.w	r2, r2, #4
 800587c:	eeb4 0a48 	vcmp.f32	s0, s16
 8005880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005884:	bf58      	it	pl
 8005886:	eeb0 8a40 	vmovpl.f32	s16, s0
 800588a:	1e40      	subs	r0, r0, #1
 800588c:	d1f2      	bne.n	8005874 <nl_func_sm_channel_f32+0x24>
 800588e:	0889      	lsrs	r1, r1, #2
 8005890:	f000 802b 	beq.w	80058ea <nl_func_sm_channel_f32+0x9a>
 8005894:	ed92 0a00 	vldr	s0, [r2]
 8005898:	eeb4 0a48 	vcmp.f32	s0, s16
 800589c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a0:	bf58      	it	pl
 80058a2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058a6:	ed92 0a01 	vldr	s0, [r2, #4]
 80058aa:	eeb4 0a48 	vcmp.f32	s0, s16
 80058ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b2:	bf58      	it	pl
 80058b4:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058b8:	ed92 0a02 	vldr	s0, [r2, #8]
 80058bc:	eeb4 0a48 	vcmp.f32	s0, s16
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	bf58      	it	pl
 80058c6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058ca:	ed92 0a03 	vldr	s0, [r2, #12]
 80058ce:	f102 0210 	add.w	r2, r2, #16
 80058d2:	eeb4 0a48 	vcmp.f32	s0, s16
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	bf58      	it	pl
 80058dc:	eeb0 8a40 	vmovpl.f32	s16, s0
 80058e0:	1e49      	subs	r1, r1, #1
 80058e2:	d1d7      	bne.n	8005894 <nl_func_sm_channel_f32+0x44>
 80058e4:	e001      	b.n	80058ea <nl_func_sm_channel_f32+0x9a>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d040      	beq.n	800596c <nl_func_sm_channel_f32+0x11c>
 80058ea:	46b0      	mov	r8, r6
 80058ec:	ea4f 0504 	mov.w	r5, r4
 80058f0:	ed97 0a00 	vldr	s0, [r7]
 80058f4:	1d3f      	adds	r7, r7, #4
 80058f6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80058fa:	f00b fde7 	bl	80114cc <expf>
 80058fe:	1e6d      	subs	r5, r5, #1
 8005900:	ed88 0a00 	vstr	s0, [r8]
 8005904:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005908:	f108 0804 	add.w	r8, r8, #4
 800590c:	d1f0      	bne.n	80058f0 <nl_func_sm_channel_f32+0xa0>
 800590e:	f014 0003 	ands.w	r0, r4, #3
 8005912:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005916:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800591a:	d009      	beq.n	8005930 <nl_func_sm_channel_f32+0xe0>
 800591c:	edd6 0a00 	vldr	s1, [r6]
 8005920:	1e40      	subs	r0, r0, #1
 8005922:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005926:	edc6 0a00 	vstr	s1, [r6]
 800592a:	f106 0604 	add.w	r6, r6, #4
 800592e:	d1f5      	bne.n	800591c <nl_func_sm_channel_f32+0xcc>
 8005930:	08a4      	lsrs	r4, r4, #2
 8005932:	d01b      	beq.n	800596c <nl_func_sm_channel_f32+0x11c>
 8005934:	edd6 0a00 	vldr	s1, [r6]
 8005938:	1e64      	subs	r4, r4, #1
 800593a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800593e:	edc6 0a00 	vstr	s1, [r6]
 8005942:	ed96 1a01 	vldr	s2, [r6, #4]
 8005946:	ee21 1a00 	vmul.f32	s2, s2, s0
 800594a:	ed86 1a01 	vstr	s2, [r6, #4]
 800594e:	edd6 0a02 	vldr	s1, [r6, #8]
 8005952:	ed96 1a03 	vldr	s2, [r6, #12]
 8005956:	ee60 1a80 	vmul.f32	s3, s1, s0
 800595a:	ee61 0a00 	vmul.f32	s1, s2, s0
 800595e:	edc6 1a02 	vstr	s3, [r6, #8]
 8005962:	edc6 0a03 	vstr	s1, [r6, #12]
 8005966:	f106 0610 	add.w	r6, r6, #16
 800596a:	d1e3      	bne.n	8005934 <nl_func_sm_channel_f32+0xe4>
 800596c:	ecbd 8b02 	vpop	{d8}
 8005970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005974 <nl_func_sm_array_f32>:
 8005974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	9f08      	ldr	r7, [sp, #32]
 800597e:	68a8      	ldr	r0, [r5, #8]
 8005980:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005982:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005986:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800598a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800598e:	00bf      	lsls	r7, r7, #2
 8005990:	427f      	negs	r7, r7
 8005992:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8005996:	00b6      	lsls	r6, r6, #2
 8005998:	eb01 0a07 	add.w	sl, r1, r7
 800599c:	4276      	negs	r6, r6
 800599e:	45e2      	cmp	sl, ip
 80059a0:	eb02 0906 	add.w	r9, r2, r6
 80059a4:	d310      	bcc.n	80059c8 <nl_func_sm_array_f32+0x54>
 80059a6:	4698      	mov	r8, r3
 80059a8:	f8c5 a008 	str.w	sl, [r5, #8]
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c4 9008 	str.w	r9, [r4, #8]
 80059b2:	4642      	mov	r2, r8
 80059b4:	4629      	mov	r1, r5
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff ff4a 	bl	8005850 <nl_func_sm_channel_f32>
 80059bc:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80059c0:	44ba      	add	sl, r7
 80059c2:	44b1      	add	r9, r6
 80059c4:	45e2      	cmp	sl, ip
 80059c6:	d2ef      	bcs.n	80059a8 <nl_func_sm_array_f32+0x34>
 80059c8:	68e8      	ldr	r0, [r5, #12]
 80059ca:	60a8      	str	r0, [r5, #8]
 80059cc:	68e1      	ldr	r1, [r4, #12]
 80059ce:	60a1      	str	r1, [r4, #8]
 80059d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059d4 <nl_func_hard_sigmoid_array_f32>:
 80059d4:	6889      	ldr	r1, [r1, #8]
 80059d6:	6880      	ldr	r0, [r0, #8]
 80059d8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80059dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80059e0:	1f1b      	subs	r3, r3, #4
 80059e2:	1f10      	subs	r0, r2, #4
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d321      	bcc.n	8005a2c <nl_func_hard_sigmoid_array_f32+0x58>
 80059e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80059ec:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005cd8 <.text_68>
 80059f0:	edd3 1a00 	vldr	s3, [r3]
 80059f4:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8005cdc <.text_69>
 80059f8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80059fc:	ee01 1a82 	vmla.f32	s2, s3, s4
 8005a00:	eeb4 1a60 	vcmp.f32	s2, s1
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	da08      	bge.n	8005a1c <nl_func_hard_sigmoid_array_f32+0x48>
 8005a0a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	d505      	bpl.n	8005a20 <nl_func_hard_sigmoid_array_f32+0x4c>
 8005a14:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8005a30 <.text_62>
 8005a18:	e002      	b.n	8005a20 <nl_func_hard_sigmoid_array_f32+0x4c>
 8005a1a:	bf00      	nop
 8005a1c:	eeb0 1a40 	vmov.f32	s2, s0
 8005a20:	ed80 1a00 	vstr	s2, [r0]
 8005a24:	1f1b      	subs	r3, r3, #4
 8005a26:	1f00      	subs	r0, r0, #4
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	d2e1      	bcs.n	80059f0 <nl_func_hard_sigmoid_array_f32+0x1c>
 8005a2c:	4770      	bx	lr
	...

08005a30 <.text_62>:
 8005a30:	00000000 	.word	0x00000000

08005a34 <nl_func_clip_array_f32>:
 8005a34:	6889      	ldr	r1, [r1, #8]
 8005a36:	6880      	ldr	r0, [r0, #8]
 8005a38:	ed93 0a00 	vldr	s0, [r3]
 8005a3c:	edd3 0a01 	vldr	s1, [r3, #4]
 8005a40:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005a44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a48:	1f1b      	subs	r3, r3, #4
 8005a4a:	1f10      	subs	r0, r2, #4
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	d315      	bcc.n	8005a7c <nl_func_clip_array_f32+0x48>
 8005a50:	ed93 1a00 	vldr	s2, [r3]
 8005a54:	eeb4 0a41 	vcmp.f32	s0, s2
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	bf58      	it	pl
 8005a5e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8005a62:	eeb4 1a60 	vcmp.f32	s2, s1
 8005a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6a:	bf58      	it	pl
 8005a6c:	eeb0 1a60 	vmovpl.f32	s2, s1
 8005a70:	ed80 1a00 	vstr	s2, [r0]
 8005a74:	1f1b      	subs	r3, r3, #4
 8005a76:	1f00      	subs	r0, r0, #4
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	d2e9      	bcs.n	8005a50 <nl_func_clip_array_f32+0x1c>
 8005a7c:	4770      	bx	lr
	...

08005a80 <nl_func_hardmax_array_f32>:
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	6852      	ldr	r2, [r2, #4]
 8005a86:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8005a8a:	6855      	ldr	r5, [r2, #4]
 8005a8c:	688e      	ldr	r6, [r1, #8]
 8005a8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a92:	68d4      	ldr	r4, [r2, #12]
 8005a94:	4640      	mov	r0, r8
 8005a96:	436c      	muls	r4, r5
 8005a98:	00a1      	lsls	r1, r4, #2
 8005a9a:	f00a f941 	bl	800fd20 <__aeabi_memclr>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2c00      	cmp	r4, #0
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	f000 805d 	beq.w	8005b62 <nl_func_hardmax_array_f32+0xe2>
 8005aa8:	f102 0c01 	add.w	ip, r2, #1
 8005aac:	eb05 0e02 	add.w	lr, r5, r2
 8005ab0:	45f4      	cmp	ip, lr
 8005ab2:	edd3 0a00 	vldr	s1, [r3]
 8005ab6:	d24b      	bcs.n	8005b50 <nl_func_hardmax_array_f32+0xd0>
 8005ab8:	1e69      	subs	r1, r5, #1
 8005aba:	f011 0003 	ands.w	r0, r1, #3
 8005abe:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8005ac2:	d00f      	beq.n	8005ae4 <nl_func_hardmax_array_f32+0x64>
 8005ac4:	ed97 1a00 	vldr	s2, [r7]
 8005ac8:	f107 0704 	add.w	r7, r7, #4
 8005acc:	eef4 0a41 	vcmp.f32	s1, s2
 8005ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad4:	bf44      	itt	mi
 8005ad6:	eef0 0a41 	vmovmi.f32	s1, s2
 8005ada:	4662      	movmi	r2, ip
 8005adc:	1e40      	subs	r0, r0, #1
 8005ade:	f10c 0c01 	add.w	ip, ip, #1
 8005ae2:	d1ef      	bne.n	8005ac4 <nl_func_hardmax_array_f32+0x44>
 8005ae4:	0889      	lsrs	r1, r1, #2
 8005ae6:	d033      	beq.n	8005b50 <nl_func_hardmax_array_f32+0xd0>
 8005ae8:	ed97 1a00 	vldr	s2, [r7]
 8005aec:	eef4 0a41 	vcmp.f32	s1, s2
 8005af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af4:	bf44      	itt	mi
 8005af6:	eef0 0a41 	vmovmi.f32	s1, s2
 8005afa:	4662      	movmi	r2, ip
 8005afc:	ed97 1a01 	vldr	s2, [r7, #4]
 8005b00:	f10c 0c01 	add.w	ip, ip, #1
 8005b04:	eef4 0a41 	vcmp.f32	s1, s2
 8005b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0c:	bf44      	itt	mi
 8005b0e:	eef0 0a41 	vmovmi.f32	s1, s2
 8005b12:	4662      	movmi	r2, ip
 8005b14:	ed97 1a02 	vldr	s2, [r7, #8]
 8005b18:	f10c 0c01 	add.w	ip, ip, #1
 8005b1c:	eef4 0a41 	vcmp.f32	s1, s2
 8005b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b24:	bf44      	itt	mi
 8005b26:	eef0 0a41 	vmovmi.f32	s1, s2
 8005b2a:	4662      	movmi	r2, ip
 8005b2c:	ed97 1a03 	vldr	s2, [r7, #12]
 8005b30:	f10c 0c01 	add.w	ip, ip, #1
 8005b34:	eef4 0a41 	vcmp.f32	s1, s2
 8005b38:	f107 0710 	add.w	r7, r7, #16
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	bf44      	itt	mi
 8005b42:	eef0 0a41 	vmovmi.f32	s1, s2
 8005b46:	4662      	movmi	r2, ip
 8005b48:	1e49      	subs	r1, r1, #1
 8005b4a:	f10c 0c01 	add.w	ip, ip, #1
 8005b4e:	d1cb      	bne.n	8005ae8 <nl_func_hardmax_array_f32+0x68>
 8005b50:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8005b54:	4672      	mov	r2, lr
 8005b56:	42a2      	cmp	r2, r4
 8005b58:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005b5c:	ed80 0a00 	vstr	s0, [r0]
 8005b60:	d3a2      	bcc.n	8005aa8 <nl_func_hardmax_array_f32+0x28>
 8005b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b68 <nl_func_relu_generic_array_f32>:
 8005b68:	6880      	ldr	r0, [r0, #8]
 8005b6a:	6889      	ldr	r1, [r1, #8]
 8005b6c:	ed93 0a00 	vldr	s0, [r3]
 8005b70:	edd3 0a01 	vldr	s1, [r3, #4]
 8005b74:	ed93 1a02 	vldr	s2, [r3, #8]
 8005b78:	1f03      	subs	r3, r0, #4
 8005b7a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8005b7e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8005b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b86:	f1a1 0c04 	sub.w	ip, r1, #4
 8005b8a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8005b8e:	d52b      	bpl.n	8005be8 <nl_func_relu_generic_array_f32+0x80>
 8005b90:	eef5 0a40 	vcmp.f32	s1, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d014      	beq.n	8005bc4 <nl_func_relu_generic_array_f32+0x5c>
 8005b9a:	428a      	cmp	r2, r1
 8005b9c:	f0c0 8011 	bcc.w	8005bc2 <nl_func_relu_generic_array_f32+0x5a>
 8005ba0:	ed92 1a00 	vldr	s2, [r2]
 8005ba4:	eeb4 1a40 	vcmp.f32	s2, s0
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	bf44      	itt	mi
 8005bae:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 8005bb2:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8005bb6:	ed80 1a00 	vstr	s2, [r0]
 8005bba:	1f12      	subs	r2, r2, #4
 8005bbc:	1f00      	subs	r0, r0, #4
 8005bbe:	428a      	cmp	r2, r1
 8005bc0:	d2ee      	bcs.n	8005ba0 <nl_func_relu_generic_array_f32+0x38>
 8005bc2:	4770      	bx	lr
 8005bc4:	428a      	cmp	r2, r1
 8005bc6:	d3fc      	bcc.n	8005bc2 <nl_func_relu_generic_array_f32+0x5a>
 8005bc8:	edd2 0a00 	vldr	s1, [r2]
 8005bcc:	eef4 0a40 	vcmp.f32	s1, s0
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	bf48      	it	mi
 8005bd6:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8005e74 <.text_73>
 8005bda:	edc0 0a00 	vstr	s1, [r0]
 8005bde:	1f12      	subs	r2, r2, #4
 8005be0:	1f00      	subs	r0, r0, #4
 8005be2:	428a      	cmp	r2, r1
 8005be4:	d2f0      	bcs.n	8005bc8 <nl_func_relu_generic_array_f32+0x60>
 8005be6:	4770      	bx	lr
 8005be8:	428a      	cmp	r2, r1
 8005bea:	d3ea      	bcc.n	8005bc2 <nl_func_relu_generic_array_f32+0x5a>
 8005bec:	edd2 1a00 	vldr	s3, [r2]
 8005bf0:	eef4 1a41 	vcmp.f32	s3, s2
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	d50a      	bpl.n	8005c10 <nl_func_relu_generic_array_f32+0xa8>
 8005bfa:	eef4 1a40 	vcmp.f32	s3, s0
 8005bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c02:	d507      	bpl.n	8005c14 <nl_func_relu_generic_array_f32+0xac>
 8005c04:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8005c08:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8005c0c:	e002      	b.n	8005c14 <nl_func_relu_generic_array_f32+0xac>
 8005c0e:	bf00      	nop
 8005c10:	eef0 1a41 	vmov.f32	s3, s2
 8005c14:	edc0 1a00 	vstr	s3, [r0]
 8005c18:	1f12      	subs	r2, r2, #4
 8005c1a:	1f00      	subs	r0, r0, #4
 8005c1c:	428a      	cmp	r2, r1
 8005c1e:	d2e5      	bcs.n	8005bec <nl_func_relu_generic_array_f32+0x84>
 8005c20:	4770      	bx	lr
	...

08005c24 <nl_func_relu_thresholded_array_f32>:
 8005c24:	6889      	ldr	r1, [r1, #8]
 8005c26:	ed93 0a00 	vldr	s0, [r3]
 8005c2a:	6880      	ldr	r0, [r0, #8]
 8005c2c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005c30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c34:	1f1b      	subs	r3, r3, #4
 8005c36:	1f10      	subs	r0, r2, #4
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	d30e      	bcc.n	8005c5a <nl_func_relu_thresholded_array_f32+0x36>
 8005c3c:	edd3 0a00 	vldr	s1, [r3]
 8005c40:	eef4 0a40 	vcmp.f32	s1, s0
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	bf48      	it	mi
 8005c4a:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8005e74 <.text_73>
 8005c4e:	edc0 0a00 	vstr	s1, [r0]
 8005c52:	1f1b      	subs	r3, r3, #4
 8005c54:	1f00      	subs	r0, r0, #4
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d2f0      	bcs.n	8005c3c <nl_func_relu_thresholded_array_f32+0x18>
 8005c5a:	4770      	bx	lr

08005c5c <nl_func_elu_array_f32>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	ed2d 8b04 	vpush	{d8-d9}
 8005c62:	688c      	ldr	r4, [r1, #8]
 8005c64:	6880      	ldr	r0, [r0, #8]
 8005c66:	ed93 8a00 	vldr	s16, [r3]
 8005c6a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005c6e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c72:	1f0d      	subs	r5, r1, #4
 8005c74:	1f16      	subs	r6, r2, #4
 8005c76:	42a5      	cmp	r5, r4
 8005c78:	f0c0 802a 	bcc.w	8005cd0 <nl_func_elu_array_f32+0x74>
 8005c7c:	edd5 8a00 	vldr	s17, [r5]
 8005c80:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c88:	eeb0 0a68 	vmov.f32	s0, s17
 8005c8c:	bf4c      	ite	mi
 8005c8e:	ed9f 9a79 	vldrmi	s18, [pc, #484]	; 8005e74 <.text_73>
 8005c92:	eeb0 9a68 	vmovpl.f32	s18, s17
 8005c96:	f00b fc19 	bl	80114cc <expf>
 8005c9a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005c9e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005ca2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005ca6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	dc09      	bgt.n	8005cc4 <nl_func_elu_array_f32+0x68>
 8005cb0:	eeb0 0a68 	vmov.f32	s0, s17
 8005cb4:	f00b fc0a 	bl	80114cc <expf>
 8005cb8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005cbc:	ee30 1a01 	vadd.f32	s2, s0, s2
 8005cc0:	ee01 9a08 	vmla.f32	s18, s2, s16
 8005cc4:	ed86 9a00 	vstr	s18, [r6]
 8005cc8:	1f2d      	subs	r5, r5, #4
 8005cca:	1f36      	subs	r6, r6, #4
 8005ccc:	42a5      	cmp	r5, r4
 8005cce:	d2d5      	bcs.n	8005c7c <nl_func_elu_array_f32+0x20>
 8005cd0:	ecbd 8b04 	vpop	{d8-d9}
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cd8 <.text_68>:
 8005cd8:	3f800001 	.word	0x3f800001

08005cdc <.text_69>:
 8005cdc:	3e4ccccd 	.word	0x3e4ccccd

08005ce0 <nl_func_selu_array_f32>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	ed2d 8b04 	vpush	{d8-d9}
 8005ce6:	688c      	ldr	r4, [r1, #8]
 8005ce8:	6880      	ldr	r0, [r0, #8]
 8005cea:	ed93 8a00 	vldr	s16, [r3]
 8005cee:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8005cf2:	edd3 8a01 	vldr	s17, [r3, #4]
 8005cf6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005cfa:	1f0d      	subs	r5, r1, #4
 8005cfc:	1f16      	subs	r6, r2, #4
 8005cfe:	42a5      	cmp	r5, r4
 8005d00:	f0c0 802c 	bcc.w	8005d5c <nl_func_selu_array_f32+0x7c>
 8005d04:	ed95 9a00 	vldr	s18, [r5]
 8005d08:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d10:	eeb0 0a49 	vmov.f32	s0, s18
 8005d14:	bf4c      	ite	mi
 8005d16:	eddf 9a57 	vldrmi	s19, [pc, #348]	; 8005e74 <.text_73>
 8005d1a:	eef0 9a49 	vmovpl.f32	s19, s18
 8005d1e:	f00b fbd5 	bl	80114cc <expf>
 8005d22:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005d26:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005d2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005d2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	dc09      	bgt.n	8005d4c <nl_func_selu_array_f32+0x6c>
 8005d38:	eeb0 0a49 	vmov.f32	s0, s18
 8005d3c:	f00b fbc6 	bl	80114cc <expf>
 8005d40:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005d44:	ee30 1a01 	vadd.f32	s2, s0, s2
 8005d48:	ee41 9a08 	vmla.f32	s19, s2, s16
 8005d4c:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8005d50:	1f2d      	subs	r5, r5, #4
 8005d52:	ed86 0a00 	vstr	s0, [r6]
 8005d56:	1f36      	subs	r6, r6, #4
 8005d58:	42a5      	cmp	r5, r4
 8005d5a:	d2d3      	bcs.n	8005d04 <nl_func_selu_array_f32+0x24>
 8005d5c:	ecbd 8b04 	vpop	{d8-d9}
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d64 <nl_func_prelu_array_f32>:
 8005d64:	6889      	ldr	r1, [r1, #8]
 8005d66:	6880      	ldr	r0, [r0, #8]
 8005d68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005d6c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005d70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d74:	1f1b      	subs	r3, r3, #4
 8005d76:	f1ac 0c04 	sub.w	ip, ip, #4
 8005d7a:	1f10      	subs	r0, r2, #4
 8005d7c:	458c      	cmp	ip, r1
 8005d7e:	d320      	bcc.n	8005dc2 <nl_func_prelu_array_f32+0x5e>
 8005d80:	ed9c 0a00 	vldr	s0, [ip]
 8005d84:	461a      	mov	r2, r3
 8005d86:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005d8a:	f1ac 0c04 	sub.w	ip, ip, #4
 8005d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d92:	ed92 1a00 	vldr	s2, [r2]
 8005d96:	bf4c      	ite	mi
 8005d98:	eddf 0a36 	vldrmi	s1, [pc, #216]	; 8005e74 <.text_73>
 8005d9c:	eef0 0a40 	vmovpl.f32	s1, s0
 8005da0:	eeb1 0a40 	vneg.f32	s0, s0
 8005da4:	1f13      	subs	r3, r2, #4
 8005da6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	bf48      	it	mi
 8005db0:	ed9f 0a30 	vldrmi	s0, [pc, #192]	; 8005e74 <.text_73>
 8005db4:	ee41 0a40 	vmls.f32	s1, s2, s0
 8005db8:	edc0 0a00 	vstr	s1, [r0]
 8005dbc:	1f00      	subs	r0, r0, #4
 8005dbe:	458c      	cmp	ip, r1
 8005dc0:	d2de      	bcs.n	8005d80 <nl_func_prelu_array_f32+0x1c>
 8005dc2:	4770      	bx	lr

08005dc4 <forward_relu>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	6962      	ldr	r2, [r4, #20]
 8005dca:	8811      	ldrh	r1, [r2, #0]
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	bf1a      	itte	ne
 8005dd0:	6850      	ldrne	r0, [r2, #4]
 8005dd2:	1d00      	addne	r0, r0, #4
 8005dd4:	2004      	moveq	r0, #4
 8005dd6:	6800      	ldr	r0, [r0, #0]
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	bf14      	ite	ne
 8005ddc:	6805      	ldrne	r5, [r0, #0]
 8005dde:	2500      	moveq	r5, #0
 8005de0:	2902      	cmp	r1, #2
 8005de2:	bfa6      	itte	ge
 8005de4:	6850      	ldrge	r0, [r2, #4]
 8005de6:	3010      	addge	r0, #16
 8005de8:	2004      	movlt	r0, #4
 8005dea:	6800      	ldr	r0, [r0, #0]
 8005dec:	2800      	cmp	r0, #0
 8005dee:	bf19      	ittee	ne
 8005df0:	6800      	ldrne	r0, [r0, #0]
 8005df2:	f100 0618 	addne.w	r6, r0, #24
 8005df6:	2100      	moveq	r1, #0
 8005df8:	f101 0618 	addeq.w	r6, r1, #24
 8005dfc:	69a0      	ldr	r0, [r4, #24]
 8005dfe:	b9f8      	cbnz	r0, 8005e40 <forward_relu+0x7c>
 8005e00:	f105 0008 	add.w	r0, r5, #8
 8005e04:	f7fd ffd8 	bl	8003db8 <ai_shape_get_size>
 8005e08:	69a9      	ldr	r1, [r5, #24]
 8005e0a:	6833      	ldr	r3, [r6, #0]
 8005e0c:	6889      	ldr	r1, [r1, #8]
 8005e0e:	689c      	ldr	r4, [r3, #8]
 8005e10:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8005e14:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005e18:	1f12      	subs	r2, r2, #4
 8005e1a:	1f00      	subs	r0, r0, #4
 8005e1c:	428a      	cmp	r2, r1
 8005e1e:	d328      	bcc.n	8005e72 <forward_relu+0xae>
 8005e20:	ed92 0a00 	vldr	s0, [r2]
 8005e24:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	bf48      	it	mi
 8005e2e:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8005e74 <.text_73>
 8005e32:	ed80 0a00 	vstr	s0, [r0]
 8005e36:	1f12      	subs	r2, r2, #4
 8005e38:	1f00      	subs	r0, r0, #4
 8005e3a:	428a      	cmp	r2, r1
 8005e3c:	d2f0      	bcs.n	8005e20 <forward_relu+0x5c>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	6840      	ldr	r0, [r0, #4]
 8005e42:	2801      	cmp	r0, #1
 8005e44:	f105 0008 	add.w	r0, r5, #8
 8005e48:	d109      	bne.n	8005e5e <forward_relu+0x9a>
 8005e4a:	f7fd ffb5 	bl	8003db8 <ai_shape_get_size>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69a0      	ldr	r0, [r4, #24]
 8005e52:	69a9      	ldr	r1, [r5, #24]
 8005e54:	6883      	ldr	r3, [r0, #8]
 8005e56:	6830      	ldr	r0, [r6, #0]
 8005e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e5c:	e6e2      	b.n	8005c24 <nl_func_relu_thresholded_array_f32>
 8005e5e:	f7fd ffab 	bl	8003db8 <ai_shape_get_size>
 8005e62:	69a1      	ldr	r1, [r4, #24]
 8005e64:	4602      	mov	r2, r0
 8005e66:	6830      	ldr	r0, [r6, #0]
 8005e68:	688b      	ldr	r3, [r1, #8]
 8005e6a:	69a9      	ldr	r1, [r5, #24]
 8005e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e70:	e67a      	b.n	8005b68 <nl_func_relu_generic_array_f32>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}

08005e74 <.text_73>:
 8005e74:	00000000 	.word	0x00000000

08005e78 <forward_relu_thresholded>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	f04f 0601 	mov.w	r6, #1
 8005e80:	6953      	ldr	r3, [r2, #20]
 8005e82:	8819      	ldrh	r1, [r3, #0]
 8005e84:	2900      	cmp	r1, #0
 8005e86:	bf1a      	itte	ne
 8005e88:	6858      	ldrne	r0, [r3, #4]
 8005e8a:	1d00      	addne	r0, r0, #4
 8005e8c:	2004      	moveq	r0, #4
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	2800      	cmp	r0, #0
 8005e92:	bf14      	ite	ne
 8005e94:	6804      	ldrne	r4, [r0, #0]
 8005e96:	2400      	moveq	r4, #0
 8005e98:	2902      	cmp	r1, #2
 8005e9a:	bfa6      	itte	ge
 8005e9c:	6858      	ldrge	r0, [r3, #4]
 8005e9e:	3010      	addge	r0, #16
 8005ea0:	2004      	movlt	r0, #4
 8005ea2:	6800      	ldr	r0, [r0, #0]
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	bf19      	ittee	ne
 8005ea8:	6800      	ldrne	r0, [r0, #0]
 8005eaa:	f100 0518 	addne.w	r5, r0, #24
 8005eae:	2100      	moveq	r1, #0
 8005eb0:	f101 0518 	addeq.w	r5, r1, #24
 8005eb4:	f104 0108 	add.w	r1, r4, #8
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	d022      	beq.n	8005f04 <forward_relu_thresholded+0x8c>
 8005ebe:	684f      	ldr	r7, [r1, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005ec6:	f1a1 0c04 	sub.w	ip, r1, #4
 8005eca:	f010 0103 	ands.w	r1, r0, #3
 8005ece:	d006      	beq.n	8005ede <forward_relu_thresholded+0x66>
 8005ed0:	1e5b      	subs	r3, r3, #1
 8005ed2:	f85c e904 	ldr.w	lr, [ip], #-4
 8005ed6:	1e49      	subs	r1, r1, #1
 8005ed8:	fb0e f606 	mul.w	r6, lr, r6
 8005edc:	d1f8      	bne.n	8005ed0 <forward_relu_thresholded+0x58>
 8005ede:	0880      	lsrs	r0, r0, #2
 8005ee0:	d010      	beq.n	8005f04 <forward_relu_thresholded+0x8c>
 8005ee2:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005ee6:	3910      	subs	r1, #16
 8005ee8:	68cb      	ldr	r3, [r1, #12]
 8005eea:	688f      	ldr	r7, [r1, #8]
 8005eec:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005ef0:	f851 e910 	ldr.w	lr, [r1], #-16
 8005ef4:	437b      	muls	r3, r7
 8005ef6:	fb0c f303 	mul.w	r3, ip, r3
 8005efa:	fb0e f303 	mul.w	r3, lr, r3
 8005efe:	435e      	muls	r6, r3
 8005f00:	1e40      	subs	r0, r0, #1
 8005f02:	d1f1      	bne.n	8005ee8 <forward_relu_thresholded+0x70>
 8005f04:	6990      	ldr	r0, [r2, #24]
 8005f06:	682a      	ldr	r2, [r5, #0]
 8005f08:	6881      	ldr	r1, [r0, #8]
 8005f0a:	69a0      	ldr	r0, [r4, #24]
 8005f0c:	6880      	ldr	r0, [r0, #8]
 8005f0e:	6893      	ldr	r3, [r2, #8]
 8005f10:	ed91 0a00 	vldr	s0, [r1]
 8005f14:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8005f18:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8005f1c:	1f09      	subs	r1, r1, #4
 8005f1e:	1f22      	subs	r2, r4, #4
 8005f20:	4281      	cmp	r1, r0
 8005f22:	d30e      	bcc.n	8005f42 <forward_relu_thresholded+0xca>
 8005f24:	edd1 0a00 	vldr	s1, [r1]
 8005f28:	eef4 0a40 	vcmp.f32	s1, s0
 8005f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f30:	bf48      	it	mi
 8005f32:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8006238 <.text_80>
 8005f36:	edc2 0a00 	vstr	s1, [r2]
 8005f3a:	1f09      	subs	r1, r1, #4
 8005f3c:	1f12      	subs	r2, r2, #4
 8005f3e:	4281      	cmp	r1, r0
 8005f40:	d2f0      	bcs.n	8005f24 <forward_relu_thresholded+0xac>
 8005f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f44 <forward_elu>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	6962      	ldr	r2, [r4, #20]
 8005f4a:	8811      	ldrh	r1, [r2, #0]
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	bf1a      	itte	ne
 8005f50:	6850      	ldrne	r0, [r2, #4]
 8005f52:	1d00      	addne	r0, r0, #4
 8005f54:	2004      	moveq	r0, #4
 8005f56:	6800      	ldr	r0, [r0, #0]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bf14      	ite	ne
 8005f5c:	6805      	ldrne	r5, [r0, #0]
 8005f5e:	2500      	moveq	r5, #0
 8005f60:	2902      	cmp	r1, #2
 8005f62:	bfa6      	itte	ge
 8005f64:	6850      	ldrge	r0, [r2, #4]
 8005f66:	3010      	addge	r0, #16
 8005f68:	2004      	movlt	r0, #4
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	bf19      	ittee	ne
 8005f70:	6800      	ldrne	r0, [r0, #0]
 8005f72:	f100 0618 	addne.w	r6, r0, #24
 8005f76:	2100      	moveq	r1, #0
 8005f78:	f101 0618 	addeq.w	r6, r1, #24
 8005f7c:	f105 0008 	add.w	r0, r5, #8
 8005f80:	f7fd ff1a 	bl	8003db8 <ai_shape_get_size>
 8005f84:	69a1      	ldr	r1, [r4, #24]
 8005f86:	4602      	mov	r2, r0
 8005f88:	6830      	ldr	r0, [r6, #0]
 8005f8a:	688b      	ldr	r3, [r1, #8]
 8005f8c:	69a9      	ldr	r1, [r5, #24]
 8005f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f92:	e663      	b.n	8005c5c <nl_func_elu_array_f32>

08005f94 <forward_selu>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	6962      	ldr	r2, [r4, #20]
 8005f9a:	8811      	ldrh	r1, [r2, #0]
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	bf1a      	itte	ne
 8005fa0:	6850      	ldrne	r0, [r2, #4]
 8005fa2:	1d00      	addne	r0, r0, #4
 8005fa4:	2004      	moveq	r0, #4
 8005fa6:	6800      	ldr	r0, [r0, #0]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	bf14      	ite	ne
 8005fac:	6805      	ldrne	r5, [r0, #0]
 8005fae:	2500      	moveq	r5, #0
 8005fb0:	2902      	cmp	r1, #2
 8005fb2:	bfa6      	itte	ge
 8005fb4:	6850      	ldrge	r0, [r2, #4]
 8005fb6:	3010      	addge	r0, #16
 8005fb8:	2004      	movlt	r0, #4
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	bf19      	ittee	ne
 8005fc0:	6800      	ldrne	r0, [r0, #0]
 8005fc2:	f100 0618 	addne.w	r6, r0, #24
 8005fc6:	2100      	moveq	r1, #0
 8005fc8:	f101 0618 	addeq.w	r6, r1, #24
 8005fcc:	f105 0008 	add.w	r0, r5, #8
 8005fd0:	f7fd fef2 	bl	8003db8 <ai_shape_get_size>
 8005fd4:	69a1      	ldr	r1, [r4, #24]
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6830      	ldr	r0, [r6, #0]
 8005fda:	688b      	ldr	r3, [r1, #8]
 8005fdc:	69a9      	ldr	r1, [r5, #24]
 8005fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fe2:	e67d      	b.n	8005ce0 <nl_func_selu_array_f32>

08005fe4 <forward_prelu>:
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	6942      	ldr	r2, [r0, #20]
 8005fec:	8810      	ldrh	r0, [r2, #0]
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	bf1a      	itte	ne
 8005ff2:	6851      	ldrne	r1, [r2, #4]
 8005ff4:	1d09      	addne	r1, r1, #4
 8005ff6:	2104      	moveq	r1, #4
 8005ff8:	6809      	ldr	r1, [r1, #0]
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	bf19      	ittee	ne
 8005ffe:	6809      	ldrne	r1, [r1, #0]
 8006000:	f101 0518 	addne.w	r5, r1, #24
 8006004:	2300      	moveq	r3, #0
 8006006:	f103 0518 	addeq.w	r5, r3, #24
 800600a:	2801      	cmp	r0, #1
 800600c:	bfc6      	itte	gt
 800600e:	6851      	ldrgt	r1, [r2, #4]
 8006010:	3110      	addgt	r1, #16
 8006012:	2104      	movle	r1, #4
 8006014:	6809      	ldr	r1, [r1, #0]
 8006016:	2900      	cmp	r1, #0
 8006018:	bf19      	ittee	ne
 800601a:	6809      	ldrne	r1, [r1, #0]
 800601c:	f101 0618 	addne.w	r6, r1, #24
 8006020:	2300      	moveq	r3, #0
 8006022:	f103 0618 	addeq.w	r6, r3, #24
 8006026:	2802      	cmp	r0, #2
 8006028:	bfc6      	itte	gt
 800602a:	6850      	ldrgt	r0, [r2, #4]
 800602c:	301c      	addgt	r0, #28
 800602e:	2004      	movle	r0, #4
 8006030:	6800      	ldr	r0, [r0, #0]
 8006032:	2800      	cmp	r0, #0
 8006034:	bf14      	ite	ne
 8006036:	6804      	ldrne	r4, [r0, #0]
 8006038:	2400      	moveq	r4, #0
 800603a:	69a0      	ldr	r0, [r4, #24]
 800603c:	6887      	ldr	r7, [r0, #8]
 800603e:	b12c      	cbz	r4, 800604c <forward_prelu+0x68>
 8006040:	6841      	ldr	r1, [r0, #4]
 8006042:	6800      	ldr	r0, [r0, #0]
 8006044:	f000 fc84 	bl	8006950 <ai_array_get_byte_size>
 8006048:	4680      	mov	r8, r0
 800604a:	e001      	b.n	8006050 <forward_prelu+0x6c>
 800604c:	f04f 0801 	mov.w	r8, #1
 8006050:	6828      	ldr	r0, [r5, #0]
 8006052:	3408      	adds	r4, #8
 8006054:	6841      	ldr	r1, [r0, #4]
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f000 fc7a 	bl	8006950 <ai_array_get_byte_size>
 800605c:	4601      	mov	r1, r0
 800605e:	6828      	ldr	r0, [r5, #0]
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	6880      	ldr	r0, [r0, #8]
 8006064:	4401      	add	r1, r0
 8006066:	4288      	cmp	r0, r1
 8006068:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800606c:	9400      	str	r4, [sp, #0]
 800606e:	d240      	bcs.n	80060f2 <forward_prelu+0x10e>
 8006070:	9702      	str	r7, [sp, #8]
 8006072:	4607      	mov	r7, r0
 8006074:	9101      	str	r1, [sp, #4]
 8006076:	6829      	ldr	r1, [r5, #0]
 8006078:	f04f 0201 	mov.w	r2, #1
 800607c:	608f      	str	r7, [r1, #8]
 800607e:	6834      	ldr	r4, [r6, #0]
 8006080:	f8c4 9008 	str.w	r9, [r4, #8]
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	0a00      	lsrs	r0, r0, #8
 800608a:	d029      	beq.n	80060e0 <forward_prelu+0xfc>
 800608c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8006090:	4684      	mov	ip, r0
 8006092:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8006096:	f1a3 0a04 	sub.w	sl, r3, #4
 800609a:	f01c 0303 	ands.w	r3, ip, #3
 800609e:	d006      	beq.n	80060ae <forward_prelu+0xca>
 80060a0:	1e40      	subs	r0, r0, #1
 80060a2:	f85a b904 	ldr.w	fp, [sl], #-4
 80060a6:	1e5b      	subs	r3, r3, #1
 80060a8:	fb0b f202 	mul.w	r2, fp, r2
 80060ac:	d1f8      	bne.n	80060a0 <forward_prelu+0xbc>
 80060ae:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80060b2:	4663      	mov	r3, ip
 80060b4:	d014      	beq.n	80060e0 <forward_prelu+0xfc>
 80060b6:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80060ba:	3810      	subs	r0, #16
 80060bc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80060c0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80060c4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80060c8:	f850 b910 	ldr.w	fp, [r0], #-16
 80060cc:	1e5b      	subs	r3, r3, #1
 80060ce:	fb0e fc0c 	mul.w	ip, lr, ip
 80060d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80060d6:	fb0b fc0c 	mul.w	ip, fp, ip
 80060da:	fb0c f202 	mul.w	r2, ip, r2
 80060de:	d1ed      	bne.n	80060bc <forward_prelu+0xd8>
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	4620      	mov	r0, r4
 80060e4:	4447      	add	r7, r8
 80060e6:	44c1      	add	r9, r8
 80060e8:	f7ff fe3c 	bl	8005d64 <nl_func_prelu_array_f32>
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	4287      	cmp	r7, r0
 80060f0:	d3c1      	bcc.n	8006076 <forward_prelu+0x92>
 80060f2:	6828      	ldr	r0, [r5, #0]
 80060f4:	68c1      	ldr	r1, [r0, #12]
 80060f6:	6081      	str	r1, [r0, #8]
 80060f8:	6830      	ldr	r0, [r6, #0]
 80060fa:	68c2      	ldr	r2, [r0, #12]
 80060fc:	6082      	str	r2, [r0, #8]
 80060fe:	b003      	add	sp, #12
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006104 <forward_clip>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4604      	mov	r4, r0
 8006108:	6962      	ldr	r2, [r4, #20]
 800610a:	8811      	ldrh	r1, [r2, #0]
 800610c:	2900      	cmp	r1, #0
 800610e:	bf1a      	itte	ne
 8006110:	6850      	ldrne	r0, [r2, #4]
 8006112:	1d00      	addne	r0, r0, #4
 8006114:	2004      	moveq	r0, #4
 8006116:	6800      	ldr	r0, [r0, #0]
 8006118:	2800      	cmp	r0, #0
 800611a:	bf14      	ite	ne
 800611c:	6805      	ldrne	r5, [r0, #0]
 800611e:	2500      	moveq	r5, #0
 8006120:	2902      	cmp	r1, #2
 8006122:	bfa6      	itte	ge
 8006124:	6850      	ldrge	r0, [r2, #4]
 8006126:	3010      	addge	r0, #16
 8006128:	2004      	movlt	r0, #4
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	2800      	cmp	r0, #0
 800612e:	bf19      	ittee	ne
 8006130:	6800      	ldrne	r0, [r0, #0]
 8006132:	f100 0618 	addne.w	r6, r0, #24
 8006136:	2100      	moveq	r1, #0
 8006138:	f101 0618 	addeq.w	r6, r1, #24
 800613c:	f105 0008 	add.w	r0, r5, #8
 8006140:	f7fd fe3a 	bl	8003db8 <ai_shape_get_size>
 8006144:	69a1      	ldr	r1, [r4, #24]
 8006146:	4602      	mov	r2, r0
 8006148:	6830      	ldr	r0, [r6, #0]
 800614a:	688b      	ldr	r3, [r1, #8]
 800614c:	69a9      	ldr	r1, [r5, #24]
 800614e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006152:	e46f      	b.n	8005a34 <nl_func_clip_array_f32>

08006154 <forward_hard_sigmoid>:
 8006154:	b4f0      	push	{r4, r5, r6, r7}
 8006156:	6942      	ldr	r2, [r0, #20]
 8006158:	f04f 0501 	mov.w	r5, #1
 800615c:	8811      	ldrh	r1, [r2, #0]
 800615e:	2900      	cmp	r1, #0
 8006160:	bf1a      	itte	ne
 8006162:	6850      	ldrne	r0, [r2, #4]
 8006164:	1d00      	addne	r0, r0, #4
 8006166:	2004      	moveq	r0, #4
 8006168:	6800      	ldr	r0, [r0, #0]
 800616a:	2800      	cmp	r0, #0
 800616c:	bf14      	ite	ne
 800616e:	6803      	ldrne	r3, [r0, #0]
 8006170:	2300      	moveq	r3, #0
 8006172:	2902      	cmp	r1, #2
 8006174:	bfa6      	itte	ge
 8006176:	6850      	ldrge	r0, [r2, #4]
 8006178:	3010      	addge	r0, #16
 800617a:	2004      	movlt	r0, #4
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	2800      	cmp	r0, #0
 8006180:	bf19      	ittee	ne
 8006182:	6800      	ldrne	r0, [r0, #0]
 8006184:	f100 0418 	addne.w	r4, r0, #24
 8006188:	2100      	moveq	r1, #0
 800618a:	f101 0418 	addeq.w	r4, r1, #24
 800618e:	f103 0108 	add.w	r1, r3, #8
 8006192:	680a      	ldr	r2, [r1, #0]
 8006194:	0a12      	lsrs	r2, r2, #8
 8006196:	d01f      	beq.n	80061d8 <forward_hard_sigmoid+0x84>
 8006198:	684e      	ldr	r6, [r1, #4]
 800619a:	4610      	mov	r0, r2
 800619c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80061a0:	1f0f      	subs	r7, r1, #4
 80061a2:	f010 0103 	ands.w	r1, r0, #3
 80061a6:	d006      	beq.n	80061b6 <forward_hard_sigmoid+0x62>
 80061a8:	1e52      	subs	r2, r2, #1
 80061aa:	f857 c904 	ldr.w	ip, [r7], #-4
 80061ae:	1e49      	subs	r1, r1, #1
 80061b0:	fb0c f505 	mul.w	r5, ip, r5
 80061b4:	d1f8      	bne.n	80061a8 <forward_hard_sigmoid+0x54>
 80061b6:	0880      	lsrs	r0, r0, #2
 80061b8:	d00e      	beq.n	80061d8 <forward_hard_sigmoid+0x84>
 80061ba:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80061be:	3910      	subs	r1, #16
 80061c0:	68ca      	ldr	r2, [r1, #12]
 80061c2:	688e      	ldr	r6, [r1, #8]
 80061c4:	684f      	ldr	r7, [r1, #4]
 80061c6:	f851 c910 	ldr.w	ip, [r1], #-16
 80061ca:	4372      	muls	r2, r6
 80061cc:	437a      	muls	r2, r7
 80061ce:	fb0c f202 	mul.w	r2, ip, r2
 80061d2:	4355      	muls	r5, r2
 80061d4:	1e40      	subs	r0, r0, #1
 80061d6:	d1f3      	bne.n	80061c0 <forward_hard_sigmoid+0x6c>
 80061d8:	6998      	ldr	r0, [r3, #24]
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	6880      	ldr	r0, [r0, #8]
 80061de:	6893      	ldr	r3, [r2, #8]
 80061e0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80061e4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80061e8:	1f09      	subs	r1, r1, #4
 80061ea:	1f22      	subs	r2, r4, #4
 80061ec:	4281      	cmp	r1, r0
 80061ee:	d321      	bcc.n	8006234 <forward_hard_sigmoid+0xe0>
 80061f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80061f4:	eddf 0a11 	vldr	s1, [pc, #68]	; 800623c <.text_81>
 80061f8:	edd1 1a00 	vldr	s3, [r1]
 80061fc:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006240 <.text_82>
 8006200:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8006204:	ee01 1a82 	vmla.f32	s2, s3, s4
 8006208:	eeb4 1a60 	vcmp.f32	s2, s1
 800620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006210:	da08      	bge.n	8006224 <forward_hard_sigmoid+0xd0>
 8006212:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8006216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621a:	d505      	bpl.n	8006228 <forward_hard_sigmoid+0xd4>
 800621c:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8006238 <.text_80>
 8006220:	e002      	b.n	8006228 <forward_hard_sigmoid+0xd4>
 8006222:	bf00      	nop
 8006224:	eeb0 1a40 	vmov.f32	s2, s0
 8006228:	ed82 1a00 	vstr	s2, [r2]
 800622c:	1f09      	subs	r1, r1, #4
 800622e:	1f12      	subs	r2, r2, #4
 8006230:	4281      	cmp	r1, r0
 8006232:	d2e1      	bcs.n	80061f8 <forward_hard_sigmoid+0xa4>
 8006234:	bcf0      	pop	{r4, r5, r6, r7}
 8006236:	4770      	bx	lr

08006238 <.text_80>:
 8006238:	00000000 	.word	0x00000000

0800623c <.text_81>:
 800623c:	3f800001 	.word	0x3f800001

08006240 <.text_82>:
 8006240:	3e4ccccd 	.word	0x3e4ccccd

08006244 <forward_sm>:
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	b083      	sub	sp, #12
 8006248:	6942      	ldr	r2, [r0, #20]
 800624a:	8811      	ldrh	r1, [r2, #0]
 800624c:	2900      	cmp	r1, #0
 800624e:	bf1a      	itte	ne
 8006250:	6850      	ldrne	r0, [r2, #4]
 8006252:	1d00      	addne	r0, r0, #4
 8006254:	2004      	moveq	r0, #4
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	2800      	cmp	r0, #0
 800625a:	bf14      	ite	ne
 800625c:	6804      	ldrne	r4, [r0, #0]
 800625e:	2400      	moveq	r4, #0
 8006260:	2902      	cmp	r1, #2
 8006262:	bfa6      	itte	ge
 8006264:	6850      	ldrge	r0, [r2, #4]
 8006266:	3010      	addge	r0, #16
 8006268:	2004      	movlt	r0, #4
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	2800      	cmp	r0, #0
 800626e:	bf14      	ite	ne
 8006270:	6805      	ldrne	r5, [r0, #0]
 8006272:	2500      	moveq	r5, #0
 8006274:	68e0      	ldr	r0, [r4, #12]
 8006276:	68e9      	ldr	r1, [r5, #12]
 8006278:	6846      	ldr	r6, [r0, #4]
 800627a:	f104 0008 	add.w	r0, r4, #8
 800627e:	684f      	ldr	r7, [r1, #4]
 8006280:	f7fd fd9a 	bl	8003db8 <ai_shape_get_size>
 8006284:	4602      	mov	r2, r0
 8006286:	9701      	str	r7, [sp, #4]
 8006288:	9600      	str	r6, [sp, #0]
 800628a:	69a1      	ldr	r1, [r4, #24]
 800628c:	69a8      	ldr	r0, [r5, #24]
 800628e:	4633      	mov	r3, r6
 8006290:	f7ff fb70 	bl	8005974 <nl_func_sm_array_f32>
 8006294:	b003      	add	sp, #12
 8006296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006298 <forward_hardmax>:
 8006298:	b430      	push	{r4, r5}
 800629a:	6943      	ldr	r3, [r0, #20]
 800629c:	6980      	ldr	r0, [r0, #24]
 800629e:	881a      	ldrh	r2, [r3, #0]
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	bf1a      	itte	ne
 80062a4:	6859      	ldrne	r1, [r3, #4]
 80062a6:	1d09      	addne	r1, r1, #4
 80062a8:	2104      	moveq	r1, #4
 80062aa:	6809      	ldr	r1, [r1, #0]
 80062ac:	2900      	cmp	r1, #0
 80062ae:	bf14      	ite	ne
 80062b0:	680c      	ldrne	r4, [r1, #0]
 80062b2:	2400      	moveq	r4, #0
 80062b4:	2a02      	cmp	r2, #2
 80062b6:	bfa6      	itte	ge
 80062b8:	6859      	ldrge	r1, [r3, #4]
 80062ba:	3110      	addge	r1, #16
 80062bc:	2104      	movlt	r1, #4
 80062be:	6809      	ldr	r1, [r1, #0]
 80062c0:	6883      	ldr	r3, [r0, #8]
 80062c2:	2900      	cmp	r1, #0
 80062c4:	bf19      	ittee	ne
 80062c6:	6809      	ldrne	r1, [r1, #0]
 80062c8:	f101 0518 	addne.w	r5, r1, #24
 80062cc:	2200      	moveq	r2, #0
 80062ce:	f102 0518 	addeq.w	r5, r2, #24
 80062d2:	f104 0208 	add.w	r2, r4, #8
 80062d6:	69a1      	ldr	r1, [r4, #24]
 80062d8:	6828      	ldr	r0, [r5, #0]
 80062da:	bc30      	pop	{r4, r5}
 80062dc:	f7ff bbd0 	b.w	8005a80 <nl_func_hardmax_array_f32>

080062e0 <ai_array_fmt_name>:
 80062e0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80062e4:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80062e8:	d062      	beq.n	80063b0 <ai_array_fmt_name+0xd0>
 80062ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80062ee:	1a89      	subs	r1, r1, r2
 80062f0:	f000 8094 	beq.w	800641c <ai_array_fmt_name+0x13c>
 80062f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f8:	1a89      	subs	r1, r1, r2
 80062fa:	d071      	beq.n	80063e0 <ai_array_fmt_name+0x100>
 80062fc:	1a89      	subs	r1, r1, r2
 80062fe:	d063      	beq.n	80063c8 <ai_array_fmt_name+0xe8>
 8006300:	1fc9      	subs	r1, r1, #7
 8006302:	f000 808e 	beq.w	8006422 <ai_array_fmt_name+0x142>
 8006306:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800630a:	1a89      	subs	r1, r1, r2
 800630c:	d05f      	beq.n	80063ce <ai_array_fmt_name+0xee>
 800630e:	390f      	subs	r1, #15
 8006310:	f000 808a 	beq.w	8006428 <ai_array_fmt_name+0x148>
 8006314:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006318:	1a89      	subs	r1, r1, r2
 800631a:	d05b      	beq.n	80063d4 <ai_array_fmt_name+0xf4>
 800631c:	391f      	subs	r1, #31
 800631e:	f000 8086 	beq.w	800642e <ai_array_fmt_name+0x14e>
 8006322:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006326:	1a89      	subs	r1, r1, r2
 8006328:	d057      	beq.n	80063da <ai_array_fmt_name+0xfa>
 800632a:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006900 <.text_15>
 800632e:	1a89      	subs	r1, r1, r2
 8006330:	f000 808f 	beq.w	8006452 <ai_array_fmt_name+0x172>
 8006334:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006338:	1a89      	subs	r1, r1, r2
 800633a:	f000 8087 	beq.w	800644c <ai_array_fmt_name+0x16c>
 800633e:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006904 <.text_16>
 8006342:	1a89      	subs	r1, r1, r2
 8006344:	d05e      	beq.n	8006404 <ai_array_fmt_name+0x124>
 8006346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800634a:	1a89      	subs	r1, r1, r2
 800634c:	d057      	beq.n	80063fe <ai_array_fmt_name+0x11e>
 800634e:	1a89      	subs	r1, r1, r2
 8006350:	d049      	beq.n	80063e6 <ai_array_fmt_name+0x106>
 8006352:	1fc9      	subs	r1, r1, #7
 8006354:	d059      	beq.n	800640a <ai_array_fmt_name+0x12a>
 8006356:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800635a:	1a89      	subs	r1, r1, r2
 800635c:	d046      	beq.n	80063ec <ai_array_fmt_name+0x10c>
 800635e:	390f      	subs	r1, #15
 8006360:	d056      	beq.n	8006410 <ai_array_fmt_name+0x130>
 8006362:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006366:	1a89      	subs	r1, r1, r2
 8006368:	d043      	beq.n	80063f2 <ai_array_fmt_name+0x112>
 800636a:	391f      	subs	r1, #31
 800636c:	d053      	beq.n	8006416 <ai_array_fmt_name+0x136>
 800636e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006372:	1a89      	subs	r1, r1, r2
 8006374:	d040      	beq.n	80063f8 <ai_array_fmt_name+0x118>
 8006376:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006900 <.text_15>
 800637a:	1a89      	subs	r1, r1, r2
 800637c:	d063      	beq.n	8006446 <ai_array_fmt_name+0x166>
 800637e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006382:	1a89      	subs	r1, r1, r2
 8006384:	d05c      	beq.n	8006440 <ai_array_fmt_name+0x160>
 8006386:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006908 <.text_17>
 800638a:	1a89      	subs	r1, r1, r2
 800638c:	d019      	beq.n	80063c2 <ai_array_fmt_name+0xe2>
 800638e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006392:	1a89      	subs	r1, r1, r2
 8006394:	d00f      	beq.n	80063b6 <ai_array_fmt_name+0xd6>
 8006396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800639a:	1a89      	subs	r1, r1, r2
 800639c:	d00e      	beq.n	80063bc <ai_array_fmt_name+0xdc>
 800639e:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 800690c <.text_18>
 80063a2:	1a89      	subs	r1, r1, r2
 80063a4:	d049      	beq.n	800643a <ai_array_fmt_name+0x15a>
 80063a6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80063aa:	1a89      	subs	r1, r1, r2
 80063ac:	d042      	beq.n	8006434 <ai_array_fmt_name+0x154>
 80063ae:	e053      	b.n	8006458 <ai_array_fmt_name+0x178>
 80063b0:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80063b4:	4770      	bx	lr
 80063b6:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80063ba:	4770      	bx	lr
 80063bc:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80063c0:	4770      	bx	lr
 80063c2:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80063c6:	4770      	bx	lr
 80063c8:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80063cc:	4770      	bx	lr
 80063ce:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80063d2:	4770      	bx	lr
 80063d4:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80063d8:	4770      	bx	lr
 80063da:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80063de:	4770      	bx	lr
 80063e0:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80063e4:	4770      	bx	lr
 80063e6:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80063ea:	4770      	bx	lr
 80063ec:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80063f0:	4770      	bx	lr
 80063f2:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80063f6:	4770      	bx	lr
 80063f8:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80063fc:	4770      	bx	lr
 80063fe:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006402:	4770      	bx	lr
 8006404:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006408:	4770      	bx	lr
 800640a:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800640e:	4770      	bx	lr
 8006410:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006414:	4770      	bx	lr
 8006416:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800641a:	4770      	bx	lr
 800641c:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006420:	4770      	bx	lr
 8006422:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006426:	4770      	bx	lr
 8006428:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800642c:	4770      	bx	lr
 800642e:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8006432:	4770      	bx	lr
 8006434:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006438:	4770      	bx	lr
 800643a:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 800643e:	4770      	bx	lr
 8006440:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8006444:	4770      	bx	lr
 8006446:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800644a:	4770      	bx	lr
 800644c:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006450:	4770      	bx	lr
 8006452:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8006456:	4770      	bx	lr
 8006458:	f36f 000d 	bfc	r0, #0, #14
 800645c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006460:	2840      	cmp	r0, #64	; 0x40
 8006462:	d009      	beq.n	8006478 <ai_array_fmt_name+0x198>
 8006464:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006910 <.text_19>
 8006468:	4288      	cmp	r0, r1
 800646a:	d00b      	beq.n	8006484 <ai_array_fmt_name+0x1a4>
 800646c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006914 <.text_20>
 8006470:	4288      	cmp	r0, r1
 8006472:	d004      	beq.n	800647e <ai_array_fmt_name+0x19e>
 8006474:	a07a      	add	r0, pc, #488	; (adr r0, 8006660 <.text_8>)
 8006476:	4770      	bx	lr
 8006478:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800647c:	4770      	bx	lr
 800647e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8006482:	4770      	bx	lr
 8006484:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8006488:	4770      	bx	lr

0800648a <ai_array_fmt_exported>:
 800648a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800648e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006492:	d068      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 8006494:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006498:	1a89      	subs	r1, r1, r2
 800649a:	d064      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 800649c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a0:	1a89      	subs	r1, r1, r2
 80064a2:	d062      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064a4:	1a89      	subs	r1, r1, r2
 80064a6:	d05e      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064a8:	1fc9      	subs	r1, r1, #7
 80064aa:	d05c      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80064b0:	1a89      	subs	r1, r1, r2
 80064b2:	d058      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064b4:	390f      	subs	r1, #15
 80064b6:	d056      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80064bc:	1a89      	subs	r1, r1, r2
 80064be:	d054      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064c0:	391f      	subs	r1, #31
 80064c2:	d052      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80064c8:	1a89      	subs	r1, r1, r2
 80064ca:	d04e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064cc:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006900 <.text_15>
 80064d0:	1a89      	subs	r1, r1, r2
 80064d2:	d04a      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80064d8:	1a89      	subs	r1, r1, r2
 80064da:	d046      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064dc:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006904 <.text_16>
 80064e0:	1a89      	subs	r1, r1, r2
 80064e2:	d040      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e8:	1a89      	subs	r1, r1, r2
 80064ea:	d03e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 80064ec:	1a89      	subs	r1, r1, r2
 80064ee:	d03a      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064f0:	1fc9      	subs	r1, r1, #7
 80064f2:	d038      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064f4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80064f8:	1a89      	subs	r1, r1, r2
 80064fa:	d034      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 80064fc:	390f      	subs	r1, #15
 80064fe:	d032      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 8006500:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006504:	1a89      	subs	r1, r1, r2
 8006506:	d030      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006508:	391f      	subs	r1, #31
 800650a:	d02e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800650c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006510:	1a89      	subs	r1, r1, r2
 8006512:	d02a      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006514:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006900 <.text_15>
 8006518:	1a89      	subs	r1, r1, r2
 800651a:	d026      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800651c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006520:	1a89      	subs	r1, r1, r2
 8006522:	d022      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006524:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006908 <.text_17>
 8006528:	1a89      	subs	r1, r1, r2
 800652a:	d01e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800652c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006530:	1a89      	subs	r1, r1, r2
 8006532:	d018      	beq.n	8006566 <ai_array_fmt_exported+0xdc>
 8006534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006538:	1a89      	subs	r1, r1, r2
 800653a:	d016      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800653c:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 800690c <.text_18>
 8006540:	1a89      	subs	r1, r1, r2
 8006542:	d012      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 8006544:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006548:	1a89      	subs	r1, r1, r2
 800654a:	d00e      	beq.n	800656a <ai_array_fmt_exported+0xe0>
 800654c:	f36f 000d 	bfc	r0, #0, #14
 8006550:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006554:	2840      	cmp	r0, #64	; 0x40
 8006556:	bf1f      	itttt	ne
 8006558:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006910 <.text_19>
 800655c:	4298      	cmpne	r0, r3
 800655e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006914 <.text_20>
 8006562:	4298      	cmpne	r0, r3
 8006564:	d101      	bne.n	800656a <ai_array_fmt_exported+0xe0>
 8006566:	2001      	movs	r0, #1
 8006568:	4770      	bx	lr
 800656a:	2000      	movs	r0, #0
 800656c:	4770      	bx	lr

0800656e <ai_array_fmt_valid>:
 800656e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006572:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006576:	d069      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006578:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800657c:	1a89      	subs	r1, r1, r2
 800657e:	d065      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006584:	1a89      	subs	r1, r1, r2
 8006586:	d061      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006588:	1a89      	subs	r1, r1, r2
 800658a:	d05f      	beq.n	800664c <ai_array_fmt_valid+0xde>
 800658c:	1fc9      	subs	r1, r1, #7
 800658e:	d05d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006590:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006594:	1a89      	subs	r1, r1, r2
 8006596:	d059      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006598:	390f      	subs	r1, #15
 800659a:	d057      	beq.n	800664c <ai_array_fmt_valid+0xde>
 800659c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80065a0:	1a89      	subs	r1, r1, r2
 80065a2:	d053      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065a4:	391f      	subs	r1, #31
 80065a6:	d051      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80065ac:	1a89      	subs	r1, r1, r2
 80065ae:	d04d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065b0:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006900 <.text_15>
 80065b4:	1a89      	subs	r1, r1, r2
 80065b6:	d049      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80065bc:	1a89      	subs	r1, r1, r2
 80065be:	d045      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065c0:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006904 <.text_16>
 80065c4:	1a89      	subs	r1, r1, r2
 80065c6:	d041      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	1a89      	subs	r1, r1, r2
 80065ce:	d03d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065d0:	1a89      	subs	r1, r1, r2
 80065d2:	d03b      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065d4:	1fc9      	subs	r1, r1, #7
 80065d6:	d039      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065d8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80065dc:	1a89      	subs	r1, r1, r2
 80065de:	d035      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065e0:	390f      	subs	r1, #15
 80065e2:	d033      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065e4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80065e8:	1a89      	subs	r1, r1, r2
 80065ea:	d02f      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065ec:	391f      	subs	r1, #31
 80065ee:	d02d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065f0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80065f4:	1a89      	subs	r1, r1, r2
 80065f6:	d029      	beq.n	800664c <ai_array_fmt_valid+0xde>
 80065f8:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006900 <.text_15>
 80065fc:	1a89      	subs	r1, r1, r2
 80065fe:	d025      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006600:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006604:	1a89      	subs	r1, r1, r2
 8006606:	d021      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006608:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006908 <.text_17>
 800660c:	1a89      	subs	r1, r1, r2
 800660e:	d01d      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	1a89      	subs	r1, r1, r2
 8006616:	d019      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800661c:	1a89      	subs	r1, r1, r2
 800661e:	d015      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006620:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 800690c <.text_18>
 8006624:	1a89      	subs	r1, r1, r2
 8006626:	d011      	beq.n	800664c <ai_array_fmt_valid+0xde>
 8006628:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800662c:	1a89      	subs	r1, r1, r2
 800662e:	bf1e      	ittt	ne
 8006630:	f36f 000d 	bfcne	r0, #0, #14
 8006634:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006638:	2840      	cmpne	r0, #64	; 0x40
 800663a:	d007      	beq.n	800664c <ai_array_fmt_valid+0xde>
 800663c:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006910 <.text_19>
 8006640:	4298      	cmp	r0, r3
 8006642:	bf1c      	itt	ne
 8006644:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006914 <.text_20>
 8006648:	4298      	cmpne	r0, r3
 800664a:	d101      	bne.n	8006650 <ai_array_fmt_valid+0xe2>
 800664c:	2001      	movs	r0, #1
 800664e:	4770      	bx	lr
 8006650:	2000      	movs	r0, #0
 8006652:	4770      	bx	lr

08006654 <ai_array_fmt_get_formats>:
 8006654:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006918 <.text_21>
 8006658:	6001      	str	r1, [r0, #0]
 800665a:	201c      	movs	r0, #28
 800665c:	4770      	bx	lr
	...

08006660 <.text_8>:
 8006660:	00000000 	.word	0x00000000

08006664 <ai_buffer_fmt_name>:
 8006664:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006668:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800666c:	d022      	beq.n	80066b4 <ai_buffer_fmt_name+0x50>
 800666e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006672:	1a89      	subs	r1, r1, r2
 8006674:	d039      	beq.n	80066ea <ai_buffer_fmt_name+0x86>
 8006676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800667a:	1a89      	subs	r1, r1, r2
 800667c:	d020      	beq.n	80066c0 <ai_buffer_fmt_name+0x5c>
 800667e:	1fc9      	subs	r1, r1, #7
 8006680:	d036      	beq.n	80066f0 <ai_buffer_fmt_name+0x8c>
 8006682:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006686:	1a89      	subs	r1, r1, r2
 8006688:	d01d      	beq.n	80066c6 <ai_buffer_fmt_name+0x62>
 800668a:	390f      	subs	r1, #15
 800668c:	d033      	beq.n	80066f6 <ai_buffer_fmt_name+0x92>
 800668e:	4aa3      	ldr	r2, [pc, #652]	; (800691c <.text_22>)
 8006690:	1a89      	subs	r1, r1, r2
 8006692:	d021      	beq.n	80066d8 <ai_buffer_fmt_name+0x74>
 8006694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006698:	1a89      	subs	r1, r1, r2
 800669a:	d017      	beq.n	80066cc <ai_buffer_fmt_name+0x68>
 800669c:	1fc9      	subs	r1, r1, #7
 800669e:	d01e      	beq.n	80066de <ai_buffer_fmt_name+0x7a>
 80066a0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80066a4:	1a89      	subs	r1, r1, r2
 80066a6:	d014      	beq.n	80066d2 <ai_buffer_fmt_name+0x6e>
 80066a8:	390f      	subs	r1, #15
 80066aa:	d01b      	beq.n	80066e4 <ai_buffer_fmt_name+0x80>
 80066ac:	4a9c      	ldr	r2, [pc, #624]	; (8006920 <.text_23>)
 80066ae:	1a89      	subs	r1, r1, r2
 80066b0:	d003      	beq.n	80066ba <ai_buffer_fmt_name+0x56>
 80066b2:	e023      	b.n	80066fc <ai_buffer_fmt_name+0x98>
 80066b4:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80066b8:	4770      	bx	lr
 80066ba:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80066be:	4770      	bx	lr
 80066c0:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80066c4:	4770      	bx	lr
 80066c6:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80066ca:	4770      	bx	lr
 80066cc:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 80066d0:	4770      	bx	lr
 80066d2:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 80066d6:	4770      	bx	lr
 80066d8:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 80066dc:	4770      	bx	lr
 80066de:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80066e2:	4770      	bx	lr
 80066e4:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80066e8:	4770      	bx	lr
 80066ea:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80066ee:	4770      	bx	lr
 80066f0:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80066f4:	4770      	bx	lr
 80066f6:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80066fa:	4770      	bx	lr
 80066fc:	0b80      	lsrs	r0, r0, #14
 80066fe:	0380      	lsls	r0, r0, #14
 8006700:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006704:	2840      	cmp	r0, #64	; 0x40
 8006706:	d007      	beq.n	8006718 <ai_buffer_fmt_name+0xb4>
 8006708:	4981      	ldr	r1, [pc, #516]	; (8006910 <.text_19>)
 800670a:	4288      	cmp	r0, r1
 800670c:	d00a      	beq.n	8006724 <ai_buffer_fmt_name+0xc0>
 800670e:	4981      	ldr	r1, [pc, #516]	; (8006914 <.text_20>)
 8006710:	4288      	cmp	r0, r1
 8006712:	d004      	beq.n	800671e <ai_buffer_fmt_name+0xba>
 8006714:	a079      	add	r0, pc, #484	; (adr r0, 80068fc <.text_14>)
 8006716:	4770      	bx	lr
 8006718:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 800671c:	4770      	bx	lr
 800671e:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006722:	4770      	bx	lr
 8006724:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006728:	4770      	bx	lr

0800672a <ai_buffer_fmt_valid>:
 800672a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800672e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006732:	d02d      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006734:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006738:	1a89      	subs	r1, r1, r2
 800673a:	d029      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 800673c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006740:	1a89      	subs	r1, r1, r2
 8006742:	d025      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006744:	1fc9      	subs	r1, r1, #7
 8006746:	d023      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006748:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800674c:	1a89      	subs	r1, r1, r2
 800674e:	d01f      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006750:	390f      	subs	r1, #15
 8006752:	d01d      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006754:	4a71      	ldr	r2, [pc, #452]	; (800691c <.text_22>)
 8006756:	1a89      	subs	r1, r1, r2
 8006758:	d01a      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 800675a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800675e:	1a89      	subs	r1, r1, r2
 8006760:	d016      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006762:	1fc9      	subs	r1, r1, #7
 8006764:	d014      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006766:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800676a:	1a89      	subs	r1, r1, r2
 800676c:	d010      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 800676e:	390f      	subs	r1, #15
 8006770:	d00e      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006772:	4a6b      	ldr	r2, [pc, #428]	; (8006920 <.text_23>)
 8006774:	1a89      	subs	r1, r1, r2
 8006776:	bf1f      	itttt	ne
 8006778:	0b80      	lsrne	r0, r0, #14
 800677a:	0380      	lslne	r0, r0, #14
 800677c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006780:	2840      	cmpne	r0, #64	; 0x40
 8006782:	d005      	beq.n	8006790 <ai_buffer_fmt_valid+0x66>
 8006784:	4b62      	ldr	r3, [pc, #392]	; (8006910 <.text_19>)
 8006786:	4298      	cmp	r0, r3
 8006788:	bf1c      	itt	ne
 800678a:	4b62      	ldrne	r3, [pc, #392]	; (8006914 <.text_20>)
 800678c:	4298      	cmpne	r0, r3
 800678e:	d101      	bne.n	8006794 <ai_buffer_fmt_valid+0x6a>
 8006790:	2001      	movs	r0, #1
 8006792:	4770      	bx	lr
 8006794:	2000      	movs	r0, #0
 8006796:	4770      	bx	lr

08006798 <ai_buffer_fmt_get_formats>:
 8006798:	4962      	ldr	r1, [pc, #392]	; (8006924 <.text_24>)
 800679a:	6001      	str	r1, [r0, #0]
 800679c:	200c      	movs	r0, #12
 800679e:	4770      	bx	lr

080067a0 <ai_array_to_buffer_fmt>:
 80067a0:	4601      	mov	r1, r0
 80067a2:	2040      	movs	r0, #64	; 0x40
 80067a4:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80067a8:	2a02      	cmp	r2, #2
 80067aa:	d104      	bne.n	80067b6 <ai_array_to_buffer_fmt+0x16>
 80067ac:	485e      	ldr	r0, [pc, #376]	; (8006928 <.text_25>)
 80067ae:	4008      	ands	r0, r1
 80067b0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80067b4:	e037      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 80067b6:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80067ba:	4b55      	ldr	r3, [pc, #340]	; (8006910 <.text_19>)
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	d02d      	beq.n	800681c <ai_array_to_buffer_fmt+0x7c>
 80067c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	d01b      	beq.n	8006800 <ai_array_to_buffer_fmt+0x60>
 80067c8:	1fd2      	subs	r2, r2, #7
 80067ca:	d029      	beq.n	8006820 <ai_array_to_buffer_fmt+0x80>
 80067cc:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	d017      	beq.n	8006804 <ai_array_to_buffer_fmt+0x64>
 80067d4:	3a0f      	subs	r2, #15
 80067d6:	d025      	beq.n	8006824 <ai_array_to_buffer_fmt+0x84>
 80067d8:	4b50      	ldr	r3, [pc, #320]	; (800691c <.text_22>)
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	d018      	beq.n	8006810 <ai_array_to_buffer_fmt+0x70>
 80067de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	d010      	beq.n	8006808 <ai_array_to_buffer_fmt+0x68>
 80067e6:	1fd2      	subs	r2, r2, #7
 80067e8:	d014      	beq.n	8006814 <ai_array_to_buffer_fmt+0x74>
 80067ea:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	d00c      	beq.n	800680c <ai_array_to_buffer_fmt+0x6c>
 80067f2:	3a0f      	subs	r2, #15
 80067f4:	d010      	beq.n	8006818 <ai_array_to_buffer_fmt+0x78>
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <.text_23>)
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	d114      	bne.n	8006826 <ai_array_to_buffer_fmt+0x86>
 80067fc:	484b      	ldr	r0, [pc, #300]	; (800692c <.text_26>)
 80067fe:	e012      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006800:	484b      	ldr	r0, [pc, #300]	; (8006930 <.text_27>)
 8006802:	e010      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006804:	484b      	ldr	r0, [pc, #300]	; (8006934 <.text_28>)
 8006806:	e00e      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006808:	484b      	ldr	r0, [pc, #300]	; (8006938 <.text_29>)
 800680a:	e00c      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 800680c:	484b      	ldr	r0, [pc, #300]	; (800693c <.text_30>)
 800680e:	e00a      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006810:	4840      	ldr	r0, [pc, #256]	; (8006914 <.text_20>)
 8006812:	e008      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006814:	484a      	ldr	r0, [pc, #296]	; (8006940 <.text_31>)
 8006816:	e006      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006818:	484a      	ldr	r0, [pc, #296]	; (8006944 <.text_32>)
 800681a:	e004      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 800681c:	4618      	mov	r0, r3
 800681e:	e002      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006820:	4849      	ldr	r0, [pc, #292]	; (8006948 <.text_33>)
 8006822:	e000      	b.n	8006826 <ai_array_to_buffer_fmt+0x86>
 8006824:	4849      	ldr	r0, [pc, #292]	; (800694c <.text_34>)
 8006826:	004a      	lsls	r2, r1, #1
 8006828:	bf4c      	ite	mi
 800682a:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 800682e:	2200      	movpl	r2, #0
 8006830:	4310      	orrs	r0, r2
 8006832:	008a      	lsls	r2, r1, #2
 8006834:	bf4c      	ite	mi
 8006836:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 800683a:	2200      	movpl	r2, #0
 800683c:	4310      	orrs	r0, r2
 800683e:	0109      	lsls	r1, r1, #4
 8006840:	bf4c      	ite	mi
 8006842:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006846:	2100      	movpl	r1, #0
 8006848:	4308      	orrs	r0, r1
 800684a:	4770      	bx	lr

0800684c <ai_buffer_to_array_fmt>:
 800684c:	4602      	mov	r2, r0
 800684e:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006852:	3840      	subs	r0, #64	; 0x40
 8006854:	d022      	beq.n	800689c <ai_buffer_to_array_fmt+0x50>
 8006856:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800685a:	1a40      	subs	r0, r0, r1
 800685c:	d030      	beq.n	80068c0 <ai_buffer_to_array_fmt+0x74>
 800685e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006862:	1a40      	subs	r0, r0, r1
 8006864:	d01e      	beq.n	80068a4 <ai_buffer_to_array_fmt+0x58>
 8006866:	1fc0      	subs	r0, r0, #7
 8006868:	d02c      	beq.n	80068c4 <ai_buffer_to_array_fmt+0x78>
 800686a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800686e:	1a40      	subs	r0, r0, r1
 8006870:	d01a      	beq.n	80068a8 <ai_buffer_to_array_fmt+0x5c>
 8006872:	380f      	subs	r0, #15
 8006874:	d028      	beq.n	80068c8 <ai_buffer_to_array_fmt+0x7c>
 8006876:	4929      	ldr	r1, [pc, #164]	; (800691c <.text_22>)
 8006878:	1a40      	subs	r0, r0, r1
 800687a:	d01b      	beq.n	80068b4 <ai_buffer_to_array_fmt+0x68>
 800687c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006880:	1a40      	subs	r0, r0, r1
 8006882:	d013      	beq.n	80068ac <ai_buffer_to_array_fmt+0x60>
 8006884:	1fc0      	subs	r0, r0, #7
 8006886:	d017      	beq.n	80068b8 <ai_buffer_to_array_fmt+0x6c>
 8006888:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800688c:	1a40      	subs	r0, r0, r1
 800688e:	d00f      	beq.n	80068b0 <ai_buffer_to_array_fmt+0x64>
 8006890:	380f      	subs	r0, #15
 8006892:	d013      	beq.n	80068bc <ai_buffer_to_array_fmt+0x70>
 8006894:	4922      	ldr	r1, [pc, #136]	; (8006920 <.text_23>)
 8006896:	1a40      	subs	r0, r0, r1
 8006898:	d002      	beq.n	80068a0 <ai_buffer_to_array_fmt+0x54>
 800689a:	e017      	b.n	80068cc <ai_buffer_to_array_fmt+0x80>
 800689c:	2040      	movs	r0, #64	; 0x40
 800689e:	e01f      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068a0:	4822      	ldr	r0, [pc, #136]	; (800692c <.text_26>)
 80068a2:	e01d      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068a4:	4822      	ldr	r0, [pc, #136]	; (8006930 <.text_27>)
 80068a6:	e01b      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068a8:	4822      	ldr	r0, [pc, #136]	; (8006934 <.text_28>)
 80068aa:	e019      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068ac:	4822      	ldr	r0, [pc, #136]	; (8006938 <.text_29>)
 80068ae:	e017      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068b0:	4822      	ldr	r0, [pc, #136]	; (800693c <.text_30>)
 80068b2:	e015      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068b4:	4817      	ldr	r0, [pc, #92]	; (8006914 <.text_20>)
 80068b6:	e013      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068b8:	4821      	ldr	r0, [pc, #132]	; (8006940 <.text_31>)
 80068ba:	e011      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068bc:	4821      	ldr	r0, [pc, #132]	; (8006944 <.text_32>)
 80068be:	e00f      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068c0:	4813      	ldr	r0, [pc, #76]	; (8006910 <.text_19>)
 80068c2:	e00d      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068c4:	4820      	ldr	r0, [pc, #128]	; (8006948 <.text_33>)
 80068c6:	e00b      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068c8:	4820      	ldr	r0, [pc, #128]	; (800694c <.text_34>)
 80068ca:	e009      	b.n	80068e0 <ai_buffer_to_array_fmt+0x94>
 80068cc:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 80068d0:	f3c2 000d 	ubfx	r0, r2, #0, #14
 80068d4:	2900      	cmp	r1, #0
 80068d6:	bf14      	ite	ne
 80068d8:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 80068dc:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 80068e0:	0051      	lsls	r1, r2, #1
 80068e2:	bf48      	it	mi
 80068e4:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80068e8:	0093      	lsls	r3, r2, #2
 80068ea:	bf48      	it	mi
 80068ec:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80068f0:	0111      	lsls	r1, r2, #4
 80068f2:	bf48      	it	mi
 80068f4:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80068f8:	4770      	bx	lr
	...

080068fc <.text_14>:
 80068fc:	00000000 	.word	0x00000000

08006900 <.text_15>:
 8006900:	002be80f 	.word	0x002be80f

08006904 <.text_16>:
 8006904:	003bf7f1 	.word	0x003bf7f1

08006908 <.text_17>:
 8006908:	00b9fff1 	.word	0x00b9fff1

0800690c <.text_18>:
 800690c:	004df000 	.word	0x004df000

08006910 <.text_19>:
 8006910:	00040040 	.word	0x00040040

08006914 <.text_20>:
 8006914:	00840040 	.word	0x00840040

08006918 <.text_21>:
 8006918:	080142a8 	.word	0x080142a8

0800691c <.text_22>:
 800691c:	007ff7f1 	.word	0x007ff7f1

08006920 <.text_23>:
 8006920:	00fe07f1 	.word	0x00fe07f1

08006924 <.text_24>:
 8006924:	08014318 	.word	0x08014318

08006928 <.text_25>:
 8006928:	00803fff 	.word	0x00803fff

0800692c <.text_26>:
 800692c:	01821040 	.word	0x01821040

08006930 <.text_27>:
 8006930:	00040440 	.word	0x00040440

08006934 <.text_28>:
 8006934:	00040840 	.word	0x00040840

08006938 <.text_29>:
 8006938:	00840440 	.word	0x00840440

0800693c <.text_30>:
 800693c:	00840840 	.word	0x00840840

08006940 <.text_31>:
 8006940:	00840447 	.word	0x00840447

08006944 <.text_32>:
 8006944:	0084084f 	.word	0x0084084f

08006948 <.text_33>:
 8006948:	00040447 	.word	0x00040447

0800694c <.text_34>:
 800694c:	0004084f 	.word	0x0004084f

08006950 <ai_array_get_byte_size>:
 8006950:	b909      	cbnz	r1, 8006956 <ai_array_get_byte_size+0x6>
 8006952:	2000      	movs	r0, #0
 8006954:	4770      	bx	lr
 8006956:	11c2      	asrs	r2, r0, #7
 8006958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800695c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006960:	189b      	adds	r3, r3, r2
 8006962:	4359      	muls	r1, r3
 8006964:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8006968:	f00c 0c0f 	and.w	ip, ip, #15
 800696c:	1543      	asrs	r3, r0, #21
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	1dc9      	adds	r1, r1, #7
 8006974:	08c9      	lsrs	r1, r1, #3
 8006976:	00c9      	lsls	r1, r1, #3
 8006978:	40d9      	lsrs	r1, r3
 800697a:	f1bc 0f04 	cmp.w	ip, #4
 800697e:	d00a      	beq.n	8006996 <ai_array_get_byte_size+0x46>
 8006980:	f1bc 0f08 	cmp.w	ip, #8
 8006984:	bf02      	ittt	eq
 8006986:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800698a:	1882      	addeq	r2, r0, r2
 800698c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8006990:	1dc9      	adds	r1, r1, #7
 8006992:	08c8      	lsrs	r0, r1, #3
 8006994:	4770      	bx	lr
 8006996:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800699a:	1882      	adds	r2, r0, r2
 800699c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80069a0:	1dc9      	adds	r1, r1, #7
 80069a2:	08c8      	lsrs	r0, r1, #3
 80069a4:	4770      	bx	lr

080069a6 <ai_array_get_data_byte_size>:
 80069a6:	b909      	cbnz	r1, 80069ac <ai_array_get_data_byte_size+0x6>
 80069a8:	2000      	movs	r0, #0
 80069aa:	4770      	bx	lr
 80069ac:	11c2      	asrs	r2, r0, #7
 80069ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069b2:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80069b6:	189a      	adds	r2, r3, r2
 80069b8:	4351      	muls	r1, r2
 80069ba:	1540      	asrs	r0, r0, #21
 80069bc:	f000 0003 	and.w	r0, r0, #3
 80069c0:	1dc9      	adds	r1, r1, #7
 80069c2:	08c9      	lsrs	r1, r1, #3
 80069c4:	00c9      	lsls	r1, r1, #3
 80069c6:	40c1      	lsrs	r1, r0
 80069c8:	1dc9      	adds	r1, r1, #7
 80069ca:	08c8      	lsrs	r0, r1, #3
 80069cc:	4770      	bx	lr

080069ce <ai_array_get_elems_from_size>:
 80069ce:	b909      	cbnz	r1, 80069d4 <ai_array_get_elems_from_size+0x6>
 80069d0:	2000      	movs	r0, #0
 80069d2:	4770      	bx	lr
 80069d4:	1442      	asrs	r2, r0, #17
 80069d6:	00c9      	lsls	r1, r1, #3
 80069d8:	f002 020f 	and.w	r2, r2, #15
 80069dc:	2a04      	cmp	r2, #4
 80069de:	d002      	beq.n	80069e6 <ai_array_get_elems_from_size+0x18>
 80069e0:	2a08      	cmp	r2, #8
 80069e2:	d009      	beq.n	80069f8 <ai_array_get_elems_from_size+0x2a>
 80069e4:	e010      	b.n	8006a08 <ai_array_get_elems_from_size+0x3a>
 80069e6:	11c3      	asrs	r3, r0, #7
 80069e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ec:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80069f0:	18d2      	adds	r2, r2, r3
 80069f2:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80069f6:	e007      	b.n	8006a08 <ai_array_get_elems_from_size+0x3a>
 80069f8:	11c2      	asrs	r2, r0, #7
 80069fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069fe:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006a02:	189a      	adds	r2, r3, r2
 8006a04:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8006a08:	1542      	asrs	r2, r0, #21
 8006a0a:	f002 0203 	and.w	r2, r2, #3
 8006a0e:	4091      	lsls	r1, r2
 8006a10:	1dc9      	adds	r1, r1, #7
 8006a12:	11c3      	asrs	r3, r0, #7
 8006a14:	08c9      	lsrs	r1, r1, #3
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8006a1e:	00c9      	lsls	r1, r1, #3
 8006a20:	18c0      	adds	r0, r0, r3
 8006a22:	fbb1 f0f0 	udiv	r0, r1, r0
 8006a26:	4770      	bx	lr

08006a28 <.text_38>:
 8006a28:	5f544d46 	.word	0x5f544d46
 8006a2c:	454e4f4e 	.word	0x454e4f4e
 8006a30:	00          	.byte	0x00
 8006a31:	00          	.byte	0x00
	...

08006a34 <.text_39>:
 8006a34:	5f544d46 	.word	0x5f544d46
 8006a38:	414f4c46 	.word	0x414f4c46
 8006a3c:	0054      	.short	0x0054
	...

08006a40 <.text_40>:
 8006a40:	5f544d46 	.word	0x5f544d46
 8006a44:	414f4c46 	.word	0x414f4c46
 8006a48:	00343654 	.word	0x00343654

08006a4c <.text_41>:
 8006a4c:	5f544d46 	.word	0x5f544d46
 8006a50:	414f4c46 	.word	0x414f4c46
 8006a54:	00363154 	.word	0x00363154

08006a58 <.text_42>:
 8006a58:	5f544d46 	.word	0x5f544d46
 8006a5c:	00003855 	.word	0x00003855

08006a60 <.text_43>:
 8006a60:	5f544d46 	.word	0x5f544d46
 8006a64:	00363155 	.word	0x00363155

08006a68 <.text_44>:
 8006a68:	5f544d46 	.word	0x5f544d46
 8006a6c:	00323355 	.word	0x00323355

08006a70 <.text_45>:
 8006a70:	5f544d46 	.word	0x5f544d46
 8006a74:	00343655 	.word	0x00343655

08006a78 <.text_46>:
 8006a78:	5f544d46 	.word	0x5f544d46
 8006a7c:	00003455 	.word	0x00003455

08006a80 <.text_47>:
 8006a80:	5f544d46 	.word	0x5f544d46
 8006a84:	00003853 	.word	0x00003853

08006a88 <.text_48>:
 8006a88:	5f544d46 	.word	0x5f544d46
 8006a8c:	00363153 	.word	0x00363153

08006a90 <.text_49>:
 8006a90:	5f544d46 	.word	0x5f544d46
 8006a94:	00323353 	.word	0x00323353

08006a98 <.text_50>:
 8006a98:	5f544d46 	.word	0x5f544d46
 8006a9c:	00343653 	.word	0x00343653

08006aa0 <.text_51>:
 8006aa0:	5f544d46 	.word	0x5f544d46
 8006aa4:	00003453 	.word	0x00003453

08006aa8 <.text_52>:
 8006aa8:	5f544d46 	.word	0x5f544d46
 8006aac:	0051      	.short	0x0051
	...

08006ab0 <.text_53>:
 8006ab0:	5f544d46 	.word	0x5f544d46
 8006ab4:	00003751 	.word	0x00003751

08006ab8 <.text_54>:
 8006ab8:	5f544d46 	.word	0x5f544d46
 8006abc:	00353151 	.word	0x00353151

08006ac0 <.text_55>:
 8006ac0:	5f544d46 	.word	0x5f544d46
 8006ac4:	00313351 	.word	0x00313351

08006ac8 <.text_56>:
 8006ac8:	5f544d46 	.word	0x5f544d46
 8006acc:	00005155 	.word	0x00005155

08006ad0 <.text_57>:
 8006ad0:	5f544d46 	.word	0x5f544d46
 8006ad4:	00375155 	.word	0x00375155

08006ad8 <.text_58>:
 8006ad8:	5f544d46 	.word	0x5f544d46
 8006adc:	35315155 	.word	0x35315155
 8006ae0:	00          	.byte	0x00
 8006ae1:	00          	.byte	0x00
	...

08006ae4 <.text_59>:
 8006ae4:	5f544d46 	.word	0x5f544d46
 8006ae8:	31335155 	.word	0x31335155
 8006aec:	00          	.byte	0x00
 8006aed:	00          	.byte	0x00
	...

08006af0 <.text_60>:
 8006af0:	5f544d46 	.word	0x5f544d46
 8006af4:	3454554c 	.word	0x3454554c
 8006af8:	4f4c465f 	.word	0x4f4c465f
 8006afc:	00005441 	.word	0x00005441

08006b00 <.text_61>:
 8006b00:	5f544d46 	.word	0x5f544d46
 8006b04:	3854554c 	.word	0x3854554c
 8006b08:	4f4c465f 	.word	0x4f4c465f
 8006b0c:	00005441 	.word	0x00005441

08006b10 <.text_62>:
 8006b10:	5f544d46 	.word	0x5f544d46
 8006b14:	3454554c 	.word	0x3454554c
 8006b18:	3531515f 	.word	0x3531515f
 8006b1c:	00          	.byte	0x00
 8006b1d:	00          	.byte	0x00
	...

08006b20 <.text_63>:
 8006b20:	5f544d46 	.word	0x5f544d46
 8006b24:	3854554c 	.word	0x3854554c
 8006b28:	3531515f 	.word	0x3531515f
 8006b2c:	00          	.byte	0x00
 8006b2d:	00          	.byte	0x00
	...

08006b30 <.text_64>:
 8006b30:	5f544d46 	.word	0x5f544d46
 8006b34:	3454554c 	.word	0x3454554c
 8006b38:	3151555f 	.word	0x3151555f
 8006b3c:	0035      	.short	0x0035
	...

08006b40 <.text_65>:
 8006b40:	5f544d46 	.word	0x5f544d46
 8006b44:	3854554c 	.word	0x3854554c
 8006b48:	3151555f 	.word	0x3151555f
 8006b4c:	0035      	.short	0x0035
	...

08006b50 <.text_66>:
 8006b50:	415f4941 	.word	0x415f4941
 8006b54:	59415252 	.word	0x59415252
 8006b58:	524f465f 	.word	0x524f465f
 8006b5c:	5f54414d 	.word	0x5f54414d
 8006b60:	454e4f4e 	.word	0x454e4f4e
 8006b64:	00          	.byte	0x00
 8006b65:	00          	.byte	0x00
	...

08006b68 <.text_67>:
 8006b68:	415f4941 	.word	0x415f4941
 8006b6c:	59415252 	.word	0x59415252
 8006b70:	524f465f 	.word	0x524f465f
 8006b74:	5f54414d 	.word	0x5f54414d
 8006b78:	0051      	.short	0x0051
	...

08006b7c <.text_68>:
 8006b7c:	415f4941 	.word	0x415f4941
 8006b80:	59415252 	.word	0x59415252
 8006b84:	524f465f 	.word	0x524f465f
 8006b88:	5f54414d 	.word	0x5f54414d
 8006b8c:	00005155 	.word	0x00005155

08006b90 <.text_69>:
 8006b90:	425f4941 	.word	0x425f4941
 8006b94:	45464655 	.word	0x45464655
 8006b98:	4f465f52 	.word	0x4f465f52
 8006b9c:	54414d52 	.word	0x54414d52
 8006ba0:	4e4f4e5f 	.word	0x4e4f4e5f
 8006ba4:	0045      	.short	0x0045
	...

08006ba8 <.text_70>:
 8006ba8:	425f4941 	.word	0x425f4941
 8006bac:	45464655 	.word	0x45464655
 8006bb0:	4f465f52 	.word	0x4f465f52
 8006bb4:	54414d52 	.word	0x54414d52
 8006bb8:	0000515f 	.word	0x0000515f

08006bbc <.text_71>:
 8006bbc:	425f4941 	.word	0x425f4941
 8006bc0:	45464655 	.word	0x45464655
 8006bc4:	4f465f52 	.word	0x4f465f52
 8006bc8:	54414d52 	.word	0x54414d52
 8006bcc:	0051555f 	.word	0x0051555f

08006bd0 <ai_math_sqrt>:
 8006bd0:	eef0 0a40 	vmov.f32	s1, s0
 8006bd4:	eef5 0a40 	vcmp.f32	s1, #0.0
 8006bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bdc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8006c84 <.text_12>
 8006be0:	db01      	blt.n	8006be6 <ai_math_sqrt+0x16>
 8006be2:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8006be6:	4770      	bx	lr

08006be8 <ai_math_exp>:
 8006be8:	f00a bc70 	b.w	80114cc <expf>

08006bec <ai_math_pow>:
 8006bec:	f00a bec0 	b.w	8011970 <powf>

08006bf0 <ai_math_tanh>:
 8006bf0:	f00b b88c 	b.w	8011d0c <tanhf>

08006bf4 <ai_math_cosh>:
 8006bf4:	f00b ba3c 	b.w	8012070 <coshf>

08006bf8 <ai_math_relu>:
 8006bf8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c00:	bf48      	it	mi
 8006c02:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8006c84 <.text_12>
 8006c06:	4770      	bx	lr

08006c08 <ai_math_prelu>:
 8006c08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c10:	bf48      	it	mi
 8006c12:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8006c16:	4770      	bx	lr

08006c18 <ai_math_sigmoid>:
 8006c18:	b500      	push	{lr}
 8006c1a:	b081      	sub	sp, #4
 8006c1c:	eeb1 0a40 	vneg.f32	s0, s0
 8006c20:	f00a fc54 	bl	80114cc <expf>
 8006c24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006c28:	b001      	add	sp, #4
 8006c2a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006c2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006c32:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006c36:	bd00      	pop	{pc}

08006c38 <ai_math_hard_sigmoid>:
 8006c38:	eef0 0a40 	vmov.f32	s1, s0
 8006c3c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8006c88 <.text_13>
 8006c40:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006c44:	ee00 0a81 	vmla.f32	s0, s1, s2
 8006c48:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006c8c <.text_14>
 8006c4c:	eeb4 0a60 	vcmp.f32	s0, s1
 8006c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c54:	da07      	bge.n	8006c66 <ai_math_hard_sigmoid+0x2e>
 8006c56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d504      	bpl.n	8006c6a <ai_math_hard_sigmoid+0x32>
 8006c60:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006c84 <.text_12>
 8006c64:	4770      	bx	lr
 8006c66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c6a:	4770      	bx	lr

08006c6c <ai_math_sign>:
 8006c6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c74:	bfcc      	ite	gt
 8006c76:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8006c90 <.text_15>
 8006c7a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8006c94 <.text_16>
 8006c7e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8006c82:	4770      	bx	lr

08006c84 <.text_12>:
 8006c84:	00000000 	.word	0x00000000

08006c88 <.text_13>:
 8006c88:	3e4ccccd 	.word	0x3e4ccccd

08006c8c <.text_14>:
 8006c8c:	3f800001 	.word	0x3f800001

08006c90 <.text_15>:
 8006c90:	00000001 	.word	0x00000001

08006c94 <.text_16>:
 8006c94:	ffffffff 	.word	0xffffffff

08006c98 <ai_div>:
 8006c98:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8006c9c:	4770      	bx	lr

08006c9e <ai_floor_div>:
 8006c9e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8006ca2:	f00a bc99 	b.w	80115d8 <floorf>

08006ca6 <ai_floor_mod>:
 8006ca6:	f00b ba3f 	b.w	8012128 <fmodf>

08006caa <ai_max>:
 8006caa:	eef4 0a40 	vcmp.f32	s1, s0
 8006cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb2:	bf58      	it	pl
 8006cb4:	eeb0 0a60 	vmovpl.f32	s0, s1
 8006cb8:	4770      	bx	lr

08006cba <ai_min>:
 8006cba:	eeb4 0a60 	vcmp.f32	s0, s1
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	bf58      	it	pl
 8006cc4:	eeb0 0a60 	vmovpl.f32	s0, s1
 8006cc8:	4770      	bx	lr

08006cca <ai_mul>:
 8006cca:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006cce:	4770      	bx	lr

08006cd0 <ai_sub>:
 8006cd0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006cd4:	4770      	bx	lr

08006cd6 <ai_sum>:
 8006cd6:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006cda:	4770      	bx	lr

08006cdc <arm_mat_init_f32>:
 8006cdc:	8001      	strh	r1, [r0, #0]
 8006cde:	8042      	strh	r2, [r0, #2]
 8006ce0:	6043      	str	r3, [r0, #4]
 8006ce2:	4770      	bx	lr

08006ce4 <core_timer_init_>:
 8006ce4:	4770      	bx	lr

08006ce6 <core_timer_ticks_>:
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	4770      	bx	lr
	...

08006cec <core_timer_init>:
 8006cec:	b530      	push	{r4, r5, lr}
 8006cee:	0005      	movs	r5, r0
 8006cf0:	b081      	sub	sp, #4
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	d00d      	beq.n	8006d12 <core_timer_init+0x26>
 8006cf6:	4929      	ldr	r1, [pc, #164]	; (8006d9c <.text_12>)
 8006cf8:	7808      	ldrb	r0, [r1, #0]
 8006cfa:	b118      	cbz	r0, 8006d04 <core_timer_init+0x18>
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	700a      	strb	r2, [r1, #0]
 8006d00:	f7ff fff0 	bl	8006ce4 <core_timer_init_>
 8006d04:	b904      	cbnz	r4, 8006d08 <core_timer_init+0x1c>
 8006d06:	a423      	add	r4, pc, #140	; (adr r4, 8006d94 <.text_10>)
 8006d08:	602c      	str	r4, [r5, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	60a8      	str	r0, [r5, #8]
 8006d0e:	6068      	str	r0, [r5, #4]
 8006d10:	2001      	movs	r0, #1
 8006d12:	b001      	add	sp, #4
 8006d14:	bd30      	pop	{r4, r5, pc}

08006d16 <core_timer_reset>:
 8006d16:	b118      	cbz	r0, 8006d20 <core_timer_reset+0xa>
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6081      	str	r1, [r0, #8]
 8006d1c:	6041      	str	r1, [r0, #4]
 8006d1e:	2001      	movs	r0, #1
 8006d20:	4770      	bx	lr

08006d22 <core_timer_start>:
 8006d22:	b510      	push	{r4, lr}
 8006d24:	0004      	movs	r4, r0
 8006d26:	d101      	bne.n	8006d2c <core_timer_start+0xa>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	f7ff ffdb 	bl	8006ce6 <core_timer_ticks_>
 8006d30:	6060      	str	r0, [r4, #4]
 8006d32:	2001      	movs	r0, #1
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <core_timer_stop>:
 8006d36:	b510      	push	{r4, lr}
 8006d38:	0004      	movs	r4, r0
 8006d3a:	d101      	bne.n	8006d40 <core_timer_stop+0xa>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	f7ff ffd1 	bl	8006ce6 <core_timer_ticks_>
 8006d44:	68a2      	ldr	r2, [r4, #8]
 8006d46:	6861      	ldr	r1, [r4, #4]
 8006d48:	1880      	adds	r0, r0, r2
 8006d4a:	1a40      	subs	r0, r0, r1
 8006d4c:	60a0      	str	r0, [r4, #8]
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <core_timer_main_test_unit>:
 8006d50:	b500      	push	{lr}
 8006d52:	b083      	sub	sp, #12
 8006d54:	a112      	add	r1, pc, #72	; (adr r1, 8006da0 <.text_13>)
 8006d56:	4668      	mov	r0, sp
 8006d58:	f7ff ffc8 	bl	8006cec <core_timer_init>
 8006d5c:	f7ff ffc3 	bl	8006ce6 <core_timer_ticks_>
 8006d60:	9001      	str	r0, [sp, #4]
 8006d62:	4668      	mov	r0, sp
 8006d64:	f7ff ffe7 	bl	8006d36 <core_timer_stop>
 8006d68:	ed9d 0a02 	vldr	s0, [sp, #8]
 8006d6c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8006d70:	eddf 0a09 	vldr	s1, [pc, #36]	; 8006d98 <.text_11>
 8006d74:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006d78:	ee10 0a90 	vmov	r0, s1
 8006d7c:	f000 fa34 	bl	80071e8 <__aeabi_f2d>
 8006d80:	460b      	mov	r3, r1
 8006d82:	4602      	mov	r2, r0
 8006d84:	f8dd 1000 	ldr.w	r1, [sp]
 8006d88:	a009      	add	r0, pc, #36	; (adr r0, 8006db0 <.text_14>)
 8006d8a:	f009 f8d3 	bl	800ff34 <iprintf>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	b003      	add	sp, #12
 8006d92:	bd00      	pop	{pc}

08006d94 <.text_10>:
 8006d94:	00000000 	.word	0x00000000

08006d98 <.text_11>:
 8006d98:	3a83126f 	.word	0x3a83126f

08006d9c <.text_12>:
 8006d9c:	20000004 	.word	0x20000004

08006da0 <.text_13>:
 8006da0:	6d617845 	.word	0x6d617845
 8006da4:	20656c70 	.word	0x20656c70
 8006da8:	656d6954 	.word	0x656d6954
 8006dac:	0072      	.short	0x0072
	...

08006db0 <.text_14>:
 8006db0:	656d6954 	.word	0x656d6954
 8006db4:	73252072 	.word	0x73252072
 8006db8:	6c45203a 	.word	0x6c45203a
 8006dbc:	65737061 	.word	0x65737061
 8006dc0:	66252064 	.word	0x66252064
 8006dc4:	0d736d20 	.word	0x0d736d20
 8006dc8:	000a      	.short	0x000a
	...

08006dcc <__aeabi_memset>:
 8006dcc:	b470      	push	{r4, r5, r6}
 8006dce:	0784      	lsls	r4, r0, #30
 8006dd0:	d046      	beq.n	8006e60 <__aeabi_memset+0x94>
 8006dd2:	1e4c      	subs	r4, r1, #1
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	d041      	beq.n	8006e5c <__aeabi_memset+0x90>
 8006dd8:	b2d5      	uxtb	r5, r2
 8006dda:	4603      	mov	r3, r0
 8006ddc:	e002      	b.n	8006de4 <__aeabi_memset+0x18>
 8006dde:	1e61      	subs	r1, r4, #1
 8006de0:	b3e4      	cbz	r4, 8006e5c <__aeabi_memset+0x90>
 8006de2:	460c      	mov	r4, r1
 8006de4:	f803 5b01 	strb.w	r5, [r3], #1
 8006de8:	0799      	lsls	r1, r3, #30
 8006dea:	d1f8      	bne.n	8006dde <__aeabi_memset+0x12>
 8006dec:	2c03      	cmp	r4, #3
 8006dee:	d92e      	bls.n	8006e4e <__aeabi_memset+0x82>
 8006df0:	b2d5      	uxtb	r5, r2
 8006df2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006df6:	2c0f      	cmp	r4, #15
 8006df8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006dfc:	d919      	bls.n	8006e32 <__aeabi_memset+0x66>
 8006dfe:	4626      	mov	r6, r4
 8006e00:	f103 0110 	add.w	r1, r3, #16
 8006e04:	3e10      	subs	r6, #16
 8006e06:	2e0f      	cmp	r6, #15
 8006e08:	f841 5c10 	str.w	r5, [r1, #-16]
 8006e0c:	f841 5c0c 	str.w	r5, [r1, #-12]
 8006e10:	f841 5c08 	str.w	r5, [r1, #-8]
 8006e14:	f841 5c04 	str.w	r5, [r1, #-4]
 8006e18:	f101 0110 	add.w	r1, r1, #16
 8006e1c:	d8f2      	bhi.n	8006e04 <__aeabi_memset+0x38>
 8006e1e:	f1a4 0110 	sub.w	r1, r4, #16
 8006e22:	f021 010f 	bic.w	r1, r1, #15
 8006e26:	f004 040f 	and.w	r4, r4, #15
 8006e2a:	3110      	adds	r1, #16
 8006e2c:	2c03      	cmp	r4, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	d90d      	bls.n	8006e4e <__aeabi_memset+0x82>
 8006e32:	461e      	mov	r6, r3
 8006e34:	4621      	mov	r1, r4
 8006e36:	3904      	subs	r1, #4
 8006e38:	2903      	cmp	r1, #3
 8006e3a:	f846 5b04 	str.w	r5, [r6], #4
 8006e3e:	d8fa      	bhi.n	8006e36 <__aeabi_memset+0x6a>
 8006e40:	1f21      	subs	r1, r4, #4
 8006e42:	f021 0103 	bic.w	r1, r1, #3
 8006e46:	3104      	adds	r1, #4
 8006e48:	440b      	add	r3, r1
 8006e4a:	f004 0403 	and.w	r4, r4, #3
 8006e4e:	b12c      	cbz	r4, 8006e5c <__aeabi_memset+0x90>
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	441c      	add	r4, r3
 8006e54:	f803 2b01 	strb.w	r2, [r3], #1
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	d1fb      	bne.n	8006e54 <__aeabi_memset+0x88>
 8006e5c:	bc70      	pop	{r4, r5, r6}
 8006e5e:	4770      	bx	lr
 8006e60:	460c      	mov	r4, r1
 8006e62:	4603      	mov	r3, r0
 8006e64:	e7c2      	b.n	8006dec <__aeabi_memset+0x20>

08006e66 <strlen>:
 8006e66:	4603      	mov	r3, r0
 8006e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	d1fb      	bne.n	8006e68 <strlen+0x2>
 8006e70:	1a18      	subs	r0, r3, r0
 8006e72:	3801      	subs	r0, #1
 8006e74:	4770      	bx	lr
	...

08006e80 <memchr>:
 8006e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006e84:	2a10      	cmp	r2, #16
 8006e86:	db2b      	blt.n	8006ee0 <memchr+0x60>
 8006e88:	f010 0f07 	tst.w	r0, #7
 8006e8c:	d008      	beq.n	8006ea0 <memchr+0x20>
 8006e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e92:	3a01      	subs	r2, #1
 8006e94:	428b      	cmp	r3, r1
 8006e96:	d02d      	beq.n	8006ef4 <memchr+0x74>
 8006e98:	f010 0f07 	tst.w	r0, #7
 8006e9c:	b342      	cbz	r2, 8006ef0 <memchr+0x70>
 8006e9e:	d1f6      	bne.n	8006e8e <memchr+0xe>
 8006ea0:	b4f0      	push	{r4, r5, r6, r7}
 8006ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006eaa:	f022 0407 	bic.w	r4, r2, #7
 8006eae:	f07f 0700 	mvns.w	r7, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006eb8:	3c08      	subs	r4, #8
 8006eba:	ea85 0501 	eor.w	r5, r5, r1
 8006ebe:	ea86 0601 	eor.w	r6, r6, r1
 8006ec2:	fa85 f547 	uadd8	r5, r5, r7
 8006ec6:	faa3 f587 	sel	r5, r3, r7
 8006eca:	fa86 f647 	uadd8	r6, r6, r7
 8006ece:	faa5 f687 	sel	r6, r5, r7
 8006ed2:	b98e      	cbnz	r6, 8006ef8 <memchr+0x78>
 8006ed4:	d1ee      	bne.n	8006eb4 <memchr+0x34>
 8006ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8006ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006edc:	f002 0207 	and.w	r2, r2, #7
 8006ee0:	b132      	cbz	r2, 8006ef0 <memchr+0x70>
 8006ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ee6:	3a01      	subs	r2, #1
 8006ee8:	ea83 0301 	eor.w	r3, r3, r1
 8006eec:	b113      	cbz	r3, 8006ef4 <memchr+0x74>
 8006eee:	d1f8      	bne.n	8006ee2 <memchr+0x62>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4770      	bx	lr
 8006ef4:	3801      	subs	r0, #1
 8006ef6:	4770      	bx	lr
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	bf06      	itte	eq
 8006efc:	4635      	moveq	r5, r6
 8006efe:	3803      	subeq	r0, #3
 8006f00:	3807      	subne	r0, #7
 8006f02:	f015 0f01 	tst.w	r5, #1
 8006f06:	d107      	bne.n	8006f18 <memchr+0x98>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006f0e:	bf02      	ittt	eq
 8006f10:	3001      	addeq	r0, #1
 8006f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006f16:	3001      	addeq	r0, #1
 8006f18:	bcf0      	pop	{r4, r5, r6, r7}
 8006f1a:	3801      	subs	r0, #1
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop

08006f20 <__aeabi_drsub>:
 8006f20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006f24:	e002      	b.n	8006f2c <__adddf3>
 8006f26:	bf00      	nop

08006f28 <__aeabi_dsub>:
 8006f28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006f2c <__adddf3>:
 8006f2c:	b530      	push	{r4, r5, lr}
 8006f2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006f32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006f36:	ea94 0f05 	teq	r4, r5
 8006f3a:	bf08      	it	eq
 8006f3c:	ea90 0f02 	teqeq	r0, r2
 8006f40:	bf1f      	itttt	ne
 8006f42:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006f46:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006f4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006f4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f52:	f000 80e2 	beq.w	800711a <__adddf3+0x1ee>
 8006f56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006f5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006f5e:	bfb8      	it	lt
 8006f60:	426d      	neglt	r5, r5
 8006f62:	dd0c      	ble.n	8006f7e <__adddf3+0x52>
 8006f64:	442c      	add	r4, r5
 8006f66:	ea80 0202 	eor.w	r2, r0, r2
 8006f6a:	ea81 0303 	eor.w	r3, r1, r3
 8006f6e:	ea82 0000 	eor.w	r0, r2, r0
 8006f72:	ea83 0101 	eor.w	r1, r3, r1
 8006f76:	ea80 0202 	eor.w	r2, r0, r2
 8006f7a:	ea81 0303 	eor.w	r3, r1, r3
 8006f7e:	2d36      	cmp	r5, #54	; 0x36
 8006f80:	bf88      	it	hi
 8006f82:	bd30      	pophi	{r4, r5, pc}
 8006f84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006f88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006f90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006f94:	d002      	beq.n	8006f9c <__adddf3+0x70>
 8006f96:	4240      	negs	r0, r0
 8006f98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006f9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006fa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006fa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006fa8:	d002      	beq.n	8006fb0 <__adddf3+0x84>
 8006faa:	4252      	negs	r2, r2
 8006fac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006fb0:	ea94 0f05 	teq	r4, r5
 8006fb4:	f000 80a7 	beq.w	8007106 <__adddf3+0x1da>
 8006fb8:	f1a4 0401 	sub.w	r4, r4, #1
 8006fbc:	f1d5 0e20 	rsbs	lr, r5, #32
 8006fc0:	db0d      	blt.n	8006fde <__adddf3+0xb2>
 8006fc2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006fc6:	fa22 f205 	lsr.w	r2, r2, r5
 8006fca:	1880      	adds	r0, r0, r2
 8006fcc:	f141 0100 	adc.w	r1, r1, #0
 8006fd0:	fa03 f20e 	lsl.w	r2, r3, lr
 8006fd4:	1880      	adds	r0, r0, r2
 8006fd6:	fa43 f305 	asr.w	r3, r3, r5
 8006fda:	4159      	adcs	r1, r3
 8006fdc:	e00e      	b.n	8006ffc <__adddf3+0xd0>
 8006fde:	f1a5 0520 	sub.w	r5, r5, #32
 8006fe2:	f10e 0e20 	add.w	lr, lr, #32
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006fec:	bf28      	it	cs
 8006fee:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006ff2:	fa43 f305 	asr.w	r3, r3, r5
 8006ff6:	18c0      	adds	r0, r0, r3
 8006ff8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	d507      	bpl.n	8007012 <__adddf3+0xe6>
 8007002:	f04f 0e00 	mov.w	lr, #0
 8007006:	f1dc 0c00 	rsbs	ip, ip, #0
 800700a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800700e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007012:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007016:	d31b      	bcc.n	8007050 <__adddf3+0x124>
 8007018:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800701c:	d30c      	bcc.n	8007038 <__adddf3+0x10c>
 800701e:	0849      	lsrs	r1, r1, #1
 8007020:	ea5f 0030 	movs.w	r0, r0, rrx
 8007024:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007028:	f104 0401 	add.w	r4, r4, #1
 800702c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007030:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007034:	f080 809a 	bcs.w	800716c <__adddf3+0x240>
 8007038:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800703c:	bf08      	it	eq
 800703e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007042:	f150 0000 	adcs.w	r0, r0, #0
 8007046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800704a:	ea41 0105 	orr.w	r1, r1, r5
 800704e:	bd30      	pop	{r4, r5, pc}
 8007050:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007054:	4140      	adcs	r0, r0
 8007056:	eb41 0101 	adc.w	r1, r1, r1
 800705a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800705e:	f1a4 0401 	sub.w	r4, r4, #1
 8007062:	d1e9      	bne.n	8007038 <__adddf3+0x10c>
 8007064:	f091 0f00 	teq	r1, #0
 8007068:	bf04      	itt	eq
 800706a:	4601      	moveq	r1, r0
 800706c:	2000      	moveq	r0, #0
 800706e:	fab1 f381 	clz	r3, r1
 8007072:	bf08      	it	eq
 8007074:	3320      	addeq	r3, #32
 8007076:	f1a3 030b 	sub.w	r3, r3, #11
 800707a:	f1b3 0220 	subs.w	r2, r3, #32
 800707e:	da0c      	bge.n	800709a <__adddf3+0x16e>
 8007080:	320c      	adds	r2, #12
 8007082:	dd08      	ble.n	8007096 <__adddf3+0x16a>
 8007084:	f102 0c14 	add.w	ip, r2, #20
 8007088:	f1c2 020c 	rsb	r2, r2, #12
 800708c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007090:	fa21 f102 	lsr.w	r1, r1, r2
 8007094:	e00c      	b.n	80070b0 <__adddf3+0x184>
 8007096:	f102 0214 	add.w	r2, r2, #20
 800709a:	bfd8      	it	le
 800709c:	f1c2 0c20 	rsble	ip, r2, #32
 80070a0:	fa01 f102 	lsl.w	r1, r1, r2
 80070a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80070a8:	bfdc      	itt	le
 80070aa:	ea41 010c 	orrle.w	r1, r1, ip
 80070ae:	4090      	lslle	r0, r2
 80070b0:	1ae4      	subs	r4, r4, r3
 80070b2:	bfa2      	ittt	ge
 80070b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80070b8:	4329      	orrge	r1, r5
 80070ba:	bd30      	popge	{r4, r5, pc}
 80070bc:	ea6f 0404 	mvn.w	r4, r4
 80070c0:	3c1f      	subs	r4, #31
 80070c2:	da1c      	bge.n	80070fe <__adddf3+0x1d2>
 80070c4:	340c      	adds	r4, #12
 80070c6:	dc0e      	bgt.n	80070e6 <__adddf3+0x1ba>
 80070c8:	f104 0414 	add.w	r4, r4, #20
 80070cc:	f1c4 0220 	rsb	r2, r4, #32
 80070d0:	fa20 f004 	lsr.w	r0, r0, r4
 80070d4:	fa01 f302 	lsl.w	r3, r1, r2
 80070d8:	ea40 0003 	orr.w	r0, r0, r3
 80070dc:	fa21 f304 	lsr.w	r3, r1, r4
 80070e0:	ea45 0103 	orr.w	r1, r5, r3
 80070e4:	bd30      	pop	{r4, r5, pc}
 80070e6:	f1c4 040c 	rsb	r4, r4, #12
 80070ea:	f1c4 0220 	rsb	r2, r4, #32
 80070ee:	fa20 f002 	lsr.w	r0, r0, r2
 80070f2:	fa01 f304 	lsl.w	r3, r1, r4
 80070f6:	ea40 0003 	orr.w	r0, r0, r3
 80070fa:	4629      	mov	r1, r5
 80070fc:	bd30      	pop	{r4, r5, pc}
 80070fe:	fa21 f004 	lsr.w	r0, r1, r4
 8007102:	4629      	mov	r1, r5
 8007104:	bd30      	pop	{r4, r5, pc}
 8007106:	f094 0f00 	teq	r4, #0
 800710a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800710e:	bf06      	itte	eq
 8007110:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007114:	3401      	addeq	r4, #1
 8007116:	3d01      	subne	r5, #1
 8007118:	e74e      	b.n	8006fb8 <__adddf3+0x8c>
 800711a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800711e:	bf18      	it	ne
 8007120:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007124:	d029      	beq.n	800717a <__adddf3+0x24e>
 8007126:	ea94 0f05 	teq	r4, r5
 800712a:	bf08      	it	eq
 800712c:	ea90 0f02 	teqeq	r0, r2
 8007130:	d005      	beq.n	800713e <__adddf3+0x212>
 8007132:	ea54 0c00 	orrs.w	ip, r4, r0
 8007136:	bf04      	itt	eq
 8007138:	4619      	moveq	r1, r3
 800713a:	4610      	moveq	r0, r2
 800713c:	bd30      	pop	{r4, r5, pc}
 800713e:	ea91 0f03 	teq	r1, r3
 8007142:	bf1e      	ittt	ne
 8007144:	2100      	movne	r1, #0
 8007146:	2000      	movne	r0, #0
 8007148:	bd30      	popne	{r4, r5, pc}
 800714a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800714e:	d105      	bne.n	800715c <__adddf3+0x230>
 8007150:	0040      	lsls	r0, r0, #1
 8007152:	4149      	adcs	r1, r1
 8007154:	bf28      	it	cs
 8007156:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800715a:	bd30      	pop	{r4, r5, pc}
 800715c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007160:	bf3c      	itt	cc
 8007162:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007166:	bd30      	popcc	{r4, r5, pc}
 8007168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800716c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007170:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007174:	f04f 0000 	mov.w	r0, #0
 8007178:	bd30      	pop	{r4, r5, pc}
 800717a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800717e:	bf1a      	itte	ne
 8007180:	4619      	movne	r1, r3
 8007182:	4610      	movne	r0, r2
 8007184:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007188:	bf1c      	itt	ne
 800718a:	460b      	movne	r3, r1
 800718c:	4602      	movne	r2, r0
 800718e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007192:	bf06      	itte	eq
 8007194:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007198:	ea91 0f03 	teqeq	r1, r3
 800719c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80071a0:	bd30      	pop	{r4, r5, pc}
 80071a2:	bf00      	nop

080071a4 <__aeabi_ui2d>:
 80071a4:	f090 0f00 	teq	r0, #0
 80071a8:	bf04      	itt	eq
 80071aa:	2100      	moveq	r1, #0
 80071ac:	4770      	bxeq	lr
 80071ae:	b530      	push	{r4, r5, lr}
 80071b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80071b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80071b8:	f04f 0500 	mov.w	r5, #0
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	e750      	b.n	8007064 <__adddf3+0x138>
 80071c2:	bf00      	nop

080071c4 <__aeabi_i2d>:
 80071c4:	f090 0f00 	teq	r0, #0
 80071c8:	bf04      	itt	eq
 80071ca:	2100      	moveq	r1, #0
 80071cc:	4770      	bxeq	lr
 80071ce:	b530      	push	{r4, r5, lr}
 80071d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80071d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80071d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80071dc:	bf48      	it	mi
 80071de:	4240      	negmi	r0, r0
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	e73e      	b.n	8007064 <__adddf3+0x138>
 80071e6:	bf00      	nop

080071e8 <__aeabi_f2d>:
 80071e8:	0042      	lsls	r2, r0, #1
 80071ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80071ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80071f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80071f6:	bf1f      	itttt	ne
 80071f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80071fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007200:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007204:	4770      	bxne	lr
 8007206:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800720a:	bf08      	it	eq
 800720c:	4770      	bxeq	lr
 800720e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007212:	bf04      	itt	eq
 8007214:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007218:	4770      	bxeq	lr
 800721a:	b530      	push	{r4, r5, lr}
 800721c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007228:	e71c      	b.n	8007064 <__adddf3+0x138>
 800722a:	bf00      	nop

0800722c <__aeabi_ul2d>:
 800722c:	ea50 0201 	orrs.w	r2, r0, r1
 8007230:	bf08      	it	eq
 8007232:	4770      	bxeq	lr
 8007234:	b530      	push	{r4, r5, lr}
 8007236:	f04f 0500 	mov.w	r5, #0
 800723a:	e00a      	b.n	8007252 <__aeabi_l2d+0x16>

0800723c <__aeabi_l2d>:
 800723c:	ea50 0201 	orrs.w	r2, r0, r1
 8007240:	bf08      	it	eq
 8007242:	4770      	bxeq	lr
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800724a:	d502      	bpl.n	8007252 <__aeabi_l2d+0x16>
 800724c:	4240      	negs	r0, r0
 800724e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007252:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007256:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800725a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800725e:	f43f aed8 	beq.w	8007012 <__adddf3+0xe6>
 8007262:	f04f 0203 	mov.w	r2, #3
 8007266:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800726a:	bf18      	it	ne
 800726c:	3203      	addne	r2, #3
 800726e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007272:	bf18      	it	ne
 8007274:	3203      	addne	r2, #3
 8007276:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800727a:	f1c2 0320 	rsb	r3, r2, #32
 800727e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007282:	fa20 f002 	lsr.w	r0, r0, r2
 8007286:	fa01 fe03 	lsl.w	lr, r1, r3
 800728a:	ea40 000e 	orr.w	r0, r0, lr
 800728e:	fa21 f102 	lsr.w	r1, r1, r2
 8007292:	4414      	add	r4, r2
 8007294:	e6bd      	b.n	8007012 <__adddf3+0xe6>
 8007296:	bf00      	nop

08007298 <__aeabi_frsub>:
 8007298:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800729c:	e002      	b.n	80072a4 <__addsf3>
 800729e:	bf00      	nop

080072a0 <__aeabi_fsub>:
 80072a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080072a4 <__addsf3>:
 80072a4:	0042      	lsls	r2, r0, #1
 80072a6:	bf1f      	itttt	ne
 80072a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80072ac:	ea92 0f03 	teqne	r2, r3
 80072b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80072b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80072b8:	d06a      	beq.n	8007390 <__addsf3+0xec>
 80072ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80072be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80072c2:	bfc1      	itttt	gt
 80072c4:	18d2      	addgt	r2, r2, r3
 80072c6:	4041      	eorgt	r1, r0
 80072c8:	4048      	eorgt	r0, r1
 80072ca:	4041      	eorgt	r1, r0
 80072cc:	bfb8      	it	lt
 80072ce:	425b      	neglt	r3, r3
 80072d0:	2b19      	cmp	r3, #25
 80072d2:	bf88      	it	hi
 80072d4:	4770      	bxhi	lr
 80072d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80072da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80072de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80072e2:	bf18      	it	ne
 80072e4:	4240      	negne	r0, r0
 80072e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80072ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80072ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80072f2:	bf18      	it	ne
 80072f4:	4249      	negne	r1, r1
 80072f6:	ea92 0f03 	teq	r2, r3
 80072fa:	d03f      	beq.n	800737c <__addsf3+0xd8>
 80072fc:	f1a2 0201 	sub.w	r2, r2, #1
 8007300:	fa41 fc03 	asr.w	ip, r1, r3
 8007304:	eb10 000c 	adds.w	r0, r0, ip
 8007308:	f1c3 0320 	rsb	r3, r3, #32
 800730c:	fa01 f103 	lsl.w	r1, r1, r3
 8007310:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007314:	d502      	bpl.n	800731c <__addsf3+0x78>
 8007316:	4249      	negs	r1, r1
 8007318:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800731c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007320:	d313      	bcc.n	800734a <__addsf3+0xa6>
 8007322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007326:	d306      	bcc.n	8007336 <__addsf3+0x92>
 8007328:	0840      	lsrs	r0, r0, #1
 800732a:	ea4f 0131 	mov.w	r1, r1, rrx
 800732e:	f102 0201 	add.w	r2, r2, #1
 8007332:	2afe      	cmp	r2, #254	; 0xfe
 8007334:	d251      	bcs.n	80073da <__addsf3+0x136>
 8007336:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800733a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800733e:	bf08      	it	eq
 8007340:	f020 0001 	biceq.w	r0, r0, #1
 8007344:	ea40 0003 	orr.w	r0, r0, r3
 8007348:	4770      	bx	lr
 800734a:	0049      	lsls	r1, r1, #1
 800734c:	eb40 0000 	adc.w	r0, r0, r0
 8007350:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007354:	f1a2 0201 	sub.w	r2, r2, #1
 8007358:	d1ed      	bne.n	8007336 <__addsf3+0x92>
 800735a:	fab0 fc80 	clz	ip, r0
 800735e:	f1ac 0c08 	sub.w	ip, ip, #8
 8007362:	ebb2 020c 	subs.w	r2, r2, ip
 8007366:	fa00 f00c 	lsl.w	r0, r0, ip
 800736a:	bfaa      	itet	ge
 800736c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007370:	4252      	neglt	r2, r2
 8007372:	4318      	orrge	r0, r3
 8007374:	bfbc      	itt	lt
 8007376:	40d0      	lsrlt	r0, r2
 8007378:	4318      	orrlt	r0, r3
 800737a:	4770      	bx	lr
 800737c:	f092 0f00 	teq	r2, #0
 8007380:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007384:	bf06      	itte	eq
 8007386:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800738a:	3201      	addeq	r2, #1
 800738c:	3b01      	subne	r3, #1
 800738e:	e7b5      	b.n	80072fc <__addsf3+0x58>
 8007390:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007394:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007398:	bf18      	it	ne
 800739a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800739e:	d021      	beq.n	80073e4 <__addsf3+0x140>
 80073a0:	ea92 0f03 	teq	r2, r3
 80073a4:	d004      	beq.n	80073b0 <__addsf3+0x10c>
 80073a6:	f092 0f00 	teq	r2, #0
 80073aa:	bf08      	it	eq
 80073ac:	4608      	moveq	r0, r1
 80073ae:	4770      	bx	lr
 80073b0:	ea90 0f01 	teq	r0, r1
 80073b4:	bf1c      	itt	ne
 80073b6:	2000      	movne	r0, #0
 80073b8:	4770      	bxne	lr
 80073ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80073be:	d104      	bne.n	80073ca <__addsf3+0x126>
 80073c0:	0040      	lsls	r0, r0, #1
 80073c2:	bf28      	it	cs
 80073c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80073c8:	4770      	bx	lr
 80073ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80073ce:	bf3c      	itt	cc
 80073d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80073d4:	4770      	bxcc	lr
 80073d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80073da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80073de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80073e2:	4770      	bx	lr
 80073e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80073e8:	bf16      	itet	ne
 80073ea:	4608      	movne	r0, r1
 80073ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80073f0:	4601      	movne	r1, r0
 80073f2:	0242      	lsls	r2, r0, #9
 80073f4:	bf06      	itte	eq
 80073f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80073fa:	ea90 0f01 	teqeq	r0, r1
 80073fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007402:	4770      	bx	lr

08007404 <__aeabi_ui2f>:
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e004      	b.n	8007414 <__aeabi_i2f+0x8>
 800740a:	bf00      	nop

0800740c <__aeabi_i2f>:
 800740c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007410:	bf48      	it	mi
 8007412:	4240      	negmi	r0, r0
 8007414:	ea5f 0c00 	movs.w	ip, r0
 8007418:	bf08      	it	eq
 800741a:	4770      	bxeq	lr
 800741c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007420:	4601      	mov	r1, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	e01c      	b.n	8007462 <__aeabi_l2f+0x2a>

08007428 <__aeabi_ul2f>:
 8007428:	ea50 0201 	orrs.w	r2, r0, r1
 800742c:	bf08      	it	eq
 800742e:	4770      	bxeq	lr
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	e00a      	b.n	800744c <__aeabi_l2f+0x14>
 8007436:	bf00      	nop

08007438 <__aeabi_l2f>:
 8007438:	ea50 0201 	orrs.w	r2, r0, r1
 800743c:	bf08      	it	eq
 800743e:	4770      	bxeq	lr
 8007440:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007444:	d502      	bpl.n	800744c <__aeabi_l2f+0x14>
 8007446:	4240      	negs	r0, r0
 8007448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800744c:	ea5f 0c01 	movs.w	ip, r1
 8007450:	bf02      	ittt	eq
 8007452:	4684      	moveq	ip, r0
 8007454:	4601      	moveq	r1, r0
 8007456:	2000      	moveq	r0, #0
 8007458:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800745c:	bf08      	it	eq
 800745e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007462:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007466:	fabc f28c 	clz	r2, ip
 800746a:	3a08      	subs	r2, #8
 800746c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007470:	db10      	blt.n	8007494 <__aeabi_l2f+0x5c>
 8007472:	fa01 fc02 	lsl.w	ip, r1, r2
 8007476:	4463      	add	r3, ip
 8007478:	fa00 fc02 	lsl.w	ip, r0, r2
 800747c:	f1c2 0220 	rsb	r2, r2, #32
 8007480:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007484:	fa20 f202 	lsr.w	r2, r0, r2
 8007488:	eb43 0002 	adc.w	r0, r3, r2
 800748c:	bf08      	it	eq
 800748e:	f020 0001 	biceq.w	r0, r0, #1
 8007492:	4770      	bx	lr
 8007494:	f102 0220 	add.w	r2, r2, #32
 8007498:	fa01 fc02 	lsl.w	ip, r1, r2
 800749c:	f1c2 0220 	rsb	r2, r2, #32
 80074a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80074a4:	fa21 f202 	lsr.w	r2, r1, r2
 80074a8:	eb43 0002 	adc.w	r0, r3, r2
 80074ac:	bf08      	it	eq
 80074ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80074b2:	4770      	bx	lr

080074b4 <__aeabi_uldivmod>:
 80074b4:	b953      	cbnz	r3, 80074cc <__aeabi_uldivmod+0x18>
 80074b6:	b94a      	cbnz	r2, 80074cc <__aeabi_uldivmod+0x18>
 80074b8:	2900      	cmp	r1, #0
 80074ba:	bf08      	it	eq
 80074bc:	2800      	cmpeq	r0, #0
 80074be:	bf1c      	itt	ne
 80074c0:	f04f 31ff 	movne.w	r1, #4294967295
 80074c4:	f04f 30ff 	movne.w	r0, #4294967295
 80074c8:	f000 b972 	b.w	80077b0 <__aeabi_idiv0>
 80074cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80074d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80074d4:	f000 f806 	bl	80074e4 <__udivmoddi4>
 80074d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80074dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074e0:	b004      	add	sp, #16
 80074e2:	4770      	bx	lr

080074e4 <__udivmoddi4>:
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	9e08      	ldr	r6, [sp, #32]
 80074ea:	4604      	mov	r4, r0
 80074ec:	4688      	mov	r8, r1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d14b      	bne.n	800758a <__udivmoddi4+0xa6>
 80074f2:	428a      	cmp	r2, r1
 80074f4:	4615      	mov	r5, r2
 80074f6:	d967      	bls.n	80075c8 <__udivmoddi4+0xe4>
 80074f8:	fab2 f282 	clz	r2, r2
 80074fc:	b14a      	cbz	r2, 8007512 <__udivmoddi4+0x2e>
 80074fe:	f1c2 0720 	rsb	r7, r2, #32
 8007502:	fa01 f302 	lsl.w	r3, r1, r2
 8007506:	fa20 f707 	lsr.w	r7, r0, r7
 800750a:	4095      	lsls	r5, r2
 800750c:	ea47 0803 	orr.w	r8, r7, r3
 8007510:	4094      	lsls	r4, r2
 8007512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007516:	0c23      	lsrs	r3, r4, #16
 8007518:	fbb8 f7fe 	udiv	r7, r8, lr
 800751c:	fa1f fc85 	uxth.w	ip, r5
 8007520:	fb0e 8817 	mls	r8, lr, r7, r8
 8007524:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007528:	fb07 f10c 	mul.w	r1, r7, ip
 800752c:	4299      	cmp	r1, r3
 800752e:	d909      	bls.n	8007544 <__udivmoddi4+0x60>
 8007530:	18eb      	adds	r3, r5, r3
 8007532:	f107 30ff 	add.w	r0, r7, #4294967295
 8007536:	f080 811b 	bcs.w	8007770 <__udivmoddi4+0x28c>
 800753a:	4299      	cmp	r1, r3
 800753c:	f240 8118 	bls.w	8007770 <__udivmoddi4+0x28c>
 8007540:	3f02      	subs	r7, #2
 8007542:	442b      	add	r3, r5
 8007544:	1a5b      	subs	r3, r3, r1
 8007546:	b2a4      	uxth	r4, r4
 8007548:	fbb3 f0fe 	udiv	r0, r3, lr
 800754c:	fb0e 3310 	mls	r3, lr, r0, r3
 8007550:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007554:	fb00 fc0c 	mul.w	ip, r0, ip
 8007558:	45a4      	cmp	ip, r4
 800755a:	d909      	bls.n	8007570 <__udivmoddi4+0x8c>
 800755c:	192c      	adds	r4, r5, r4
 800755e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007562:	f080 8107 	bcs.w	8007774 <__udivmoddi4+0x290>
 8007566:	45a4      	cmp	ip, r4
 8007568:	f240 8104 	bls.w	8007774 <__udivmoddi4+0x290>
 800756c:	3802      	subs	r0, #2
 800756e:	442c      	add	r4, r5
 8007570:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007574:	eba4 040c 	sub.w	r4, r4, ip
 8007578:	2700      	movs	r7, #0
 800757a:	b11e      	cbz	r6, 8007584 <__udivmoddi4+0xa0>
 800757c:	40d4      	lsrs	r4, r2
 800757e:	2300      	movs	r3, #0
 8007580:	e9c6 4300 	strd	r4, r3, [r6]
 8007584:	4639      	mov	r1, r7
 8007586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758a:	428b      	cmp	r3, r1
 800758c:	d909      	bls.n	80075a2 <__udivmoddi4+0xbe>
 800758e:	2e00      	cmp	r6, #0
 8007590:	f000 80eb 	beq.w	800776a <__udivmoddi4+0x286>
 8007594:	2700      	movs	r7, #0
 8007596:	e9c6 0100 	strd	r0, r1, [r6]
 800759a:	4638      	mov	r0, r7
 800759c:	4639      	mov	r1, r7
 800759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a2:	fab3 f783 	clz	r7, r3
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	d147      	bne.n	800763a <__udivmoddi4+0x156>
 80075aa:	428b      	cmp	r3, r1
 80075ac:	d302      	bcc.n	80075b4 <__udivmoddi4+0xd0>
 80075ae:	4282      	cmp	r2, r0
 80075b0:	f200 80fa 	bhi.w	80077a8 <__udivmoddi4+0x2c4>
 80075b4:	1a84      	subs	r4, r0, r2
 80075b6:	eb61 0303 	sbc.w	r3, r1, r3
 80075ba:	2001      	movs	r0, #1
 80075bc:	4698      	mov	r8, r3
 80075be:	2e00      	cmp	r6, #0
 80075c0:	d0e0      	beq.n	8007584 <__udivmoddi4+0xa0>
 80075c2:	e9c6 4800 	strd	r4, r8, [r6]
 80075c6:	e7dd      	b.n	8007584 <__udivmoddi4+0xa0>
 80075c8:	b902      	cbnz	r2, 80075cc <__udivmoddi4+0xe8>
 80075ca:	deff      	udf	#255	; 0xff
 80075cc:	fab2 f282 	clz	r2, r2
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	f040 808f 	bne.w	80076f4 <__udivmoddi4+0x210>
 80075d6:	1b49      	subs	r1, r1, r5
 80075d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80075dc:	fa1f f885 	uxth.w	r8, r5
 80075e0:	2701      	movs	r7, #1
 80075e2:	fbb1 fcfe 	udiv	ip, r1, lr
 80075e6:	0c23      	lsrs	r3, r4, #16
 80075e8:	fb0e 111c 	mls	r1, lr, ip, r1
 80075ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80075f0:	fb08 f10c 	mul.w	r1, r8, ip
 80075f4:	4299      	cmp	r1, r3
 80075f6:	d907      	bls.n	8007608 <__udivmoddi4+0x124>
 80075f8:	18eb      	adds	r3, r5, r3
 80075fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80075fe:	d202      	bcs.n	8007606 <__udivmoddi4+0x122>
 8007600:	4299      	cmp	r1, r3
 8007602:	f200 80cd 	bhi.w	80077a0 <__udivmoddi4+0x2bc>
 8007606:	4684      	mov	ip, r0
 8007608:	1a59      	subs	r1, r3, r1
 800760a:	b2a3      	uxth	r3, r4
 800760c:	fbb1 f0fe 	udiv	r0, r1, lr
 8007610:	fb0e 1410 	mls	r4, lr, r0, r1
 8007614:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007618:	fb08 f800 	mul.w	r8, r8, r0
 800761c:	45a0      	cmp	r8, r4
 800761e:	d907      	bls.n	8007630 <__udivmoddi4+0x14c>
 8007620:	192c      	adds	r4, r5, r4
 8007622:	f100 33ff 	add.w	r3, r0, #4294967295
 8007626:	d202      	bcs.n	800762e <__udivmoddi4+0x14a>
 8007628:	45a0      	cmp	r8, r4
 800762a:	f200 80b6 	bhi.w	800779a <__udivmoddi4+0x2b6>
 800762e:	4618      	mov	r0, r3
 8007630:	eba4 0408 	sub.w	r4, r4, r8
 8007634:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007638:	e79f      	b.n	800757a <__udivmoddi4+0x96>
 800763a:	f1c7 0c20 	rsb	ip, r7, #32
 800763e:	40bb      	lsls	r3, r7
 8007640:	fa22 fe0c 	lsr.w	lr, r2, ip
 8007644:	ea4e 0e03 	orr.w	lr, lr, r3
 8007648:	fa01 f407 	lsl.w	r4, r1, r7
 800764c:	fa20 f50c 	lsr.w	r5, r0, ip
 8007650:	fa21 f30c 	lsr.w	r3, r1, ip
 8007654:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007658:	4325      	orrs	r5, r4
 800765a:	fbb3 f9f8 	udiv	r9, r3, r8
 800765e:	0c2c      	lsrs	r4, r5, #16
 8007660:	fb08 3319 	mls	r3, r8, r9, r3
 8007664:	fa1f fa8e 	uxth.w	sl, lr
 8007668:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800766c:	fb09 f40a 	mul.w	r4, r9, sl
 8007670:	429c      	cmp	r4, r3
 8007672:	fa02 f207 	lsl.w	r2, r2, r7
 8007676:	fa00 f107 	lsl.w	r1, r0, r7
 800767a:	d90b      	bls.n	8007694 <__udivmoddi4+0x1b0>
 800767c:	eb1e 0303 	adds.w	r3, lr, r3
 8007680:	f109 30ff 	add.w	r0, r9, #4294967295
 8007684:	f080 8087 	bcs.w	8007796 <__udivmoddi4+0x2b2>
 8007688:	429c      	cmp	r4, r3
 800768a:	f240 8084 	bls.w	8007796 <__udivmoddi4+0x2b2>
 800768e:	f1a9 0902 	sub.w	r9, r9, #2
 8007692:	4473      	add	r3, lr
 8007694:	1b1b      	subs	r3, r3, r4
 8007696:	b2ad      	uxth	r5, r5
 8007698:	fbb3 f0f8 	udiv	r0, r3, r8
 800769c:	fb08 3310 	mls	r3, r8, r0, r3
 80076a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80076a4:	fb00 fa0a 	mul.w	sl, r0, sl
 80076a8:	45a2      	cmp	sl, r4
 80076aa:	d908      	bls.n	80076be <__udivmoddi4+0x1da>
 80076ac:	eb1e 0404 	adds.w	r4, lr, r4
 80076b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b4:	d26b      	bcs.n	800778e <__udivmoddi4+0x2aa>
 80076b6:	45a2      	cmp	sl, r4
 80076b8:	d969      	bls.n	800778e <__udivmoddi4+0x2aa>
 80076ba:	3802      	subs	r0, #2
 80076bc:	4474      	add	r4, lr
 80076be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80076c2:	fba0 8902 	umull	r8, r9, r0, r2
 80076c6:	eba4 040a 	sub.w	r4, r4, sl
 80076ca:	454c      	cmp	r4, r9
 80076cc:	46c2      	mov	sl, r8
 80076ce:	464b      	mov	r3, r9
 80076d0:	d354      	bcc.n	800777c <__udivmoddi4+0x298>
 80076d2:	d051      	beq.n	8007778 <__udivmoddi4+0x294>
 80076d4:	2e00      	cmp	r6, #0
 80076d6:	d069      	beq.n	80077ac <__udivmoddi4+0x2c8>
 80076d8:	ebb1 050a 	subs.w	r5, r1, sl
 80076dc:	eb64 0403 	sbc.w	r4, r4, r3
 80076e0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80076e4:	40fd      	lsrs	r5, r7
 80076e6:	40fc      	lsrs	r4, r7
 80076e8:	ea4c 0505 	orr.w	r5, ip, r5
 80076ec:	e9c6 5400 	strd	r5, r4, [r6]
 80076f0:	2700      	movs	r7, #0
 80076f2:	e747      	b.n	8007584 <__udivmoddi4+0xa0>
 80076f4:	f1c2 0320 	rsb	r3, r2, #32
 80076f8:	fa20 f703 	lsr.w	r7, r0, r3
 80076fc:	4095      	lsls	r5, r2
 80076fe:	fa01 f002 	lsl.w	r0, r1, r2
 8007702:	fa21 f303 	lsr.w	r3, r1, r3
 8007706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800770a:	4338      	orrs	r0, r7
 800770c:	0c01      	lsrs	r1, r0, #16
 800770e:	fbb3 f7fe 	udiv	r7, r3, lr
 8007712:	fa1f f885 	uxth.w	r8, r5
 8007716:	fb0e 3317 	mls	r3, lr, r7, r3
 800771a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800771e:	fb07 f308 	mul.w	r3, r7, r8
 8007722:	428b      	cmp	r3, r1
 8007724:	fa04 f402 	lsl.w	r4, r4, r2
 8007728:	d907      	bls.n	800773a <__udivmoddi4+0x256>
 800772a:	1869      	adds	r1, r5, r1
 800772c:	f107 3cff 	add.w	ip, r7, #4294967295
 8007730:	d22f      	bcs.n	8007792 <__udivmoddi4+0x2ae>
 8007732:	428b      	cmp	r3, r1
 8007734:	d92d      	bls.n	8007792 <__udivmoddi4+0x2ae>
 8007736:	3f02      	subs	r7, #2
 8007738:	4429      	add	r1, r5
 800773a:	1acb      	subs	r3, r1, r3
 800773c:	b281      	uxth	r1, r0
 800773e:	fbb3 f0fe 	udiv	r0, r3, lr
 8007742:	fb0e 3310 	mls	r3, lr, r0, r3
 8007746:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800774a:	fb00 f308 	mul.w	r3, r0, r8
 800774e:	428b      	cmp	r3, r1
 8007750:	d907      	bls.n	8007762 <__udivmoddi4+0x27e>
 8007752:	1869      	adds	r1, r5, r1
 8007754:	f100 3cff 	add.w	ip, r0, #4294967295
 8007758:	d217      	bcs.n	800778a <__udivmoddi4+0x2a6>
 800775a:	428b      	cmp	r3, r1
 800775c:	d915      	bls.n	800778a <__udivmoddi4+0x2a6>
 800775e:	3802      	subs	r0, #2
 8007760:	4429      	add	r1, r5
 8007762:	1ac9      	subs	r1, r1, r3
 8007764:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007768:	e73b      	b.n	80075e2 <__udivmoddi4+0xfe>
 800776a:	4637      	mov	r7, r6
 800776c:	4630      	mov	r0, r6
 800776e:	e709      	b.n	8007584 <__udivmoddi4+0xa0>
 8007770:	4607      	mov	r7, r0
 8007772:	e6e7      	b.n	8007544 <__udivmoddi4+0x60>
 8007774:	4618      	mov	r0, r3
 8007776:	e6fb      	b.n	8007570 <__udivmoddi4+0x8c>
 8007778:	4541      	cmp	r1, r8
 800777a:	d2ab      	bcs.n	80076d4 <__udivmoddi4+0x1f0>
 800777c:	ebb8 0a02 	subs.w	sl, r8, r2
 8007780:	eb69 020e 	sbc.w	r2, r9, lr
 8007784:	3801      	subs	r0, #1
 8007786:	4613      	mov	r3, r2
 8007788:	e7a4      	b.n	80076d4 <__udivmoddi4+0x1f0>
 800778a:	4660      	mov	r0, ip
 800778c:	e7e9      	b.n	8007762 <__udivmoddi4+0x27e>
 800778e:	4618      	mov	r0, r3
 8007790:	e795      	b.n	80076be <__udivmoddi4+0x1da>
 8007792:	4667      	mov	r7, ip
 8007794:	e7d1      	b.n	800773a <__udivmoddi4+0x256>
 8007796:	4681      	mov	r9, r0
 8007798:	e77c      	b.n	8007694 <__udivmoddi4+0x1b0>
 800779a:	3802      	subs	r0, #2
 800779c:	442c      	add	r4, r5
 800779e:	e747      	b.n	8007630 <__udivmoddi4+0x14c>
 80077a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80077a4:	442b      	add	r3, r5
 80077a6:	e72f      	b.n	8007608 <__udivmoddi4+0x124>
 80077a8:	4638      	mov	r0, r7
 80077aa:	e708      	b.n	80075be <__udivmoddi4+0xda>
 80077ac:	4637      	mov	r7, r6
 80077ae:	e6e9      	b.n	8007584 <__udivmoddi4+0xa0>

080077b0 <__aeabi_idiv0>:
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop

080077b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80077b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077bc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <SCB_EnableICache+0x3c>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80077c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <SCB_EnableICache+0x3c>)
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <SCB_EnableICache+0x3c>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80077dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80077fa:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <SCB_EnableDCache+0x7c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007802:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0b5b      	lsrs	r3, r3, #13
 8007812:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007816:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	08db      	lsrs	r3, r3, #3
 800781c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007820:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800782a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007830:	490f      	ldr	r1, [pc, #60]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1e5a      	subs	r2, r3, #1
 800783c:	60ba      	str	r2, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1ef      	bne.n	8007822 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	60fa      	str	r2, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <SCB_EnableDCache+0x24>
 800784c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	4a06      	ldr	r2, [pc, #24]	; (8007870 <SCB_EnableDCache+0x7c>)
 8007856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785a:	6153      	str	r3, [r2, #20]
 800785c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007860:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8007878:	f7ff ff9c 	bl	80077b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800787c:	f7ff ffba 	bl	80077f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007880:	f000 faaf 	bl	8007de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007884:	f000 f814 	bl	80078b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007888:	f000 f8f4 	bl	8007a74 <MX_GPIO_Init>
  MX_CRC_Init();
 800788c:	f000 f8a0 	bl	80079d0 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8007890:	f005 f874 	bl	800c97c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  MX_USART3_UART_Init();
 8007894:	f000 f8be 	bl	8007a14 <MX_USART3_UART_Init>

  printf("test\n");
 8007898:	4804      	ldr	r0, [pc, #16]	; (80078ac <main+0x38>)
 800789a:	f008 fbd3 	bl	8010044 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	printf("a");
 800789e:	2061      	movs	r0, #97	; 0x61
 80078a0:	f008 fb60 	bl	800ff64 <putchar>
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80078a4:	f005 f872 	bl	800c98c <MX_X_CUBE_AI_Process>
	printf("a");
 80078a8:	e7f9      	b.n	800789e <main+0x2a>
 80078aa:	bf00      	nop
 80078ac:	080138e0 	.word	0x080138e0

080078b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b0b8      	sub	sp, #224	; 0xe0
 80078b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80078b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80078ba:	2234      	movs	r2, #52	; 0x34
 80078bc:	2100      	movs	r1, #0
 80078be:	4618      	mov	r0, r3
 80078c0:	f008 fa88 	bl	800fdd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80078c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	609a      	str	r2, [r3, #8]
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078d4:	f107 0308 	add.w	r3, r7, #8
 80078d8:	2290      	movs	r2, #144	; 0x90
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f008 fa79 	bl	800fdd4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80078e2:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <SystemClock_Config+0x118>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <SystemClock_Config+0x118>)
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ec:	6413      	str	r3, [r2, #64]	; 0x40
 80078ee:	4b36      	ldr	r3, [pc, #216]	; (80079c8 <SystemClock_Config+0x118>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f6:	607b      	str	r3, [r7, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80078fa:	4b34      	ldr	r3, [pc, #208]	; (80079cc <SystemClock_Config+0x11c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a33      	ldr	r2, [pc, #204]	; (80079cc <SystemClock_Config+0x11c>)
 8007900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4b31      	ldr	r3, [pc, #196]	; (80079cc <SystemClock_Config+0x11c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007912:	2302      	movs	r3, #2
 8007914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007918:	2301      	movs	r3, #1
 800791a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800791e:	2310      	movs	r3, #16
 8007920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007924:	2302      	movs	r3, #2
 8007926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007930:	2308      	movs	r3, #8
 8007932:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8007936:	23d8      	movs	r3, #216	; 0xd8
 8007938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800793c:	2302      	movs	r3, #2
 800793e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007942:	2302      	movs	r3, #2
 8007944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007948:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800794c:	4618      	mov	r0, r3
 800794e:	f000 feb5 	bl	80086bc <HAL_RCC_OscConfig>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8007958:	f000 f8c8 	bl	8007aec <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800795c:	f000 fe5e 	bl	800861c <HAL_PWREx_EnableOverDrive>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8007966:	f000 f8c1 	bl	8007aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800796a:	230f      	movs	r3, #15
 800796c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007970:	2302      	movs	r3, #2
 8007972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800797c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007980:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800798c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007990:	2107      	movs	r1, #7
 8007992:	4618      	mov	r0, r3
 8007994:	f001 f940 	bl	8008c18 <HAL_RCC_ClockConfig>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800799e:	f000 f8a5 	bl	8007aec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80079a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80079a8:	2300      	movs	r3, #0
 80079aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 fb03 	bl	8008fbc <HAL_RCCEx_PeriphCLKConfig>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80079bc:	f000 f896 	bl	8007aec <Error_Handler>
  }
}
 80079c0:	bf00      	nop
 80079c2:	37e0      	adds	r7, #224	; 0xe0
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40007000 	.word	0x40007000

080079d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80079d4:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079d6:	4a0e      	ldr	r2, [pc, #56]	; (8007a10 <MX_CRC_Init+0x40>)
 80079d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079dc:	2200      	movs	r2, #0
 80079de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80079e0:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80079ec:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80079f8:	4804      	ldr	r0, [pc, #16]	; (8007a0c <MX_CRC_Init+0x3c>)
 80079fa:	f000 fb7b 	bl	80080f4 <HAL_CRC_Init>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8007a04:	f000 f872 	bl	8007aec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007a08:	bf00      	nop
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000d34 	.word	0x20000d34
 8007a10:	40023000 	.word	0x40023000

08007a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a1a:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <MX_USART3_UART_Init+0x5c>)
 8007a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007a26:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a3a:	220c      	movs	r2, #12
 8007a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a44:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a4a:	4b08      	ldr	r3, [pc, #32]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a50:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007a56:	4805      	ldr	r0, [pc, #20]	; (8007a6c <MX_USART3_UART_Init+0x58>)
 8007a58:	f001 fed6 	bl	8009808 <HAL_UART_Init>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007a62:	f000 f843 	bl	8007aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000cb4 	.word	0x20000cb4
 8007a70:	40004800 	.word	0x40004800

08007a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a7a:	f107 030c 	add.w	r3, r7, #12
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	605a      	str	r2, [r3, #4]
 8007a84:	609a      	str	r2, [r3, #8]
 8007a86:	60da      	str	r2, [r3, #12]
 8007a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a8a:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <MX_GPIO_Init+0x70>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <MX_GPIO_Init+0x70>)
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	6313      	str	r3, [r2, #48]	; 0x30
 8007a96:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <MX_GPIO_Init+0x70>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	60bb      	str	r3, [r7, #8]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007aa2:	4b10      	ldr	r3, [pc, #64]	; (8007ae4 <MX_GPIO_Init+0x70>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	4a0f      	ldr	r2, [pc, #60]	; (8007ae4 <MX_GPIO_Init+0x70>)
 8007aa8:	f043 0308 	orr.w	r3, r3, #8
 8007aac:	6313      	str	r3, [r2, #48]	; 0x30
 8007aae:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <MX_GPIO_Init+0x70>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007aba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007acc:	2304      	movs	r3, #4
 8007ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ad0:	f107 030c 	add.w	r3, r7, #12
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <MX_GPIO_Init+0x74>)
 8007ad8:	f000 fbf6 	bl	80082c8 <HAL_GPIO_Init>

}
 8007adc:	bf00      	nop
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40020400 	.word	0x40020400

08007aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007af0:	bf00      	nop
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
	...

08007afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <HAL_MspInit+0x44>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	4a0e      	ldr	r2, [pc, #56]	; (8007b40 <HAL_MspInit+0x44>)
 8007b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <HAL_MspInit+0x44>)
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b16:	607b      	str	r3, [r7, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <HAL_MspInit+0x44>)
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <HAL_MspInit+0x44>)
 8007b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b24:	6453      	str	r3, [r2, #68]	; 0x44
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <HAL_MspInit+0x44>)
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40023800 	.word	0x40023800

08007b44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <HAL_CRC_MspInit+0x38>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d10b      	bne.n	8007b6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007b56:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <HAL_CRC_MspInit+0x3c>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <HAL_CRC_MspInit+0x3c>)
 8007b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b60:	6313      	str	r3, [r2, #48]	; 0x30
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <HAL_CRC_MspInit+0x3c>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40023000 	.word	0x40023000
 8007b80:	40023800 	.word	0x40023800

08007b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	609a      	str	r2, [r3, #8]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <HAL_UART_MspInit+0x7c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d128      	bne.n	8007bf8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ba6:	4b17      	ldr	r3, [pc, #92]	; (8007c04 <HAL_UART_MspInit+0x80>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <HAL_UART_MspInit+0x80>)
 8007bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <HAL_UART_MspInit+0x80>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bbe:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <HAL_UART_MspInit+0x80>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	4a10      	ldr	r2, [pc, #64]	; (8007c04 <HAL_UART_MspInit+0x80>)
 8007bc4:	f043 0308 	orr.w	r3, r3, #8
 8007bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bca:	4b0e      	ldr	r3, [pc, #56]	; (8007c04 <HAL_UART_MspInit+0x80>)
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007be4:	2303      	movs	r3, #3
 8007be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007be8:	2307      	movs	r3, #7
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bec:	f107 0314 	add.w	r3, r7, #20
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4805      	ldr	r0, [pc, #20]	; (8007c08 <HAL_UART_MspInit+0x84>)
 8007bf4:	f000 fb68 	bl	80082c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007bf8:	bf00      	nop
 8007bfa:	3728      	adds	r7, #40	; 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40004800 	.word	0x40004800
 8007c04:	40023800 	.word	0x40023800
 8007c08:	40020c00 	.word	0x40020c00

08007c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c10:	bf00      	nop
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c1e:	e7fe      	b.n	8007c1e <HardFault_Handler+0x4>

08007c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c24:	e7fe      	b.n	8007c24 <MemManage_Handler+0x4>

08007c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c26:	b480      	push	{r7}
 8007c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c2a:	e7fe      	b.n	8007c2a <BusFault_Handler+0x4>

08007c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c30:	e7fe      	b.n	8007c30 <UsageFault_Handler+0x4>

08007c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c32:	b480      	push	{r7}
 8007c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c36:	bf00      	nop
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c40:	b480      	push	{r7}
 8007c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c44:	bf00      	nop
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c60:	f000 f8fc 	bl	8007e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c64:	bf00      	nop
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e00a      	b.n	8007c90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007c7a:	f3af 8000 	nop.w
 8007c7e:	4601      	mov	r1, r0
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	60ba      	str	r2, [r7, #8]
 8007c86:	b2ca      	uxtb	r2, r1
 8007c88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	dbf0      	blt.n	8007c7a <_read+0x12>
	}

return len;
 8007c98:	687b      	ldr	r3, [r7, #4]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
	return -1;
 8007caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cca:	605a      	str	r2, [r3, #4]
	return 0;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <_isatty>:

int _isatty(int file)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
	return 1;
 8007ce2:	2301      	movs	r3, #1
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
	return 0;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
	...

08007d0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d14:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <_sbrk+0x50>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <_sbrk+0x16>
		heap_end = &end;
 8007d1c:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <_sbrk+0x50>)
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <_sbrk+0x54>)
 8007d20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007d22:	4b0e      	ldr	r3, [pc, #56]	; (8007d5c <_sbrk+0x50>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <_sbrk+0x50>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	466a      	mov	r2, sp
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d907      	bls.n	8007d46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d36:	f007 fff9 	bl	800fd2c <__errno>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	230c      	movs	r3, #12
 8007d3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	e006      	b.n	8007d54 <_sbrk+0x48>
	}

	heap_end += incr;
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <_sbrk+0x50>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	4a03      	ldr	r2, [pc, #12]	; (8007d5c <_sbrk+0x50>)
 8007d50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007d52:	68fb      	ldr	r3, [r7, #12]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000770 	.word	0x20000770
 8007d60:	20000f68 	.word	0x20000f68

08007d64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d68:	4b08      	ldr	r3, [pc, #32]	; (8007d8c <SystemInit+0x28>)
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6e:	4a07      	ldr	r2, [pc, #28]	; (8007d8c <SystemInit+0x28>)
 8007d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <SystemInit+0x28>)
 8007d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d7e:	609a      	str	r2, [r3, #8]
#endif
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	e000ed00 	.word	0xe000ed00

08007d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007dc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007d94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007d96:	e003      	b.n	8007da0 <LoopCopyDataInit>

08007d98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007d9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007d9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007d9e:	3104      	adds	r1, #4

08007da0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007da0:	480b      	ldr	r0, [pc, #44]	; (8007dd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007da2:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007da4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007da6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007da8:	d3f6      	bcc.n	8007d98 <CopyDataInit>
  ldr  r2, =_sbss
 8007daa:	4a0b      	ldr	r2, [pc, #44]	; (8007dd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007dac:	e002      	b.n	8007db4 <LoopFillZerobss>

08007dae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007dae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007db0:	f842 3b04 	str.w	r3, [r2], #4

08007db4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007db4:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007db6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007db8:	d3f9      	bcc.n	8007dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007dba:	f7ff ffd3 	bl	8007d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dbe:	f007 ffbb 	bl	800fd38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dc2:	f7ff fd57 	bl	8007874 <main>
  bx  lr    
 8007dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007dc8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007dcc:	08015950 	.word	0x08015950
  ldr  r0, =_sdata
 8007dd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007dd4:	20000730 	.word	0x20000730
  ldr  r2, =_sbss
 8007dd8:	20000730 	.word	0x20000730
  ldr  r3, = _ebss
 8007ddc:	20000f64 	.word	0x20000f64

08007de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007de0:	e7fe      	b.n	8007de0 <ADC_IRQHandler>

08007de2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007de6:	2003      	movs	r0, #3
 8007de8:	f000 f950 	bl	800808c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007dec:	2000      	movs	r0, #0
 8007dee:	f000 f805 	bl	8007dfc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007df2:	f7ff fe83 	bl	8007afc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_InitTick+0x54>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_InitTick+0x58>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f95d 	bl	80080da <HAL_SYSTICK_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e00e      	b.n	8007e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b0f      	cmp	r3, #15
 8007e2e:	d80a      	bhi.n	8007e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e30:	2200      	movs	r2, #0
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	f000 f933 	bl	80080a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e3c:	4a06      	ldr	r2, [pc, #24]	; (8007e58 <HAL_InitTick+0x5c>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e000      	b.n	8007e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000008 	.word	0x20000008
 8007e54:	20000010 	.word	0x20000010
 8007e58:	2000000c 	.word	0x2000000c

08007e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e60:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <HAL_IncTick+0x20>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <HAL_IncTick+0x24>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <HAL_IncTick+0x24>)
 8007e6e:	6013      	str	r3, [r2, #0]
}
 8007e70:	bf00      	nop
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000010 	.word	0x20000010
 8007e80:	20000dc0 	.word	0x20000dc0

08007e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return uwTick;
 8007e88:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <HAL_GetTick+0x14>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000dc0 	.word	0x20000dc0

08007e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ea4:	f7ff ffee 	bl	8007e84 <HAL_GetTick>
 8007ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb4:	d005      	beq.n	8007ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <HAL_Delay+0x40>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007ec2:	bf00      	nop
 8007ec4:	f7ff ffde 	bl	8007e84 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d8f7      	bhi.n	8007ec4 <HAL_Delay+0x28>
  {
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000010 	.word	0x20000010

08007ee0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8007ee4:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <HAL_GetHalVersion+0x10>)
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	01020800 	.word	0x01020800

08007ef4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <HAL_GetREVID+0x14>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	0c1b      	lsrs	r3, r3, #16
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	e0042000 	.word	0xe0042000

08007f0c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <HAL_GetDEVID+0x18>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	e0042000 	.word	0xe0042000

08007f28 <__NVIC_SetPriorityGrouping>:
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <__NVIC_SetPriorityGrouping+0x40>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f44:	4013      	ands	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <__NVIC_SetPriorityGrouping+0x44>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f56:	4a04      	ldr	r2, [pc, #16]	; (8007f68 <__NVIC_SetPriorityGrouping+0x40>)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	60d3      	str	r3, [r2, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	e000ed00 	.word	0xe000ed00
 8007f6c:	05fa0000 	.word	0x05fa0000

08007f70 <__NVIC_GetPriorityGrouping>:
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f74:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <__NVIC_GetPriorityGrouping+0x18>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	0a1b      	lsrs	r3, r3, #8
 8007f7a:	f003 0307 	and.w	r3, r3, #7
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	e000ed00 	.word	0xe000ed00

08007f8c <__NVIC_SetPriority>:
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db0a      	blt.n	8007fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	490c      	ldr	r1, [pc, #48]	; (8007fd8 <__NVIC_SetPriority+0x4c>)
 8007fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007faa:	0112      	lsls	r2, r2, #4
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	440b      	add	r3, r1
 8007fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fb4:	e00a      	b.n	8007fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4908      	ldr	r1, [pc, #32]	; (8007fdc <__NVIC_SetPriority+0x50>)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	0112      	lsls	r2, r2, #4
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	440b      	add	r3, r1
 8007fca:	761a      	strb	r2, [r3, #24]
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	e000e100 	.word	0xe000e100
 8007fdc:	e000ed00 	.word	0xe000ed00

08007fe0 <NVIC_EncodePriority>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f1c3 0307 	rsb	r3, r3, #7
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	bf28      	it	cs
 8007ffe:	2304      	movcs	r3, #4
 8008000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	3304      	adds	r3, #4
 8008006:	2b06      	cmp	r3, #6
 8008008:	d902      	bls.n	8008010 <NVIC_EncodePriority+0x30>
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	3b03      	subs	r3, #3
 800800e:	e000      	b.n	8008012 <NVIC_EncodePriority+0x32>
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008014:	f04f 32ff 	mov.w	r2, #4294967295
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43da      	mvns	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	401a      	ands	r2, r3
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008028:	f04f 31ff 	mov.w	r1, #4294967295
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	fa01 f303 	lsl.w	r3, r1, r3
 8008032:	43d9      	mvns	r1, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008038:	4313      	orrs	r3, r2
}
 800803a:	4618      	mov	r0, r3
 800803c:	3724      	adds	r7, #36	; 0x24
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
	...

08008048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3b01      	subs	r3, #1
 8008054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008058:	d301      	bcc.n	800805e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800805a:	2301      	movs	r3, #1
 800805c:	e00f      	b.n	800807e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <SysTick_Config+0x40>)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3b01      	subs	r3, #1
 8008064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008066:	210f      	movs	r1, #15
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	f7ff ff8e 	bl	8007f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <SysTick_Config+0x40>)
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008076:	4b04      	ldr	r3, [pc, #16]	; (8008088 <SysTick_Config+0x40>)
 8008078:	2207      	movs	r2, #7
 800807a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	e000e010 	.word	0xe000e010

0800808c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff47 	bl	8007f28 <__NVIC_SetPriorityGrouping>
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	4603      	mov	r3, r0
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080b4:	f7ff ff5c 	bl	8007f70 <__NVIC_GetPriorityGrouping>
 80080b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	6978      	ldr	r0, [r7, #20]
 80080c0:	f7ff ff8e 	bl	8007fe0 <NVIC_EncodePriority>
 80080c4:	4602      	mov	r2, r0
 80080c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff ff5d 	bl	8007f8c <__NVIC_SetPriority>
}
 80080d2:	bf00      	nop
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ffb0 	bl	8008048 <SysTick_Config>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e054      	b.n	80081b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7f5b      	ldrb	r3, [r3, #29]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fd14 	bl	8007b44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	791b      	ldrb	r3, [r3, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10c      	bne.n	8008144 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a22      	ldr	r2, [pc, #136]	; (80081b8 <HAL_CRC_Init+0xc4>)
 8008130:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0218 	bic.w	r2, r2, #24
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	e00c      	b.n	800815e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6899      	ldr	r1, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	461a      	mov	r2, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f834 	bl	80081bc <HAL_CRCEx_Polynomial_Set>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e028      	b.n	80081b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	795b      	ldrb	r3, [r3, #5]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	611a      	str	r2, [r3, #16]
 8008170:	e004      	b.n	800817c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6912      	ldr	r2, [r2, #16]
 800817a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695a      	ldr	r2, [r3, #20]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	04c11db7 	.word	0x04c11db7

080081bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80081cc:	231f      	movs	r3, #31
 80081ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80081d0:	bf00      	nop
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1e5a      	subs	r2, r3, #1
 80081d6:	613a      	str	r2, [r7, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <HAL_CRCEx_Polynomial_Set+0x34>
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f003 031f 	and.w	r3, r3, #31
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0f0      	beq.n	80081d2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b18      	cmp	r3, #24
 80081f4:	d846      	bhi.n	8008284 <HAL_CRCEx_Polynomial_Set+0xc8>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <HAL_CRCEx_Polynomial_Set+0x40>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	0800828b 	.word	0x0800828b
 8008200:	08008285 	.word	0x08008285
 8008204:	08008285 	.word	0x08008285
 8008208:	08008285 	.word	0x08008285
 800820c:	08008285 	.word	0x08008285
 8008210:	08008285 	.word	0x08008285
 8008214:	08008285 	.word	0x08008285
 8008218:	08008285 	.word	0x08008285
 800821c:	08008279 	.word	0x08008279
 8008220:	08008285 	.word	0x08008285
 8008224:	08008285 	.word	0x08008285
 8008228:	08008285 	.word	0x08008285
 800822c:	08008285 	.word	0x08008285
 8008230:	08008285 	.word	0x08008285
 8008234:	08008285 	.word	0x08008285
 8008238:	08008285 	.word	0x08008285
 800823c:	0800826d 	.word	0x0800826d
 8008240:	08008285 	.word	0x08008285
 8008244:	08008285 	.word	0x08008285
 8008248:	08008285 	.word	0x08008285
 800824c:	08008285 	.word	0x08008285
 8008250:	08008285 	.word	0x08008285
 8008254:	08008285 	.word	0x08008285
 8008258:	08008285 	.word	0x08008285
 800825c:	08008261 	.word	0x08008261
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2b06      	cmp	r3, #6
 8008264:	d913      	bls.n	800828e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800826a:	e010      	b.n	800828e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b07      	cmp	r3, #7
 8008270:	d90f      	bls.n	8008292 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008276:	e00c      	b.n	8008292 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b0f      	cmp	r3, #15
 800827c:	d90b      	bls.n	8008296 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008282:	e008      	b.n	8008296 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
      break;
 8008288:	e006      	b.n	8008298 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800828a:	bf00      	nop
 800828c:	e004      	b.n	8008298 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800828e:	bf00      	nop
 8008290:	e002      	b.n	8008298 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008292:	bf00      	nop
 8008294:	e000      	b.n	8008298 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008296:	bf00      	nop
  }
  if (status == HAL_OK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10d      	bne.n	80082ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f023 0118 	bic.w	r1, r3, #24
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b089      	sub	sp, #36	; 0x24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e175      	b.n	80085d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80082e8:	2201      	movs	r2, #1
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4013      	ands	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	429a      	cmp	r2, r3
 8008302:	f040 8164 	bne.w	80085ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d00b      	beq.n	8008326 <HAL_GPIO_Init+0x5e>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d007      	beq.n	8008326 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800831a:	2b11      	cmp	r3, #17
 800831c:	d003      	beq.n	8008326 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b12      	cmp	r3, #18
 8008324:	d130      	bne.n	8008388 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	2203      	movs	r2, #3
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43db      	mvns	r3, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	4013      	ands	r3, r2
 800833c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4313      	orrs	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800835c:	2201      	movs	r2, #1
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	43db      	mvns	r3, r3
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	091b      	lsrs	r3, r3, #4
 8008372:	f003 0201 	and.w	r2, r3, #1
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4313      	orrs	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	2203      	movs	r2, #3
 8008394:	fa02 f303 	lsl.w	r3, r2, r3
 8008398:	43db      	mvns	r3, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d003      	beq.n	80083c8 <HAL_GPIO_Init+0x100>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	2b12      	cmp	r3, #18
 80083c6:	d123      	bne.n	8008410 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	08da      	lsrs	r2, r3, #3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3208      	adds	r2, #8
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	220f      	movs	r2, #15
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	43db      	mvns	r3, r3
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	4013      	ands	r3, r2
 80083ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	fa02 f303 	lsl.w	r3, r2, r3
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4313      	orrs	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	08da      	lsrs	r2, r3, #3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3208      	adds	r2, #8
 800840a:	69b9      	ldr	r1, [r7, #24]
 800840c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	2203      	movs	r2, #3
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	43db      	mvns	r3, r3
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4013      	ands	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f003 0203 	and.w	r2, r3, #3
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	4313      	orrs	r3, r2
 800843c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80be 	beq.w	80085ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008452:	4b65      	ldr	r3, [pc, #404]	; (80085e8 <HAL_GPIO_Init+0x320>)
 8008454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008456:	4a64      	ldr	r2, [pc, #400]	; (80085e8 <HAL_GPIO_Init+0x320>)
 8008458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800845c:	6453      	str	r3, [r2, #68]	; 0x44
 800845e:	4b62      	ldr	r3, [pc, #392]	; (80085e8 <HAL_GPIO_Init+0x320>)
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800846a:	4a60      	ldr	r2, [pc, #384]	; (80085ec <HAL_GPIO_Init+0x324>)
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	089b      	lsrs	r3, r3, #2
 8008470:	3302      	adds	r3, #2
 8008472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008476:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	220f      	movs	r2, #15
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	4013      	ands	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a57      	ldr	r2, [pc, #348]	; (80085f0 <HAL_GPIO_Init+0x328>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d037      	beq.n	8008506 <HAL_GPIO_Init+0x23e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a56      	ldr	r2, [pc, #344]	; (80085f4 <HAL_GPIO_Init+0x32c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d031      	beq.n	8008502 <HAL_GPIO_Init+0x23a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a55      	ldr	r2, [pc, #340]	; (80085f8 <HAL_GPIO_Init+0x330>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d02b      	beq.n	80084fe <HAL_GPIO_Init+0x236>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a54      	ldr	r2, [pc, #336]	; (80085fc <HAL_GPIO_Init+0x334>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d025      	beq.n	80084fa <HAL_GPIO_Init+0x232>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a53      	ldr	r2, [pc, #332]	; (8008600 <HAL_GPIO_Init+0x338>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d01f      	beq.n	80084f6 <HAL_GPIO_Init+0x22e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a52      	ldr	r2, [pc, #328]	; (8008604 <HAL_GPIO_Init+0x33c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d019      	beq.n	80084f2 <HAL_GPIO_Init+0x22a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a51      	ldr	r2, [pc, #324]	; (8008608 <HAL_GPIO_Init+0x340>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d013      	beq.n	80084ee <HAL_GPIO_Init+0x226>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a50      	ldr	r2, [pc, #320]	; (800860c <HAL_GPIO_Init+0x344>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00d      	beq.n	80084ea <HAL_GPIO_Init+0x222>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a4f      	ldr	r2, [pc, #316]	; (8008610 <HAL_GPIO_Init+0x348>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d007      	beq.n	80084e6 <HAL_GPIO_Init+0x21e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a4e      	ldr	r2, [pc, #312]	; (8008614 <HAL_GPIO_Init+0x34c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d101      	bne.n	80084e2 <HAL_GPIO_Init+0x21a>
 80084de:	2309      	movs	r3, #9
 80084e0:	e012      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084e2:	230a      	movs	r3, #10
 80084e4:	e010      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084e6:	2308      	movs	r3, #8
 80084e8:	e00e      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084ea:	2307      	movs	r3, #7
 80084ec:	e00c      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084ee:	2306      	movs	r3, #6
 80084f0:	e00a      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084f2:	2305      	movs	r3, #5
 80084f4:	e008      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084f6:	2304      	movs	r3, #4
 80084f8:	e006      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084fa:	2303      	movs	r3, #3
 80084fc:	e004      	b.n	8008508 <HAL_GPIO_Init+0x240>
 80084fe:	2302      	movs	r3, #2
 8008500:	e002      	b.n	8008508 <HAL_GPIO_Init+0x240>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <HAL_GPIO_Init+0x240>
 8008506:	2300      	movs	r3, #0
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	f002 0203 	and.w	r2, r2, #3
 800850e:	0092      	lsls	r2, r2, #2
 8008510:	4093      	lsls	r3, r2
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4313      	orrs	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008518:	4934      	ldr	r1, [pc, #208]	; (80085ec <HAL_GPIO_Init+0x324>)
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	089b      	lsrs	r3, r3, #2
 800851e:	3302      	adds	r3, #2
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008526:	4b3c      	ldr	r3, [pc, #240]	; (8008618 <HAL_GPIO_Init+0x350>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	43db      	mvns	r3, r3
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	4013      	ands	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4313      	orrs	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800854a:	4a33      	ldr	r2, [pc, #204]	; (8008618 <HAL_GPIO_Init+0x350>)
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008550:	4b31      	ldr	r3, [pc, #196]	; (8008618 <HAL_GPIO_Init+0x350>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	43db      	mvns	r3, r3
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	4013      	ands	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008574:	4a28      	ldr	r2, [pc, #160]	; (8008618 <HAL_GPIO_Init+0x350>)
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800857a:	4b27      	ldr	r3, [pc, #156]	; (8008618 <HAL_GPIO_Init+0x350>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	43db      	mvns	r3, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4013      	ands	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4313      	orrs	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800859e:	4a1e      	ldr	r2, [pc, #120]	; (8008618 <HAL_GPIO_Init+0x350>)
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80085a4:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <HAL_GPIO_Init+0x350>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	4013      	ands	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085c8:	4a13      	ldr	r2, [pc, #76]	; (8008618 <HAL_GPIO_Init+0x350>)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	3301      	adds	r3, #1
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b0f      	cmp	r3, #15
 80085d8:	f67f ae86 	bls.w	80082e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80085dc:	bf00      	nop
 80085de:	3724      	adds	r7, #36	; 0x24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40013800 	.word	0x40013800
 80085f0:	40020000 	.word	0x40020000
 80085f4:	40020400 	.word	0x40020400
 80085f8:	40020800 	.word	0x40020800
 80085fc:	40020c00 	.word	0x40020c00
 8008600:	40021000 	.word	0x40021000
 8008604:	40021400 	.word	0x40021400
 8008608:	40021800 	.word	0x40021800
 800860c:	40021c00 	.word	0x40021c00
 8008610:	40022000 	.word	0x40022000
 8008614:	40022400 	.word	0x40022400
 8008618:	40013c00 	.word	0x40013c00

0800861c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008626:	4b23      	ldr	r3, [pc, #140]	; (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	4a22      	ldr	r2, [pc, #136]	; (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008630:	6413      	str	r3, [r2, #64]	; 0x40
 8008632:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800863e:	4b1e      	ldr	r3, [pc, #120]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008648:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800864a:	f7ff fc1b 	bl	8007e84 <HAL_GetTick>
 800864e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008650:	e009      	b.n	8008666 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008652:	f7ff fc17 	bl	8007e84 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008660:	d901      	bls.n	8008666 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e022      	b.n	80086ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800866e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008672:	d1ee      	bne.n	8008652 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008674:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a0f      	ldr	r2, [pc, #60]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800867a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800867e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008680:	f7ff fc00 	bl	8007e84 <HAL_GetTick>
 8008684:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008686:	e009      	b.n	800869c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008688:	f7ff fbfc 	bl	8007e84 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008696:	d901      	bls.n	800869c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e007      	b.n	80086ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800869c:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086a8:	d1ee      	bne.n	8008688 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40023800 	.word	0x40023800
 80086b8:	40007000 	.word	0x40007000

080086bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e29b      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8087 	beq.w	80087ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086e0:	4b96      	ldr	r3, [pc, #600]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 030c 	and.w	r3, r3, #12
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d00c      	beq.n	8008706 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ec:	4b93      	ldr	r3, [pc, #588]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 030c 	and.w	r3, r3, #12
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d112      	bne.n	800871e <HAL_RCC_OscConfig+0x62>
 80086f8:	4b90      	ldr	r3, [pc, #576]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008704:	d10b      	bne.n	800871e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008706:	4b8d      	ldr	r3, [pc, #564]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d06c      	beq.n	80087ec <HAL_RCC_OscConfig+0x130>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d168      	bne.n	80087ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e275      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008726:	d106      	bne.n	8008736 <HAL_RCC_OscConfig+0x7a>
 8008728:	4b84      	ldr	r3, [pc, #528]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a83      	ldr	r2, [pc, #524]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800872e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e02e      	b.n	8008794 <HAL_RCC_OscConfig+0xd8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10c      	bne.n	8008758 <HAL_RCC_OscConfig+0x9c>
 800873e:	4b7f      	ldr	r3, [pc, #508]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a7e      	ldr	r2, [pc, #504]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4b7c      	ldr	r3, [pc, #496]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a7b      	ldr	r2, [pc, #492]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e01d      	b.n	8008794 <HAL_RCC_OscConfig+0xd8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008760:	d10c      	bne.n	800877c <HAL_RCC_OscConfig+0xc0>
 8008762:	4b76      	ldr	r3, [pc, #472]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a75      	ldr	r2, [pc, #468]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4b73      	ldr	r3, [pc, #460]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a72      	ldr	r2, [pc, #456]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	e00b      	b.n	8008794 <HAL_RCC_OscConfig+0xd8>
 800877c:	4b6f      	ldr	r3, [pc, #444]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a6e      	ldr	r2, [pc, #440]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4b6c      	ldr	r3, [pc, #432]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a6b      	ldr	r2, [pc, #428]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800878e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d013      	beq.n	80087c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7ff fb72 	bl	8007e84 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a4:	f7ff fb6e 	bl	8007e84 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b64      	cmp	r3, #100	; 0x64
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e229      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b6:	4b61      	ldr	r3, [pc, #388]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCC_OscConfig+0xe8>
 80087c2:	e014      	b.n	80087ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c4:	f7ff fb5e 	bl	8007e84 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087cc:	f7ff fb5a 	bl	8007e84 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b64      	cmp	r3, #100	; 0x64
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e215      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087de:	4b57      	ldr	r3, [pc, #348]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f0      	bne.n	80087cc <HAL_RCC_OscConfig+0x110>
 80087ea:	e000      	b.n	80087ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d069      	beq.n	80088ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087fa:	4b50      	ldr	r3, [pc, #320]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 030c 	and.w	r3, r3, #12
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008806:	4b4d      	ldr	r3, [pc, #308]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 030c 	and.w	r3, r3, #12
 800880e:	2b08      	cmp	r3, #8
 8008810:	d11c      	bne.n	800884c <HAL_RCC_OscConfig+0x190>
 8008812:	4b4a      	ldr	r3, [pc, #296]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d116      	bne.n	800884c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881e:	4b47      	ldr	r3, [pc, #284]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_RCC_OscConfig+0x17a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d001      	beq.n	8008836 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e1e9      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008836:	4b41      	ldr	r3, [pc, #260]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	493d      	ldr	r1, [pc, #244]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008846:	4313      	orrs	r3, r2
 8008848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800884a:	e040      	b.n	80088ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d023      	beq.n	800889c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008854:	4b39      	ldr	r3, [pc, #228]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a38      	ldr	r2, [pc, #224]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800885a:	f043 0301 	orr.w	r3, r3, #1
 800885e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008860:	f7ff fb10 	bl	8007e84 <HAL_GetTick>
 8008864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008868:	f7ff fb0c 	bl	8007e84 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e1c7      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800887a:	4b30      	ldr	r3, [pc, #192]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008886:	4b2d      	ldr	r3, [pc, #180]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	4929      	ldr	r1, [pc, #164]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008896:	4313      	orrs	r3, r2
 8008898:	600b      	str	r3, [r1, #0]
 800889a:	e018      	b.n	80088ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800889c:	4b27      	ldr	r3, [pc, #156]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a26      	ldr	r2, [pc, #152]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80088a2:	f023 0301 	bic.w	r3, r3, #1
 80088a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7ff faec 	bl	8007e84 <HAL_GetTick>
 80088ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b0:	f7ff fae8 	bl	8007e84 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e1a3      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088c2:	4b1e      	ldr	r3, [pc, #120]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0308 	and.w	r3, r3, #8
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d038      	beq.n	800894c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d019      	beq.n	8008916 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80088e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e6:	4a15      	ldr	r2, [pc, #84]	; (800893c <HAL_RCC_OscConfig+0x280>)
 80088e8:	f043 0301 	orr.w	r3, r3, #1
 80088ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ee:	f7ff fac9 	bl	8007e84 <HAL_GetTick>
 80088f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f4:	e008      	b.n	8008908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f6:	f7ff fac5 	bl	8007e84 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b02      	cmp	r3, #2
 8008902:	d901      	bls.n	8008908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e180      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008908:	4b0c      	ldr	r3, [pc, #48]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800890a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d0f0      	beq.n	80088f6 <HAL_RCC_OscConfig+0x23a>
 8008914:	e01a      	b.n	800894c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008916:	4b09      	ldr	r3, [pc, #36]	; (800893c <HAL_RCC_OscConfig+0x280>)
 8008918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800891a:	4a08      	ldr	r2, [pc, #32]	; (800893c <HAL_RCC_OscConfig+0x280>)
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008922:	f7ff faaf 	bl	8007e84 <HAL_GetTick>
 8008926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008928:	e00a      	b.n	8008940 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800892a:	f7ff faab 	bl	8007e84 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d903      	bls.n	8008940 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e166      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
 800893c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008940:	4b92      	ldr	r3, [pc, #584]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1ee      	bne.n	800892a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 80a4 	beq.w	8008aa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800895a:	4b8c      	ldr	r3, [pc, #560]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10d      	bne.n	8008982 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008966:	4b89      	ldr	r3, [pc, #548]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	4a88      	ldr	r2, [pc, #544]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 800896c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008970:	6413      	str	r3, [r2, #64]	; 0x40
 8008972:	4b86      	ldr	r3, [pc, #536]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800897a:	60bb      	str	r3, [r7, #8]
 800897c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800897e:	2301      	movs	r3, #1
 8008980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008982:	4b83      	ldr	r3, [pc, #524]	; (8008b90 <HAL_RCC_OscConfig+0x4d4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898a:	2b00      	cmp	r3, #0
 800898c:	d118      	bne.n	80089c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800898e:	4b80      	ldr	r3, [pc, #512]	; (8008b90 <HAL_RCC_OscConfig+0x4d4>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a7f      	ldr	r2, [pc, #508]	; (8008b90 <HAL_RCC_OscConfig+0x4d4>)
 8008994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800899a:	f7ff fa73 	bl	8007e84 <HAL_GetTick>
 800899e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089a0:	e008      	b.n	80089b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089a2:	f7ff fa6f 	bl	8007e84 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b64      	cmp	r3, #100	; 0x64
 80089ae:	d901      	bls.n	80089b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e12a      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089b4:	4b76      	ldr	r3, [pc, #472]	; (8008b90 <HAL_RCC_OscConfig+0x4d4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0f0      	beq.n	80089a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d106      	bne.n	80089d6 <HAL_RCC_OscConfig+0x31a>
 80089c8:	4b70      	ldr	r3, [pc, #448]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 80089ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089cc:	4a6f      	ldr	r2, [pc, #444]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	6713      	str	r3, [r2, #112]	; 0x70
 80089d4:	e02d      	b.n	8008a32 <HAL_RCC_OscConfig+0x376>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10c      	bne.n	80089f8 <HAL_RCC_OscConfig+0x33c>
 80089de:	4b6b      	ldr	r3, [pc, #428]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	4a6a      	ldr	r2, [pc, #424]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ea:	4b68      	ldr	r3, [pc, #416]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 80089ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ee:	4a67      	ldr	r2, [pc, #412]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 80089f0:	f023 0304 	bic.w	r3, r3, #4
 80089f4:	6713      	str	r3, [r2, #112]	; 0x70
 80089f6:	e01c      	b.n	8008a32 <HAL_RCC_OscConfig+0x376>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2b05      	cmp	r3, #5
 80089fe:	d10c      	bne.n	8008a1a <HAL_RCC_OscConfig+0x35e>
 8008a00:	4b62      	ldr	r3, [pc, #392]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	4a61      	ldr	r2, [pc, #388]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a06:	f043 0304 	orr.w	r3, r3, #4
 8008a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a0c:	4b5f      	ldr	r3, [pc, #380]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a10:	4a5e      	ldr	r2, [pc, #376]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	6713      	str	r3, [r2, #112]	; 0x70
 8008a18:	e00b      	b.n	8008a32 <HAL_RCC_OscConfig+0x376>
 8008a1a:	4b5c      	ldr	r3, [pc, #368]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	4a5b      	ldr	r2, [pc, #364]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	6713      	str	r3, [r2, #112]	; 0x70
 8008a26:	4b59      	ldr	r3, [pc, #356]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2a:	4a58      	ldr	r2, [pc, #352]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a2c:	f023 0304 	bic.w	r3, r3, #4
 8008a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d015      	beq.n	8008a66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3a:	f7ff fa23 	bl	8007e84 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a40:	e00a      	b.n	8008a58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7ff fa1f 	bl	8007e84 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e0d8      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a58:	4b4c      	ldr	r3, [pc, #304]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0ee      	beq.n	8008a42 <HAL_RCC_OscConfig+0x386>
 8008a64:	e014      	b.n	8008a90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a66:	f7ff fa0d 	bl	8007e84 <HAL_GetTick>
 8008a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a6c:	e00a      	b.n	8008a84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6e:	f7ff fa09 	bl	8007e84 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e0c2      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a84:	4b41      	ldr	r3, [pc, #260]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1ee      	bne.n	8008a6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d105      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a96:	4b3d      	ldr	r3, [pc, #244]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 80ae 	beq.w	8008c08 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008aac:	4b37      	ldr	r3, [pc, #220]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 030c 	and.w	r3, r3, #12
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d06d      	beq.n	8008b94 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d14b      	bne.n	8008b58 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ac0:	4b32      	ldr	r3, [pc, #200]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a31      	ldr	r2, [pc, #196]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008acc:	f7ff f9da 	bl	8007e84 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ad4:	f7ff f9d6 	bl	8007e84 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e091      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ae6:	4b29      	ldr	r3, [pc, #164]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f0      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69da      	ldr	r2, [r3, #28]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	019b      	lsls	r3, r3, #6
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	085b      	lsrs	r3, r3, #1
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	061b      	lsls	r3, r3, #24
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1c:	071b      	lsls	r3, r3, #28
 8008b1e:	491b      	ldr	r1, [pc, #108]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b24:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7ff f9a8 	bl	8007e84 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b38:	f7ff f9a4 	bl	8007e84 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e05f      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0x47c>
 8008b56:	e057      	b.n	8008c08 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a0b      	ldr	r2, [pc, #44]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7ff f98e 	bl	8007e84 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7ff f98a 	bl	8007e84 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e045      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <HAL_RCC_OscConfig+0x4d0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0x4b0>
 8008b8a:	e03d      	b.n	8008c08 <HAL_RCC_OscConfig+0x54c>
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008b94:	4b1f      	ldr	r3, [pc, #124]	; (8008c14 <HAL_RCC_OscConfig+0x558>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d030      	beq.n	8008c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d129      	bne.n	8008c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d122      	bne.n	8008c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d119      	bne.n	8008c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d10f      	bne.n	8008c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d107      	bne.n	8008c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d001      	beq.n	8008c08 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40023800 	.word	0x40023800

08008c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0d0      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c30:	4b6a      	ldr	r3, [pc, #424]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d910      	bls.n	8008c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c3e:	4b67      	ldr	r3, [pc, #412]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f023 020f 	bic.w	r2, r3, #15
 8008c46:	4965      	ldr	r1, [pc, #404]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4e:	4b63      	ldr	r3, [pc, #396]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d001      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e0b8      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d020      	beq.n	8008cae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c78:	4b59      	ldr	r3, [pc, #356]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4a58      	ldr	r2, [pc, #352]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d005      	beq.n	8008c9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c90:	4b53      	ldr	r3, [pc, #332]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	4a52      	ldr	r2, [pc, #328]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c9c:	4b50      	ldr	r3, [pc, #320]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	494d      	ldr	r1, [pc, #308]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d040      	beq.n	8008d3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cc2:	4b47      	ldr	r3, [pc, #284]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d115      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e07f      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d107      	bne.n	8008cea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cda:	4b41      	ldr	r3, [pc, #260]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e073      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cea:	4b3d      	ldr	r3, [pc, #244]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e06b      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cfa:	4b39      	ldr	r3, [pc, #228]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f023 0203 	bic.w	r2, r3, #3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	4936      	ldr	r1, [pc, #216]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d0c:	f7ff f8ba 	bl	8007e84 <HAL_GetTick>
 8008d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d12:	e00a      	b.n	8008d2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d14:	f7ff f8b6 	bl	8007e84 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e053      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d2a:	4b2d      	ldr	r3, [pc, #180]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 020c 	and.w	r2, r3, #12
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d1eb      	bne.n	8008d14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d3c:	4b27      	ldr	r3, [pc, #156]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d210      	bcs.n	8008d6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d4a:	4b24      	ldr	r3, [pc, #144]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f023 020f 	bic.w	r2, r3, #15
 8008d52:	4922      	ldr	r1, [pc, #136]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d5a:	4b20      	ldr	r3, [pc, #128]	; (8008ddc <HAL_RCC_ClockConfig+0x1c4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d001      	beq.n	8008d6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e032      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d008      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d78:	4b19      	ldr	r3, [pc, #100]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4916      	ldr	r1, [pc, #88]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d96:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	490e      	ldr	r1, [pc, #56]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008daa:	f000 f821 	bl	8008df0 <HAL_RCC_GetSysClockFreq>
 8008dae:	4601      	mov	r1, r0
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <HAL_RCC_ClockConfig+0x1c8>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	091b      	lsrs	r3, r3, #4
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	4a0a      	ldr	r2, [pc, #40]	; (8008de4 <HAL_RCC_ClockConfig+0x1cc>)
 8008dbc:	5cd3      	ldrb	r3, [r2, r3]
 8008dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8008dc2:	4a09      	ldr	r2, [pc, #36]	; (8008de8 <HAL_RCC_ClockConfig+0x1d0>)
 8008dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <HAL_RCC_ClockConfig+0x1d4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff f816 	bl	8007dfc <HAL_InitTick>

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40023c00 	.word	0x40023c00
 8008de0:	40023800 	.word	0x40023800
 8008de4:	08014348 	.word	0x08014348
 8008de8:	20000008 	.word	0x20000008
 8008dec:	2000000c 	.word	0x2000000c

08008df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e06:	4b50      	ldr	r3, [pc, #320]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d007      	beq.n	8008e22 <HAL_RCC_GetSysClockFreq+0x32>
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d008      	beq.n	8008e28 <HAL_RCC_GetSysClockFreq+0x38>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f040 808d 	bne.w	8008f36 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e1c:	4b4b      	ldr	r3, [pc, #300]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008e1e:	60bb      	str	r3, [r7, #8]
      break;
 8008e20:	e08c      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e22:	4b4b      	ldr	r3, [pc, #300]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e24:	60bb      	str	r3, [r7, #8]
      break;
 8008e26:	e089      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e28:	4b47      	ldr	r3, [pc, #284]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e30:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008e32:	4b45      	ldr	r3, [pc, #276]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d023      	beq.n	8008e86 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e3e:	4b42      	ldr	r3, [pc, #264]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	099b      	lsrs	r3, r3, #6
 8008e44:	f04f 0400 	mov.w	r4, #0
 8008e48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e4c:	f04f 0200 	mov.w	r2, #0
 8008e50:	ea03 0501 	and.w	r5, r3, r1
 8008e54:	ea04 0602 	and.w	r6, r4, r2
 8008e58:	4a3d      	ldr	r2, [pc, #244]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e5a:	fb02 f106 	mul.w	r1, r2, r6
 8008e5e:	2200      	movs	r2, #0
 8008e60:	fb02 f205 	mul.w	r2, r2, r5
 8008e64:	440a      	add	r2, r1
 8008e66:	493a      	ldr	r1, [pc, #232]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e68:	fba5 0101 	umull	r0, r1, r5, r1
 8008e6c:	1853      	adds	r3, r2, r1
 8008e6e:	4619      	mov	r1, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f04f 0400 	mov.w	r4, #0
 8008e76:	461a      	mov	r2, r3
 8008e78:	4623      	mov	r3, r4
 8008e7a:	f7fe fb1b 	bl	80074b4 <__aeabi_uldivmod>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	e049      	b.n	8008f1a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e86:	4b30      	ldr	r3, [pc, #192]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	099b      	lsrs	r3, r3, #6
 8008e8c:	f04f 0400 	mov.w	r4, #0
 8008e90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	ea03 0501 	and.w	r5, r3, r1
 8008e9c:	ea04 0602 	and.w	r6, r4, r2
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4632      	mov	r2, r6
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	f04f 0400 	mov.w	r4, #0
 8008eac:	0154      	lsls	r4, r2, #5
 8008eae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008eb2:	014b      	lsls	r3, r1, #5
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	1b49      	subs	r1, r1, r5
 8008eba:	eb62 0206 	sbc.w	r2, r2, r6
 8008ebe:	f04f 0300 	mov.w	r3, #0
 8008ec2:	f04f 0400 	mov.w	r4, #0
 8008ec6:	0194      	lsls	r4, r2, #6
 8008ec8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ecc:	018b      	lsls	r3, r1, #6
 8008ece:	1a5b      	subs	r3, r3, r1
 8008ed0:	eb64 0402 	sbc.w	r4, r4, r2
 8008ed4:	f04f 0100 	mov.w	r1, #0
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	00e2      	lsls	r2, r4, #3
 8008ede:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008ee2:	00d9      	lsls	r1, r3, #3
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	195b      	adds	r3, r3, r5
 8008eea:	eb44 0406 	adc.w	r4, r4, r6
 8008eee:	f04f 0100 	mov.w	r1, #0
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	02a2      	lsls	r2, r4, #10
 8008ef8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008efc:	0299      	lsls	r1, r3, #10
 8008efe:	460b      	mov	r3, r1
 8008f00:	4614      	mov	r4, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	4621      	mov	r1, r4
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f04f 0400 	mov.w	r4, #0
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4623      	mov	r3, r4
 8008f10:	f7fe fad0 	bl	80074b4 <__aeabi_uldivmod>
 8008f14:	4603      	mov	r3, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x158>)
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	0c1b      	lsrs	r3, r3, #16
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	3301      	adds	r3, #1
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f32:	60bb      	str	r3, [r7, #8]
      break;
 8008f34:	e002      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008f38:	60bb      	str	r3, [r7, #8]
      break;
 8008f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	017d7840 	.word	0x017d7840

08008f54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f58:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	20000008 	.word	0x20000008

08008f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f70:	f7ff fff0 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008f74:	4601      	mov	r1, r0
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	0a9b      	lsrs	r3, r3, #10
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	4a03      	ldr	r2, [pc, #12]	; (8008f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f82:	5cd3      	ldrb	r3, [r2, r3]
 8008f84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	08014358 	.word	0x08014358

08008f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f98:	f7ff ffdc 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	0b5b      	lsrs	r3, r3, #13
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	4a03      	ldr	r2, [pc, #12]	; (8008fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008faa:	5cd3      	ldrb	r3, [r2, r3]
 8008fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	08014358 	.word	0x08014358

08008fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d012      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fe4:	4b69      	ldr	r3, [pc, #420]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	4a68      	ldr	r2, [pc, #416]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008fee:	6093      	str	r3, [r2, #8]
 8008ff0:	4b66      	ldr	r3, [pc, #408]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	4964      	ldr	r1, [pc, #400]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009006:	2301      	movs	r3, #1
 8009008:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d017      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009016:	4b5d      	ldr	r3, [pc, #372]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009024:	4959      	ldr	r1, [pc, #356]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009026:	4313      	orrs	r3, r2
 8009028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009034:	d101      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009036:	2301      	movs	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009042:	2301      	movs	r3, #1
 8009044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d017      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009052:	4b4e      	ldr	r3, [pc, #312]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009058:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009060:	494a      	ldr	r1, [pc, #296]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009070:	d101      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009072:	2301      	movs	r3, #1
 8009074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800907e:	2301      	movs	r3, #1
 8009080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800908e:	2301      	movs	r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 808b 	beq.w	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090a0:	4b3a      	ldr	r3, [pc, #232]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a4:	4a39      	ldr	r2, [pc, #228]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090aa:	6413      	str	r3, [r2, #64]	; 0x40
 80090ac:	4b37      	ldr	r3, [pc, #220]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b4:	60bb      	str	r3, [r7, #8]
 80090b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090b8:	4b35      	ldr	r3, [pc, #212]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a34      	ldr	r2, [pc, #208]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c4:	f7fe fede 	bl	8007e84 <HAL_GetTick>
 80090c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090ca:	e008      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090cc:	f7fe feda 	bl	8007e84 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	2b64      	cmp	r3, #100	; 0x64
 80090d8:	d901      	bls.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e38d      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090de:	4b2c      	ldr	r3, [pc, #176]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0f0      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090ea:	4b28      	ldr	r3, [pc, #160]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d035      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	429a      	cmp	r2, r3
 8009106:	d02e      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009108:	4b20      	ldr	r3, [pc, #128]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800910a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009110:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009112:	4b1e      	ldr	r3, [pc, #120]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	4a1d      	ldr	r2, [pc, #116]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800911c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800911e:	4b1b      	ldr	r3, [pc, #108]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	4a1a      	ldr	r2, [pc, #104]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009128:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800912a:	4a18      	ldr	r2, [pc, #96]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009130:	4b16      	ldr	r3, [pc, #88]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b01      	cmp	r3, #1
 800913a:	d114      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913c:	f7fe fea2 	bl	8007e84 <HAL_GetTick>
 8009140:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009142:	e00a      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009144:	f7fe fe9e 	bl	8007e84 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009152:	4293      	cmp	r3, r2
 8009154:	d901      	bls.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e34f      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0ee      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800916e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009172:	d111      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009182:	400b      	ands	r3, r1
 8009184:	4901      	ldr	r1, [pc, #4]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009186:	4313      	orrs	r3, r2
 8009188:	608b      	str	r3, [r1, #8]
 800918a:	e00b      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800918c:	40023800 	.word	0x40023800
 8009190:	40007000 	.word	0x40007000
 8009194:	0ffffcff 	.word	0x0ffffcff
 8009198:	4bb3      	ldr	r3, [pc, #716]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	4ab2      	ldr	r2, [pc, #712]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800919e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091a2:	6093      	str	r3, [r2, #8]
 80091a4:	4bb0      	ldr	r3, [pc, #704]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b0:	49ad      	ldr	r1, [pc, #692]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0310 	and.w	r3, r3, #16
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d010      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091c2:	4ba9      	ldr	r3, [pc, #676]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c8:	4aa7      	ldr	r2, [pc, #668]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80091d2:	4ba5      	ldr	r3, [pc, #660]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	49a2      	ldr	r1, [pc, #648]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091f0:	4b9d      	ldr	r3, [pc, #628]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091fe:	499a      	ldr	r1, [pc, #616]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009200:	4313      	orrs	r3, r2
 8009202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009212:	4b95      	ldr	r3, [pc, #596]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009220:	4991      	ldr	r1, [pc, #580]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009222:	4313      	orrs	r3, r2
 8009224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009234:	4b8c      	ldr	r3, [pc, #560]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009242:	4989      	ldr	r1, [pc, #548]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009244:	4313      	orrs	r3, r2
 8009246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009256:	4b84      	ldr	r3, [pc, #528]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009264:	4980      	ldr	r1, [pc, #512]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009266:	4313      	orrs	r3, r2
 8009268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009278:	4b7b      	ldr	r3, [pc, #492]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800927a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927e:	f023 0203 	bic.w	r2, r3, #3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009286:	4978      	ldr	r1, [pc, #480]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009288:	4313      	orrs	r3, r2
 800928a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800929a:	4b73      	ldr	r3, [pc, #460]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800929c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a0:	f023 020c 	bic.w	r2, r3, #12
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a8:	496f      	ldr	r1, [pc, #444]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80092bc:	4b6a      	ldr	r3, [pc, #424]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ca:	4967      	ldr	r1, [pc, #412]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092de:	4b62      	ldr	r3, [pc, #392]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ec:	495e      	ldr	r1, [pc, #376]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00a      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009300:	4b59      	ldr	r3, [pc, #356]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	4956      	ldr	r1, [pc, #344]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009310:	4313      	orrs	r3, r2
 8009312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009322:	4b51      	ldr	r3, [pc, #324]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009330:	494d      	ldr	r1, [pc, #308]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009332:	4313      	orrs	r3, r2
 8009334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009344:	4b48      	ldr	r3, [pc, #288]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009352:	4945      	ldr	r1, [pc, #276]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009354:	4313      	orrs	r3, r2
 8009356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009366:	4b40      	ldr	r3, [pc, #256]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009374:	493c      	ldr	r1, [pc, #240]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009376:	4313      	orrs	r3, r2
 8009378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00a      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009388:	4b37      	ldr	r3, [pc, #220]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009396:	4934      	ldr	r1, [pc, #208]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009398:	4313      	orrs	r3, r2
 800939a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d011      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80093aa:	4b2f      	ldr	r3, [pc, #188]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b8:	492b      	ldr	r1, [pc, #172]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093c8:	d101      	bne.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80093ca:	2301      	movs	r3, #1
 80093cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0308 	and.w	r3, r3, #8
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80093da:	2301      	movs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093ea:	4b1f      	ldr	r3, [pc, #124]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093f8:	491b      	ldr	r1, [pc, #108]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800940c:	4b16      	ldr	r3, [pc, #88]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800940e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009412:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800941c:	4912      	ldr	r1, [pc, #72]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800941e:	4313      	orrs	r3, r2
 8009420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009430:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009436:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009440:	4909      	ldr	r1, [pc, #36]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009442:	4313      	orrs	r3, r2
 8009444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00f      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009464:	e002      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009466:	bf00      	nop
 8009468:	40023800 	.word	0x40023800
 800946c:	4985      	ldr	r1, [pc, #532]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009480:	4b80      	ldr	r3, [pc, #512]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009486:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009490:	497c      	ldr	r1, [pc, #496]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009492:	4313      	orrs	r3, r2
 8009494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d005      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094a6:	f040 80d6 	bne.w	8009656 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094aa:	4b76      	ldr	r3, [pc, #472]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a75      	ldr	r2, [pc, #468]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80094b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094b6:	f7fe fce5 	bl	8007e84 <HAL_GetTick>
 80094ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094bc:	e008      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094be:	f7fe fce1 	bl	8007e84 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b64      	cmp	r3, #100	; 0x64
 80094ca:	d901      	bls.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e194      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094d0:	4b6c      	ldr	r3, [pc, #432]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f0      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d021      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11d      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80094f0:	4b64      	ldr	r3, [pc, #400]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80094f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	f003 0303 	and.w	r3, r3, #3
 80094fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80094fe:	4b61      	ldr	r3, [pc, #388]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009504:	0e1b      	lsrs	r3, r3, #24
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	019a      	lsls	r2, r3, #6
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	431a      	orrs	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	071b      	lsls	r3, r3, #28
 8009524:	4957      	ldr	r1, [pc, #348]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009526:	4313      	orrs	r3, r2
 8009528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009540:	d00a      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800954a:	2b00      	cmp	r3, #0
 800954c:	d02e      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009556:	d129      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009558:	4b4a      	ldr	r3, [pc, #296]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800955a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	f003 0303 	and.w	r3, r3, #3
 8009564:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009566:	4b47      	ldr	r3, [pc, #284]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956c:	0f1b      	lsrs	r3, r3, #28
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	019a      	lsls	r2, r3, #6
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	041b      	lsls	r3, r3, #16
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	061b      	lsls	r3, r3, #24
 8009586:	431a      	orrs	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	071b      	lsls	r3, r3, #28
 800958c:	493d      	ldr	r1, [pc, #244]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800958e:	4313      	orrs	r3, r2
 8009590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009594:	4b3b      	ldr	r3, [pc, #236]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800959a:	f023 021f 	bic.w	r2, r3, #31
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	3b01      	subs	r3, #1
 80095a4:	4937      	ldr	r1, [pc, #220]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01d      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095b8:	4b32      	ldr	r3, [pc, #200]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80095ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095be:	0e1b      	lsrs	r3, r3, #24
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095c6:	4b2f      	ldr	r3, [pc, #188]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80095c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095cc:	0f1b      	lsrs	r3, r3, #28
 80095ce:	f003 0307 	and.w	r3, r3, #7
 80095d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	019a      	lsls	r2, r3, #6
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	431a      	orrs	r2, r3
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	061b      	lsls	r3, r3, #24
 80095e6:	431a      	orrs	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	071b      	lsls	r3, r3, #28
 80095ec:	4925      	ldr	r1, [pc, #148]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d011      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	019a      	lsls	r2, r3, #6
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	431a      	orrs	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	061b      	lsls	r3, r3, #24
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	071b      	lsls	r3, r3, #28
 800961c:	4919      	ldr	r1, [pc, #100]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800961e:	4313      	orrs	r3, r2
 8009620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009624:	4b17      	ldr	r3, [pc, #92]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a16      	ldr	r2, [pc, #88]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800962a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800962e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009630:	f7fe fc28 	bl	8007e84 <HAL_GetTick>
 8009634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009636:	e008      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009638:	f7fe fc24 	bl	8007e84 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b64      	cmp	r3, #100	; 0x64
 8009644:	d901      	bls.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e0d7      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800964a:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0f0      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b01      	cmp	r3, #1
 800965a:	f040 80cd 	bne.w	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a08      	ldr	r2, [pc, #32]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800966a:	f7fe fc0b 	bl	8007e84 <HAL_GetTick>
 800966e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009670:	e00a      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009672:	f7fe fc07 	bl	8007e84 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b64      	cmp	r3, #100	; 0x64
 800967e:	d903      	bls.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e0ba      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8009684:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009688:	4b5e      	ldr	r3, [pc, #376]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009694:	d0ed      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d009      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d02e      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d12a      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80096be:	4b51      	ldr	r3, [pc, #324]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c4:	0c1b      	lsrs	r3, r3, #16
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80096cc:	4b4d      	ldr	r3, [pc, #308]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	0f1b      	lsrs	r3, r3, #28
 80096d4:	f003 0307 	and.w	r3, r3, #7
 80096d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	019a      	lsls	r2, r3, #6
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	041b      	lsls	r3, r3, #16
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	061b      	lsls	r3, r3, #24
 80096ec:	431a      	orrs	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	071b      	lsls	r3, r3, #28
 80096f2:	4944      	ldr	r1, [pc, #272]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80096fa:	4b42      	ldr	r3, [pc, #264]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80096fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009700:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	3b01      	subs	r3, #1
 800970a:	021b      	lsls	r3, r3, #8
 800970c:	493d      	ldr	r1, [pc, #244]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800970e:	4313      	orrs	r3, r2
 8009710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d022      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009728:	d11d      	bne.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800972a:	4b36      	ldr	r3, [pc, #216]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009730:	0e1b      	lsrs	r3, r3, #24
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009738:	4b32      	ldr	r3, [pc, #200]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973e:	0f1b      	lsrs	r3, r3, #28
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	019a      	lsls	r2, r3, #6
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	041b      	lsls	r3, r3, #16
 8009752:	431a      	orrs	r2, r3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	061b      	lsls	r3, r3, #24
 8009758:	431a      	orrs	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	071b      	lsls	r3, r3, #28
 800975e:	4929      	ldr	r1, [pc, #164]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d028      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009772:	4b24      	ldr	r3, [pc, #144]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009778:	0e1b      	lsrs	r3, r3, #24
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009780:	4b20      	ldr	r3, [pc, #128]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009786:	0c1b      	lsrs	r3, r3, #16
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	019a      	lsls	r2, r3, #6
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	041b      	lsls	r3, r3, #16
 8009798:	431a      	orrs	r2, r3
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	061b      	lsls	r3, r3, #24
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	071b      	lsls	r3, r3, #28
 80097a6:	4917      	ldr	r1, [pc, #92]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80097ae:	4b15      	ldr	r3, [pc, #84]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80097b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4911      	ldr	r1, [pc, #68]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80097c4:	4b0f      	ldr	r3, [pc, #60]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a0e      	ldr	r2, [pc, #56]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80097ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097d0:	f7fe fb58 	bl	8007e84 <HAL_GetTick>
 80097d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097d6:	e008      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80097d8:	f7fe fb54 	bl	8007e84 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b64      	cmp	r3, #100	; 0x64
 80097e4:	d901      	bls.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e007      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f6:	d1ef      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	40023800 	.word	0x40023800

08009808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e040      	b.n	800989c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fe f9aa 	bl	8007b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2224      	movs	r2, #36	; 0x24
 8009834:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0201 	bic.w	r2, r2, #1
 8009844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f98a 	bl	8009b60 <UART_SetConfig>
 800984c:	4603      	mov	r3, r0
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e022      	b.n	800989c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fc28 	bl	800a0b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fcaf 	bl	800a1f8 <UART_CheckIdleState>
 800989a:	4603      	mov	r3, r0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08a      	sub	sp, #40	; 0x28
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d17f      	bne.n	80099bc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <HAL_UART_Transmit+0x24>
 80098c2:	88fb      	ldrh	r3, [r7, #6]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e078      	b.n	80099be <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_UART_Transmit+0x36>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e071      	b.n	80099be <HAL_UART_Transmit+0x11a>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2221      	movs	r2, #33	; 0x21
 80098ec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80098ee:	f7fe fac9 	bl	8007e84 <HAL_GetTick>
 80098f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	88fa      	ldrh	r2, [r7, #6]
 80098f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990c:	d108      	bne.n	8009920 <HAL_UART_Transmit+0x7c>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d104      	bne.n	8009920 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	e003      	b.n	8009928 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009930:	e02c      	b.n	800998c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2200      	movs	r2, #0
 800993a:	2180      	movs	r1, #128	; 0x80
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fca0 	bl	800a282 <UART_WaitOnFlagUntilTimeout>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e038      	b.n	80099be <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10b      	bne.n	800996a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009960:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	3302      	adds	r3, #2
 8009966:	61bb      	str	r3, [r7, #24]
 8009968:	e007      	b.n	800997a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	781a      	ldrb	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	3301      	adds	r3, #1
 8009978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009992:	b29b      	uxth	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1cc      	bne.n	8009932 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2200      	movs	r2, #0
 80099a0:	2140      	movs	r1, #64	; 0x40
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fc6d 	bl	800a282 <UART_WaitOnFlagUntilTimeout>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e005      	b.n	80099be <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2220      	movs	r2, #32
 80099b6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	e000      	b.n	80099be <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80099bc:	2302      	movs	r3, #2
  }
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b08a      	sub	sp, #40	; 0x28
 80099ca:	af02      	add	r7, sp, #8
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	4613      	mov	r3, r2
 80099d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099da:	2b20      	cmp	r3, #32
 80099dc:	f040 80ba 	bne.w	8009b54 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_UART_Receive+0x26>
 80099e6:	88fb      	ldrh	r3, [r7, #6]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e0b2      	b.n	8009b56 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_UART_Receive+0x38>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e0ab      	b.n	8009b56 <HAL_UART_Receive+0x190>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2222      	movs	r2, #34	; 0x22
 8009a10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009a12:	f7fe fa37 	bl	8007e84 <HAL_GetTick>
 8009a16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	88fa      	ldrh	r2, [r7, #6]
 8009a1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	88fa      	ldrh	r2, [r7, #6]
 8009a24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a30:	d10e      	bne.n	8009a50 <HAL_UART_Receive+0x8a>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <HAL_UART_Receive+0x80>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a44:	e02d      	b.n	8009aa2 <HAL_UART_Receive+0xdc>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	22ff      	movs	r2, #255	; 0xff
 8009a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a4e:	e028      	b.n	8009aa2 <HAL_UART_Receive+0xdc>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10d      	bne.n	8009a74 <HAL_UART_Receive+0xae>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_UART_Receive+0xa4>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	22ff      	movs	r2, #255	; 0xff
 8009a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a68:	e01b      	b.n	8009aa2 <HAL_UART_Receive+0xdc>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	227f      	movs	r2, #127	; 0x7f
 8009a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a72:	e016      	b.n	8009aa2 <HAL_UART_Receive+0xdc>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a7c:	d10d      	bne.n	8009a9a <HAL_UART_Receive+0xd4>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d104      	bne.n	8009a90 <HAL_UART_Receive+0xca>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	227f      	movs	r2, #127	; 0x7f
 8009a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a8e:	e008      	b.n	8009aa2 <HAL_UART_Receive+0xdc>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	223f      	movs	r2, #63	; 0x3f
 8009a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a98:	e003      	b.n	8009aa2 <HAL_UART_Receive+0xdc>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009aa8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab2:	d108      	bne.n	8009ac6 <HAL_UART_Receive+0x100>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	e003      	b.n	8009ace <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009ad6:	e032      	b.n	8009b3e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2120      	movs	r1, #32
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fbcd 	bl	800a282 <UART_WaitOnFlagUntilTimeout>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e031      	b.n	8009b56 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10c      	bne.n	8009b12 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	8a7b      	ldrh	r3, [r7, #18]
 8009b02:	4013      	ands	r3, r2
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	3302      	adds	r3, #2
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	e00c      	b.n	8009b2c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	8a7b      	ldrh	r3, [r7, #18]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	4013      	ands	r3, r2
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1c6      	bne.n	8009ad8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e000      	b.n	8009b56 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8009b54:	2302      	movs	r3, #2
  }
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3720      	adds	r7, #32
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4bb1      	ldr	r3, [pc, #708]	; (8009e54 <UART_SetConfig+0x2f4>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6812      	ldr	r2, [r2, #0]
 8009b96:	6939      	ldr	r1, [r7, #16]
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a9f      	ldr	r2, [pc, #636]	; (8009e58 <UART_SetConfig+0x2f8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d121      	bne.n	8009c24 <UART_SetConfig+0xc4>
 8009be0:	4b9e      	ldr	r3, [pc, #632]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d816      	bhi.n	8009c1c <UART_SetConfig+0xbc>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <UART_SetConfig+0x94>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c05 	.word	0x08009c05
 8009bf8:	08009c11 	.word	0x08009c11
 8009bfc:	08009c0b 	.word	0x08009c0b
 8009c00:	08009c17 	.word	0x08009c17
 8009c04:	2301      	movs	r3, #1
 8009c06:	77fb      	strb	r3, [r7, #31]
 8009c08:	e151      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	77fb      	strb	r3, [r7, #31]
 8009c0e:	e14e      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c10:	2304      	movs	r3, #4
 8009c12:	77fb      	strb	r3, [r7, #31]
 8009c14:	e14b      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c16:	2308      	movs	r3, #8
 8009c18:	77fb      	strb	r3, [r7, #31]
 8009c1a:	e148      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	77fb      	strb	r3, [r7, #31]
 8009c20:	bf00      	nop
 8009c22:	e144      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a8d      	ldr	r2, [pc, #564]	; (8009e60 <UART_SetConfig+0x300>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d134      	bne.n	8009c98 <UART_SetConfig+0x138>
 8009c2e:	4b8b      	ldr	r3, [pc, #556]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c34:	f003 030c 	and.w	r3, r3, #12
 8009c38:	2b0c      	cmp	r3, #12
 8009c3a:	d829      	bhi.n	8009c90 <UART_SetConfig+0x130>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0xe4>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c79 	.word	0x08009c79
 8009c48:	08009c91 	.word	0x08009c91
 8009c4c:	08009c91 	.word	0x08009c91
 8009c50:	08009c91 	.word	0x08009c91
 8009c54:	08009c85 	.word	0x08009c85
 8009c58:	08009c91 	.word	0x08009c91
 8009c5c:	08009c91 	.word	0x08009c91
 8009c60:	08009c91 	.word	0x08009c91
 8009c64:	08009c7f 	.word	0x08009c7f
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009c8b 	.word	0x08009c8b
 8009c78:	2300      	movs	r3, #0
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e117      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	77fb      	strb	r3, [r7, #31]
 8009c82:	e114      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c84:	2304      	movs	r3, #4
 8009c86:	77fb      	strb	r3, [r7, #31]
 8009c88:	e111      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	77fb      	strb	r3, [r7, #31]
 8009c8e:	e10e      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c90:	2310      	movs	r3, #16
 8009c92:	77fb      	strb	r3, [r7, #31]
 8009c94:	bf00      	nop
 8009c96:	e10a      	b.n	8009eae <UART_SetConfig+0x34e>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a71      	ldr	r2, [pc, #452]	; (8009e64 <UART_SetConfig+0x304>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d120      	bne.n	8009ce4 <UART_SetConfig+0x184>
 8009ca2:	4b6e      	ldr	r3, [pc, #440]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d00f      	beq.n	8009cd0 <UART_SetConfig+0x170>
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d802      	bhi.n	8009cba <UART_SetConfig+0x15a>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <UART_SetConfig+0x164>
 8009cb8:	e010      	b.n	8009cdc <UART_SetConfig+0x17c>
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d005      	beq.n	8009cca <UART_SetConfig+0x16a>
 8009cbe:	2b30      	cmp	r3, #48	; 0x30
 8009cc0:	d009      	beq.n	8009cd6 <UART_SetConfig+0x176>
 8009cc2:	e00b      	b.n	8009cdc <UART_SetConfig+0x17c>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	77fb      	strb	r3, [r7, #31]
 8009cc8:	e0f1      	b.n	8009eae <UART_SetConfig+0x34e>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	e0ee      	b.n	8009eae <UART_SetConfig+0x34e>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e0eb      	b.n	8009eae <UART_SetConfig+0x34e>
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	77fb      	strb	r3, [r7, #31]
 8009cda:	e0e8      	b.n	8009eae <UART_SetConfig+0x34e>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	77fb      	strb	r3, [r7, #31]
 8009ce0:	bf00      	nop
 8009ce2:	e0e4      	b.n	8009eae <UART_SetConfig+0x34e>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a5f      	ldr	r2, [pc, #380]	; (8009e68 <UART_SetConfig+0x308>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d120      	bne.n	8009d30 <UART_SetConfig+0x1d0>
 8009cee:	4b5b      	ldr	r3, [pc, #364]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	d00f      	beq.n	8009d1c <UART_SetConfig+0x1bc>
 8009cfc:	2b40      	cmp	r3, #64	; 0x40
 8009cfe:	d802      	bhi.n	8009d06 <UART_SetConfig+0x1a6>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <UART_SetConfig+0x1b0>
 8009d04:	e010      	b.n	8009d28 <UART_SetConfig+0x1c8>
 8009d06:	2b80      	cmp	r3, #128	; 0x80
 8009d08:	d005      	beq.n	8009d16 <UART_SetConfig+0x1b6>
 8009d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8009d0c:	d009      	beq.n	8009d22 <UART_SetConfig+0x1c2>
 8009d0e:	e00b      	b.n	8009d28 <UART_SetConfig+0x1c8>
 8009d10:	2300      	movs	r3, #0
 8009d12:	77fb      	strb	r3, [r7, #31]
 8009d14:	e0cb      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d16:	2302      	movs	r3, #2
 8009d18:	77fb      	strb	r3, [r7, #31]
 8009d1a:	e0c8      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	77fb      	strb	r3, [r7, #31]
 8009d20:	e0c5      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d22:	2308      	movs	r3, #8
 8009d24:	77fb      	strb	r3, [r7, #31]
 8009d26:	e0c2      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	bf00      	nop
 8009d2e:	e0be      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a4d      	ldr	r2, [pc, #308]	; (8009e6c <UART_SetConfig+0x30c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d124      	bne.n	8009d84 <UART_SetConfig+0x224>
 8009d3a:	4b48      	ldr	r3, [pc, #288]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d48:	d012      	beq.n	8009d70 <UART_SetConfig+0x210>
 8009d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4e:	d802      	bhi.n	8009d56 <UART_SetConfig+0x1f6>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d007      	beq.n	8009d64 <UART_SetConfig+0x204>
 8009d54:	e012      	b.n	8009d7c <UART_SetConfig+0x21c>
 8009d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d5a:	d006      	beq.n	8009d6a <UART_SetConfig+0x20a>
 8009d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d60:	d009      	beq.n	8009d76 <UART_SetConfig+0x216>
 8009d62:	e00b      	b.n	8009d7c <UART_SetConfig+0x21c>
 8009d64:	2300      	movs	r3, #0
 8009d66:	77fb      	strb	r3, [r7, #31]
 8009d68:	e0a1      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	77fb      	strb	r3, [r7, #31]
 8009d6e:	e09e      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d70:	2304      	movs	r3, #4
 8009d72:	77fb      	strb	r3, [r7, #31]
 8009d74:	e09b      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d76:	2308      	movs	r3, #8
 8009d78:	77fb      	strb	r3, [r7, #31]
 8009d7a:	e098      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	77fb      	strb	r3, [r7, #31]
 8009d80:	bf00      	nop
 8009d82:	e094      	b.n	8009eae <UART_SetConfig+0x34e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a39      	ldr	r2, [pc, #228]	; (8009e70 <UART_SetConfig+0x310>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d124      	bne.n	8009dd8 <UART_SetConfig+0x278>
 8009d8e:	4b33      	ldr	r3, [pc, #204]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d9c:	d012      	beq.n	8009dc4 <UART_SetConfig+0x264>
 8009d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009da2:	d802      	bhi.n	8009daa <UART_SetConfig+0x24a>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <UART_SetConfig+0x258>
 8009da8:	e012      	b.n	8009dd0 <UART_SetConfig+0x270>
 8009daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dae:	d006      	beq.n	8009dbe <UART_SetConfig+0x25e>
 8009db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009db4:	d009      	beq.n	8009dca <UART_SetConfig+0x26a>
 8009db6:	e00b      	b.n	8009dd0 <UART_SetConfig+0x270>
 8009db8:	2301      	movs	r3, #1
 8009dba:	77fb      	strb	r3, [r7, #31]
 8009dbc:	e077      	b.n	8009eae <UART_SetConfig+0x34e>
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	77fb      	strb	r3, [r7, #31]
 8009dc2:	e074      	b.n	8009eae <UART_SetConfig+0x34e>
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	77fb      	strb	r3, [r7, #31]
 8009dc8:	e071      	b.n	8009eae <UART_SetConfig+0x34e>
 8009dca:	2308      	movs	r3, #8
 8009dcc:	77fb      	strb	r3, [r7, #31]
 8009dce:	e06e      	b.n	8009eae <UART_SetConfig+0x34e>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	77fb      	strb	r3, [r7, #31]
 8009dd4:	bf00      	nop
 8009dd6:	e06a      	b.n	8009eae <UART_SetConfig+0x34e>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a25      	ldr	r2, [pc, #148]	; (8009e74 <UART_SetConfig+0x314>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d124      	bne.n	8009e2c <UART_SetConfig+0x2cc>
 8009de2:	4b1e      	ldr	r3, [pc, #120]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df0:	d012      	beq.n	8009e18 <UART_SetConfig+0x2b8>
 8009df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df6:	d802      	bhi.n	8009dfe <UART_SetConfig+0x29e>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <UART_SetConfig+0x2ac>
 8009dfc:	e012      	b.n	8009e24 <UART_SetConfig+0x2c4>
 8009dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e02:	d006      	beq.n	8009e12 <UART_SetConfig+0x2b2>
 8009e04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e08:	d009      	beq.n	8009e1e <UART_SetConfig+0x2be>
 8009e0a:	e00b      	b.n	8009e24 <UART_SetConfig+0x2c4>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	77fb      	strb	r3, [r7, #31]
 8009e10:	e04d      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e12:	2302      	movs	r3, #2
 8009e14:	77fb      	strb	r3, [r7, #31]
 8009e16:	e04a      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	77fb      	strb	r3, [r7, #31]
 8009e1c:	e047      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e1e:	2308      	movs	r3, #8
 8009e20:	77fb      	strb	r3, [r7, #31]
 8009e22:	e044      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e24:	2310      	movs	r3, #16
 8009e26:	77fb      	strb	r3, [r7, #31]
 8009e28:	bf00      	nop
 8009e2a:	e040      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a11      	ldr	r2, [pc, #68]	; (8009e78 <UART_SetConfig+0x318>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d139      	bne.n	8009eaa <UART_SetConfig+0x34a>
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <UART_SetConfig+0x2fc>)
 8009e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e44:	d027      	beq.n	8009e96 <UART_SetConfig+0x336>
 8009e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e4a:	d817      	bhi.n	8009e7c <UART_SetConfig+0x31c>
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01c      	beq.n	8009e8a <UART_SetConfig+0x32a>
 8009e50:	e027      	b.n	8009ea2 <UART_SetConfig+0x342>
 8009e52:	bf00      	nop
 8009e54:	efff69f3 	.word	0xefff69f3
 8009e58:	40011000 	.word	0x40011000
 8009e5c:	40023800 	.word	0x40023800
 8009e60:	40004400 	.word	0x40004400
 8009e64:	40004800 	.word	0x40004800
 8009e68:	40004c00 	.word	0x40004c00
 8009e6c:	40005000 	.word	0x40005000
 8009e70:	40011400 	.word	0x40011400
 8009e74:	40007800 	.word	0x40007800
 8009e78:	40007c00 	.word	0x40007c00
 8009e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e80:	d006      	beq.n	8009e90 <UART_SetConfig+0x330>
 8009e82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e86:	d009      	beq.n	8009e9c <UART_SetConfig+0x33c>
 8009e88:	e00b      	b.n	8009ea2 <UART_SetConfig+0x342>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	77fb      	strb	r3, [r7, #31]
 8009e8e:	e00e      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e90:	2302      	movs	r3, #2
 8009e92:	77fb      	strb	r3, [r7, #31]
 8009e94:	e00b      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e96:	2304      	movs	r3, #4
 8009e98:	77fb      	strb	r3, [r7, #31]
 8009e9a:	e008      	b.n	8009eae <UART_SetConfig+0x34e>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	77fb      	strb	r3, [r7, #31]
 8009ea0:	e005      	b.n	8009eae <UART_SetConfig+0x34e>
 8009ea2:	2310      	movs	r3, #16
 8009ea4:	77fb      	strb	r3, [r7, #31]
 8009ea6:	bf00      	nop
 8009ea8:	e001      	b.n	8009eae <UART_SetConfig+0x34e>
 8009eaa:	2310      	movs	r3, #16
 8009eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eb6:	d17f      	bne.n	8009fb8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009eb8:	7ffb      	ldrb	r3, [r7, #31]
 8009eba:	2b08      	cmp	r3, #8
 8009ebc:	d85c      	bhi.n	8009f78 <UART_SetConfig+0x418>
 8009ebe:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <UART_SetConfig+0x364>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009ee9 	.word	0x08009ee9
 8009ec8:	08009f09 	.word	0x08009f09
 8009ecc:	08009f29 	.word	0x08009f29
 8009ed0:	08009f79 	.word	0x08009f79
 8009ed4:	08009f41 	.word	0x08009f41
 8009ed8:	08009f79 	.word	0x08009f79
 8009edc:	08009f79 	.word	0x08009f79
 8009ee0:	08009f79 	.word	0x08009f79
 8009ee4:	08009f61 	.word	0x08009f61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ee8:	f7ff f840 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 8009eec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	005a      	lsls	r2, r3, #1
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	085b      	lsrs	r3, r3, #1
 8009ef8:	441a      	add	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	61bb      	str	r3, [r7, #24]
        break;
 8009f06:	e03a      	b.n	8009f7e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f08:	f7ff f844 	bl	8008f94 <HAL_RCC_GetPCLK2Freq>
 8009f0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	005a      	lsls	r2, r3, #1
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	085b      	lsrs	r3, r3, #1
 8009f18:	441a      	add	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	61bb      	str	r3, [r7, #24]
        break;
 8009f26:	e02a      	b.n	8009f7e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	085a      	lsrs	r2, r3, #1
 8009f2e:	4b5f      	ldr	r3, [pc, #380]	; (800a0ac <UART_SetConfig+0x54c>)
 8009f30:	4413      	add	r3, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6852      	ldr	r2, [r2, #4]
 8009f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	61bb      	str	r3, [r7, #24]
        break;
 8009f3e:	e01e      	b.n	8009f7e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f40:	f7fe ff56 	bl	8008df0 <HAL_RCC_GetSysClockFreq>
 8009f44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	005a      	lsls	r2, r3, #1
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	085b      	lsrs	r3, r3, #1
 8009f50:	441a      	add	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	61bb      	str	r3, [r7, #24]
        break;
 8009f5e:	e00e      	b.n	8009f7e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	085b      	lsrs	r3, r3, #1
 8009f66:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	61bb      	str	r3, [r7, #24]
        break;
 8009f76:	e002      	b.n	8009f7e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
        break;
 8009f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b0f      	cmp	r3, #15
 8009f82:	d916      	bls.n	8009fb2 <UART_SetConfig+0x452>
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8a:	d212      	bcs.n	8009fb2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f023 030f 	bic.w	r3, r3, #15
 8009f94:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	085b      	lsrs	r3, r3, #1
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	897b      	ldrh	r3, [r7, #10]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	897a      	ldrh	r2, [r7, #10]
 8009fae:	60da      	str	r2, [r3, #12]
 8009fb0:	e070      	b.n	800a094 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	75fb      	strb	r3, [r7, #23]
 8009fb6:	e06d      	b.n	800a094 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009fb8:	7ffb      	ldrb	r3, [r7, #31]
 8009fba:	2b08      	cmp	r3, #8
 8009fbc:	d859      	bhi.n	800a072 <UART_SetConfig+0x512>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <UART_SetConfig+0x464>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	0800a007 	.word	0x0800a007
 8009fcc:	0800a025 	.word	0x0800a025
 8009fd0:	0800a073 	.word	0x0800a073
 8009fd4:	0800a03d 	.word	0x0800a03d
 8009fd8:	0800a073 	.word	0x0800a073
 8009fdc:	0800a073 	.word	0x0800a073
 8009fe0:	0800a073 	.word	0x0800a073
 8009fe4:	0800a05b 	.word	0x0800a05b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fe8:	f7fe ffc0 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 8009fec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	085a      	lsrs	r2, r3, #1
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	441a      	add	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a000:	b29b      	uxth	r3, r3
 800a002:	61bb      	str	r3, [r7, #24]
        break;
 800a004:	e038      	b.n	800a078 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a006:	f7fe ffc5 	bl	8008f94 <HAL_RCC_GetPCLK2Freq>
 800a00a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	085a      	lsrs	r2, r3, #1
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	441a      	add	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a01e:	b29b      	uxth	r3, r3
 800a020:	61bb      	str	r3, [r7, #24]
        break;
 800a022:	e029      	b.n	800a078 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	085a      	lsrs	r2, r3, #1
 800a02a:	4b21      	ldr	r3, [pc, #132]	; (800a0b0 <UART_SetConfig+0x550>)
 800a02c:	4413      	add	r3, r2
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	6852      	ldr	r2, [r2, #4]
 800a032:	fbb3 f3f2 	udiv	r3, r3, r2
 800a036:	b29b      	uxth	r3, r3
 800a038:	61bb      	str	r3, [r7, #24]
        break;
 800a03a:	e01d      	b.n	800a078 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a03c:	f7fe fed8 	bl	8008df0 <HAL_RCC_GetSysClockFreq>
 800a040:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	085a      	lsrs	r2, r3, #1
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	441a      	add	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	fbb2 f3f3 	udiv	r3, r2, r3
 800a054:	b29b      	uxth	r3, r3
 800a056:	61bb      	str	r3, [r7, #24]
        break;
 800a058:	e00e      	b.n	800a078 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	61bb      	str	r3, [r7, #24]
        break;
 800a070:	e002      	b.n	800a078 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]
        break;
 800a076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d908      	bls.n	800a090 <UART_SetConfig+0x530>
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d204      	bcs.n	800a090 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	e001      	b.n	800a094 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3720      	adds	r7, #32
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	01e84800 	.word	0x01e84800
 800a0b0:	00f42400 	.word	0x00f42400

0800a0b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00a      	beq.n	800a0de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00a      	beq.n	800a122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	f003 0308 	and.w	r3, r3, #8
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	f003 0310 	and.w	r3, r3, #16
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01a      	beq.n	800a1ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b2:	d10a      	bne.n	800a1ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	605a      	str	r2, [r3, #4]
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a206:	f7fd fe3d 	bl	8007e84 <HAL_GetTick>
 800a20a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0308 	and.w	r3, r3, #8
 800a216:	2b08      	cmp	r3, #8
 800a218:	d10e      	bne.n	800a238 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a21a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f82a 	bl	800a282 <UART_WaitOnFlagUntilTimeout>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e020      	b.n	800a27a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b04      	cmp	r3, #4
 800a244:	d10e      	bne.n	800a264 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f814 	bl	800a282 <UART_WaitOnFlagUntilTimeout>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e00a      	b.n	800a27a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	4613      	mov	r3, r2
 800a290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a292:	e05d      	b.n	800a350 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29a:	d059      	beq.n	800a350 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29c:	f7fd fdf2 	bl	8007e84 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d302      	bcc.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d11b      	bne.n	800a2ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0201 	bic.w	r2, r2, #1
 800a2d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e042      	b.n	800a370 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d02b      	beq.n	800a350 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a306:	d123      	bne.n	800a350 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a310:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a320:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0201 	bic.w	r2, r2, #1
 800a330:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2220      	movs	r2, #32
 800a336:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2220      	movs	r2, #32
 800a33c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2220      	movs	r2, #32
 800a342:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e00f      	b.n	800a370 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	69da      	ldr	r2, [r3, #28]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	4013      	ands	r3, r2
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	bf0c      	ite	eq
 800a360:	2301      	moveq	r3, #1
 800a362:	2300      	movne	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	461a      	mov	r2, r3
 800a368:	79fb      	ldrb	r3, [r7, #7]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d092      	beq.n	800a294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <aiPbMgrInit>:
    const aiPbCmdFunc *funcs;
    uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 800a378:	b5b0      	push	{r4, r5, r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6178      	str	r0, [r7, #20]
    const aiPbCmdFunc *cfunc;
    pbContextMgr.input = pb_istream_from_uart(0);
 800a380:	4c1a      	ldr	r4, [pc, #104]	; (800a3ec <aiPbMgrInit+0x74>)
 800a382:	463b      	mov	r3, r7
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f001 fcf4 	bl	800bd74 <pb_istream_from_uart>
 800a38c:	463b      	mov	r3, r7
 800a38e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 800a394:	4c15      	ldr	r4, [pc, #84]	; (800a3ec <aiPbMgrInit+0x74>)
 800a396:	463b      	mov	r3, r7
 800a398:	2100      	movs	r1, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 fcc6 	bl	800bd2c <pb_ostream_to_uart>
 800a3a0:	3410      	adds	r4, #16
 800a3a2:	463d      	mov	r5, r7
 800a3a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	6023      	str	r3, [r4, #0]

    pbContextMgr.n_func = 0;
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <aiPbMgrInit+0x74>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	629a      	str	r2, [r3, #40]	; 0x28
    pbContextMgr.funcs = NULL;
 800a3b2:	4b0e      	ldr	r3, [pc, #56]	; (800a3ec <aiPbMgrInit+0x74>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	625a      	str	r2, [r3, #36]	; 0x24

    if (funcs) {
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d011      	beq.n	800a3e2 <aiPbMgrInit+0x6a>
        cfunc = funcs;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800a3c2:	e007      	b.n	800a3d4 <aiPbMgrInit+0x5c>
            pbContextMgr.n_func++;
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <aiPbMgrInit+0x74>)
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	4a08      	ldr	r2, [pc, #32]	; (800a3ec <aiPbMgrInit+0x74>)
 800a3cc:	6293      	str	r3, [r2, #40]	; 0x28
            cfunc++;
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	330c      	adds	r3, #12
 800a3d2:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1f3      	bne.n	800a3c4 <aiPbMgrInit+0x4c>
        }
        pbContextMgr.funcs = funcs;
 800a3dc:	4a03      	ldr	r2, [pc, #12]	; (800a3ec <aiPbMgrInit+0x74>)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 800a3e2:	bf00      	nop
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000774 	.word	0x20000774

0800a3f0 <aiPbMgrWaitAndProcess>:

int aiPbMgrWaitAndProcess(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af02      	add	r7, sp, #8
    uint32_t idx;
    static reqMsg  req = reqMsg_init_zero;
    static respMsg resp = respMsg_init_default;
    const aiPbCmdFunc *cfunc;

    ioFlushRead();
 800a3f6:	f001 fc27 	bl	800bc48 <ioFlushRead>
    if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 800a3fa:	4a20      	ldr	r2, [pc, #128]	; (800a47c <aiPbMgrWaitAndProcess+0x8c>)
 800a3fc:	4920      	ldr	r1, [pc, #128]	; (800a480 <aiPbMgrWaitAndProcess+0x90>)
 800a3fe:	4821      	ldr	r0, [pc, #132]	; (800a484 <aiPbMgrWaitAndProcess+0x94>)
 800a400:	f003 fffc 	bl	800e3fc <pb_decode_delimited>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d030      	beq.n	800a46c <aiPbMgrWaitAndProcess+0x7c>
        ioFlushRead();
 800a40a:	f001 fc1d 	bl	800bc48 <ioFlushRead>
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800a40e:	2300      	movs	r3, #0
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	e019      	b.n	800a448 <aiPbMgrWaitAndProcess+0x58>
            cfunc = &pbContextMgr.funcs[idx];
 800a414:	4b1b      	ldr	r3, [pc, #108]	; (800a484 <aiPbMgrWaitAndProcess+0x94>)
 800a416:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4613      	mov	r3, r2
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4413      	add	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	440b      	add	r3, r1
 800a424:	603b      	str	r3, [r7, #0]
            if (cfunc->cmd == req.cmd) {
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781a      	ldrb	r2, [r3, #0]
 800a42a:	4b14      	ldr	r3, [pc, #80]	; (800a47c <aiPbMgrWaitAndProcess+0x8c>)
 800a42c:	791b      	ldrb	r3, [r3, #4]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d107      	bne.n	800a442 <aiPbMgrWaitAndProcess+0x52>
                cfunc->process(&req, &resp, cfunc->param);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	6892      	ldr	r2, [r2, #8]
 800a43a:	4913      	ldr	r1, [pc, #76]	; (800a488 <aiPbMgrWaitAndProcess+0x98>)
 800a43c:	480f      	ldr	r0, [pc, #60]	; (800a47c <aiPbMgrWaitAndProcess+0x8c>)
 800a43e:	4798      	blx	r3
                break;
 800a440:	e007      	b.n	800a452 <aiPbMgrWaitAndProcess+0x62>
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3301      	adds	r3, #1
 800a446:	607b      	str	r3, [r7, #4]
 800a448:	4b0e      	ldr	r3, [pc, #56]	; (800a484 <aiPbMgrWaitAndProcess+0x94>)
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d3e0      	bcc.n	800a414 <aiPbMgrWaitAndProcess+0x24>
            }
        }
        if (idx == pbContextMgr.n_func) {
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <aiPbMgrWaitAndProcess+0x94>)
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d107      	bne.n	800a46c <aiPbMgrWaitAndProcess+0x7c>
            aiPbMgrSendAck(&req, &resp, EnumState_S_ERROR,
 800a45c:	2304      	movs	r3, #4
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2304      	movs	r3, #4
 800a462:	2204      	movs	r2, #4
 800a464:	4908      	ldr	r1, [pc, #32]	; (800a488 <aiPbMgrWaitAndProcess+0x98>)
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <aiPbMgrWaitAndProcess+0x8c>)
 800a468:	f000 f82e 	bl	800a4c8 <aiPbMgrSendAck>
                    EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        }
    }

    ioFlushRead();
 800a46c:	f001 fbec 	bl	800bc48 <ioFlushRead>

    return 0;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200007a0 	.word	0x200007a0
 800a480:	08014c9c 	.word	0x08014c9c
 800a484:	20000774 	.word	0x20000774
 800a488:	200007f0 	.word	0x200007f0

0800a48c <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
        EnumState state)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
    resp->reqid = req->reqid;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	601a      	str	r2, [r3, #0]
    resp->state = state;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	79fa      	ldrb	r2, [r7, #7]
 800a4a6:	711a      	strb	r2, [r3, #4]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	4905      	ldr	r1, [pc, #20]	; (800a4c0 <aiPbMgrSendResp+0x34>)
 800a4ac:	4805      	ldr	r0, [pc, #20]	; (800a4c4 <aiPbMgrSendResp+0x38>)
 800a4ae:	f004 ffef 	bl	800f490 <pb_encode>
    ioFlushWrite();
 800a4b2:	f001 fb5b 	bl	800bb6c <ioFlushWrite>
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	08015060 	.word	0x08015060
 800a4c4:	20000784 	.word	0x20000784

0800a4c8 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
        EnumState state, uint32_t param, EnumError error)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ack_tag;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	220c      	movs	r2, #12
 800a4dc:	80da      	strh	r2, [r3, #6]
    resp->payload.ack.param = param;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	609a      	str	r2, [r3, #8]
    resp->payload.ack.error = error;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	7e3a      	ldrb	r2, [r7, #24]
 800a4e8:	731a      	strb	r2, [r3, #12]
    aiPbMgrSendResp(req, resp, state);
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	68b9      	ldr	r1, [r7, #8]
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7ff ffcb 	bl	800a48c <aiPbMgrSendResp>
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
    bool res;
    ackMsg ack = ackMsg_init_default;
 800a506:	2300      	movs	r3, #0
 800a508:	607b      	str	r3, [r7, #4]
 800a50a:	2300      	movs	r3, #0
 800a50c:	723b      	strb	r3, [r7, #8]
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800a50e:	1d3b      	adds	r3, r7, #4
 800a510:	461a      	mov	r2, r3
 800a512:	4906      	ldr	r1, [pc, #24]	; (800a52c <aiPbMgrWaitAck+0x2c>)
 800a514:	4806      	ldr	r0, [pc, #24]	; (800a530 <aiPbMgrWaitAck+0x30>)
 800a516:	f003 ff71 	bl	800e3fc <pb_decode_delimited>
 800a51a:	4603      	mov	r3, r0
 800a51c:	73fb      	strb	r3, [r7, #15]
    ioFlushRead();
 800a51e:	f001 fb93 	bl	800bc48 <ioFlushRead>
    return res;
 800a522:	7bfb      	ldrb	r3, [r7, #15]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	08014fb4 	.word	0x08014fb4
 800a530:	20000774 	.word	0x20000774

0800a534 <aiPbAiBufferSize>:
    uint32_t err;
    void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    if (!buffer)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <aiPbAiBufferSize+0x12>
        return 0;
 800a542:	2300      	movs	r3, #0
 800a544:	e00d      	b.n	800a562 <aiPbAiBufferSize+0x2e>
    else
        return buffer->channels * buffer->height
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	88d2      	ldrh	r2, [r2, #6]
 800a54e:	fb02 f303 	mul.w	r3, r2, r3
                * buffer->width * buffer->n_batches;
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	8912      	ldrh	r2, [r2, #8]
 800a556:	fb02 f303 	mul.w	r3, r2, r3
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	8892      	ldrh	r2, [r2, #4]
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
    return (ai_buffer_format)msgFmt;
 800a576:	687b      	ldr	r3, [r7, #4]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
    return (uint32_t)aiFmt;
 800a58c:	687b      	ldr	r3, [r7, #4]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
    return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	11db      	asrs	r3, r3, #7
 800a5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	10db      	asrs	r3, r3, #3
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
        void **arg)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b08c      	sub	sp, #48	; 0x30
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
    ai_buffer_format format;
    size_t itsize;

    UNUSED(field);

    int maxr = bm->n_max;
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg = (aiBufferByteMsg *)bm->msg;
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	623b      	str	r3, [r7, #32]
    format = aiPbMsgFmtToAiFmt(msg->shape.format);
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff ffc6 	bl	800a56e <aiPbMsgFmtToAiFmt>
 800a5e2:	61f8      	str	r0, [r7, #28]

    /* todo(jmd) - adding scale/zeropoint values */

    /* Check shape/format */
    bm->err = EnumError_E_NONE;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	60da      	str	r2, [r3, #12]
    if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	d005      	beq.n	800a5fc <aiPbBuffer_read_cb3+0x42>
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d005      	beq.n	800a608 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	2202      	movs	r2, #2
 800a604:	60da      	str	r2, [r3, #12]
 800a606:	e020      	b.n	800a64a <aiPbBuffer_read_cb3+0x90>
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	429a      	cmp	r2, r3
 800a614:	d114      	bne.n	800a640 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.height != bm->buffer->height) ||
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	88d2      	ldrh	r2, [r2, #6]
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 800a620:	4293      	cmp	r3, r2
 800a622:	d10d      	bne.n	800a640 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.width != bm->buffer->width) ||
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62a:	6812      	ldr	r2, [r2, #0]
 800a62c:	8912      	ldrh	r2, [r2, #8]
            (msg->shape.height != bm->buffer->height) ||
 800a62e:	4293      	cmp	r3, r2
 800a630:	d106      	bne.n	800a640 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.n_batches != bm->buffer->n_batches)) {
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a638:	6812      	ldr	r2, [r2, #0]
 800a63a:	8892      	ldrh	r2, [r2, #4]
            (msg->shape.width != bm->buffer->width) ||
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d004      	beq.n	800a64a <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	2205      	movs	r2, #5
 800a648:	60da      	str	r2, [r3, #12]
    }

    itsize = aiPbBufferGetItemSize(format);
 800a64a:	69f8      	ldr	r0, [r7, #28]
 800a64c:	f7ff ffa5 	bl	800a59a <aiPbBufferGetItemSize>
 800a650:	61b8      	str	r0, [r7, #24]

    /* Read data */
    uint8_t *pw = (uint8_t *)bm->buffer->data;
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
    while (stream->bytes_left) {
 800a65a:	e027      	b.n	800a6ac <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	4619      	mov	r1, r3
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f002 fea1 	bl	800d3ac <pb_read>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f083 0301 	eor.w	r3, r3, #1
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <aiPbBuffer_read_cb3+0xc0>
            return false;
 800a676:	2300      	movs	r3, #0
 800a678:	e02a      	b.n	800a6d0 <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	dd10      	ble.n	800a6a2 <aiPbBuffer_read_cb3+0xe8>
            if (pw) {
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <aiPbBuffer_read_cb3+0xe2>
                memcpy(pw, &number, itsize);
 800a686:	f107 0310 	add.w	r3, r7, #16
 800a68a:	69ba      	ldr	r2, [r7, #24]
 800a68c:	4619      	mov	r1, r3
 800a68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a690:	f005 fb95 	bl	800fdbe <memcpy>
                pw += itsize;
 800a694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	4413      	add	r3, r2
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            maxr--;
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	609a      	str	r2, [r3, #8]
    while (stream->bytes_left) {
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1d3      	bne.n	800a65c <aiPbBuffer_read_cb3+0xa2>
    }

    /* Check nb_op */
    if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d108      	bne.n	800a6ce <aiPbBuffer_read_cb3+0x114>
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d002      	beq.n	800a6ce <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	60da      	str	r2, [r3, #12]

    return true;
 800a6ce:	2301      	movs	r3, #1
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3730      	adds	r7, #48	; 0x30
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	; 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
    size_t itsize;

    int maxw = bm->n_max;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	623b      	str	r3, [r7, #32]
    ai_buffer_format format;

    if ((maxw == 0) || (!bm->buffer))
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <aiPbBuffer_write_cb3+0x26>
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <aiPbBuffer_write_cb3+0x2a>
        return true;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e02c      	b.n	800a75c <aiPbBuffer_write_cb3+0x84>

    format = bm->buffer->format;
 800a702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	61fb      	str	r3, [r7, #28]

    itsize = aiPbBufferGetItemSize(format);
 800a70a:	69f8      	ldr	r0, [r7, #28]
 800a70c:	f7ff ff45 	bl	800a59a <aiPbBufferGetItemSize>
 800a710:	61b8      	str	r0, [r7, #24]

    /* Write data */
    pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	617b      	str	r3, [r7, #20]

    if (!pb_encode_tag_for_field(stream, field))
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f005 f827 	bl	800f770 <pb_encode_tag_for_field>
 800a722:	4603      	mov	r3, r0
 800a724:	f083 0301 	eor.w	r3, r3, #1
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <aiPbBuffer_write_cb3+0x5a>
        return false;
 800a72e:	2300      	movs	r3, #0
 800a730:	e014      	b.n	800a75c <aiPbBuffer_write_cb3+0x84>

    if (!pb_encode_string(stream, pr, itsize * maxw))
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	fb02 f303 	mul.w	r3, r2, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	6979      	ldr	r1, [r7, #20]
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f005 f860 	bl	800f804 <pb_encode_string>
 800a744:	4603      	mov	r3, r0
 800a746:	f083 0301 	eor.w	r3, r3, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <aiPbBuffer_write_cb3+0x7c>
        return false;
 800a750:	2300      	movs	r3, #0
 800a752:	e003      	b.n	800a75c <aiPbBuffer_write_cb3+0x84>

    bm->n_ops = maxw;
 800a754:	6a3a      	ldr	r2, [r7, #32]
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	609a      	str	r2, [r3, #8]

    return true;
 800a75a:	2301      	movs	r3, #1
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3728      	adds	r7, #40	; 0x28
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
        EnumState state, ai_buffer *buffer)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b096      	sub	sp, #88	; 0x58
 800a768:	af02      	add	r7, sp, #8
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	603b      	str	r3, [r7, #0]
 800a770:	4613      	mov	r3, r2
 800a772:	71fb      	strb	r3, [r7, #7]
    aiBufferByteMsg msg;
    struct aiPbMgrBuffer hdlb;
    bool res = true;
 800a774:	2301      	movs	r3, #1
 800a776:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    hdlb.n_ops = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61fb      	str	r3, [r7, #28]
    hdlb.buffer = buffer;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	617b      	str	r3, [r7, #20]
    hdlb.err = EnumError_E_NONE;
 800a782:	2300      	movs	r3, #0
 800a784:	623b      	str	r3, [r7, #32]
    hdlb.n_max = aiPbAiBufferSize(buffer);
 800a786:	6838      	ldr	r0, [r7, #0]
 800a788:	f7ff fed4 	bl	800a534 <aiPbAiBufferSize>
 800a78c:	4603      	mov	r3, r0
 800a78e:	61bb      	str	r3, [r7, #24]
    hdlb.msg = &msg;
 800a790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a794:	627b      	str	r3, [r7, #36]	; 0x24

    msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 800a796:	4b1b      	ldr	r3, [pc, #108]	; (800a804 <aiPbMgrReceiveAiBuffer3+0xa0>)
 800a798:	647b      	str	r3, [r7, #68]	; 0x44
    msg.datas.arg = &hdlb;
 800a79a:	f107 0314 	add.w	r3, r7, #20
 800a79e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Waiting buffer message */
    pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 800a7a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4918      	ldr	r1, [pc, #96]	; (800a808 <aiPbMgrReceiveAiBuffer3+0xa4>)
 800a7a8:	4818      	ldr	r0, [pc, #96]	; (800a80c <aiPbMgrReceiveAiBuffer3+0xa8>)
 800a7aa:	f003 fe27 	bl	800e3fc <pb_decode_delimited>
    ioFlushRead();
 800a7ae:	f001 fa4b 	bl	800bc48 <ioFlushRead>

    /* Send ACK and wait ACK (or send ACK only if error) */
    if (hdlb.err) {
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00d      	beq.n	800a7d4 <aiPbMgrReceiveAiBuffer3+0x70>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800a7b8:	6a3a      	ldr	r2, [r7, #32]
                (EnumError)hdlb.err);
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	68b9      	ldr	r1, [r7, #8]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff fe7e 	bl	800a4c8 <aiPbMgrSendAck>
        res = false;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a7d2:	e010      	b.n	800a7f6 <aiPbMgrReceiveAiBuffer3+0x92>
    } else {
        aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 800a7d4:	69f9      	ldr	r1, [r7, #28]
 800a7d6:	79fa      	ldrb	r2, [r7, #7]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff fe71 	bl	800a4c8 <aiPbMgrSendAck>
        if ((state == EnumState_S_WAITING) ||
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d002      	beq.n	800a7f2 <aiPbMgrReceiveAiBuffer3+0x8e>
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d101      	bne.n	800a7f6 <aiPbMgrReceiveAiBuffer3+0x92>
                (state == EnumState_S_PROCESSING))
            aiPbMgrWaitAck();
 800a7f2:	f7ff fe85 	bl	800a500 <aiPbMgrWaitAck>
    }

    return res;
 800a7f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3750      	adds	r7, #80	; 0x50
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	0800a5bb 	.word	0x0800a5bb
 800a808:	08014f08 	.word	0x08014f08
 800a80c:	20000774 	.word	0x20000774

0800a810 <aiPbMgrSetMetaInfo>:

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
		aiBufferShapeMsg *shape)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
	shape->scale = 0.0f;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f04f 0200 	mov.w	r2, #0
 800a822:	615a      	str	r2, [r3, #20]
	shape->zeropoint = 0;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	619a      	str	r2, [r3, #24]
	if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 811e 	beq.w	800aa6e <aiPbMgrSetMetaInfo+0x25e>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 8117 	beq.w	800aa6e <aiPbMgrSetMetaInfo+0x25e>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 8112 	beq.w	800aa6e <aiPbMgrSetMetaInfo+0x25e>
		shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d04f      	beq.n	800a8f0 <aiPbMgrSetMetaInfo+0xe0>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d049      	beq.n	800a8f0 <aiPbMgrSetMetaInfo+0xe0>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d045      	beq.n	800a8f0 <aiPbMgrSetMetaInfo+0xe0>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d03f      	beq.n	800a8ea <aiPbMgrSetMetaInfo+0xda>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d039      	beq.n	800a8ea <aiPbMgrSetMetaInfo+0xda>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d035      	beq.n	800a8ea <aiPbMgrSetMetaInfo+0xda>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d008      	beq.n	800a896 <aiPbMgrSetMetaInfo+0x86>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <aiPbMgrSetMetaInfo+0x86>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	e000      	b.n	800a898 <aiPbMgrSetMetaInfo+0x88>
 800a896:	2300      	movs	r3, #0
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d025      	beq.n	800a8ea <aiPbMgrSetMetaInfo+0xda>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d008      	beq.n	800a8b6 <aiPbMgrSetMetaInfo+0xa6>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <aiPbMgrSetMetaInfo+0xa6>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	e000      	b.n	800a8b8 <aiPbMgrSetMetaInfo+0xa8>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	885b      	ldrh	r3, [r3, #2]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	da13      	bge.n	800a8ea <aiPbMgrSetMetaInfo+0xda>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d008      	beq.n	800a8da <aiPbMgrSetMetaInfo+0xca>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <aiPbMgrSetMetaInfo+0xca>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	e000      	b.n	800a8dc <aiPbMgrSetMetaInfo+0xcc>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	e004      	b.n	800a8f4 <aiPbMgrSetMetaInfo+0xe4>
 800a8ea:	f04f 0300 	mov.w	r3, #0
 800a8ee:	e001      	b.n	800a8f4 <aiPbMgrSetMetaInfo+0xe4>
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6153      	str	r3, [r2, #20]
		shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 80b4 	beq.w	800aa68 <aiPbMgrSetMetaInfo+0x258>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 80ad 	beq.w	800aa68 <aiPbMgrSetMetaInfo+0x258>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80a8 	beq.w	800aa68 <aiPbMgrSetMetaInfo+0x258>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d05f      	beq.n	800a9de <aiPbMgrSetMetaInfo+0x1ce>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d059      	beq.n	800a9de <aiPbMgrSetMetaInfo+0x1ce>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d055      	beq.n	800a9de <aiPbMgrSetMetaInfo+0x1ce>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d008      	beq.n	800a94a <aiPbMgrSetMetaInfo+0x13a>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <aiPbMgrSetMetaInfo+0x13a>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	e000      	b.n	800a94c <aiPbMgrSetMetaInfo+0x13c>
 800a94a:	2300      	movs	r3, #0
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	2b00      	cmp	r3, #0
 800a954:	d043      	beq.n	800a9de <aiPbMgrSetMetaInfo+0x1ce>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d03e      	beq.n	800a9da <aiPbMgrSetMetaInfo+0x1ca>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	d038      	beq.n	800a9da <aiPbMgrSetMetaInfo+0x1ca>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d034      	beq.n	800a9da <aiPbMgrSetMetaInfo+0x1ca>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d008      	beq.n	800a988 <aiPbMgrSetMetaInfo+0x178>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <aiPbMgrSetMetaInfo+0x178>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	e000      	b.n	800a98a <aiPbMgrSetMetaInfo+0x17a>
 800a988:	2300      	movs	r3, #0
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d024      	beq.n	800a9da <aiPbMgrSetMetaInfo+0x1ca>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d008      	beq.n	800a9a8 <aiPbMgrSetMetaInfo+0x198>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <aiPbMgrSetMetaInfo+0x198>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	e000      	b.n	800a9aa <aiPbMgrSetMetaInfo+0x19a>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	885b      	ldrh	r3, [r3, #2]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	da12      	bge.n	800a9da <aiPbMgrSetMetaInfo+0x1ca>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d008      	beq.n	800a9cc <aiPbMgrSetMetaInfo+0x1bc>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <aiPbMgrSetMetaInfo+0x1bc>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	e000      	b.n	800a9ce <aiPbMgrSetMetaInfo+0x1be>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	e047      	b.n	800aa6a <aiPbMgrSetMetaInfo+0x25a>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e045      	b.n	800aa6a <aiPbMgrSetMetaInfo+0x25a>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d03f      	beq.n	800aa64 <aiPbMgrSetMetaInfo+0x254>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d039      	beq.n	800aa64 <aiPbMgrSetMetaInfo+0x254>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d035      	beq.n	800aa64 <aiPbMgrSetMetaInfo+0x254>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d008      	beq.n	800aa10 <aiPbMgrSetMetaInfo+0x200>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <aiPbMgrSetMetaInfo+0x200>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	e000      	b.n	800aa12 <aiPbMgrSetMetaInfo+0x202>
 800aa10:	2300      	movs	r3, #0
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d025      	beq.n	800aa64 <aiPbMgrSetMetaInfo+0x254>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d008      	beq.n	800aa30 <aiPbMgrSetMetaInfo+0x220>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <aiPbMgrSetMetaInfo+0x220>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	e000      	b.n	800aa32 <aiPbMgrSetMetaInfo+0x222>
 800aa30:	2300      	movs	r3, #0
 800aa32:	885b      	ldrh	r3, [r3, #2]
 800aa34:	461a      	mov	r2, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	da13      	bge.n	800aa64 <aiPbMgrSetMetaInfo+0x254>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d008      	beq.n	800aa54 <aiPbMgrSetMetaInfo+0x244>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <aiPbMgrSetMetaInfo+0x244>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	e000      	b.n	800aa56 <aiPbMgrSetMetaInfo+0x246>
 800aa54:	2300      	movs	r3, #0
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f993 3000 	ldrsb.w	r3, [r3]
 800aa62:	e002      	b.n	800aa6a <aiPbMgrSetMetaInfo+0x25a>
 800aa64:	2300      	movs	r3, #0
 800aa66:	e000      	b.n	800aa6a <aiPbMgrSetMetaInfo+0x25a>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	6193      	str	r3, [r2, #24]
	}
}
 800aa6e:	bf00      	nop
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
	...

0800aa7c <aiPbMgrSendAiBuffer3>:

bool aiPbMgrSendAiBuffer3(const reqMsg *req, respMsg *resp, EnumState state,
        uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08c      	sub	sp, #48	; 0x30
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6178      	str	r0, [r7, #20]
 800aa84:	6139      	str	r1, [r7, #16]
 800aa86:	60bb      	str	r3, [r7, #8]
 800aa88:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	73fb      	strb	r3, [r7, #15]
    struct aiPbMgrBuffer hdlb;
    const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 800aa90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
    const int is_io = AI_BUFFER_FMT_FLAG_IS_IO & buffer->format;
#endif

    hdlb.n_ops = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	623b      	str	r3, [r7, #32]
    hdlb.buffer = (ai_buffer *)buffer;
 800aa9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9c:	61bb      	str	r3, [r7, #24]
    hdlb.err = EnumError_E_NONE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	627b      	str	r3, [r7, #36]	; 0x24
    hdlb.n_max = aiPbAiBufferSize(buffer);
 800aaa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aaa4:	f7ff fd46 	bl	800a534 <aiPbAiBufferSize>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	61fb      	str	r3, [r7, #28]
    hdlb.msg = NULL;
 800aaac:	2300      	movs	r3, #0
 800aaae:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
    if ((type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) && (!is_io)) {
        hdlb.n_max  = 0;
    }
#else
    if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	da01      	bge.n	800aaba <aiPbMgrSendAiBuffer3+0x3e>
        hdlb.n_max  = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61fb      	str	r3, [r7, #28]
    }
#endif
    type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aac0:	60bb      	str	r3, [r7, #8]

    /* Fill Node sub-message */
    resp->which_payload = respMsg_node_tag;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	220e      	movs	r2, #14
 800aac6:	80da      	strh	r2, [r3, #6]
    resp->payload.node.type = type;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	609a      	str	r2, [r3, #8]
    resp->payload.node.id = id;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aad2:	60da      	str	r2, [r3, #12]
    resp->payload.node.duration = dur_ms;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	611a      	str	r2, [r3, #16]
    resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 800aada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fd50 	bl	800a584 <aiPbAiFmtToMsgFmt>
 800aae4:	4602      	mov	r2, r0
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	615a      	str	r2, [r3, #20]
    resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 800aaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaec:	889b      	ldrh	r3, [r3, #4]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	619a      	str	r2, [r3, #24]
    resp->payload.node.buffer.shape.height = buffer->height;
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf6:	88db      	ldrh	r3, [r3, #6]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	61da      	str	r2, [r3, #28]
    resp->payload.node.buffer.shape.width = buffer->width;
 800aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab00:	891b      	ldrh	r3, [r3, #8]
 800ab02:	461a      	mov	r2, r3
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	621a      	str	r2, [r3, #32]
    resp->payload.node.buffer.shape.channels = buffer->channels;
 800ab08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	625a      	str	r2, [r3, #36]	; 0x24
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3314      	adds	r3, #20
 800ab14:	461a      	mov	r2, r3
 800ab16:	2100      	movs	r1, #0
 800ab18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab1a:	f7ff fe79 	bl	800a810 <aiPbMgrSetMetaInfo>

    resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	4a0b      	ldr	r2, [pc, #44]	; (800ab50 <aiPbMgrSendAiBuffer3+0xd4>)
 800ab22:	631a      	str	r2, [r3, #48]	; 0x30
    resp->payload.node.buffer.datas.arg = &hdlb;
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f107 0218 	add.w	r2, r7, #24
 800ab2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send msg */
    aiPbMgrSendResp(req, resp, state);
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6939      	ldr	r1, [r7, #16]
 800ab32:	6978      	ldr	r0, [r7, #20]
 800ab34:	f7ff fcaa 	bl	800a48c <aiPbMgrSendResp>

    /* Waiting ACK */
    if (state == EnumState_S_PROCESSING)
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d103      	bne.n	800ab46 <aiPbMgrSendAiBuffer3+0xca>
        return aiPbMgrWaitAck();
 800ab3e:	f7ff fcdf 	bl	800a500 <aiPbMgrWaitAck>
 800ab42:	4603      	mov	r3, r0
 800ab44:	e000      	b.n	800ab48 <aiPbMgrSendAiBuffer3+0xcc>
    else
        return true;
 800ab46:	2301      	movs	r3, #1
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3730      	adds	r7, #48	; 0x30
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	0800a6d9 	.word	0x0800a6d9

0800ab54 <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
    resp->which_payload = respMsg_sync_tag;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	220a      	movs	r2, #10
 800ab64:	80da      	strh	r2, [r3, #6]
    resp->payload.sync.version =
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f240 2201 	movw	r2, #513	; 0x201
 800ab6c:	609a      	str	r2, [r3, #8]
            EnumVersion_P_VERSION_MAJOR << 8 |
            EnumVersion_P_VERSION_MINOR;

    resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2202      	movs	r2, #2
 800ab72:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
    resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

    if (param)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d005      	beq.n	800ab86 <aiPbCmdSync+0x32>
        resp->payload.sync.capability |= (uint32_t)param;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	60da      	str	r2, [r3, #12]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800ab86:	2200      	movs	r2, #0
 800ab88:	68b9      	ldr	r1, [r7, #8]
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff fc7e 	bl	800a48c <aiPbMgrSendResp>
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
    UNUSED(param);
    resp->which_payload = respMsg_sinfo_tag;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	220b      	movs	r2, #11
 800aba8:	80da      	strh	r2, [r3, #6]
    resp->payload.sinfo.devid = HAL_GetDEVID();
 800abaa:	f7fd f9af 	bl	8007f0c <HAL_GetDEVID>
 800abae:	4602      	mov	r2, r0
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	609a      	str	r2, [r3, #8]
    resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 800abb4:	f7fe f91c 	bl	8008df0 <HAL_RCC_GetSysClockFreq>
 800abb8:	4602      	mov	r2, r0
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	60da      	str	r2, [r3, #12]
    resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 800abbe:	f7fe f9c9 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 800abc2:	4602      	mov	r2, r0
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	611a      	str	r2, [r3, #16]
    resp->payload.sinfo.cache = getFlashCacheConf();
 800abc8:	f000 fb74 	bl	800b2b4 <getFlashCacheConf>
 800abcc:	4602      	mov	r2, r0
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	615a      	str	r2, [r3, #20]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800abd2:	2200      	movs	r2, #0
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff fc58 	bl	800a48c <aiPbMgrSendResp>
}
 800abdc:	bf00      	nop
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
    if ((!aibuffer) || (!msg))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d026      	beq.n	800ac42 <init_aibuffer_msg+0x5e>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d023      	beq.n	800ac42 <init_aibuffer_msg+0x5e>
        return;

    const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	60fb      	str	r3, [r7, #12]

    msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff fcbd 	bl	800a584 <aiPbAiFmtToMsgFmt>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	601a      	str	r2, [r3, #0]
    msg->channels = aibuffer->channels;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68da      	ldr	r2, [r3, #12]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	611a      	str	r2, [r3, #16]
    msg->height = aibuffer->height;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	88db      	ldrh	r3, [r3, #6]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	609a      	str	r2, [r3, #8]
    msg->width = aibuffer->width;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	891b      	ldrh	r3, [r3, #8]
 800ac26:	461a      	mov	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	60da      	str	r2, [r3, #12]
    msg->n_batches = aibuffer->n_batches;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	889b      	ldrh	r3, [r3, #4]
 800ac30:	461a      	mov	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	605a      	str	r2, [r3, #4]
    aiPbMgrSetMetaInfo(meta_info, 0, msg);
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fde8 	bl	800a810 <aiPbMgrSetMetaInfo>
 800ac40:	e000      	b.n	800ac44 <init_aibuffer_msg+0x60>
        return;
 800ac42:	bf00      	nop
}
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        const ai_buffer *aibuffer, int maxw)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08c      	sub	sp, #48	; 0x30
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
    aiBufferShapeMsg msg;

    for (int i = 0; i < maxw; i++) {
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac5e:	e02b      	b.n	800acb8 <nn_shape_w_cb+0x6c>
        if (!pb_encode_tag_for_field(stream, field))
 800ac60:	68b9      	ldr	r1, [r7, #8]
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f004 fd84 	bl	800f770 <pb_encode_tag_for_field>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f083 0301 	eor.w	r3, r3, #1
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <nn_shape_w_cb+0x2c>
            return false;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e024      	b.n	800acc2 <nn_shape_w_cb+0x76>

        init_aibuffer_msg(&aibuffer[i], &msg);
 800ac78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	4413      	add	r3, r2
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	461a      	mov	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4413      	add	r3, r2
 800ac88:	f107 0210 	add.w	r2, r7, #16
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff ffa8 	bl	800abe4 <init_aibuffer_msg>

        if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 800ac94:	f107 0310 	add.w	r3, r7, #16
 800ac98:	461a      	mov	r2, r3
 800ac9a:	490c      	ldr	r1, [pc, #48]	; (800accc <nn_shape_w_cb+0x80>)
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f004 fdd1 	bl	800f844 <pb_encode_submessage>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f083 0301 	eor.w	r3, r3, #1
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <nn_shape_w_cb+0x66>
            return false;
 800acae:	2300      	movs	r3, #0
 800acb0:	e007      	b.n	800acc2 <nn_shape_w_cb+0x76>
    for (int i = 0; i < maxw; i++) {
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	3301      	adds	r3, #1
 800acb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	dbcf      	blt.n	800ac60 <nn_shape_w_cb+0x14>
    }
    return true;
 800acc0:	2301      	movs	r3, #1
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3730      	adds	r7, #48	; 0x30
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	08014d54 	.word	0x08014d54

0800acd0 <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	617b      	str	r3, [r7, #20]

    if (!report)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <nn_inputs_w_cb+0x1c>
        return true;
 800ace8:	2301      	movs	r3, #1
 800acea:	e008      	b.n	800acfe <nn_inputs_w_cb+0x2e>

    return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7ff ffa8 	bl	800ac4c <nn_shape_w_cb>
 800acfc:	4603      	mov	r3, r0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	617b      	str	r3, [r7, #20]

    if (!report)
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <nn_outputs_w_cb+0x1c>
        return true;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e008      	b.n	800ad34 <nn_outputs_w_cb+0x2e>

    return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff ff8d 	bl	800ac4c <nn_shape_w_cb>
 800ad32:	4603      	mov	r3, r0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
    const char undef[] = "UNDEFINED";
 800ad48:	4a19      	ldr	r2, [pc, #100]	; (800adb0 <aiPbStrCopy+0x74>)
 800ad4a:	f107 0310 	add.w	r3, r7, #16
 800ad4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad50:	c303      	stmia	r3!, {r0, r1}
 800ad52:	801a      	strh	r2, [r3, #0]
    size_t l = strlen(src);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7fc f886 	bl	8006e66 <strlen>
 800ad5a:	61f8      	str	r0, [r7, #28]

    if (l > max)
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d902      	bls.n	800ad6a <aiPbStrCopy+0x2e>
        l = max-1;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	61fb      	str	r3, [r7, #28]

    if (!dst)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d01b      	beq.n	800ada8 <aiPbStrCopy+0x6c>
        return;

    if (src && l)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <aiPbStrCopy+0x50>
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d007      	beq.n	800ad8c <aiPbStrCopy+0x50>
        memcpy(dst, src, l+1);
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	461a      	mov	r2, r3
 800ad82:	68f9      	ldr	r1, [r7, #12]
 800ad84:	68b8      	ldr	r0, [r7, #8]
 800ad86:	f005 f81a 	bl	800fdbe <memcpy>
 800ad8a:	e00e      	b.n	800adaa <aiPbStrCopy+0x6e>
    else
        memcpy(dst, undef, strlen(undef)+1);
 800ad8c:	f107 0310 	add.w	r3, r7, #16
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fc f868 	bl	8006e66 <strlen>
 800ad96:	4603      	mov	r3, r0
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	f107 0310 	add.w	r3, r7, #16
 800ad9e:	4619      	mov	r1, r3
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f005 f80c 	bl	800fdbe <memcpy>
 800ada6:	e000      	b.n	800adaa <aiPbStrCopy+0x6e>
        return;
 800ada8:	bf00      	nop
}
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	080138e8 	.word	0x080138e8

0800adb4 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
    if (!ver)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <aiPbVersionToUint32+0x12>
        return 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	e00d      	b.n	800ade2 <aiPbVersionToUint32+0x2e>

    return ver->major << 24 | ver->minor << 16
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	061a      	lsls	r2, r3, #24
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	431a      	orrs	r2, r3
            | ver->micro << 8 | ver->reserved;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	789b      	ldrb	r3, [r3, #2]
 800add8:	021b      	lsls	r3, r3, #8
 800adda:	4313      	orrs	r3, r2
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	78d2      	ldrb	r2, [r2, #3]
 800ade0:	4313      	orrs	r3, r2
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
        EnumState state, const ai_network_report *nn)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	4613      	mov	r3, r2
 800adfe:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ninfo_tag;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2214      	movs	r2, #20
 800ae04:	80da      	strh	r2, [r3, #6]

    aiPbStrCopy(nn->model_name,
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	2240      	movs	r2, #64	; 0x40
 800ae10:	4619      	mov	r1, r3
 800ae12:	f7ff ff93 	bl	800ad3c <aiPbStrCopy>
            &resp->payload.ninfo.model_name[0],
            sizeof(resp->payload.ninfo.model_name));
    aiPbStrCopy(nn->model_signature,
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	6858      	ldr	r0, [r3, #4]
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	3348      	adds	r3, #72	; 0x48
 800ae1e:	2240      	movs	r2, #64	; 0x40
 800ae20:	4619      	mov	r1, r3
 800ae22:	f7ff ff8b 	bl	800ad3c <aiPbStrCopy>
            &resp->payload.ninfo.model_signature[0],
            sizeof(resp->payload.ninfo.model_signature));
    aiPbStrCopy(nn->model_datetime,
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	6898      	ldr	r0, [r3, #8]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	3388      	adds	r3, #136	; 0x88
 800ae2e:	2240      	movs	r2, #64	; 0x40
 800ae30:	4619      	mov	r1, r3
 800ae32:	f7ff ff83 	bl	800ad3c <aiPbStrCopy>
            &resp->payload.ninfo.model_datetime[0],
            sizeof(resp->payload.ninfo.model_datetime));
    aiPbStrCopy(nn->compile_datetime,
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	68d8      	ldr	r0, [r3, #12]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	33c8      	adds	r3, #200	; 0xc8
 800ae3e:	2240      	movs	r2, #64	; 0x40
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7ff ff7b 	bl	800ad3c <aiPbStrCopy>
            &resp->payload.ninfo.compile_datetime[0],
            sizeof(resp->payload.ninfo.compile_datetime));
    aiPbStrCopy(nn->runtime_revision,
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	6918      	ldr	r0, [r3, #16]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ae50:	2240      	movs	r2, #64	; 0x40
 800ae52:	4619      	mov	r1, r3
 800ae54:	f7ff ff72 	bl	800ad3c <aiPbStrCopy>
            &resp->payload.ninfo.runtime_revision[0],
            sizeof(resp->payload.ninfo.runtime_revision));
    aiPbStrCopy(nn->tool_revision,
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	6998      	ldr	r0, [r3, #24]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800ae62:	2240      	movs	r2, #64	; 0x40
 800ae64:	4619      	mov	r1, r3
 800ae66:	f7ff ff69 	bl	800ad3c <aiPbStrCopy>
            &resp->payload.ninfo.tool_revision[0],
            sizeof(resp->payload.ninfo.tool_revision));

    resp->payload.ninfo.n_inputs = nn->n_inputs;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ae6e:	461a      	mov	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    resp->payload.ninfo.n_outputs = nn->n_outputs;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    resp->payload.ninfo.n_nodes = nn->n_nodes;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    resp->payload.ninfo.n_macc = nn->n_macc;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    resp->payload.ninfo.signature = nn->signature;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    resp->payload.ninfo.api_version =
            aiPbVersionToUint32(&nn->api_version);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	3324      	adds	r3, #36	; 0x24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7ff ff85 	bl	800adb4 <aiPbVersionToUint32>
 800aeaa:	4602      	mov	r2, r0
    resp->payload.ninfo.api_version =
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    resp->payload.ninfo.interface_api_version =
            aiPbVersionToUint32(&nn->interface_api_version);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	3328      	adds	r3, #40	; 0x28
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff ff7c 	bl	800adb4 <aiPbVersionToUint32>
 800aebc:	4602      	mov	r2, r0
    resp->payload.ninfo.interface_api_version =
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    resp->payload.ninfo.runtime_version =
            aiPbVersionToUint32(&nn->runtime_version);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	3314      	adds	r3, #20
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff ff73 	bl	800adb4 <aiPbVersionToUint32>
 800aece:	4602      	mov	r2, r0
    resp->payload.ninfo.runtime_version =
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    resp->payload.ninfo.tool_version =
            aiPbVersionToUint32(&nn->tool_version);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	331c      	adds	r3, #28
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff ff6a 	bl	800adb4 <aiPbVersionToUint32>
 800aee0:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_version =
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    resp->payload.ninfo.tool_api_version =
            aiPbVersionToUint32(&nn->tool_api_version);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	3320      	adds	r3, #32
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff ff61 	bl	800adb4 <aiPbVersionToUint32>
 800aef2:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_api_version =
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800af06:	4619      	mov	r1, r3
 800af08:	4610      	mov	r0, r2
 800af0a:	f7ff fe6b 	bl	800abe4 <init_aibuffer_msg>
    init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7ff fe61 	bl	800abe4 <init_aibuffer_msg>

    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a0c      	ldr	r2, [pc, #48]	; (800af58 <aiPbMgrSendNNInfo+0x168>)
 800af26:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    resp->payload.ninfo.inputs.arg = (void *)nn;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	4a09      	ldr	r2, [pc, #36]	; (800af5c <aiPbMgrSendNNInfo+0x16c>)
 800af36:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    resp->payload.ninfo.outputs.arg = (void *)nn;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

    aiPbMgrSendResp(req, resp, state);
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	461a      	mov	r2, r3
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f7ff fa9f 	bl	800a48c <aiPbMgrSendResp>
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	0800acd1 	.word	0x0800acd1
 800af5c:	0800ad07 	.word	0x0800ad07

0800af60 <crcIpInit>:
#error Only STM32H7, STM32F7, STM32F4, STM32L4, STM32L5 or STM32F3 device are supported
#endif
#endif

void crcIpInit(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#else
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800af66:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <crcIpInit+0x38>)
 800af68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <crcIpInit+0x18>
        printf("W: CRC IP clock is NOT enabled\r\n");
 800af72:	480a      	ldr	r0, [pc, #40]	; (800af9c <crcIpInit+0x3c>)
 800af74:	f005 f866 	bl	8010044 <puts>

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
 800af78:	4b07      	ldr	r3, [pc, #28]	; (800af98 <crcIpInit+0x38>)
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	4a06      	ldr	r2, [pc, #24]	; (800af98 <crcIpInit+0x38>)
 800af7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af82:	6313      	str	r3, [r2, #48]	; 0x30
 800af84:	4b04      	ldr	r3, [pc, #16]	; (800af98 <crcIpInit+0x38>)
 800af86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af8c:	607b      	str	r3, [r7, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
#endif
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	40023800 	.word	0x40023800
 800af9c:	080138f4 	.word	0x080138f4

0800afa0 <dwtIpInit>:

void dwtIpInit(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800afa4:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <dwtIpInit+0x34>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	4a0a      	ldr	r2, [pc, #40]	; (800afd4 <dwtIpInit+0x34>)
 800afaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afae:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
 800afb0:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <dwtIpInit+0x38>)
 800afb2:	4a0a      	ldr	r2, [pc, #40]	; (800afdc <dwtIpInit+0x3c>)
 800afb4:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif

    DWT->CYCCNT = 0;
 800afb8:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <dwtIpInit+0x38>)
 800afba:	2200      	movs	r2, #0
 800afbc:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800afbe:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <dwtIpInit+0x38>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	4905      	ldr	r1, [pc, #20]	; (800afd8 <dwtIpInit+0x38>)
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <dwtIpInit+0x40>)
 800afc6:	4313      	orrs	r3, r2
 800afc8:	600b      	str	r3, [r1, #0]
}
 800afca:	bf00      	nop
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	e000edf0 	.word	0xe000edf0
 800afd8:	e0001000 	.word	0xe0001000
 800afdc:	c5acce55 	.word	0xc5acce55
 800afe0:	00020001 	.word	0x00020001

0800afe4 <dwtReset>:

void dwtReset(void)
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800afe8:	4b03      	ldr	r3, [pc, #12]	; (800aff8 <dwtReset+0x14>)
 800afea:	2200      	movs	r2, #0
 800afec:	605a      	str	r2, [r3, #4]
}
 800afee:	bf00      	nop
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	e0001000 	.word	0xe0001000

0800affc <dwtGetCycles>:

uint32_t dwtGetCycles(void)
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800b000:	4b03      	ldr	r3, [pc, #12]	; (800b010 <dwtGetCycles+0x14>)
 800b002:	685b      	ldr	r3, [r3, #4]
}
 800b004:	4618      	mov	r0, r3
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	e0001000 	.word	0xe0001000

0800b014 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
#if !defined(STM32H7)
    return HAL_RCC_GetHCLKFreq();
 800b018:	f7fd ff9c 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 800b01c:	4603      	mov	r3, r0
#else
    return HAL_RCC_GetSysClockFreq();
#endif
}
 800b01e:	4618      	mov	r0, r3
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <dwtCyclesToFloatMs>:
    return 0;
}


float dwtCyclesToFloatMs(uint64_t clks)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	e9c7 0100 	strd	r0, r1, [r7]
    float res;
    float fcpu = (float)systemCoreClock();
 800b02e:	f7ff fff1 	bl	800b014 <systemCoreClock>
 800b032:	ee07 0a90 	vmov	s15, r0
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	edc7 7a03 	vstr	s15, [r7, #12]
    res = ((float)clks * (float)1000.0) / fcpu;
 800b03e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b042:	f7fc f9f1 	bl	8007428 <__aeabi_ul2f>
 800b046:	ee07 0a10 	vmov	s14, r0
 800b04a:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b070 <dwtCyclesToFloatMs+0x4c>
 800b04e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b052:	ed97 7a03 	vldr	s14, [r7, #12]
 800b056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b05a:	edc7 7a02 	vstr	s15, [r7, #8]
    return res;
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	ee07 3a90 	vmov	s15, r3
}
 800b064:	eeb0 0a67 	vmov.f32	s0, s15
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	447a0000 	.word	0x447a0000

0800b074 <devIdToStr>:


__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	80fb      	strh	r3, [r7, #6]
	/* DEV_ID field from DBGMCU register */
    const char *str;
    switch (dev_id) {
 800b07e:	88fb      	ldrh	r3, [r7, #6]
 800b080:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 800b084:	2b5d      	cmp	r3, #93	; 0x5d
 800b086:	f200 80e0 	bhi.w	800b24a <devIdToStr+0x1d6>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <devIdToStr+0x1c>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b22d 	.word	0x0800b22d
 800b094:	0800b24b 	.word	0x0800b24b
 800b098:	0800b24b 	.word	0x0800b24b
 800b09c:	0800b24b 	.word	0x0800b24b
 800b0a0:	0800b24b 	.word	0x0800b24b
 800b0a4:	0800b24b 	.word	0x0800b24b
 800b0a8:	0800b24b 	.word	0x0800b24b
 800b0ac:	0800b24b 	.word	0x0800b24b
 800b0b0:	0800b24b 	.word	0x0800b24b
 800b0b4:	0800b24b 	.word	0x0800b24b
 800b0b8:	0800b24b 	.word	0x0800b24b
 800b0bc:	0800b24b 	.word	0x0800b24b
 800b0c0:	0800b24b 	.word	0x0800b24b
 800b0c4:	0800b209 	.word	0x0800b209
 800b0c8:	0800b24b 	.word	0x0800b24b
 800b0cc:	0800b24b 	.word	0x0800b24b
 800b0d0:	0800b24b 	.word	0x0800b24b
 800b0d4:	0800b24b 	.word	0x0800b24b
 800b0d8:	0800b24b 	.word	0x0800b24b
 800b0dc:	0800b24b 	.word	0x0800b24b
 800b0e0:	0800b24b 	.word	0x0800b24b
 800b0e4:	0800b24b 	.word	0x0800b24b
 800b0e8:	0800b24b 	.word	0x0800b24b
 800b0ec:	0800b24b 	.word	0x0800b24b
 800b0f0:	0800b24b 	.word	0x0800b24b
 800b0f4:	0800b24b 	.word	0x0800b24b
 800b0f8:	0800b24b 	.word	0x0800b24b
 800b0fc:	0800b24b 	.word	0x0800b24b
 800b100:	0800b21b 	.word	0x0800b21b
 800b104:	0800b24b 	.word	0x0800b24b
 800b108:	0800b24b 	.word	0x0800b24b
 800b10c:	0800b24b 	.word	0x0800b24b
 800b110:	0800b221 	.word	0x0800b221
 800b114:	0800b24b 	.word	0x0800b24b
 800b118:	0800b24b 	.word	0x0800b24b
 800b11c:	0800b20f 	.word	0x0800b20f
 800b120:	0800b24b 	.word	0x0800b24b
 800b124:	0800b24b 	.word	0x0800b24b
 800b128:	0800b24b 	.word	0x0800b24b
 800b12c:	0800b24b 	.word	0x0800b24b
 800b130:	0800b24b 	.word	0x0800b24b
 800b134:	0800b24b 	.word	0x0800b24b
 800b138:	0800b24b 	.word	0x0800b24b
 800b13c:	0800b24b 	.word	0x0800b24b
 800b140:	0800b24b 	.word	0x0800b24b
 800b144:	0800b24b 	.word	0x0800b24b
 800b148:	0800b24b 	.word	0x0800b24b
 800b14c:	0800b24b 	.word	0x0800b24b
 800b150:	0800b24b 	.word	0x0800b24b
 800b154:	0800b215 	.word	0x0800b215
 800b158:	0800b24b 	.word	0x0800b24b
 800b15c:	0800b24b 	.word	0x0800b24b
 800b160:	0800b23f 	.word	0x0800b23f
 800b164:	0800b24b 	.word	0x0800b24b
 800b168:	0800b24b 	.word	0x0800b24b
 800b16c:	0800b24b 	.word	0x0800b24b
 800b170:	0800b24b 	.word	0x0800b24b
 800b174:	0800b24b 	.word	0x0800b24b
 800b178:	0800b24b 	.word	0x0800b24b
 800b17c:	0800b245 	.word	0x0800b245
 800b180:	0800b24b 	.word	0x0800b24b
 800b184:	0800b24b 	.word	0x0800b24b
 800b188:	0800b24b 	.word	0x0800b24b
 800b18c:	0800b24b 	.word	0x0800b24b
 800b190:	0800b24b 	.word	0x0800b24b
 800b194:	0800b24b 	.word	0x0800b24b
 800b198:	0800b24b 	.word	0x0800b24b
 800b19c:	0800b24b 	.word	0x0800b24b
 800b1a0:	0800b24b 	.word	0x0800b24b
 800b1a4:	0800b24b 	.word	0x0800b24b
 800b1a8:	0800b24b 	.word	0x0800b24b
 800b1ac:	0800b24b 	.word	0x0800b24b
 800b1b0:	0800b24b 	.word	0x0800b24b
 800b1b4:	0800b24b 	.word	0x0800b24b
 800b1b8:	0800b24b 	.word	0x0800b24b
 800b1bc:	0800b24b 	.word	0x0800b24b
 800b1c0:	0800b24b 	.word	0x0800b24b
 800b1c4:	0800b227 	.word	0x0800b227
 800b1c8:	0800b24b 	.word	0x0800b24b
 800b1cc:	0800b24b 	.word	0x0800b24b
 800b1d0:	0800b24b 	.word	0x0800b24b
 800b1d4:	0800b24b 	.word	0x0800b24b
 800b1d8:	0800b24b 	.word	0x0800b24b
 800b1dc:	0800b24b 	.word	0x0800b24b
 800b1e0:	0800b24b 	.word	0x0800b24b
 800b1e4:	0800b24b 	.word	0x0800b24b
 800b1e8:	0800b24b 	.word	0x0800b24b
 800b1ec:	0800b24b 	.word	0x0800b24b
 800b1f0:	0800b24b 	.word	0x0800b24b
 800b1f4:	0800b24b 	.word	0x0800b24b
 800b1f8:	0800b24b 	.word	0x0800b24b
 800b1fc:	0800b233 	.word	0x0800b233
 800b200:	0800b24b 	.word	0x0800b24b
 800b204:	0800b239 	.word	0x0800b239
    case 0x422: str = "STM32F303xB/C"; break;
 800b208:	4b14      	ldr	r3, [pc, #80]	; (800b25c <devIdToStr+0x1e8>)
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	e01f      	b.n	800b24e <devIdToStr+0x1da>
    case 0x438: str = "STM32F303x6/8"; break;
 800b20e:	4b14      	ldr	r3, [pc, #80]	; (800b260 <devIdToStr+0x1ec>)
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	e01c      	b.n	800b24e <devIdToStr+0x1da>
    case 0x446: str = "STM32F303xD/E"; break;
 800b214:	4b13      	ldr	r3, [pc, #76]	; (800b264 <devIdToStr+0x1f0>)
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e019      	b.n	800b24e <devIdToStr+0x1da>
    case 0x431: str = "STM32F411xC/E"; break;
 800b21a:	4b13      	ldr	r3, [pc, #76]	; (800b268 <devIdToStr+0x1f4>)
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e016      	b.n	800b24e <devIdToStr+0x1da>
    case 0x435: str = "STM32L43xxx"; break;
 800b220:	4b12      	ldr	r3, [pc, #72]	; (800b26c <devIdToStr+0x1f8>)
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	e013      	b.n	800b24e <devIdToStr+0x1da>
    case 0x462: str = "STM32L45xxx"; break;
 800b226:	4b12      	ldr	r3, [pc, #72]	; (800b270 <devIdToStr+0x1fc>)
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e010      	b.n	800b24e <devIdToStr+0x1da>
    case 0x415: str = "STM32L4x6xx"; break;
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <devIdToStr+0x200>)
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e00d      	b.n	800b24e <devIdToStr+0x1da>
    case 0x470: str = "STM32L4Rxxx"; break;
 800b232:	4b11      	ldr	r3, [pc, #68]	; (800b278 <devIdToStr+0x204>)
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	e00a      	b.n	800b24e <devIdToStr+0x1da>
    case 0x472: str = "STM32L5[5,6]2xx"; break;
 800b238:	4b10      	ldr	r3, [pc, #64]	; (800b27c <devIdToStr+0x208>)
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e007      	b.n	800b24e <devIdToStr+0x1da>
    case 0x449: str = "STM32F74xxx"; break;
 800b23e:	4b10      	ldr	r3, [pc, #64]	; (800b280 <devIdToStr+0x20c>)
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	e004      	b.n	800b24e <devIdToStr+0x1da>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 800b244:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <devIdToStr+0x210>)
 800b246:	60fb      	str	r3, [r7, #12]
 800b248:	e001      	b.n	800b24e <devIdToStr+0x1da>
    default:    str = "UNKNOWN";
 800b24a:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <devIdToStr+0x214>)
 800b24c:	60fb      	str	r3, [r7, #12]
    }
    return str;
 800b24e:	68fb      	ldr	r3, [r7, #12]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	08013914 	.word	0x08013914
 800b260:	08013924 	.word	0x08013924
 800b264:	08013934 	.word	0x08013934
 800b268:	08013944 	.word	0x08013944
 800b26c:	08013954 	.word	0x08013954
 800b270:	08013960 	.word	0x08013960
 800b274:	0801396c 	.word	0x0801396c
 800b278:	08013978 	.word	0x08013978
 800b27c:	08013984 	.word	0x08013984
 800b280:	08013994 	.word	0x08013994
 800b284:	080139a0 	.word	0x080139a0
 800b288:	080139bc 	.word	0x080139bc

0800b28c <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
    if (val)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <bitToStr+0x12>
        return "True";
 800b29a:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <bitToStr+0x20>)
 800b29c:	e000      	b.n	800b2a0 <bitToStr+0x14>
    else
        return "False";
 800b29e:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <bitToStr+0x24>)
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	080139c4 	.word	0x080139c4
 800b2b0:	080139cc 	.word	0x080139cc

0800b2b4 <getFlashCacheConf>:


static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	af00      	add	r7, sp, #0
    return mconf;
 800b2b8:	4b03      	ldr	r3, [pc, #12]	; (800b2c8 <getFlashCacheConf+0x14>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	200009e8 	.word	0x200009e8

0800b2cc <logDeviceConf>:

void logDeviceConf(void)
{
 800b2cc:	b5b0      	push	{r4, r5, r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af02      	add	r7, sp, #8
#if !defined(STM32L5)
    uint32_t acr = FLASH->ACR ;
 800b2d2:	4b53      	ldr	r3, [pc, #332]	; (800b420 <logDeviceConf+0x154>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	607b      	str	r3, [r7, #4]
#endif
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 800b2d8:	4852      	ldr	r0, [pc, #328]	; (800b424 <logDeviceConf+0x158>)
 800b2da:	f004 feb3 	bl	8010044 <puts>

    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
            (int)HAL_GetDEVID(),
 800b2de:	f7fc fe15 	bl	8007f0c <HAL_GetDEVID>
 800b2e2:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800b2e4:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 800b2e6:	f7fc fe11 	bl	8007f0c <HAL_GetDEVID>
 800b2ea:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff fec0 	bl	800b074 <devIdToStr>
 800b2f4:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 800b2f6:	f7fc fdfd 	bl	8007ef4 <HAL_GetREVID>
 800b2fa:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	4621      	mov	r1, r4
 800b300:	4849      	ldr	r0, [pc, #292]	; (800b428 <logDeviceConf+0x15c>)
 800b302:	f004 fe17 	bl	800ff34 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 800b306:	4b49      	ldr	r3, [pc, #292]	; (800b42c <logDeviceConf+0x160>)
 800b308:	4a49      	ldr	r2, [pc, #292]	; (800b430 <logDeviceConf+0x164>)
 800b30a:	2107      	movs	r1, #7
 800b30c:	4849      	ldr	r0, [pc, #292]	; (800b434 <logDeviceConf+0x168>)
 800b30e:	f004 fe11 	bl	800ff34 <iprintf>
            ""
#endif
    );

#if (__FPU_PRESENT == 1) && __FPU_USED
    mconf = (1 << 16);  /* FPU present and used */
 800b312:	4b49      	ldr	r3, [pc, #292]	; (800b438 <logDeviceConf+0x16c>)
 800b314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b318:	601a      	str	r2, [r3, #0]
#endif

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 800b31a:	f7fc fde1 	bl	8007ee0 <HAL_GetHalVersion>
 800b31e:	4603      	mov	r3, r0
 800b320:	4619      	mov	r1, r3
 800b322:	4846      	ldr	r0, [pc, #280]	; (800b43c <logDeviceConf+0x170>)
 800b324:	f004 fe06 	bl	800ff34 <iprintf>

    val = systemCoreClock()/1000000;
 800b328:	f7ff fe74 	bl	800b014 <systemCoreClock>
 800b32c:	4602      	mov	r2, r0
 800b32e:	4b44      	ldr	r3, [pc, #272]	; (800b440 <logDeviceConf+0x174>)
 800b330:	fba3 2302 	umull	r2, r3, r3, r2
 800b334:	0c9b      	lsrs	r3, r3, #18
 800b336:	603b      	str	r3, [r7, #0]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	4619      	mov	r1, r3
 800b33c:	4841      	ldr	r0, [pc, #260]	; (800b444 <logDeviceConf+0x178>)
 800b33e:	f004 fdf9 	bl	800ff34 <iprintf>
    printf(" SYSCLK clock : %u MHz\r\n", (int)val);
    printf(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);
#endif

#if defined(STM32F7) || defined(STM32H7)
    val = SCB->CCR;
 800b342:	4b41      	ldr	r3, [pc, #260]	; (800b448 <logDeviceConf+0x17c>)
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	603b      	str	r3, [r7, #0]
#if !defined(STM32H7)
    mconf |= (2 << 24);  /* F7 conf. */
 800b348:	4b3b      	ldr	r3, [pc, #236]	; (800b438 <logDeviceConf+0x16c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b350:	4a39      	ldr	r2, [pc, #228]	; (800b438 <logDeviceConf+0x16c>)
 800b352:	6013      	str	r3, [r2, #0]
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f003 020f 	and.w	r2, r3, #15
 800b35a:	4b37      	ldr	r3, [pc, #220]	; (800b438 <logDeviceConf+0x16c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4313      	orrs	r3, r2
 800b360:	4a35      	ldr	r2, [pc, #212]	; (800b438 <logDeviceConf+0x16c>)
 800b362:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <logDeviceConf+0xae>
        mconf |= (1 << 8);
 800b36e:	4b32      	ldr	r3, [pc, #200]	; (800b438 <logDeviceConf+0x16c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b376:	4a30      	ldr	r2, [pc, #192]	; (800b438 <logDeviceConf+0x16c>)
 800b378:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <logDeviceConf+0xc4>
        mconf |= (1 << 9);
 800b384:	4b2c      	ldr	r3, [pc, #176]	; (800b438 <logDeviceConf+0x16c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b38c:	4a2a      	ldr	r2, [pc, #168]	; (800b438 <logDeviceConf+0x16c>)
 800b38e:	6013      	str	r3, [r2, #0]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800b390:	687c      	ldr	r4, [r7, #4]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	0a1b      	lsrs	r3, r3, #8
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff ff76 	bl	800b28c <bitToStr>
 800b3a0:	4605      	mov	r5, r0
            bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	0a5b      	lsrs	r3, r3, #9
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff ff6e 	bl	800b28c <bitToStr>
 800b3b0:	4602      	mov	r2, r0
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 800b3b2:	687b      	ldr	r3, [r7, #4]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800b3b4:	f003 030f 	and.w	r3, r3, #15
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	462a      	mov	r2, r5
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4822      	ldr	r0, [pc, #136]	; (800b44c <logDeviceConf+0x180>)
 800b3c2:	f004 fdb7 	bl	800ff34 <iprintf>
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
            (int)acr,
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#endif
#if !defined(CORE_M4)
    if (val & SCB_CCR_IC_Msk)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d005      	beq.n	800b3dc <logDeviceConf+0x110>
        mconf |= (1 << 10);
 800b3d0:	4b19      	ldr	r3, [pc, #100]	; (800b438 <logDeviceConf+0x16c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3d8:	4a17      	ldr	r2, [pc, #92]	; (800b438 <logDeviceConf+0x16c>)
 800b3da:	6013      	str	r3, [r2, #0]
    if (val & SCB_CCR_DC_Msk)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <logDeviceConf+0x126>
        mconf |= (1 << 11);
 800b3e6:	4b14      	ldr	r3, [pc, #80]	; (800b438 <logDeviceConf+0x16c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3ee:	4a12      	ldr	r2, [pc, #72]	; (800b438 <logDeviceConf+0x16c>)
 800b3f0:	6013      	str	r3, [r2, #0]
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7ff ff47 	bl	800b28c <bitToStr>
 800b3fe:	4604      	mov	r4, r0
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff ff40 	bl	800b28c <bitToStr>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	4621      	mov	r1, r4
 800b412:	480f      	ldr	r0, [pc, #60]	; (800b450 <logDeviceConf+0x184>)
 800b414:	f004 fd8e 	bl	800ff34 <iprintf>
#endif
#if defined(STM32L5)
    printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif
}
 800b418:	bf00      	nop
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bdb0      	pop	{r4, r5, r7, pc}
 800b420:	40023c00 	.word	0x40023c00
 800b424:	080139d4 	.word	0x080139d4
 800b428:	080139f4 	.word	0x080139f4
 800b42c:	08013a28 	.word	0x08013a28
 800b430:	08013a34 	.word	0x08013a34
 800b434:	08013a40 	.word	0x08013a40
 800b438:	200009e8 	.word	0x200009e8
 800b43c:	08013a60 	.word	0x08013a60
 800b440:	431bde83 	.word	0x431bde83
 800b444:	08013a7c 	.word	0x08013a7c
 800b448:	e000ed00 	.word	0xe000ed00
 800b44c:	08013a98 	.word	0x08013a98
 800b450:	08013ad8 	.word	0x08013ad8

0800b454 <disableInts>:

uint32_t disableInts(void)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b45a:	f3ef 8310 	mrs	r3, PRIMASK
 800b45e:	603b      	str	r3, [r7, #0]
  return(result);
 800b460:	683b      	ldr	r3, [r7, #0]
    uint32_t state;

    state = __get_PRIMASK();
 800b462:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800b464:	b672      	cpsid	i
    __disable_irq();

    return state;
 800b466:	687b      	ldr	r3, [r7, #4]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <restoreInts>:

void restoreInts(uint32_t state)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f383 8810 	msr	PRIMASK, r3
   __set_PRIMASK(state);
}
 800b486:	bf00      	nop
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
	...

0800b494 <ioDisableWrite>:
 */

bool _ioWriteAllowed = true;

void ioDisableWrite(void)
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
    _ioWriteAllowed = false;
 800b498:	4b03      	ldr	r3, [pc, #12]	; (800b4a8 <ioDisableWrite+0x14>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	701a      	strb	r2, [r3, #0]
}
 800b49e:	bf00      	nop
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	20000011 	.word	0x20000011

0800b4ac <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	da0d      	bge.n	800b4da <_write+0x2e>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d00a      	beq.n	800b4da <_write+0x2e>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d007      	beq.n	800b4da <_write+0x2e>
        errno = EBADF;
 800b4ca:	f004 fc2f 	bl	800fd2c <__errno>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	2309      	movs	r3, #9
 800b4d2:	6013      	str	r3, [r2, #0]
        return -1;
 800b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d8:	e016      	b.n	800b508 <_write+0x5c>
    }

    if (_ioWriteAllowed)
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <_write+0x64>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <_write+0x4c>
        status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ea:	68b9      	ldr	r1, [r7, #8]
 800b4ec:	4809      	ldr	r0, [pc, #36]	; (800b514 <_write+0x68>)
 800b4ee:	f7fe f9d9 	bl	80098a4 <HAL_UART_Transmit>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]
 800b4f6:	e001      	b.n	800b4fc <_write+0x50>
                HAL_MAX_DELAY);
    else
        status = HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK ? count : 0);
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <_write+0x5a>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	e000      	b.n	800b508 <_write+0x5c>
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20000011 	.word	0x20000011
 800b514:	20000cb4 	.word	0x20000cb4

0800b518 <aiLogErr>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

void aiLogErr(const ai_error err, const char *fct)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
    if (fct)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d009      	beq.n	800b53c <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 800b528:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800b52a:	461a      	mov	r2, r3
                err.type, err.code);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	4808      	ldr	r0, [pc, #32]	; (800b558 <aiLogErr+0x40>)
 800b536:	f004 fcfd 	bl	800ff34 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 800b53a:	e008      	b.n	800b54e <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 800b53c:	793b      	ldrb	r3, [r7, #4]
 800b53e:	4619      	mov	r1, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800b546:	461a      	mov	r2, r3
 800b548:	4804      	ldr	r0, [pc, #16]	; (800b55c <aiLogErr+0x44>)
 800b54a:	f004 fcf3 	bl	800ff34 <iprintf>
}
 800b54e:	bf00      	nop
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	08013af8 	.word	0x08013af8
 800b55c:	08013b20 	.word	0x08013b20

0800b560 <aiBufferSize>:

ai_u32 aiBufferSize(const ai_buffer* buffer)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
    return buffer->height * buffer->width * buffer->channels;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	88db      	ldrh	r3, [r3, #6]
 800b56c:	461a      	mov	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	891b      	ldrh	r3, [r3, #8]
 800b572:	fb03 f302 	mul.w	r3, r3, r2
 800b576:	461a      	mov	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	fb03 f302 	mul.w	r3, r3, r2
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08a      	sub	sp, #40	; 0x28
 800b590:	af02      	add	r7, sp, #8
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	145b      	asrs	r3, r3, #17
 800b59e:	f003 030f 	and.w	r3, r3, #15
 800b5a2:	61fb      	str	r3, [r7, #28]
    printf("%s[%d] ",msg, idx);
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	4897      	ldr	r0, [pc, #604]	; (800b808 <aiPrintLayoutBuffer+0x27c>)
 800b5aa:	f004 fcc3 	bl	800ff34 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	f040 818c 	bne.w	800b8ce <aiPrintLayoutBuffer+0x342>
        printf(" %s%d,",
        		AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf(" %s%d,",
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <aiPrintLayoutBuffer+0x3a>
 800b5c2:	4992      	ldr	r1, [pc, #584]	; (800b80c <aiPrintLayoutBuffer+0x280>)
 800b5c4:	e000      	b.n	800b5c8 <aiPrintLayoutBuffer+0x3c>
 800b5c6:	4992      	ldr	r1, [pc, #584]	; (800b810 <aiPrintLayoutBuffer+0x284>)
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	11db      	asrs	r3, r3, #7
        printf(" %s%d,",
 800b5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	488f      	ldr	r0, [pc, #572]	; (800b814 <aiPrintLayoutBuffer+0x288>)
 800b5d6:	f004 fcad 	bl	800ff34 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 8157 	beq.w	800b892 <aiPrintLayoutBuffer+0x306>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f000 814f 	beq.w	800b892 <aiPrintLayoutBuffer+0x306>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 8149 	beq.w	800b892 <aiPrintLayoutBuffer+0x306>
    		ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d058      	beq.n	800b6ba <aiPrintLayoutBuffer+0x12e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d051      	beq.n	800b6ba <aiPrintLayoutBuffer+0x12e>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d04c      	beq.n	800b6ba <aiPrintLayoutBuffer+0x12e>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d045      	beq.n	800b6b4 <aiPrintLayoutBuffer+0x128>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d03e      	beq.n	800b6b4 <aiPrintLayoutBuffer+0x128>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d039      	beq.n	800b6b4 <aiPrintLayoutBuffer+0x128>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00a      	beq.n	800b65e <aiPrintLayoutBuffer+0xd2>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <aiPrintLayoutBuffer+0xd2>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	e000      	b.n	800b660 <aiPrintLayoutBuffer+0xd4>
 800b65e:	2300      	movs	r3, #0
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d026      	beq.n	800b6b4 <aiPrintLayoutBuffer+0x128>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00a      	beq.n	800b684 <aiPrintLayoutBuffer+0xf8>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <aiPrintLayoutBuffer+0xf8>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	e000      	b.n	800b686 <aiPrintLayoutBuffer+0xfa>
 800b684:	2300      	movs	r3, #0
 800b686:	885b      	ldrh	r3, [r3, #2]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d013      	beq.n	800b6b4 <aiPrintLayoutBuffer+0x128>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00a      	beq.n	800b6aa <aiPrintLayoutBuffer+0x11e>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d003      	beq.n	800b6aa <aiPrintLayoutBuffer+0x11e>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	e000      	b.n	800b6ac <aiPrintLayoutBuffer+0x120>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	e004      	b.n	800b6be <aiPrintLayoutBuffer+0x132>
 800b6b4:	f04f 0300 	mov.w	r3, #0
 800b6b8:	e001      	b.n	800b6be <aiPrintLayoutBuffer+0x132>
 800b6ba:	f04f 0300 	mov.w	r3, #0
 800b6be:	61bb      	str	r3, [r7, #24]
    		int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 80d6 	beq.w	800b876 <aiPrintLayoutBuffer+0x2ea>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80ce 	beq.w	800b876 <aiPrintLayoutBuffer+0x2ea>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 80c8 	beq.w	800b876 <aiPrintLayoutBuffer+0x2ea>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d06c      	beq.n	800b7c8 <aiPrintLayoutBuffer+0x23c>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0301 	and.w	r3, r3, #1
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d065      	beq.n	800b7c8 <aiPrintLayoutBuffer+0x23c>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d060      	beq.n	800b7c8 <aiPrintLayoutBuffer+0x23c>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00a      	beq.n	800b724 <aiPrintLayoutBuffer+0x198>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <aiPrintLayoutBuffer+0x198>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	e000      	b.n	800b726 <aiPrintLayoutBuffer+0x19a>
 800b724:	2300      	movs	r3, #0
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	f003 0302 	and.w	r3, r3, #2
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d04b      	beq.n	800b7c8 <aiPrintLayoutBuffer+0x23c>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d045      	beq.n	800b7c4 <aiPrintLayoutBuffer+0x238>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	d03e      	beq.n	800b7c4 <aiPrintLayoutBuffer+0x238>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d039      	beq.n	800b7c4 <aiPrintLayoutBuffer+0x238>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00a      	beq.n	800b76e <aiPrintLayoutBuffer+0x1e2>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <aiPrintLayoutBuffer+0x1e2>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	e000      	b.n	800b770 <aiPrintLayoutBuffer+0x1e4>
 800b76e:	2300      	movs	r3, #0
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d026      	beq.n	800b7c4 <aiPrintLayoutBuffer+0x238>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00a      	beq.n	800b794 <aiPrintLayoutBuffer+0x208>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <aiPrintLayoutBuffer+0x208>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	e000      	b.n	800b796 <aiPrintLayoutBuffer+0x20a>
 800b794:	2300      	movs	r3, #0
 800b796:	885b      	ldrh	r3, [r3, #2]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d013      	beq.n	800b7c4 <aiPrintLayoutBuffer+0x238>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00a      	beq.n	800b7ba <aiPrintLayoutBuffer+0x22e>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <aiPrintLayoutBuffer+0x22e>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	e000      	b.n	800b7bc <aiPrintLayoutBuffer+0x230>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	e057      	b.n	800b874 <aiPrintLayoutBuffer+0x2e8>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e055      	b.n	800b874 <aiPrintLayoutBuffer+0x2e8>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d04f      	beq.n	800b870 <aiPrintLayoutBuffer+0x2e4>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d048      	beq.n	800b870 <aiPrintLayoutBuffer+0x2e4>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d043      	beq.n	800b870 <aiPrintLayoutBuffer+0x2e4>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d013      	beq.n	800b818 <aiPrintLayoutBuffer+0x28c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00c      	beq.n	800b818 <aiPrintLayoutBuffer+0x28c>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	e009      	b.n	800b81a <aiPrintLayoutBuffer+0x28e>
 800b806:	bf00      	nop
 800b808:	08013b40 	.word	0x08013b40
 800b80c:	08013b48 	.word	0x08013b48
 800b810:	08013b4c 	.word	0x08013b4c
 800b814:	08013b50 	.word	0x08013b50
 800b818:	2300      	movs	r3, #0
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d027      	beq.n	800b870 <aiPrintLayoutBuffer+0x2e4>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <aiPrintLayoutBuffer+0x2b2>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <aiPrintLayoutBuffer+0x2b2>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	e000      	b.n	800b840 <aiPrintLayoutBuffer+0x2b4>
 800b83e:	2300      	movs	r3, #0
 800b840:	885b      	ldrh	r3, [r3, #2]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d014      	beq.n	800b870 <aiPrintLayoutBuffer+0x2e4>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <aiPrintLayoutBuffer+0x2d8>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <aiPrintLayoutBuffer+0x2d8>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	e000      	b.n	800b866 <aiPrintLayoutBuffer+0x2da>
 800b864:	2300      	movs	r3, #0
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	f993 3000 	ldrsb.w	r3, [r3]
 800b86e:	e001      	b.n	800b874 <aiPrintLayoutBuffer+0x2e8>
 800b870:	2300      	movs	r3, #0
 800b872:	e001      	b.n	800b878 <aiPrintLayoutBuffer+0x2ec>
 800b874:	e000      	b.n	800b878 <aiPrintLayoutBuffer+0x2ec>
 800b876:	2300      	movs	r3, #0
 800b878:	617b      	str	r3, [r7, #20]
    		printf(" scale=%f, zero=%d,", (float)scale, (int)zero_point);
 800b87a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b87e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	ec53 2b17 	vmov	r2, r3, d7
 800b88a:	4833      	ldr	r0, [pc, #204]	; (800b958 <aiPrintLayoutBuffer+0x3cc>)
 800b88c:	f004 fb52 	bl	800ff34 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800b890:	e02d      	b.n	800b8ee <aiPrintLayoutBuffer+0x362>
    	} else {
    		printf("Q%d.%d,",
    				(int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	11db      	asrs	r3, r3, #7
 800b898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
					- ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
					(int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	15db      	asrs	r3, r3, #23
 800b8b0:	f003 0301 	and.w	r3, r3, #1
					- ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800b8b4:	440b      	add	r3, r1
    		printf("Q%d.%d,",
 800b8b6:	1ad1      	subs	r1, r2, r3
					AI_BUFFER_FMT_GET_FBITS(buffer->format));
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    		printf("Q%d.%d,",
 800b8c2:	3b40      	subs	r3, #64	; 0x40
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4825      	ldr	r0, [pc, #148]	; (800b95c <aiPrintLayoutBuffer+0x3d0>)
 800b8c8:	f004 fb34 	bl	800ff34 <iprintf>
 800b8cc:	e00f      	b.n	800b8ee <aiPrintLayoutBuffer+0x362>
    	}
    }
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d109      	bne.n	800b8e8 <aiPrintLayoutBuffer+0x35c>
        printf(" float%d,",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	11db      	asrs	r3, r3, #7
        printf(" float%d,",
 800b8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8de:	4619      	mov	r1, r3
 800b8e0:	481f      	ldr	r0, [pc, #124]	; (800b960 <aiPrintLayoutBuffer+0x3d4>)
 800b8e2:	f004 fb27 	bl	800ff34 <iprintf>
 800b8e6:	e002      	b.n	800b8ee <aiPrintLayoutBuffer+0x362>
    else
        printf("NONE");
 800b8e8:	481e      	ldr	r0, [pc, #120]	; (800b964 <aiPrintLayoutBuffer+0x3d8>)
 800b8ea:	f004 fb23 	bl	800ff34 <iprintf>
    printf(" %ld bytes, shape=(%d,%d,%ld)",
    		AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	891b      	ldrh	r3, [r3, #8]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	88db      	ldrh	r3, [r3, #6]
 800b8f8:	fb03 f302 	mul.w	r3, r3, r2
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	fb03 f302 	mul.w	r3, r3, r2
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	6812      	ldr	r2, [r2, #0]
 800b90a:	11d2      	asrs	r2, r2, #7
 800b90c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b910:	fb02 f303 	mul.w	r3, r2, r3
 800b914:	3304      	adds	r3, #4
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800b916:	08d9      	lsrs	r1, r3, #3
			buffer->height, buffer->width, buffer->channels);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	88db      	ldrh	r3, [r3, #6]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800b91c:	461a      	mov	r2, r3
			buffer->height, buffer->width, buffer->channels);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	891b      	ldrh	r3, [r3, #8]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800b922:	4618      	mov	r0, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	4603      	mov	r3, r0
 800b92c:	480e      	ldr	r0, [pc, #56]	; (800b968 <aiPrintLayoutBuffer+0x3dc>)
 800b92e:	f004 fb01 	bl	800ff34 <iprintf>
    if (buffer->data)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d006      	beq.n	800b948 <aiPrintLayoutBuffer+0x3bc>
    	printf(" (@0x%08x)\r\n", (int)buffer->data);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	4619      	mov	r1, r3
 800b940:	480a      	ldr	r0, [pc, #40]	; (800b96c <aiPrintLayoutBuffer+0x3e0>)
 800b942:	f004 faf7 	bl	800ff34 <iprintf>
    else
    	printf("\r\n");
}
 800b946:	e002      	b.n	800b94e <aiPrintLayoutBuffer+0x3c2>
    	printf("\r\n");
 800b948:	4809      	ldr	r0, [pc, #36]	; (800b970 <aiPrintLayoutBuffer+0x3e4>)
 800b94a:	f004 fb7b 	bl	8010044 <puts>
}
 800b94e:	bf00      	nop
 800b950:	3720      	adds	r7, #32
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	08013b58 	.word	0x08013b58
 800b95c:	08013b6c 	.word	0x08013b6c
 800b960:	08013b74 	.word	0x08013b74
 800b964:	08013b80 	.word	0x08013b80
 800b968:	08013b88 	.word	0x08013b88
 800b96c:	08013ba8 	.word	0x08013ba8
 800b970:	08013bb8 	.word	0x08013bb8

0800b974 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af02      	add	r7, sp, #8
 800b97a:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network configuration...\r\n");
 800b97c:	484d      	ldr	r0, [pc, #308]	; (800bab4 <aiPrintNetworkInfo+0x140>)
 800b97e:	f004 fb61 	bl	8010044 <puts>
    printf(" Model name         : %s\r\n", report->model_name);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4619      	mov	r1, r3
 800b988:	484b      	ldr	r0, [pc, #300]	; (800bab8 <aiPrintNetworkInfo+0x144>)
 800b98a:	f004 fad3 	bl	800ff34 <iprintf>
    printf(" Model signature    : %s\r\n", report->model_signature);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	4619      	mov	r1, r3
 800b994:	4849      	ldr	r0, [pc, #292]	; (800babc <aiPrintNetworkInfo+0x148>)
 800b996:	f004 facd 	bl	800ff34 <iprintf>
    printf(" Model datetime     : %s\r\n", report->model_datetime);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4847      	ldr	r0, [pc, #284]	; (800bac0 <aiPrintNetworkInfo+0x14c>)
 800b9a2:	f004 fac7 	bl	800ff34 <iprintf>
    printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4845      	ldr	r0, [pc, #276]	; (800bac4 <aiPrintNetworkInfo+0x150>)
 800b9ae:	f004 fac1 	bl	800ff34 <iprintf>
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6919      	ldr	r1, [r3, #16]
            report->runtime_version.major,
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	7d1b      	ldrb	r3, [r3, #20]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800b9ba:	461a      	mov	r2, r3
            report->runtime_version.minor,
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7d5b      	ldrb	r3, [r3, #21]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800b9c0:	4618      	mov	r0, r3
            report->runtime_version.micro);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	7d9b      	ldrb	r3, [r3, #22]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	483f      	ldr	r0, [pc, #252]	; (800bac8 <aiPrintNetworkInfo+0x154>)
 800b9cc:	f004 fab2 	bl	800ff34 <iprintf>
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6999      	ldr	r1, [r3, #24]
            report->tool_version.major,
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	7f1b      	ldrb	r3, [r3, #28]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800b9d8:	461a      	mov	r2, r3
            report->tool_version.minor,
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	7f5b      	ldrb	r3, [r3, #29]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800b9de:	4618      	mov	r0, r3
            report->tool_version.micro);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	7f9b      	ldrb	r3, [r3, #30]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4838      	ldr	r0, [pc, #224]	; (800bacc <aiPrintNetworkInfo+0x158>)
 800b9ea:	f004 faa3 	bl	800ff34 <iprintf>
    printf("Network info...\r\n");
 800b9ee:	4838      	ldr	r0, [pc, #224]	; (800bad0 <aiPrintNetworkInfo+0x15c>)
 800b9f0:	f004 fb28 	bl	8010044 <puts>
    printf("  nodes             : %ld\r\n", report->n_nodes);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4836      	ldr	r0, [pc, #216]	; (800bad4 <aiPrintNetworkInfo+0x160>)
 800b9fc:	f004 fa9a 	bl	800ff34 <iprintf>
    printf("  complexity        : %ld MACC\r\n", report->n_macc);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4619      	mov	r1, r3
 800ba06:	4834      	ldr	r0, [pc, #208]	; (800bad8 <aiPrintNetworkInfo+0x164>)
 800ba08:	f004 fa94 	bl	800ff34 <iprintf>
    printf("  activation        : %ld bytes\r\n",
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	333c      	adds	r3, #60	; 0x3c
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fda5 	bl	800b560 <aiBufferSize>
 800ba16:	4603      	mov	r3, r0
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4830      	ldr	r0, [pc, #192]	; (800badc <aiPrintNetworkInfo+0x168>)
 800ba1c:	f004 fa8a 	bl	800ff34 <iprintf>
            aiBufferSize(&report->activations));
    printf("  params            : %ld bytes\r\n",
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3354      	adds	r3, #84	; 0x54
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fd9b 	bl	800b560 <aiBufferSize>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	482c      	ldr	r0, [pc, #176]	; (800bae0 <aiPrintNetworkInfo+0x16c>)
 800ba30:	f004 fa80 	bl	800ff34 <iprintf>
            aiBufferSize(&report->params));
    printf("  inputs/outputs    : %u/%u\r\n",
            report->n_inputs, report->n_outputs);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    printf("  inputs/outputs    : %u/%u\r\n",
 800ba38:	4619      	mov	r1, r3
            report->n_inputs, report->n_outputs);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf("  inputs/outputs    : %u/%u\r\n",
 800ba3e:	461a      	mov	r2, r3
 800ba40:	4828      	ldr	r0, [pc, #160]	; (800bae4 <aiPrintNetworkInfo+0x170>)
 800ba42:	f004 fa77 	bl	800ff34 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 800ba46:	2300      	movs	r3, #0
 800ba48:	60fb      	str	r3, [r7, #12]
 800ba4a:	e00f      	b.n	800ba6c <aiPrintNetworkInfo+0xf8>
        aiPrintLayoutBuffer("   I", i, &report->inputs[i]);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	440b      	add	r3, r1
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	68f9      	ldr	r1, [r7, #12]
 800ba60:	4821      	ldr	r0, [pc, #132]	; (800bae8 <aiPrintNetworkInfo+0x174>)
 800ba62:	f7ff fd93 	bl	800b58c <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba70:	461a      	mov	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4293      	cmp	r3, r2
 800ba76:	dbe9      	blt.n	800ba4c <aiPrintNetworkInfo+0xd8>
    for (i=0; i<report->n_outputs; i++)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	e00f      	b.n	800ba9e <aiPrintNetworkInfo+0x12a>
        aiPrintLayoutBuffer("   O", i, &report->outputs[i]);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	4613      	mov	r3, r2
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	4413      	add	r3, r2
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	440b      	add	r3, r1
 800ba8e:	461a      	mov	r2, r3
 800ba90:	68f9      	ldr	r1, [r7, #12]
 800ba92:	4816      	ldr	r0, [pc, #88]	; (800baec <aiPrintNetworkInfo+0x178>)
 800ba94:	f7ff fd7a 	bl	800b58c <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baa2:	461a      	mov	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4293      	cmp	r3, r2
 800baa8:	dbe9      	blt.n	800ba7e <aiPrintNetworkInfo+0x10a>
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	08013bbc 	.word	0x08013bbc
 800bab8:	08013bd8 	.word	0x08013bd8
 800babc:	08013bf4 	.word	0x08013bf4
 800bac0:	08013c10 	.word	0x08013c10
 800bac4:	08013c2c 	.word	0x08013c2c
 800bac8:	08013c48 	.word	0x08013c48
 800bacc:	08013c70 	.word	0x08013c70
 800bad0:	08013c98 	.word	0x08013c98
 800bad4:	08013cac 	.word	0x08013cac
 800bad8:	08013cc8 	.word	0x08013cc8
 800badc:	08013cec 	.word	0x08013cec
 800bae0:	08013d10 	.word	0x08013d10
 800bae4:	08013d34 	.word	0x08013d34
 800bae8:	08013d54 	.word	0x08013d54
 800baec:	08013d5c 	.word	0x08013d5c

0800baf0 <aiTestHeader>:
 * Test-related functions
 * -----------------------------------------------------------------------------
 */

void aiTestHeader(const char* tname, int major, int minor)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
    printf("\r\n#\r\n");
 800bafc:	480a      	ldr	r0, [pc, #40]	; (800bb28 <aiTestHeader+0x38>)
 800bafe:	f004 faa1 	bl	8010044 <puts>
    printf("# %s %d.%d\r\n", tname , major, minor);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	4808      	ldr	r0, [pc, #32]	; (800bb2c <aiTestHeader+0x3c>)
 800bb0a:	f004 fa13 	bl	800ff34 <iprintf>
    printf("#\r\n");
 800bb0e:	4808      	ldr	r0, [pc, #32]	; (800bb30 <aiTestHeader+0x40>)
 800bb10:	f004 fa98 	bl	8010044 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800bb14:	2301      	movs	r3, #1
 800bb16:	2203      	movs	r2, #3
 800bb18:	2107      	movs	r1, #7
 800bb1a:	4806      	ldr	r0, [pc, #24]	; (800bb34 <aiTestHeader+0x44>)
 800bb1c:	f004 fa0a 	bl	800ff34 <iprintf>
            __BUILD_NUMBER__
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif
}
 800bb20:	bf00      	nop
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	08013d64 	.word	0x08013d64
 800bb2c:	08013d6c 	.word	0x08013d6c
 800bb30:	08013d7c 	.word	0x08013d7c
 800bb34:	08013d80 	.word	0x08013d80

0800bb38 <write_packet>:
static struct o_packet {
    uint8_t pw;
    uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)&o_packet,
 800bb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb42:	2221      	movs	r2, #33	; 0x21
 800bb44:	4907      	ldr	r1, [pc, #28]	; (800bb64 <write_packet+0x2c>)
 800bb46:	4808      	ldr	r0, [pc, #32]	; (800bb68 <write_packet+0x30>)
 800bb48:	f7fd feac 	bl	80098a4 <HAL_UART_Transmit>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_IN_SIZE + 1,
            HAL_MAX_DELAY);

    return (status == HAL_OK);
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2300      	movne	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	200009ec 	.word	0x200009ec
 800bb68:	20000cb4 	.word	0x20000cb4

0800bb6c <ioFlushWrite>:

void ioFlushWrite(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0
    o_packet.pw |= (1 << 7); /* Indicate last packet */
 800bb70:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <ioFlushWrite+0x20>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	4b04      	ldr	r3, [pc, #16]	; (800bb8c <ioFlushWrite+0x20>)
 800bb7c:	701a      	strb	r2, [r3, #0]
    write_packet();
 800bb7e:	f7ff ffdb 	bl	800bb38 <write_packet>
    o_packet.pw = 0;
 800bb82:	4b02      	ldr	r3, [pc, #8]	; (800bb8c <ioFlushWrite+0x20>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
}
 800bb88:	bf00      	nop
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	200009ec 	.word	0x200009ec

0800bb90 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
        size_t count)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
    bool res = true;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	75fb      	strb	r3, [r7, #23]
    uint8_t *pr = (uint8_t *)buf;
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	613b      	str	r3, [r7, #16]

    UNUSED(stream);

    while (count) {
 800bba4:	e025      	b.n	800bbf2 <write_callback+0x62>
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
            o_packet.payload[o_packet.pw] = *pr;
 800bba6:	4b17      	ldr	r3, [pc, #92]	; (800bc04 <write_callback+0x74>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	781a      	ldrb	r2, [r3, #0]
 800bbb0:	4b14      	ldr	r3, [pc, #80]	; (800bc04 <write_callback+0x74>)
 800bbb2:	440b      	add	r3, r1
 800bbb4:	705a      	strb	r2, [r3, #1]
            pr++;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	613b      	str	r3, [r7, #16]
            count--;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	607b      	str	r3, [r7, #4]
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800bbc2:	4b10      	ldr	r3, [pc, #64]	; (800bc04 <write_callback+0x74>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	4b0e      	ldr	r3, [pc, #56]	; (800bc04 <write_callback+0x74>)
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <write_callback+0x74>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b1f      	cmp	r3, #31
 800bbd4:	d802      	bhi.n	800bbdc <write_callback+0x4c>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e4      	bne.n	800bba6 <write_callback+0x16>
        }
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <write_callback+0x74>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b20      	cmp	r3, #32
 800bbe2:	d106      	bne.n	800bbf2 <write_callback+0x62>
                res = write_packet();
 800bbe4:	f7ff ffa8 	bl	800bb38 <write_packet>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75fb      	strb	r3, [r7, #23]
                o_packet.pw = 0;
 800bbec:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <write_callback+0x74>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
    while (count) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1ea      	bne.n	800bbce <write_callback+0x3e>
        }
    }
    return res;
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	200009ec 	.word	0x200009ec

0800bc08 <read_packet>:
    uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)&i_packet,
 800bc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc12:	2221      	movs	r2, #33	; 0x21
 800bc14:	4909      	ldr	r1, [pc, #36]	; (800bc3c <read_packet+0x34>)
 800bc16:	480a      	ldr	r0, [pc, #40]	; (800bc40 <read_packet+0x38>)
 800bc18:	f7fd fed5 	bl	80099c6 <HAL_UART_Receive>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_OUT_SIZE + 1,
            HAL_MAX_DELAY);

    i_ridx = 0;
 800bc20:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <read_packet+0x3c>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]

    return (status == HAL_OK);
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	bf0c      	ite	eq
 800bc2c:	2301      	moveq	r3, #1
 800bc2e:	2300      	movne	r3, #0
 800bc30:	b2db      	uxtb	r3, r3
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000a10 	.word	0x20000a10
 800bc40:	20000cb4 	.word	0x20000cb4
 800bc44:	20000a34 	.word	0x20000a34

0800bc48 <ioFlushRead>:

void ioFlushRead(void)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	af00      	add	r7, sp, #0
    i_packet.pr = 0xFF;
 800bc4c:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <ioFlushRead+0x1c>)
 800bc4e:	22ff      	movs	r2, #255	; 0xff
 800bc50:	701a      	strb	r2, [r3, #0]
    i_ridx = 0;
 800bc52:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <ioFlushRead+0x20>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]
}
 800bc58:	bf00      	nop
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	20000a10 	.word	0x20000a10
 800bc68:	20000a34 	.word	0x20000a34

0800bc6c <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
    bool res = true;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	77fb      	strb	r3, [r7, #31]
    uint8_t *pw = (uint8_t *)buf;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	61bb      	str	r3, [r7, #24]

    UNUSED(stream);

    if (count == 0)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <read_callback+0x1e>
        return true;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e045      	b.n	800bd16 <read_callback+0xaa>

    if (i_packet.pr == 0xFF)
 800bc8a:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <read_callback+0xb4>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2bff      	cmp	r3, #255	; 0xff
 800bc90:	d103      	bne.n	800bc9a <read_callback+0x2e>
        res = read_packet();
 800bc92:	f7ff ffb9 	bl	800bc08 <read_packet>
 800bc96:	4603      	mov	r3, r0
 800bc98:	77fb      	strb	r3, [r7, #31]

    if (res == false)
 800bc9a:	7ffb      	ldrb	r3, [r7, #31]
 800bc9c:	f083 0301 	eor.w	r3, r3, #1
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d033      	beq.n	800bd0e <read_callback+0xa2>
        return res;
 800bca6:	7ffb      	ldrb	r3, [r7, #31]
 800bca8:	e035      	b.n	800bd16 <read_callback+0xaa>

    while (count) {
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
            *pw = i_packet.payload[i_ridx];
 800bcaa:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <read_callback+0xb8>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a1c      	ldr	r2, [pc, #112]	; (800bd20 <read_callback+0xb4>)
 800bcb0:	4413      	add	r3, r2
 800bcb2:	785a      	ldrb	r2, [r3, #1]
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	701a      	strb	r2, [r3, #0]
            pw++;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	61bb      	str	r3, [r7, #24]
            count--;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	607b      	str	r3, [r7, #4]
            i_ridx++;
 800bcc4:	4b17      	ldr	r3, [pc, #92]	; (800bd24 <read_callback+0xb8>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	4a16      	ldr	r2, [pc, #88]	; (800bd24 <read_callback+0xb8>)
 800bccc:	6013      	str	r3, [r2, #0]
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800bcce:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <read_callback+0xb4>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <read_callback+0xb4>)
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	4b11      	ldr	r3, [pc, #68]	; (800bd20 <read_callback+0xb4>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <read_callback+0x7c>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1e0      	bne.n	800bcaa <read_callback+0x3e>
        }
        if (count && i_packet.pr == 0) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00f      	beq.n	800bd0e <read_callback+0xa2>
 800bcee:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <read_callback+0xb4>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <read_callback+0xa2>
            uint8_t sync = 0xAA;
 800bcf6:	23aa      	movs	r3, #170	; 0xaa
 800bcf8:	75fb      	strb	r3, [r7, #23]
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 800bcfa:	f107 0117 	add.w	r1, r7, #23
 800bcfe:	f04f 33ff 	mov.w	r3, #4294967295
 800bd02:	2201      	movs	r2, #1
 800bd04:	4808      	ldr	r0, [pc, #32]	; (800bd28 <read_callback+0xbc>)
 800bd06:	f7fd fdcd 	bl	80098a4 <HAL_UART_Transmit>
                        HAL_MAX_DELAY);
            read_packet();
 800bd0a:	f7ff ff7d 	bl	800bc08 <read_packet>
    while (count) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e2      	bne.n	800bcda <read_callback+0x6e>
        }
    }

    return res;
 800bd14:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3720      	adds	r7, #32
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20000a10 	.word	0x20000a10
 800bd24:	20000a34 	.word	0x20000a34
 800bd28:	20000cb4 	.word	0x20000cb4

0800bd2c <pb_ostream_to_uart>:
}
#endif


pb_ostream_t pb_ostream_to_uart(int fd)
{
 800bd2c:	b4b0      	push	{r4, r5, r7}
 800bd2e:	b089      	sub	sp, #36	; 0x24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 800bd36:	f107 030c 	add.w	r3, r7, #12
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	605a      	str	r2, [r3, #4]
 800bd40:	609a      	str	r2, [r3, #8]
 800bd42:	60da      	str	r2, [r3, #12]
 800bd44:	611a      	str	r2, [r3, #16]
 800bd46:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <pb_ostream_to_uart+0x44>)
 800bd48:	60fb      	str	r3, [r7, #12]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd52:	617b      	str	r3, [r7, #20]
    return stream;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	461d      	mov	r5, r3
 800bd58:	f107 040c 	add.w	r4, r7, #12
 800bd5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	602b      	str	r3, [r5, #0]
}
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	3724      	adds	r7, #36	; 0x24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bcb0      	pop	{r4, r5, r7}
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	0800bb91 	.word	0x0800bb91

0800bd74 <pb_istream_from_uart>:

pb_istream_t pb_istream_from_uart(int fd)
{
 800bd74:	b490      	push	{r4, r7}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	605a      	str	r2, [r3, #4]
 800bd88:	609a      	str	r2, [r3, #8]
 800bd8a:	60da      	str	r2, [r3, #12]
 800bd8c:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <pb_istream_from_uart+0x40>)
 800bd8e:	60bb      	str	r3, [r7, #8]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	613b      	str	r3, [r7, #16]
    return stream;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	461c      	mov	r4, r3
 800bd9e:	f107 0308 	add.w	r3, r7, #8
 800bda2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bda4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bc90      	pop	{r4, r7}
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	0800bc6d 	.word	0x0800bc6d

0800bdb8 <aiOnExecNode_cb>:
DEF_DATA_OUT;

#ifdef HAS_INSPECTOR
static void aiOnExecNode_cb(const ai_handle cookie,
        const ai_inspect_node_info* node_info,
        ai_node_exec_stage stage) {
 800bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbc:	b08a      	sub	sp, #40	; 0x28
 800bdbe:	af02      	add	r7, sp, #8
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	71fb      	strb	r3, [r7, #7]

    struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	61bb      	str	r3, [r7, #24]

    if (stage == AI_NODE_EXEC_PRE_FORWARD_STAGE) {
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d117      	bne.n	800be02 <aiOnExecNode_cb+0x4a>
        ctx->n_cb_in++;
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        ctx->tcom += dwtGetCycles();
 800bde0:	f7ff f90c 	bl	800affc <dwtGetCycles>
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	e9d3 123a 	ldrd	r1, r2, [r3, #232]	; 0xe8
 800bdea:	4605      	mov	r5, r0
 800bdec:	f04f 0600 	mov.w	r6, #0
 800bdf0:	186b      	adds	r3, r5, r1
 800bdf2:	eb46 0402 	adc.w	r4, r6, r2
 800bdf6:	69ba      	ldr	r2, [r7, #24]
 800bdf8:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
        dwtReset();
 800bdfc:	f7ff f8f2 	bl	800afe4 <dwtReset>
                type | node_info->type,
                node_info->id,
                dwtCyclesToFloatMs(dur),
                &node_info->out[0]);
    }
}
 800be00:	e058      	b.n	800beb4 <aiOnExecNode_cb+0xfc>
    } else if (stage == AI_NODE_EXEC_POST_FORWARD_STAGE) {
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d155      	bne.n	800beb4 <aiOnExecNode_cb+0xfc>
        uint32_t dur = dwtGetCycles();
 800be08:	f7ff f8f8 	bl	800affc <dwtGetCycles>
 800be0c:	6178      	str	r0, [r7, #20]
        dwtReset();
 800be0e:	f7ff f8e9 	bl	800afe4 <dwtReset>
        ctx->tnodes += dur;
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	e9d3 123c 	ldrd	r1, r2, [r3, #240]	; 0xf0
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	461d      	mov	r5, r3
 800be1c:	f04f 0600 	mov.w	r6, #0
 800be20:	186b      	adds	r3, r5, r1
 800be22:	eb46 0402 	adc.w	r4, r6, r2
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
        ctx->n_cb_out++;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        if (ctx->n_cb_out == ctx->report.n_nodes)
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be44:	429a      	cmp	r2, r3
 800be46:	d102      	bne.n	800be4e <aiOnExecNode_cb+0x96>
            type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 800be48:	2302      	movs	r3, #2
 800be4a:	61fb      	str	r3, [r7, #28]
 800be4c:	e001      	b.n	800be52 <aiOnExecNode_cb+0x9a>
            type = EnumLayerType_LAYER_TYPE_INTERNAL;
 800be4e:	2301      	movs	r3, #1
 800be50:	61fb      	str	r3, [r7, #28]
        type = type << 16;
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	041b      	lsls	r3, r3, #16
 800be56:	61fb      	str	r3, [r7, #28]
        if (ctx->no_data)
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <aiOnExecNode_cb+0xb2>
            type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be68:	61fb      	str	r3, [r7, #28]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	f8d3 50d8 	ldr.w	r5, [r3, #216]	; 0xd8
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	f8d3 60dc 	ldr.w	r6, [r3, #220]	; 0xdc
                type | node_info->type,
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	ea42 0803 	orr.w	r8, r2, r3
                node_info->id,
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	885b      	ldrh	r3, [r3, #2]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800be86:	603b      	str	r3, [r7, #0]
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f04f 0400 	mov.w	r4, #0
 800be8e:	4618      	mov	r0, r3
 800be90:	4621      	mov	r1, r4
 800be92:	f7ff f8c7 	bl	800b024 <dwtCyclesToFloatMs>
 800be96:	eef0 7a40 	vmov.f32	s15, s0
                &node_info->out[0]);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	695b      	ldr	r3, [r3, #20]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	eeb0 0a67 	vmov.f32	s0, s15
 800bea8:	4643      	mov	r3, r8
 800beaa:	2202      	movs	r2, #2
 800beac:	4631      	mov	r1, r6
 800beae:	4628      	mov	r0, r5
 800beb0:	f7fe fde4 	bl	800aa7c <aiPbMgrSendAiBuffer3>
}
 800beb4:	bf00      	nop
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bec0 <aiExecCtx>:
#endif


static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 800bec0:	b590      	push	{r4, r7, lr}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
    struct ai_network_exec_ctx *cur = NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]

    if (!nn_name)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <aiExecCtx+0x18>
        return NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	e048      	b.n	800bf6a <aiExecCtx+0xaa>

    if (!nn_name[0]) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10e      	bne.n	800befe <aiExecCtx+0x3e>
        if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER))
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	db40      	blt.n	800bf68 <aiExecCtx+0xa8>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dc3d      	bgt.n	800bf68 <aiExecCtx+0xa8>
            cur = &net_exec_ctx[pos];
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	4613      	mov	r3, r2
 800bef0:	015b      	lsls	r3, r3, #5
 800bef2:	1a9b      	subs	r3, r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	4a1f      	ldr	r2, [pc, #124]	; (800bf74 <aiExecCtx+0xb4>)
 800bef8:	4413      	add	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	e034      	b.n	800bf68 <aiExecCtx+0xa8>
    } else {
        int idx;
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800befe:	2300      	movs	r3, #0
 800bf00:	60bb      	str	r3, [r7, #8]
 800bf02:	e02c      	b.n	800bf5e <aiExecCtx+0x9e>
            cur = &net_exec_ctx[idx];
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	4613      	mov	r3, r2
 800bf08:	015b      	lsls	r3, r3, #5
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	4a19      	ldr	r2, [pc, #100]	; (800bf74 <aiExecCtx+0xb4>)
 800bf10:	4413      	add	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
            if (cur->network &&
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01b      	beq.n	800bf54 <aiExecCtx+0x94>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fa ffa0 	bl	8006e66 <strlen>
 800bf26:	4604      	mov	r4, r0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7fa ff9c 	bl	8006e66 <strlen>
 800bf2e:	4603      	mov	r3, r0
            if (cur->network &&
 800bf30:	429c      	cmp	r4, r3
 800bf32:	d10f      	bne.n	800bf54 <aiExecCtx+0x94>
                    (strncmp(cur->report.model_name, nn_name,
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	685c      	ldr	r4, [r3, #4]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fa ff92 	bl	8006e66 <strlen>
 800bf42:	4603      	mov	r3, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	6879      	ldr	r1, [r7, #4]
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f004 f89b 	bl	8010084 <strncmp>
 800bf4e:	4603      	mov	r3, r0
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <aiExecCtx+0xa6>
                            strlen(cur->report.model_name)) == 0)) {
                break;
            }
            cur = NULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	60bb      	str	r3, [r7, #8]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	ddcf      	ble.n	800bf04 <aiExecCtx+0x44>
 800bf64:	e000      	b.n	800bf68 <aiExecCtx+0xa8>
                break;
 800bf66:	bf00      	nop
        }
    }
    return cur;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd90      	pop	{r4, r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20000a38 	.word	0x20000a38

0800bf78 <aiSetPbContext>:

__STATIC_INLINE
void aiSetPbContext(struct ai_network_exec_ctx *ctx,
        const reqMsg *creq, respMsg *cresp)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d008      	beq.n	800bf9c <aiSetPbContext+0x24>
        return;

    ctx->creq = creq;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    ctx->cresp = cresp;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800bf9a:	e000      	b.n	800bf9e <aiSetPbContext+0x26>
        return;
 800bf9c:	bf00      	nop
#endif
}
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b092      	sub	sp, #72	; 0x48
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
    ai_error err;
    ai_u32 ext_addr, sz;

    /* Creating the network */
    printf("Creating the network \"%s\"..\r\n", nn_name);
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	4879      	ldr	r0, [pc, #484]	; (800c19c <aiBootstrap+0x1f4>)
 800bfb6:	f003 ffbd 	bl	800ff34 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].network, NULL);
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	015b      	lsls	r3, r3, #5
 800bfc0:	1a9b      	subs	r3, r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4a76      	ldr	r2, [pc, #472]	; (800c1a0 <aiBootstrap+0x1f8>)
 800bfc6:	4413      	add	r3, r2
 800bfc8:	2200      	movs	r2, #0
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fda5 	bl	800cb1c <ai_mnetwork_create>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	647b      	str	r3, [r7, #68]	; 0x44
    if (err.type) {
 800bfd6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d006      	beq.n	800bfec <aiBootstrap+0x44>
        aiLogErr(err, "ai_mnetwork_create");
 800bfde:	4971      	ldr	r1, [pc, #452]	; (800c1a4 <aiBootstrap+0x1fc>)
 800bfe0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bfe2:	f7ff fa99 	bl	800b518 <aiLogErr>
        return -1;
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfea:	e0d2      	b.n	800c192 <aiBootstrap+0x1ea>
    }

    /* Initialize the instance */
    printf("Initializing the network\r\n");
 800bfec:	486e      	ldr	r0, [pc, #440]	; (800c1a8 <aiBootstrap+0x200>)
 800bfee:	f004 f829 	bl	8010044 <puts>
#if !defined(AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE)
    const ai_network_params params = {
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };
#else
    ai_network_params params = {
 800bff2:	f107 030c 	add.w	r3, r7, #12
 800bff6:	2230      	movs	r2, #48	; 0x30
 800bff8:	2100      	movs	r1, #0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f003 feea 	bl	800fdd4 <memset>
 800c000:	4b6a      	ldr	r3, [pc, #424]	; (800c1ac <aiBootstrap+0x204>)
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	4b69      	ldr	r3, [pc, #420]	; (800c1ac <aiBootstrap+0x204>)
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
                AI_BUFFER_NULL(NULL),
                AI_BUFFER_NULL(NULL) };

    if (ai_mnetwork_get_ext_data_activations(net_exec_ctx[idx].network, &ext_addr, &sz) == 0) {
 800c008:	4965      	ldr	r1, [pc, #404]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	4613      	mov	r3, r2
 800c00e:	015b      	lsls	r3, r3, #5
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	00db      	lsls	r3, r3, #3
 800c014:	440b      	add	r3, r1
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c01c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fedd 	bl	800cde0 <ai_mnetwork_get_ext_data_activations>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d12c      	bne.n	800c086 <aiBootstrap+0xde>
    	if (ext_addr == 0xFFFFFFFF) {
 800c02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d126      	bne.n	800c082 <aiBootstrap+0xda>
    		params.activations.data = (ai_handle)activations;
 800c034:	4b5e      	ldr	r3, [pc, #376]	; (800c1b0 <aiBootstrap+0x208>)
 800c036:	637b      	str	r3, [r7, #52]	; 0x34
    		ext_addr = (ai_u32)activations;
 800c038:	4b5d      	ldr	r3, [pc, #372]	; (800c1b0 <aiBootstrap+0x208>)
 800c03a:	643b      	str	r3, [r7, #64]	; 0x40
    		sz = (ai_u32)AI_BUFFER_SIZE(&net_exec_ctx[idx].report.activations);
 800c03c:	4958      	ldr	r1, [pc, #352]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	4613      	mov	r3, r2
 800c042:	015b      	lsls	r3, r3, #5
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	440b      	add	r3, r1
 800c04a:	3348      	adds	r3, #72	; 0x48
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	4618      	mov	r0, r3
 800c050:	4953      	ldr	r1, [pc, #332]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	4613      	mov	r3, r2
 800c056:	015b      	lsls	r3, r3, #5
 800c058:	1a9b      	subs	r3, r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	440b      	add	r3, r1
 800c05e:	3346      	adds	r3, #70	; 0x46
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	fb03 f300 	mul.w	r3, r3, r0
 800c066:	4618      	mov	r0, r3
 800c068:	494d      	ldr	r1, [pc, #308]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	4613      	mov	r3, r2
 800c06e:	015b      	lsls	r3, r3, #5
 800c070:	1a9b      	subs	r3, r3, r2
 800c072:	00db      	lsls	r3, r3, #3
 800c074:	440b      	add	r3, r1
 800c076:	334c      	adds	r3, #76	; 0x4c
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	fb03 f300 	mul.w	r3, r3, r0
 800c07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c080:	e001      	b.n	800c086 <aiBootstrap+0xde>
    	}
    	else {
    		params.activations.data = (ai_handle)ext_addr;
 800c082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c084:	637b      	str	r3, [r7, #52]	; 0x34
    	}
    }
#endif

    if (!ai_mnetwork_init(net_exec_ctx[idx].network, &params)) {
 800c086:	4946      	ldr	r1, [pc, #280]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	4613      	mov	r3, r2
 800c08c:	015b      	lsls	r3, r3, #5
 800c08e:	1a9b      	subs	r3, r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	440b      	add	r3, r1
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f107 020c 	add.w	r2, r7, #12
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fe06 	bl	800ccae <ai_mnetwork_init>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f083 0301 	eor.w	r3, r3, #1
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d027      	beq.n	800c0fe <aiBootstrap+0x156>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800c0ae:	493c      	ldr	r1, [pc, #240]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	015b      	lsls	r3, r3, #5
 800c0b6:	1a9b      	subs	r3, r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	440b      	add	r3, r1
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 fdd5 	bl	800cc6e <ai_mnetwork_get_error>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_init");
 800c0c8:	493a      	ldr	r1, [pc, #232]	; (800c1b4 <aiBootstrap+0x20c>)
 800c0ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0cc:	f7ff fa24 	bl	800b518 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800c0d0:	4933      	ldr	r1, [pc, #204]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	015b      	lsls	r3, r3, #5
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	440b      	add	r3, r1
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 fd87 	bl	800cbf4 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800c0e6:	492e      	ldr	r1, [pc, #184]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	015b      	lsls	r3, r3, #5
 800c0ee:	1a9b      	subs	r3, r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	440b      	add	r3, r1
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
        return -4;
 800c0f8:	f06f 0303 	mvn.w	r3, #3
 800c0fc:	e049      	b.n	800c192 <aiBootstrap+0x1ea>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].network,
 800c0fe:	4928      	ldr	r1, [pc, #160]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	4613      	mov	r3, r2
 800c104:	015b      	lsls	r3, r3, #5
 800c106:	1a9b      	subs	r3, r3, r2
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	440b      	add	r3, r1
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	4613      	mov	r3, r2
 800c112:	015b      	lsls	r3, r3, #5
 800c114:	1a9b      	subs	r3, r3, r2
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	4a21      	ldr	r2, [pc, #132]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c11a:	4413      	add	r3, r2
 800c11c:	3304      	adds	r3, #4
 800c11e:	4619      	mov	r1, r3
 800c120:	f000 fd8a 	bl	800cc38 <ai_mnetwork_get_info>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00c      	beq.n	800c144 <aiBootstrap+0x19c>
            &net_exec_ctx[idx].report)) {
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	4613      	mov	r3, r2
 800c12e:	015b      	lsls	r3, r3, #5
 800c130:	1a9b      	subs	r3, r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	4a1a      	ldr	r2, [pc, #104]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c136:	4413      	add	r3, r2
 800c138:	3304      	adds	r3, #4
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff fc1a 	bl	800b974 <aiPrintNetworkInfo>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
        return -2;
    }

    return 0;
 800c140:	2300      	movs	r3, #0
 800c142:	e026      	b.n	800c192 <aiBootstrap+0x1ea>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800c144:	4916      	ldr	r1, [pc, #88]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	4613      	mov	r3, r2
 800c14a:	015b      	lsls	r3, r3, #5
 800c14c:	1a9b      	subs	r3, r3, r2
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	440b      	add	r3, r1
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 fd8a 	bl	800cc6e <ai_mnetwork_get_error>
 800c15a:	4603      	mov	r3, r0
 800c15c:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_get_info");
 800c15e:	4916      	ldr	r1, [pc, #88]	; (800c1b8 <aiBootstrap+0x210>)
 800c160:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c162:	f7ff f9d9 	bl	800b518 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800c166:	490e      	ldr	r1, [pc, #56]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	4613      	mov	r3, r2
 800c16c:	015b      	lsls	r3, r3, #5
 800c16e:	1a9b      	subs	r3, r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	440b      	add	r3, r1
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 fd3c 	bl	800cbf4 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800c17c:	4908      	ldr	r1, [pc, #32]	; (800c1a0 <aiBootstrap+0x1f8>)
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	4613      	mov	r3, r2
 800c182:	015b      	lsls	r3, r3, #5
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	440b      	add	r3, r1
 800c18a:	2200      	movs	r2, #0
 800c18c:	601a      	str	r2, [r3, #0]
        return -2;
 800c18e:	f06f 0301 	mvn.w	r3, #1
}
 800c192:	4618      	mov	r0, r3
 800c194:	3748      	adds	r7, #72	; 0x48
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	08013da0 	.word	0x08013da0
 800c1a0:	20000a38 	.word	0x20000a38
 800c1a4:	08013dc0 	.word	0x08013dc0
 800c1a8:	08013dd4 	.word	0x08013dd4
 800c1ac:	40000040 	.word	0x40000040
 800c1b0:	20000b30 	.word	0x20000b30
 800c1b4:	08013df0 	.word	0x08013df0
 800c1b8:	08013e04 	.word	0x08013e04

0800c1bc <aiInspectorGetReport>:

#ifdef HAS_INSPECTOR
static int aiInspectorGetReport(struct ai_network_exec_ctx *ctx)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
    int res = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60fb      	str	r3, [r7, #12]
    if (!ctx)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d102      	bne.n	800c1d4 <aiInspectorGetReport+0x18>
        return -1;
 800c1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d2:	e01c      	b.n	800c20e <aiInspectorGetReport+0x52>

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d017      	beq.n	800c20c <aiInspectorGetReport+0x50>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d012      	beq.n	800c20c <aiInspectorGetReport+0x50>
    {
        if (ai_inspector_get_report(ctx->inspector,
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3380      	adds	r3, #128	; 0x80
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	f7f4 f91d 	bl	8000434 <ai_inspector_get_report>
 800c1fa:	4603      	mov	r3, r0
                ctx->net_id, &ctx->inspector_report) != true)
 800c1fc:	f083 0301 	eor.w	r3, r3, #1
 800c200:	b2db      	uxtb	r3, r3
        if (ai_inspector_get_report(ctx->inspector,
 800c202:	2b00      	cmp	r3, #0
 800c204:	d002      	beq.n	800c20c <aiInspectorGetReport+0x50>
            res = -2;
 800c206:	f06f 0301 	mvn.w	r3, #1
 800c20a:	60fb      	str	r3, [r7, #12]
    }
    return res;
 800c20c:	68fb      	ldr	r3, [r7, #12]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <aiInspectorSendReport>:


static void aiInspectorSendReport(const reqMsg *req, respMsg *resp,
        EnumState state, struct ai_network_exec_ctx *ctx,
        const ai_float dur_ms)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b088      	sub	sp, #32
 800c21a:	af02      	add	r7, sp, #8
 800c21c:	6178      	str	r0, [r7, #20]
 800c21e:	6139      	str	r1, [r7, #16]
 800c220:	60bb      	str	r3, [r7, #8]
 800c222:	ed87 0a01 	vstr	s0, [r7, #4]
 800c226:	4613      	mov	r3, r2
 800c228:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_INSPECTOR
    if (aiInspectorGetReport(ctx) == 0) {
 800c22a:	68b8      	ldr	r0, [r7, #8]
 800c22c:	f7ff ffc6 	bl	800c1bc <aiInspectorGetReport>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d122      	bne.n	800c27c <aiInspectorSendReport+0x66>
        resp->which_payload = respMsg_report_tag;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	2215      	movs	r2, #21
 800c23a:	80da      	strh	r2, [r3, #6]
        resp->payload.report.id = ctx->inspector_report.id;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	609a      	str	r2, [r3, #8]
        resp->payload.report.elapsed_ms = dur_ms;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	619a      	str	r2, [r3, #24]
        resp->payload.report.n_nodes = ctx->inspector_report.n_nodes;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	615a      	str	r2, [r3, #20]
        resp->payload.report.signature = ctx->inspector_report.signature;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	60da      	str	r2, [r3, #12]
        resp->payload.report.num_inferences = ctx->inspector_report.num_inferences;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	611a      	str	r2, [r3, #16]
        aiPbMgrSendResp(req, resp, state);
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6939      	ldr	r1, [r7, #16]
 800c270:	6978      	ldr	r0, [r7, #20]
 800c272:	f7fe f90b 	bl	800a48c <aiPbMgrSendResp>
        aiPbMgrWaitAck();
 800c276:	f7fe f943 	bl	800a500 <aiPbMgrWaitAck>
    } else {
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_GENERIC, EnumError_E_GENERIC);
    }
#endif
}
 800c27a:	e007      	b.n	800c28c <aiInspectorSendReport+0x76>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800c27c:	230a      	movs	r3, #10
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	230a      	movs	r3, #10
 800c282:	2204      	movs	r2, #4
 800c284:	6939      	ldr	r1, [r7, #16]
 800c286:	6978      	ldr	r0, [r7, #20]
 800c288:	f7fe f91e 	bl	800a4c8 <aiPbMgrSendAck>
}
 800c28c:	bf00      	nop
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <aiInspectorUnBind>:


static void aiInspectorUnBind(struct ai_network_exec_ctx *ctx)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d016      	beq.n	800c2d0 <aiInspectorUnBind+0x3c>
        return;

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00d      	beq.n	800c2c6 <aiInspectorUnBind+0x32>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d008      	beq.n	800c2c6 <aiInspectorUnBind+0x32>
        ai_inspector_unbind_network(ctx->inspector,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7f4 f870 	bl	80003a6 <ai_inspector_unbind_network>
                ctx->net_id);

    ctx->net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800c2ce:	e000      	b.n	800c2d2 <aiInspectorUnBind+0x3e>
        return;
 800c2d0:	bf00      	nop
#endif
}
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <aiInspectorBind>:

static int aiInspectorBind(struct ai_network_exec_ctx *ctx)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
    int res = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	60fb      	str	r3, [r7, #12]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <aiInspectorBind+0x16>
        return 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e024      	b.n	800c338 <aiInspectorBind+0x60>

    aiInspectorUnBind(ctx);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff ffd0 	bl	800c294 <aiInspectorUnBind>

    ctx->n_cb_in  = 0;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ctx->n_cb_out = 0;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if (ctx->inspector) {
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d014      	beq.n	800c336 <aiInspectorBind+0x5e>
        ctx->net_id = ai_inspector_bind_network(
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                ctx->inspector,
                &ctx->entry);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3398      	adds	r3, #152	; 0x98
        ctx->net_id = ai_inspector_bind_network(
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7f4 f805 	bl	8000326 <ai_inspector_bind_network>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

        if (ctx->net_id == AI_INSPECTOR_NETWORK_BIND_FAILED)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d102      	bne.n	800c336 <aiInspectorBind+0x5e>
            res = -1;
 800c330:	f04f 33ff 	mov.w	r3, #4294967295
 800c334:	60fb      	str	r3, [r7, #12]
    }

#endif
    return res;
 800c336:	68fb      	ldr	r3, [r7, #12]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <aiInspectorInitAndBind>:

static int aiInspectorInitAndBind(struct ai_network_exec_ctx *ctx)
{
 800c340:	b5b0      	push	{r4, r5, r7, lr}
 800c342:	b094      	sub	sp, #80	; 0x50
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    ctx->n_cb_in  = 0;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ctx->n_cb_out = 0;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    ai_inspector_config cfg = ai_inspector_default_config();
 800c358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7f3 ff6f 	bl	8000240 <ai_inspector_default_config>

    cfg.log_level = LOG_SUDO;
 800c362:	2300      	movs	r3, #0
 800c364:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    cfg.log_quiet = false;
 800c368:	2300      	movs	r3, #0
 800c36a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    cfg.on_report_destroy = NULL;
 800c36e:	2300      	movs	r3, #0
 800c370:	647b      	str	r3, [r7, #68]	; 0x44
    cfg.on_exec_node = &aiOnExecNode_cb;
 800c372:	4b1d      	ldr	r3, [pc, #116]	; (800c3e8 <aiInspectorInitAndBind+0xa8>)
 800c374:	64bb      	str	r3, [r7, #72]	; 0x48
    cfg.cookie = NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    ai_handle phandle;
    ai_network_params pparams;

    if (ctx->network == AI_HANDLE_NULL)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <aiInspectorInitAndBind+0x48>
        return -1;
 800c382:	f04f 33ff 	mov.w	r3, #4294967295
 800c386:	e02a      	b.n	800c3de <aiInspectorInitAndBind+0x9e>

    ai_mnetwork_get_private_handle(ctx->network,
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f107 020c 	add.w	r2, r7, #12
 800c390:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fcf7 	bl	800cd88 <ai_mnetwork_get_private_handle>
            &phandle,
            &pparams);

    cfg.cookie = (ai_handle)ctx;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (ai_inspector_create(&ctx->inspector, &cfg) )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3378      	adds	r3, #120	; 0x78
 800c3a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7f3 ff5f 	bl	800026c <ai_inspector_create>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d013      	beq.n	800c3dc <aiInspectorInitAndBind+0x9c>
    {
        ctx->entry.handle = phandle;
 800c3b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        ctx->entry.params = pparams;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800c3c2:	f107 050c 	add.w	r5, r7, #12
 800c3c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c3d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        aiInspectorBind(ctx);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff ff7e 	bl	800c2d8 <aiInspectorBind>
    }


#endif
    return 0;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3750      	adds	r7, #80	; 0x50
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800bdb9 	.word	0x0800bdb9

0800c3ec <aiInspectorUnbindAndDestroy>:

static int aiInspectorUnbindAndDestroy(struct ai_network_exec_ctx *ctx)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    aiInspectorUnBind(ctx);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff ff4d 	bl	800c294 <aiInspectorUnBind>
    if (ctx->inspector != AI_HANDLE_NULL)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d004      	beq.n	800c40c <aiInspectorUnbindAndDestroy+0x20>
        ai_inspector_destroy(ctx->inspector);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c406:	4618      	mov	r0, r3
 800c408:	f7f3 ff62 	bl	80002d0 <ai_inspector_destroy>
    ctx->inspector = AI_HANDLE_NULL;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	679a      	str	r2, [r3, #120]	; 0x78
#endif
    return 0;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <aiInit>:


static int aiInit(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af04      	add	r7, sp, #16
    int res = -1;
 800c422:	f04f 33ff 	mov.w	r3, #4294967295
 800c426:	60fb      	str	r3, [r7, #12]
    const char *nn_name;
    int idx;

    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800c428:	2300      	movs	r3, #0
 800c42a:	9302      	str	r3, [sp, #8]
 800c42c:	2301      	movs	r3, #1
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	2304      	movs	r3, #4
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	2300      	movs	r3, #0
 800c436:	2201      	movs	r2, #1
 800c438:	2101      	movs	r1, #1
 800c43a:	4826      	ldr	r0, [pc, #152]	; (800c4d4 <aiInit+0xb8>)
 800c43c:	f003 fd7a 	bl	800ff34 <iprintf>
            AI_PLATFORM_RUNTIME_MAJOR,
            AI_PLATFORM_RUNTIME_MINOR,
            AI_PLATFORM_RUNTIME_MICRO);

    /* Clean all network exec context */
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800c440:	2300      	movs	r3, #0
 800c442:	607b      	str	r3, [r7, #4]
 800c444:	e01f      	b.n	800c486 <aiInit+0x6a>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800c446:	4924      	ldr	r1, [pc, #144]	; (800c4d8 <aiInit+0xbc>)
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	4613      	mov	r3, r2
 800c44c:	015b      	lsls	r3, r3, #5
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	440b      	add	r3, r1
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]
#ifdef HAS_INSPECTOR
        net_exec_ctx[idx].inspector = AI_HANDLE_NULL;
 800c458:	491f      	ldr	r1, [pc, #124]	; (800c4d8 <aiInit+0xbc>)
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	4613      	mov	r3, r2
 800c45e:	015b      	lsls	r3, r3, #5
 800c460:	1a9b      	subs	r3, r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	440b      	add	r3, r1
 800c466:	3378      	adds	r3, #120	; 0x78
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800c46c:	491a      	ldr	r1, [pc, #104]	; (800c4d8 <aiInit+0xbc>)
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	4613      	mov	r3, r2
 800c472:	015b      	lsls	r3, r3, #5
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	440b      	add	r3, r1
 800c47a:	337c      	adds	r3, #124	; 0x7c
 800c47c:	2200      	movs	r2, #0
 800c47e:	801a      	strh	r2, [r3, #0]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	3301      	adds	r3, #1
 800c484:	607b      	str	r3, [r7, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dddc      	ble.n	800c446 <aiInit+0x2a>
#endif
    }

    /* Discover and init the embedded network */
    idx = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	2000      	movs	r0, #0
 800c494:	f000 fb12 	bl	800cabc <ai_mnetwork_find>
 800c498:	60b8      	str	r0, [r7, #8]
        if (nn_name) {
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00d      	beq.n	800c4bc <aiInit+0xa0>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	480e      	ldr	r0, [pc, #56]	; (800c4dc <aiInit+0xc0>)
 800c4a4:	f003 fd46 	bl	800ff34 <iprintf>
            res = aiBootstrap(nn_name, idx);
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	68b8      	ldr	r0, [r7, #8]
 800c4ac:	f7ff fd7c 	bl	800bfa8 <aiBootstrap>
 800c4b0:	60f8      	str	r0, [r7, #12]
            if (res)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <aiInit+0xa0>
                nn_name = NULL;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	60bb      	str	r3, [r7, #8]
        }
        idx++;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e3      	bne.n	800c490 <aiInit+0x74>

    return res;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	08013e1c 	.word	0x08013e1c
 800c4d8:	20000a38 	.word	0x20000a38
 800c4dc:	08013e50 	.word	0x08013e50

0800c4e0 <aiPbCmdNNInfo>:
 * Specific APP/test functions
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af02      	add	r7, sp, #8
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
    struct ai_network_exec_ctx *ctx;

    UNUSED(param);

    ctx = aiExecCtx(req->name, req->param);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f103 020c 	add.w	r2, r3, #12
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	f7ff fce1 	bl	800bec0 <aiExecCtx>
 800c4fe:	6178      	str	r0, [r7, #20]
    if (ctx)
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d007      	beq.n	800c516 <aiPbCmdNNInfo+0x36>
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
                &ctx->report);
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	3304      	adds	r3, #4
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 800c50a:	2200      	movs	r2, #0
 800c50c:	68b9      	ldr	r1, [r7, #8]
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f7fe fc6e 	bl	800adf0 <aiPbMgrSendNNInfo>
    else
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 800c514:	e007      	b.n	800c526 <aiPbCmdNNInfo+0x46>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800c516:	2304      	movs	r3, #4
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	2304      	movs	r3, #4
 800c51c:	2204      	movs	r2, #4
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7fd ffd1 	bl	800a4c8 <aiPbMgrSendAck>
}
 800c526:	bf00      	nop
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
	...

0800c530 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 800c530:	b5b0      	push	{r4, r5, r7, lr}
 800c532:	b09e      	sub	sp, #120	; 0x78
 800c534:	af02      	add	r7, sp, #8
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
    ai_i32 batch;
    uint32_t tend;
    bool res;
    struct ai_network_exec_ctx *ctx;
    bool inspector_mode = false;
 800c53c:	2300      	movs	r3, #0
 800c53e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    ai_buffer ai_input[AI_MNETWORK_IN_NUM];
    ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

    UNUSED(param);

    ctx = aiExecCtx(req->name, -1);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	330c      	adds	r3, #12
 800c546:	f04f 31ff 	mov.w	r1, #4294967295
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7ff fcb8 	bl	800bec0 <aiExecCtx>
 800c550:	6538      	str	r0, [r7, #80]	; 0x50
    if (!ctx) {
 800c552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c554:	2b00      	cmp	r3, #0
 800c556:	d108      	bne.n	800c56a <aiPbCmdNNRun+0x3a>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800c558:	2304      	movs	r3, #4
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	2304      	movs	r3, #4
 800c55e:	2204      	movs	r2, #4
 800c560:	68b9      	ldr	r1, [r7, #8]
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7fd ffb0 	bl	800a4c8 <aiPbMgrSendAck>
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        return;
 800c568:	e196      	b.n	800c898 <aiPbCmdNNRun+0x368>
    }

#ifdef HAS_INSPECTOR
    ctx->no_data = false;
 800c56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <aiPbCmdNNRun+0x54>
            EnumRunParam_P_RUN_MODE_INSPECTOR)
        inspector_mode = true;
 800c57e:	2301      	movs	r3, #1
 800c580:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f003 0302 	and.w	r3, r3, #2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <aiPbCmdNNRun+0x6e>
            EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
        inspector_mode = true;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        ctx->no_data = true;
 800c596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    }

    ctx->tcom = 0ULL;
 800c59e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5a0:	f04f 0300 	mov.w	r3, #0
 800c5a4:	f04f 0400 	mov.w	r4, #0
 800c5a8:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
    ctx->tnodes = 0ULL;
 800c5ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	f04f 0400 	mov.w	r4, #0
 800c5b6:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
#endif

    /* Fill the input tensor descriptors */
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5be:	e053      	b.n	800c668 <aiPbCmdNNRun+0x138>
        ai_input[i] = ctx->report.inputs[i];
 800c5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c5c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	4419      	add	r1, r3
 800c5d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c5de:	4413      	add	r3, r2
 800c5e0:	3b48      	subs	r3, #72	; 0x48
 800c5e2:	461c      	mov	r4, r3
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c5ee:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_input[i].n_batches  = 1;
 800c5f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	4413      	add	r3, r2
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c600:	4413      	add	r3, r2
 800c602:	3b44      	subs	r3, #68	; 0x44
 800c604:	2201      	movs	r2, #1
 800c606:	801a      	strh	r2, [r3, #0]
        if (ctx->report.inputs[i].data)
 800c608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c60c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c60e:	4613      	mov	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	440b      	add	r3, r1
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d013      	beq.n	800c646 <aiPbCmdNNRun+0x116>
        	ai_input[i].data = AI_HANDLE_PTR(ctx->report.inputs[i].data);
 800c61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c620:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c624:	4613      	mov	r3, r2
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	4413      	add	r3, r2
 800c62a:	00db      	lsls	r3, r3, #3
 800c62c:	440b      	add	r3, r1
 800c62e:	6919      	ldr	r1, [r3, #16]
 800c630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c632:	4613      	mov	r3, r2
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4413      	add	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c63e:	4413      	add	r3, r2
 800c640:	3b38      	subs	r3, #56	; 0x38
 800c642:	6019      	str	r1, [r3, #0]
 800c644:	e00d      	b.n	800c662 <aiPbCmdNNRun+0x132>
        else
        	ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 800c646:	4a96      	ldr	r2, [pc, #600]	; (800c8a0 <aiPbCmdNNRun+0x370>)
 800c648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c64a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c64e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c650:	4613      	mov	r3, r2
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	4413      	add	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c65c:	4413      	add	r3, r2
 800c65e:	3b38      	subs	r3, #56	; 0x38
 800c660:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800c662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c664:	3301      	adds	r3, #1
 800c666:	66bb      	str	r3, [r7, #104]	; 0x68
 800c668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c66a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c66c:	461a      	mov	r2, r3
 800c66e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c670:	4293      	cmp	r3, r2
 800c672:	dba5      	blt.n	800c5c0 <aiPbCmdNNRun+0x90>
    }

    /* Fill the output tensor descriptors */
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800c674:	2300      	movs	r3, #0
 800c676:	667b      	str	r3, [r7, #100]	; 0x64
 800c678:	e034      	b.n	800c6e4 <aiPbCmdNNRun+0x1b4>
    	ai_output[i] = ctx->report.outputs[i];
 800c67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c67c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c67e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	4419      	add	r1, r3
 800c68a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c68c:	4613      	mov	r3, r2
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	4413      	add	r3, r2
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c698:	4413      	add	r3, r2
 800c69a:	3b60      	subs	r3, #96	; 0x60
 800c69c:	461c      	mov	r4, r3
 800c69e:	460d      	mov	r5, r1
 800c6a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c6a8:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_output[i].n_batches = 1;
 800c6ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	4413      	add	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c6ba:	4413      	add	r3, r2
 800c6bc:	3b5c      	subs	r3, #92	; 0x5c
 800c6be:	2201      	movs	r2, #1
 800c6c0:	801a      	strh	r2, [r3, #0]
        ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 800c6c2:	4a78      	ldr	r2, [pc, #480]	; (800c8a4 <aiPbCmdNNRun+0x374>)
 800c6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c6ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c6d8:	4413      	add	r3, r2
 800c6da:	3b50      	subs	r3, #80	; 0x50
 800c6dc:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800c6de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	667b      	str	r3, [r7, #100]	; 0x64
 800c6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	dbc4      	blt.n	800c67a <aiPbCmdNNRun+0x14a>
    }

    /* 1 - Send a ACK (ready to receive a buffer) */
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800c6f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fd ff1d 	bl	800a534 <aiPbAiBufferSize>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	4613      	mov	r3, r2
 800c702:	2201      	movs	r2, #1
 800c704:	68b9      	ldr	r1, [r7, #8]
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7fd fede 	bl	800a4c8 <aiPbMgrSendAck>
            aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

    /* 2 - Receive all input tensors */
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800c70c:	2300      	movs	r3, #0
 800c70e:	663b      	str	r3, [r7, #96]	; 0x60
 800c710:	e027      	b.n	800c762 <aiPbCmdNNRun+0x232>
    	/* upload a buffer */
    	EnumState state = EnumState_S_WAITING;
 800c712:	2301      	movs	r3, #1
 800c714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    	if ((i + 1) == ctx->report.n_inputs)
 800c718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c71a:	3301      	adds	r3, #1
 800c71c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c71e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c720:	4293      	cmp	r3, r2
 800c722:	d102      	bne.n	800c72a <aiPbCmdNNRun+0x1fa>
    		state = EnumState_S_PROCESSING;
 800c724:	2302      	movs	r3, #2
 800c726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 800c72a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c72e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c730:	4613      	mov	r3, r2
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	4413      	add	r3, r2
 800c736:	00db      	lsls	r3, r3, #3
 800c738:	440b      	add	r3, r1
 800c73a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f7fe f80f 	bl	800a764 <aiPbMgrReceiveAiBuffer3>
 800c746:	4603      	mov	r3, r0
 800c748:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        if (res != true)
 800c74c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c750:	f083 0301 	eor.w	r3, r3, #1
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b00      	cmp	r3, #0
 800c758:	f040 809d 	bne.w	800c896 <aiPbCmdNNRun+0x366>
    for (int i = 0; i < ctx->report.n_inputs; i++) {
 800c75c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c75e:	3301      	adds	r3, #1
 800c760:	663b      	str	r3, [r7, #96]	; 0x60
 800c762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c764:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c766:	461a      	mov	r2, r3
 800c768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c76a:	4293      	cmp	r3, r2
 800c76c:	dbd1      	blt.n	800c712 <aiPbCmdNNRun+0x1e2>
            return;
    }

    ints = disableInts();
 800c76e:	f7fe fe71 	bl	800b454 <disableInts>
 800c772:	64f8      	str	r0, [r7, #76]	; 0x4c

    /* Update the PN context for inspector callbacks */
    aiSetPbContext(ctx, req, resp);
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	68f9      	ldr	r1, [r7, #12]
 800c778:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c77a:	f7ff fbfd 	bl	800bf78 <aiSetPbContext>

    if (inspector_mode)
 800c77e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <aiPbCmdNNRun+0x25c>
        aiInspectorInitAndBind(ctx);
 800c786:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c788:	f7ff fdda 	bl	800c340 <aiInspectorInitAndBind>

    /* Processing */
    dwtReset();
 800c78c:	f7fe fc2a 	bl	800afe4 <dwtReset>

    batch = ai_mnetwork_run(ctx->network, ai_input, ai_output);
 800c790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f107 0210 	add.w	r2, r7, #16
 800c798:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 fad7 	bl	800cd50 <ai_mnetwork_run>
 800c7a2:	64b8      	str	r0, [r7, #72]	; 0x48
    if (batch != 1) {
 800c7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d012      	beq.n	800c7d0 <aiPbCmdNNRun+0x2a0>
        aiLogErr(ai_mnetwork_get_error(ctx->network),
 800c7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 fa5d 	bl	800cc6e <ai_mnetwork_get_error>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	493c      	ldr	r1, [pc, #240]	; (800c8a8 <aiPbCmdNNRun+0x378>)
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fead 	bl	800b518 <aiLogErr>
                "ai_mnetwork_run");
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800c7be:	230a      	movs	r3, #10
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	230a      	movs	r3, #10
 800c7c4:	2204      	movs	r2, #4
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7fd fe7d 	bl	800a4c8 <aiPbMgrSendAck>
                EnumError_E_GENERIC, EnumError_E_GENERIC);
        return;
 800c7ce:	e063      	b.n	800c898 <aiPbCmdNNRun+0x368>
    }
    tend = dwtGetCycles();
 800c7d0:	f7fe fc14 	bl	800affc <dwtGetCycles>
 800c7d4:	6478      	str	r0, [r7, #68]	; 0x44

#ifdef HAS_INSPECTOR
    tend = ctx->tcom + ctx->tnodes + tend;
 800c7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7d8:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 800c7dc:	461a      	mov	r2, r3
 800c7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e0:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800c7e4:	4413      	add	r3, r2
 800c7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7e8:	4413      	add	r3, r2
 800c7ea:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    if (inspector_mode)
 800c7ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d010      	beq.n	800c816 <aiPbCmdNNRun+0x2e6>
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800c7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7f6:	f04f 0400 	mov.w	r4, #0
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	f7fe fc11 	bl	800b024 <dwtCyclesToFloatMs>
 800c802:	eef0 7a40 	vmov.f32	s15, s0
 800c806:	eeb0 0a67 	vmov.f32	s0, s15
 800c80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c80c:	2202      	movs	r2, #2
 800c80e:	68b9      	ldr	r1, [r7, #8]
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f7ff fd00 	bl	800c216 <aiInspectorSendReport>
                dwtCyclesToFloatMs(tend));

    /* 3 - Send all output tensors */
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800c816:	2300      	movs	r3, #0
 800c818:	65bb      	str	r3, [r7, #88]	; 0x58
 800c81a:	e02b      	b.n	800c874 <aiPbCmdNNRun+0x344>
    	/* download a buffer */
    	EnumState state = EnumState_S_PROCESSING;
 800c81c:	2302      	movs	r3, #2
 800c81e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    	if ((i + 1) == ctx->report.n_outputs)
 800c822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c824:	3301      	adds	r3, #1
 800c826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c828:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d102      	bne.n	800c834 <aiPbCmdNNRun+0x304>
    		state = EnumState_S_DONE;
 800c82e:	2303      	movs	r3, #3
 800c830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        aiPbMgrSendAiBuffer3(req, resp, state,
 800c834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c836:	f04f 0400 	mov.w	r4, #0
 800c83a:	4618      	mov	r0, r3
 800c83c:	4621      	mov	r1, r4
 800c83e:	f7fe fbf1 	bl	800b024 <dwtCyclesToFloatMs>
 800c842:	eef0 7a40 	vmov.f32	s15, s0
                EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
                0, dwtCyclesToFloatMs(tend),
                &ai_output[i]);
 800c846:	f107 0110 	add.w	r1, r7, #16
 800c84a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c84c:	4613      	mov	r3, r2
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	4413      	add	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	440b      	add	r3, r1
        aiPbMgrSendAiBuffer3(req, resp, state,
 800c856:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c85a:	9301      	str	r3, [sp, #4]
 800c85c:	2300      	movs	r3, #0
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	eeb0 0a67 	vmov.f32	s0, s15
 800c864:	2300      	movs	r3, #0
 800c866:	68b9      	ldr	r1, [r7, #8]
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7fe f907 	bl	800aa7c <aiPbMgrSendAiBuffer3>
    for (int i = 0; i < ctx->report.n_outputs; i++) {
 800c86e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c870:	3301      	adds	r3, #1
 800c872:	65bb      	str	r3, [r7, #88]	; 0x58
 800c874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c878:	461a      	mov	r2, r3
 800c87a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c87c:	4293      	cmp	r3, r2
 800c87e:	dbcd      	blt.n	800c81c <aiPbCmdNNRun+0x2ec>
    }

    if (inspector_mode)
 800c880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <aiPbCmdNNRun+0x35e>
        aiInspectorUnbindAndDestroy(ctx);
 800c888:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c88a:	f7ff fdaf 	bl	800c3ec <aiInspectorUnbindAndDestroy>

    restoreInts(ints);
 800c88e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c890:	f7fe fdf0 	bl	800b474 <restoreInts>
 800c894:	e000      	b.n	800c898 <aiPbCmdNNRun+0x368>
            return;
 800c896:	bf00      	nop
}
 800c898:	3770      	adds	r7, #112	; 0x70
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bdb0      	pop	{r4, r5, r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000014 	.word	0x20000014
 800c8a4:	20000018 	.word	0x20000018
 800c8a8:	08013e9c 	.word	0x08013e9c

0800c8ac <aiValidationCore>:

static int aiValidationCore(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
    return aiPbMgrWaitAndProcess();
 800c8b0:	f7fd fd9e 	bl	800a3f0 <aiPbMgrWaitAndProcess>
 800c8b4:	4603      	mov	r3, r0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <aiValidationInit>:
#endif
        AI_PB_CMD_END,
};

int aiValidationInit(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	af00      	add	r7, sp, #0
    aiPbMgrInit(pbCmdFuncTab);
 800c8c0:	4808      	ldr	r0, [pc, #32]	; (800c8e4 <aiValidationInit+0x28>)
 800c8c2:	f7fd fd59 	bl	800a378 <aiPbMgrInit>

    aiTestHeader(_APP_NAME_, _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 800c8c6:	2202      	movs	r2, #2
 800c8c8:	2103      	movs	r1, #3
 800c8ca:	4807      	ldr	r0, [pc, #28]	; (800c8e8 <aiValidationInit+0x2c>)
 800c8cc:	f7ff f910 	bl	800baf0 <aiTestHeader>

    dwtIpInit();
 800c8d0:	f7fe fb66 	bl	800afa0 <dwtIpInit>
    crcIpInit();
 800c8d4:	f7fe fb44 	bl	800af60 <crcIpInit>
    logDeviceConf();
 800c8d8:	f7fe fcf8 	bl	800b2cc <logDeviceConf>

    return 0;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	2000001c 	.word	0x2000001c
 800c8e8:	08013eac 	.word	0x08013eac

0800c8ec <aiValidationProcess>:

int aiValidationProcess(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
    int r;

    r = aiInit();
 800c8f2:	f7ff fd93 	bl	800c41c <aiInit>
 800c8f6:	6078      	str	r0, [r7, #4]
    if (r) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d009      	beq.n	800c912 <aiValidationProcess+0x26>
        printf("\r\nE:  aiInit() r=%d\r\n", r);
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	4817      	ldr	r0, [pc, #92]	; (800c960 <aiValidationProcess+0x74>)
 800c902:	f003 fb17 	bl	800ff34 <iprintf>
        HAL_Delay(2000);
 800c906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c90a:	f7fb fac7 	bl	8007e9c <HAL_Delay>
        return r;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	e022      	b.n	800c958 <aiValidationProcess+0x6c>
    } else {
        printf("\r\n");
 800c912:	4814      	ldr	r0, [pc, #80]	; (800c964 <aiValidationProcess+0x78>)
 800c914:	f003 fb96 	bl	8010044 <puts>
        printf("-------------------------------------------\r\n");
 800c918:	4813      	ldr	r0, [pc, #76]	; (800c968 <aiValidationProcess+0x7c>)
 800c91a:	f003 fb93 	bl	8010044 <puts>
        printf("| READY to receive a CMD from the HOST... |\r\n");
 800c91e:	4813      	ldr	r0, [pc, #76]	; (800c96c <aiValidationProcess+0x80>)
 800c920:	f003 fb90 	bl	8010044 <puts>
        printf("-------------------------------------------\r\n");
 800c924:	4810      	ldr	r0, [pc, #64]	; (800c968 <aiValidationProcess+0x7c>)
 800c926:	f003 fb8d 	bl	8010044 <puts>
        printf("\r\n");
 800c92a:	480e      	ldr	r0, [pc, #56]	; (800c964 <aiValidationProcess+0x78>)
 800c92c:	f003 fb8a 	bl	8010044 <puts>
        printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 800c930:	480f      	ldr	r0, [pc, #60]	; (800c970 <aiValidationProcess+0x84>)
 800c932:	f003 fb87 	bl	8010044 <puts>
        printf("# and a stm32com-base interface should be used\r\n");
 800c936:	480f      	ldr	r0, [pc, #60]	; (800c974 <aiValidationProcess+0x88>)
 800c938:	f003 fb84 	bl	8010044 <puts>
        printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 800c93c:	2201      	movs	r2, #1
 800c93e:	2102      	movs	r1, #2
 800c940:	480d      	ldr	r0, [pc, #52]	; (800c978 <aiValidationProcess+0x8c>)
 800c942:	f003 faf7 	bl	800ff34 <iprintf>
                EnumVersion_P_VERSION_MAJOR,
                EnumVersion_P_VERSION_MINOR);
    }

    ioDisableWrite();
 800c946:	f7fe fda5 	bl	800b494 <ioDisableWrite>

    do {
        r = aiValidationCore();
 800c94a:	f7ff ffaf 	bl	800c8ac <aiValidationCore>
 800c94e:	6078      	str	r0, [r7, #4]
    } while (r==0);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f9      	beq.n	800c94a <aiValidationProcess+0x5e>

    return r;
 800c956:	687b      	ldr	r3, [r7, #4]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	08013ebc 	.word	0x08013ebc
 800c964:	08013ed4 	.word	0x08013ed4
 800c968:	08013ed8 	.word	0x08013ed8
 800c96c:	08013f08 	.word	0x08013f08
 800c970:	08013f38 	.word	0x08013f38
 800c974:	08013f80 	.word	0x08013f80
 800c978:	08013fb0 	.word	0x08013fb0

0800c97c <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800c980:	f7fb f848 	bl	8007a14 <MX_USART3_UART_Init>
    aiValidationInit();
 800c984:	f7ff ff9a 	bl	800c8bc <aiValidationInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 800c988:	bf00      	nop
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
    aiValidationProcess();
 800c990:	f7ff ffac 	bl	800c8ec <aiValidationProcess>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 800c994:	bf00      	nop
 800c996:	bd80      	pop	{r7, pc}

0800c998 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 800c998:	b590      	push	{r4, r7, lr}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01d      	beq.n	800c9e4 <ai_mnetwork_is_valid+0x4c>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fa fa5a 	bl	8006e66 <strlen>
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7fa fa56 	bl	8006e66 <strlen>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	429c      	cmp	r4, r3
 800c9be:	d111      	bne.n	800c9e4 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	681c      	ldr	r4, [r3, #0]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fa fa4c 	bl	8006e66 <strlen>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f003 fb55 	bl	8010084 <strncmp>
 800c9da:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <ai_mnetwork_is_valid+0x4c>
        return true;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e000      	b.n	800c9e6 <ai_mnetwork_is_valid+0x4e>
    return false;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}
	...

0800c9f0 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	e026      	b.n	800ca4c <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00b      	beq.n	800ca1c <ai_mnetwork_handle+0x2c>
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	4613      	mov	r3, r2
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	1a9b      	subs	r3, r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	4a14      	ldr	r2, [pc, #80]	; (800ca60 <ai_mnetwork_handle+0x70>)
 800ca10:	4413      	add	r3, r2
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d101      	bne.n	800ca1c <ai_mnetwork_handle+0x2c>
            return inst;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	e01b      	b.n	800ca54 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d111      	bne.n	800ca46 <ai_mnetwork_handle+0x56>
 800ca22:	490f      	ldr	r1, [pc, #60]	; (800ca60 <ai_mnetwork_handle+0x70>)
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	4613      	mov	r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	440b      	add	r3, r1
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d107      	bne.n	800ca46 <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	1a9b      	subs	r3, r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	4a07      	ldr	r2, [pc, #28]	; (800ca60 <ai_mnetwork_handle+0x70>)
 800ca42:	4413      	add	r3, r2
 800ca44:	e006      	b.n	800ca54 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	ddd5      	ble.n	800c9fe <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	20000bf0 	.word	0x20000bf0

0800ca64 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e019      	b.n	800caa6 <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d013      	beq.n	800caa0 <ai_mnetwork_release_handle+0x3c>
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	1a9b      	subs	r3, r3, r2
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	4a0d      	ldr	r2, [pc, #52]	; (800cab8 <ai_mnetwork_release_handle+0x54>)
 800ca84:	4413      	add	r3, r2
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d109      	bne.n	800caa0 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 800ca8c:	490a      	ldr	r1, [pc, #40]	; (800cab8 <ai_mnetwork_release_handle+0x54>)
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	4613      	mov	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	1a9b      	subs	r3, r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	440b      	add	r3, r1
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]
            return;
 800ca9e:	e005      	b.n	800caac <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3301      	adds	r3, #1
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	dde2      	ble.n	800ca72 <ai_mnetwork_release_handle+0xe>
        }
    }
}
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	20000bf0 	.word	0x20000bf0

0800cabc <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800cac6:	2300      	movs	r3, #0
 800cac8:	60fb      	str	r3, [r7, #12]
 800caca:	e01c      	b.n	800cb06 <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	4613      	mov	r3, r2
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	4413      	add	r3, r2
 800cad4:	015b      	lsls	r3, r3, #5
 800cad6:	4a10      	ldr	r2, [pc, #64]	; (800cb18 <ai_mnetwork_find+0x5c>)
 800cad8:	4413      	add	r3, r2
 800cada:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff ff5a 	bl	800c998 <ai_mnetwork_is_valid>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d002      	beq.n	800caf0 <ai_mnetwork_find+0x34>
            return entry->name;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	e00e      	b.n	800cb0e <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	1e5a      	subs	r2, r3, #1
 800caf4:	603a      	str	r2, [r7, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d102      	bne.n	800cb00 <ai_mnetwork_find+0x44>
                return entry->name;
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	e006      	b.n	800cb0e <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3301      	adds	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dddf      	ble.n	800cacc <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	08014360 	.word	0x08014360

0800cb1c <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b08a      	sub	sp, #40	; 0x28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f7ff ff5f 	bl	800c9f0 <ai_mnetwork_handle>
 800cb32:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d108      	bne.n	800cb4c <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 800cb3a:	2331      	movs	r3, #49	; 0x31
 800cb3c:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2210      	movs	r2, #16
 800cb42:	f362 231f 	bfi	r3, r2, #8, #24
 800cb46:	617b      	str	r3, [r7, #20]
        return err;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	e04d      	b.n	800cbe8 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	623b      	str	r3, [r7, #32]
 800cb50:	e014      	b.n	800cb7c <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800cb52:	6a3a      	ldr	r2, [r7, #32]
 800cb54:	4613      	mov	r3, r2
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	4413      	add	r3, r2
 800cb5a:	015b      	lsls	r3, r3, #5
 800cb5c:	4a24      	ldr	r2, [pc, #144]	; (800cbf0 <ai_mnetwork_create+0xd4>)
 800cb5e:	4413      	add	r3, r2
 800cb60:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800cb62:	69b9      	ldr	r1, [r7, #24]
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7ff ff17 	bl	800c998 <ai_mnetwork_is_valid>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <ai_mnetwork_create+0x5a>
            found = entry;
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800cb74:	e005      	b.n	800cb82 <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	623b      	str	r3, [r7, #32]
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	dde7      	ble.n	800cb52 <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d108      	bne.n	800cb9a <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 800cb88:	2314      	movs	r3, #20
 800cb8a:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	2210      	movs	r2, #16
 800cb90:	f362 231f 	bfi	r3, r2, #8, #24
 800cb94:	617b      	str	r3, [r7, #20]
        return err;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	e026      	b.n	800cbe8 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d109      	bne.n	800cbb4 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cba8:	4611      	mov	r1, r2
 800cbaa:	68b8      	ldr	r0, [r7, #8]
 800cbac:	4798      	blx	r3
 800cbae:	4603      	mov	r3, r0
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	e006      	b.n	800cbc2 <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb8:	6879      	ldr	r1, [r7, #4]
 800cbba:	68b8      	ldr	r0, [r7, #8]
 800cbbc:	4798      	blx	r3
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10c      	bne.n	800cbe6 <ai_mnetwork_create+0xca>
 800cbcc:	7d3b      	ldrb	r3, [r7, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d109      	bne.n	800cbe6 <ai_mnetwork_create+0xca>
        inst->entry = found;
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbd6:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	69fa      	ldr	r2, [r7, #28]
 800cbe4:	601a      	str	r2, [r3, #0]
    }

    return err;
 800cbe6:	697b      	ldr	r3, [r7, #20]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3728      	adds	r7, #40	; 0x28
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	08014360 	.word	0x08014360

0800cbf4 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fef7 	bl	800c9f0 <ai_mnetwork_handle>
 800cc02:	60f8      	str	r0, [r7, #12]
    if (inn) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d011      	beq.n	800cc2e <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	6852      	ldr	r2, [r2, #4]
 800cc14:	4610      	mov	r0, r2
 800cc16:	4798      	blx	r3
 800cc18:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d004      	beq.n	800cc2e <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff ff1d 	bl	800ca64 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 800cc2e:	687b      	ldr	r3, [r7, #4]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fed4 	bl	800c9f0 <ai_mnetwork_handle>
 800cc48:	60f8      	str	r0, [r7, #12]
    if (inn)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d009      	beq.n	800cc64 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	6852      	ldr	r2, [r2, #4]
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4798      	blx	r3
 800cc60:	4603      	mov	r3, r0
 800cc62:	e000      	b.n	800cc66 <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800cc76:	2314      	movs	r3, #20
 800cc78:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2210      	movs	r2, #16
 800cc7e:	f362 231f 	bfi	r3, r2, #8, #24
 800cc82:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff feb3 	bl	800c9f0 <ai_mnetwork_handle>
 800cc8a:	60f8      	str	r0, [r7, #12]
    if (inn)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d008      	beq.n	800cca4 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	6852      	ldr	r2, [r2, #4]
 800cc9c:	4610      	mov	r0, r2
 800cc9e:	4798      	blx	r3
 800cca0:	4603      	mov	r3, r0
 800cca2:	e000      	b.n	800cca6 <ai_mnetwork_get_error+0x38>
    else
        return err;
 800cca4:	68bb      	ldr	r3, [r7, #8]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 800ccae:	b5b0      	push	{r4, r5, r7, lr}
 800ccb0:	b090      	sub	sp, #64	; 0x40
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff fe99 	bl	800c9f0 <ai_mnetwork_handle>
 800ccbe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 800ccc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d03f      	beq.n	800cd46 <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 800ccc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f107 040c 	add.w	r4, r7, #12
 800ccce:	1d1d      	adds	r5, r3, #4
 800ccd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ccdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	8b9b      	ldrh	r3, [r3, #28]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00b      	beq.n	800cd00 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800ccee:	f103 0518 	add.w	r5, r3, #24
 800ccf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccf6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ccfa:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccfe:	e002      	b.n	800cd06 <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	889b      	ldrh	r3, [r3, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00a      	beq.n	800cd24 <ai_mnetwork_init+0x76>
            par.params = params->params;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	f107 040c 	add.w	r4, r7, #12
 800cd14:	461d      	mov	r5, r3
 800cd16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cd1e:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd22:	e005      	b.n	800cd30 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 800cd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2a:	4798      	blx	r3
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 800cd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd38:	6852      	ldr	r2, [r2, #4]
 800cd3a:	f107 010c 	add.w	r1, r7, #12
 800cd3e:	4610      	mov	r0, r2
 800cd40:	4798      	blx	r3
 800cd42:	4603      	mov	r3, r0
 800cd44:	e000      	b.n	800cd48 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3740      	adds	r7, #64	; 0x40
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bdb0      	pop	{r4, r5, r7, pc}

0800cd50 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7ff fe47 	bl	800c9f0 <ai_mnetwork_handle>
 800cd62:	6178      	str	r0, [r7, #20]
    if (inn)
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d009      	beq.n	800cd7e <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	6850      	ldr	r0, [r2, #4]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	4798      	blx	r3
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	e000      	b.n	800cd80 <ai_mnetwork_run+0x30>
    else
        return 0;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 800cd88:	b5b0      	push	{r4, r5, r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff fe2b 	bl	800c9f0 <ai_mnetwork_handle>
 800cd9a:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d018      	beq.n	800cdd4 <ai_mnetwork_get_private_handle+0x4c>
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d015      	beq.n	800cdd4 <ai_mnetwork_get_private_handle+0x4c>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d012      	beq.n	800cdd4 <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	4615      	mov	r5, r2
 800cdbc:	f103 0408 	add.w	r4, r3, #8
 800cdc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cdcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	e001      	b.n	800cdd8 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 800cdd4:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bdb0      	pop	{r4, r5, r7, pc}

0800cde0 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f7ff fdff 	bl	800c9f0 <ai_mnetwork_handle>
 800cdf2:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d011      	beq.n	800ce1e <ai_mnetwork_get_ext_data_activations+0x3e>
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00e      	beq.n	800ce1e <ai_mnetwork_get_ext_data_activations+0x3e>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00b      	beq.n	800ce1e <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
         return 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e001      	b.n	800ce22 <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 800ce1e:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
	...

0800ce2c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	3303      	adds	r3, #3
 800ce3c:	f023 0303 	bic.w	r3, r3, #3
 800ce40:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800ce42:	4b1a      	ldr	r3, [pc, #104]	; (800ceac <network_configure_activations+0x80>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800ce48:	4b18      	ldr	r3, [pc, #96]	; (800ceac <network_configure_activations+0x80>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800ce4e:	4a18      	ldr	r2, [pc, #96]	; (800ceb0 <network_configure_activations+0x84>)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800ce54:	4a16      	ldr	r2, [pc, #88]	; (800ceb0 <network_configure_activations+0x84>)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800ce5a:	4a16      	ldr	r2, [pc, #88]	; (800ceb4 <network_configure_activations+0x88>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800ce60:	4a14      	ldr	r2, [pc, #80]	; (800ceb4 <network_configure_activations+0x88>)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 96);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	3360      	adds	r3, #96	; 0x60
 800ce6a:	4a13      	ldr	r2, [pc, #76]	; (800ceb8 <network_configure_activations+0x8c>)
 800ce6c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 96);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3360      	adds	r3, #96	; 0x60
 800ce72:	4a11      	ldr	r2, [pc, #68]	; (800ceb8 <network_configure_activations+0x8c>)
 800ce74:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 96);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3360      	adds	r3, #96	; 0x60
 800ce7a:	4a10      	ldr	r2, [pc, #64]	; (800cebc <network_configure_activations+0x90>)
 800ce7c:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 96);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3360      	adds	r3, #96	; 0x60
 800ce82:	4a0e      	ldr	r2, [pc, #56]	; (800cebc <network_configure_activations+0x90>)
 800ce84:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 800ce86:	4a0e      	ldr	r2, [pc, #56]	; (800cec0 <network_configure_activations+0x94>)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 800ce8c:	4a0c      	ldr	r2, [pc, #48]	; (800cec0 <network_configure_activations+0x94>)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 800ce92:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <network_configure_activations+0x98>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <network_configure_activations+0x98>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800ce9e:	2301      	movs	r3, #1
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	20000110 	.word	0x20000110
 800ceb0:	20000120 	.word	0x20000120
 800ceb4:	20000130 	.word	0x20000130
 800ceb8:	20000140 	.word	0x20000140
 800cebc:	20000150 	.word	0x20000150
 800cec0:	20000160 	.word	0x20000160
 800cec4:	20000170 	.word	0x20000170

0800cec8 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800ced8:	4b31      	ldr	r3, [pc, #196]	; (800cfa0 <network_configure_weights+0xd8>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cee0:	4a2f      	ldr	r2, [pc, #188]	; (800cfa0 <network_configure_weights+0xd8>)
 800cee2:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 2096);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800ceea:	4a2d      	ldr	r2, [pc, #180]	; (800cfa0 <network_configure_weights+0xd8>)
 800ceec:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 2096);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800cef4:	4a2a      	ldr	r2, [pc, #168]	; (800cfa0 <network_configure_weights+0xd8>)
 800cef6:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800cef8:	4b2a      	ldr	r3, [pc, #168]	; (800cfa4 <network_configure_weights+0xdc>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf00:	4a28      	ldr	r2, [pc, #160]	; (800cfa4 <network_configure_weights+0xdc>)
 800cf02:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1808);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800cf0a:	4a26      	ldr	r2, [pc, #152]	; (800cfa4 <network_configure_weights+0xdc>)
 800cf0c:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1808);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800cf14:	4a23      	ldr	r2, [pc, #140]	; (800cfa4 <network_configure_weights+0xdc>)
 800cf16:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf18:	4b23      	ldr	r3, [pc, #140]	; (800cfa8 <network_configure_weights+0xe0>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf20:	4a21      	ldr	r2, [pc, #132]	; (800cfa8 <network_configure_weights+0xe0>)
 800cf22:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1712);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 800cf2a:	4a1f      	ldr	r2, [pc, #124]	; (800cfa8 <network_configure_weights+0xe0>)
 800cf2c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1712);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 800cf34:	4a1c      	ldr	r2, [pc, #112]	; (800cfa8 <network_configure_weights+0xe0>)
 800cf36:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800cf38:	4b1c      	ldr	r3, [pc, #112]	; (800cfac <network_configure_weights+0xe4>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf40:	4a1a      	ldr	r2, [pc, #104]	; (800cfac <network_configure_weights+0xe4>)
 800cf42:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 1424);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800cf4a:	4a18      	ldr	r2, [pc, #96]	; (800cfac <network_configure_weights+0xe4>)
 800cf4c:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 1360);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800cf54:	4a15      	ldr	r2, [pc, #84]	; (800cfac <network_configure_weights+0xe4>)
 800cf56:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf58:	4b15      	ldr	r3, [pc, #84]	; (800cfb0 <network_configure_weights+0xe8>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf60:	4a13      	ldr	r2, [pc, #76]	; (800cfb0 <network_configure_weights+0xe8>)
 800cf62:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 1264);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800cf6a:	4a11      	ldr	r2, [pc, #68]	; (800cfb0 <network_configure_weights+0xe8>)
 800cf6c:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 1264);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800cf74:	4a0e      	ldr	r2, [pc, #56]	; (800cfb0 <network_configure_weights+0xe8>)
 800cf76:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800cf78:	4b0e      	ldr	r3, [pc, #56]	; (800cfb4 <network_configure_weights+0xec>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf80:	4a0c      	ldr	r2, [pc, #48]	; (800cfb4 <network_configure_weights+0xec>)
 800cf82:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 64);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3340      	adds	r3, #64	; 0x40
 800cf88:	4a0a      	ldr	r2, [pc, #40]	; (800cfb4 <network_configure_weights+0xec>)
 800cf8a:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800cf8c:	4a09      	ldr	r2, [pc, #36]	; (800cfb4 <network_configure_weights+0xec>)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800cf92:	2301      	movs	r3, #1
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	200000b0 	.word	0x200000b0
 800cfa4:	200000c0 	.word	0x200000c0
 800cfa8:	200000d0 	.word	0x200000d0
 800cfac:	200000e0 	.word	0x200000e0
 800cfb0:	200000f0 	.word	0x200000f0
 800cfb4:	20000100 	.word	0x20000100

0800cfb8 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b0a0      	sub	sp, #128	; 0x80
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7f3 fcad 	bl	8000922 <ai_platform_context_acquire>
 800cfc8:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d047      	beq.n	800d060 <ai_network_get_info+0xa8>
 800cfd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d044      	beq.n	800d060 <ai_network_get_info+0xa8>
  {
    ai_network_report r = {
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	2274      	movs	r2, #116	; 0x74
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f002 fef8 	bl	800fdd4 <memset>
 800cfe4:	4b21      	ldr	r3, [pc, #132]	; (800d06c <ai_network_get_info+0xb4>)
 800cfe6:	60bb      	str	r3, [r7, #8]
 800cfe8:	4b21      	ldr	r3, [pc, #132]	; (800d070 <ai_network_get_info+0xb8>)
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	4b21      	ldr	r3, [pc, #132]	; (800d074 <ai_network_get_info+0xbc>)
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	4b21      	ldr	r3, [pc, #132]	; (800d078 <ai_network_get_info+0xc0>)
 800cff2:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800cff4:	f7f3 fb5b 	bl	80006ae <ai_platform_runtime_get_revision>
 800cff8:	4603      	mov	r3, r0
    ai_network_report r = {
 800cffa:	61bb      	str	r3, [r7, #24]
 800cffc:	f7f3 fba4 	bl	8000748 <ai_platform_runtime_get_version>
 800d000:	4603      	mov	r3, r0
 800d002:	61fb      	str	r3, [r7, #28]
 800d004:	4b1d      	ldr	r3, [pc, #116]	; (800d07c <ai_network_get_info+0xc4>)
 800d006:	623b      	str	r3, [r7, #32]
 800d008:	2305      	movs	r3, #5
 800d00a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800d00e:	2301      	movs	r3, #1
 800d010:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800d014:	2303      	movs	r3, #3
 800d016:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800d01a:	f7f3 fbe4 	bl	80007e6 <ai_platform_api_get_version>
 800d01e:	4603      	mov	r3, r0
 800d020:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d022:	f7f3 fc2f 	bl	8000884 <ai_platform_interface_api_get_version>
 800d026:	4603      	mov	r3, r0
 800d028:	633b      	str	r3, [r7, #48]	; 0x30
 800d02a:	f640 4336 	movw	r3, #3126	; 0xc36
 800d02e:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 800d030:	f107 0308 	add.w	r3, r7, #8
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7f3 fd31 	bl	8000a9e <ai_platform_api_get_network_report>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f083 0301 	eor.w	r3, r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <ai_network_get_info+0x94>
 800d048:	2300      	movs	r3, #0
 800d04a:	e00a      	b.n	800d062 <ai_network_get_info+0xaa>

    *report = r;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	f107 0308 	add.w	r3, r7, #8
 800d054:	2274      	movs	r2, #116	; 0x74
 800d056:	4619      	mov	r1, r3
 800d058:	f002 feb1 	bl	800fdbe <memcpy>
    return true;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e000      	b.n	800d062 <ai_network_get_info+0xaa>
  }

  return false;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3780      	adds	r7, #128	; 0x80
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	08014004 	.word	0x08014004
 800d070:	0801400c 	.word	0x0801400c
 800d074:	08014030 	.word	0x08014030
 800d078:	0801404c 	.word	0x0801404c
 800d07c:	08014064 	.word	0x08014064

0800d080 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7f3 fca5 	bl	80009d8 <ai_platform_network_get_error>
 800d08e:	4603      	mov	r3, r0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af02      	add	r7, sp, #8
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	4a04      	ldr	r2, [pc, #16]	; (800d0c0 <ai_network_create+0x28>)
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7f3 fdb1 	bl	8000c18 <ai_platform_network_create>
 800d0b6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	20000058 	.word	0x20000058

0800d0c4 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7f3 fdd9 	bl	8000c84 <ai_platform_network_destroy>
 800d0d2:	4603      	mov	r3, r0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7f3 fe1b 	bl	8000d24 <ai_platform_network_init>
 800d0ee:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <ai_network_init+0x1e>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e01f      	b.n	800d13a <ai_network_init+0x5e>

  ai_bool ok = true;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	4619      	mov	r1, r3
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7ff fee0 	bl	800cec8 <network_configure_weights>
 800d108:	4603      	mov	r3, r0
 800d10a:	461a      	mov	r2, r3
 800d10c:	7afb      	ldrb	r3, [r7, #11]
 800d10e:	4013      	ands	r3, r2
 800d110:	2b00      	cmp	r3, #0
 800d112:	bf14      	ite	ne
 800d114:	2301      	movne	r3, #1
 800d116:	2300      	moveq	r3, #0
 800d118:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	3318      	adds	r3, #24
 800d11e:	4619      	mov	r1, r3
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f7ff fe83 	bl	800ce2c <network_configure_activations>
 800d126:	4603      	mov	r3, r0
 800d128:	461a      	mov	r2, r3
 800d12a:	7afb      	ldrb	r3, [r7, #11]
 800d12c:	4013      	ands	r3, r2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	bf14      	ite	ne
 800d132:	2301      	movne	r3, #1
 800d134:	2300      	moveq	r3, #0
 800d136:	72fb      	strb	r3, [r7, #11]

  return ok;
 800d138:	7afb      	ldrb	r3, [r7, #11]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b084      	sub	sp, #16
 800d146:	af00      	add	r7, sp, #0
 800d148:	60f8      	str	r0, [r7, #12]
 800d14a:	60b9      	str	r1, [r7, #8]
 800d14c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7f3 fe7e 	bl	8000e54 <ai_platform_network_process>
 800d158:	4603      	mov	r3, r0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 800d16c:	2200      	movs	r2, #0
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7f3 fe6f 	bl	8000e54 <ai_platform_network_process>
 800d176:	4603      	mov	r3, r0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800d180:	b480      	push	{r7}
 800d182:	af00      	add	r7, sp, #0
    0x6d, 0x2d, 0x2b, 0x3f, 0xc9, 0x14, 0x86, 0xbd, 0x53, 0x1c,
    0xb3, 0xbc, 0x93, 0xf3, 0x1e, 0xbb, 0xc7, 0x57, 0x18,
    0x3e, 0x47, 0xc4, 0x82, 0xbe, 0x35, 0x27, 0x79, 0x3d
  };

  return AI_HANDLE_PTR(s_network_weights);
 800d184:	4b02      	ldr	r3, [pc, #8]	; (800d190 <ai_network_data_weights_get+0x10>)

}
 800d186:	4618      	mov	r0, r3
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	080143f0 	.word	0x080143f0

0800d194 <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	441a      	add	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	6852      	ldr	r2, [r2, #4]
 800d1d4:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800d1d8:	b212      	sxth	r2, r2
 800d1da:	441a      	add	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	881b      	ldrh	r3, [r3, #0]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bf14      	ite	ne
 800d1ec:	2301      	movne	r3, #1
 800d1ee:	2300      	moveq	r3, #0
 800d1f0:	b2db      	uxtb	r3, r3
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	b29b      	uxth	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 800d216:	2300      	movs	r3, #0
 800d218:	e073      	b.n	800d302 <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	f103 020f 	add.w	r2, r3, #15
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d109      	bne.n	800d246 <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6819      	ldr	r1, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	461a      	mov	r2, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff ffa9 	bl	800d194 <pb_field_iter_begin>
        return false;
 800d242:	2300      	movs	r3, #0
 800d244:	e05d      	b.n	800d302 <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	789b      	ldrb	r3, [r3, #2]
 800d254:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d258:	2b30      	cmp	r3, #48	; 0x30
 800d25a:	d111      	bne.n	800d280 <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	789b      	ldrb	r3, [r3, #2]
 800d262:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800d266:	2b30      	cmp	r3, #48	; 0x30
 800d268:	d10a      	bne.n	800d280 <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d272:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800d274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d278:	4293      	cmp	r3, r2
 800d27a:	d101      	bne.n	800d280 <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e040      	b.n	800d302 <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	789b      	ldrb	r3, [r3, #2]
 800d284:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10f      	bne.n	800d2ac <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	789b      	ldrb	r3, [r3, #2]
 800d290:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800d294:	2b20      	cmp	r3, #32
 800d296:	d109      	bne.n	800d2ac <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	fb02 f303 	mul.w	r3, r2, r3
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	e007      	b.n	800d2bc <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	789b      	ldrb	r3, [r3, #2]
 800d2b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d2b4:	2b80      	cmp	r3, #128	; 0x80
 800d2b6:	d101      	bne.n	800d2bc <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	789b      	ldrb	r3, [r3, #2]
 800d2c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d104      	bne.n	800d2d2 <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	1c5a      	adds	r2, r3, #1
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	691a      	ldr	r2, [r3, #16]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	440b      	add	r3, r1
 800d2e6:	441a      	add	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	6852      	ldr	r2, [r2, #4]
 800d2f4:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800d2f8:	b212      	sxth	r2, r2
 800d2fa:	441a      	add	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	615a      	str	r2, [r3, #20]
        return true;
 800d300:	2301      	movs	r3, #1
    }
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b084      	sub	sp, #16
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	b29b      	uxth	r3, r3
 800d322:	461a      	mov	r2, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	4293      	cmp	r3, r2
 800d328:	d108      	bne.n	800d33c <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	789b      	ldrb	r3, [r3, #2]
 800d330:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 800d334:	2b08      	cmp	r3, #8
 800d336:	d001      	beq.n	800d33c <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 800d338:	2301      	movs	r3, #1
 800d33a:	e008      	b.n	800d34e <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff ff5e 	bl	800d1fe <pb_field_iter_next>
    } while (iter->pos != start);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d1e6      	bne.n	800d31a <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800d356:	b480      	push	{r7}
 800d358:	b087      	sub	sp, #28
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	441a      	add	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d011      	beq.n	800d39e <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 800d37a:	2300      	movs	r3, #0
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e00a      	b.n	800d396 <buf_read+0x40>
            buf[i] = source[i];
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	441a      	add	r2, r3
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	440b      	add	r3, r1
 800d38c:	7812      	ldrb	r2, [r2, #0]
 800d38e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	3301      	adds	r3, #1
 800d394:	617b      	str	r3, [r7, #20]
 800d396:	697a      	ldr	r2, [r7, #20]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d3f0      	bcc.n	800d380 <buf_read+0x2a>
    }
    
    return true;
 800d39e:	2301      	movs	r3, #1
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	371c      	adds	r7, #28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b088      	sub	sp, #32
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d123      	bne.n	800d406 <pb_read+0x5a>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a2b      	ldr	r2, [pc, #172]	; (800d470 <pb_read+0xc4>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d01e      	beq.n	800d406 <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800d3c8:	e011      	b.n	800d3ee <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 800d3ca:	f107 0310 	add.w	r3, r7, #16
 800d3ce:	2210      	movs	r2, #16
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff ffea 	bl	800d3ac <pb_read>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f083 0301 	eor.w	r3, r3, #1
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <pb_read+0x3c>
				return false;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e03e      	b.n	800d466 <pb_read+0xba>
			
			count -= 16;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	3b10      	subs	r3, #16
 800d3ec:	607b      	str	r3, [r7, #4]
		while (count > 16)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b10      	cmp	r3, #16
 800d3f2:	d8ea      	bhi.n	800d3ca <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 800d3f4:	f107 0310 	add.w	r3, r7, #16
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f7ff ffd5 	bl	800d3ac <pb_read>
 800d402:	4603      	mov	r3, r0
 800d404:	e02f      	b.n	800d466 <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d90b      	bls.n	800d428 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <pb_read+0x72>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	e000      	b.n	800d420 <pb_read+0x74>
 800d41e:	4b15      	ldr	r3, [pc, #84]	; (800d474 <pb_read+0xc8>)
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	60d3      	str	r3, [r2, #12]
 800d424:	2300      	movs	r3, #0
 800d426:	e01e      	b.n	800d466 <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	4798      	blx	r3
 800d434:	4603      	mov	r3, r0
 800d436:	f083 0301 	eor.w	r3, r3, #1
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <pb_read+0xa2>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	e000      	b.n	800d450 <pb_read+0xa4>
 800d44e:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <pb_read+0xcc>)
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	60d3      	str	r3, [r2, #12]
 800d454:	2300      	movs	r3, #0
 800d456:	e006      	b.n	800d466 <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	689a      	ldr	r2, [r3, #8]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	1ad2      	subs	r2, r2, r3
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	609a      	str	r2, [r3, #8]
    return true;
 800d464:	2301      	movs	r3, #1
}
 800d466:	4618      	mov	r0, r3
 800d468:	3720      	adds	r7, #32
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	0800d357 	.word	0x0800d357
 800d474:	08014070 	.word	0x08014070
 800d478:	08014080 	.word	0x08014080

0800d47c <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10b      	bne.n	800d4a6 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <pb_readbyte+0x20>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	e000      	b.n	800d49e <pb_readbyte+0x22>
 800d49c:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <pb_readbyte+0x70>)
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	60d3      	str	r3, [r2, #12]
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e01d      	b.n	800d4e2 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	4798      	blx	r3
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	f083 0301 	eor.w	r3, r3, #1
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00b      	beq.n	800d4d6 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <pb_readbyte+0x50>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	e000      	b.n	800d4ce <pb_readbyte+0x52>
 800d4cc:	4b08      	ldr	r3, [pc, #32]	; (800d4f0 <pb_readbyte+0x74>)
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	60d3      	str	r3, [r2, #12]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e005      	b.n	800d4e2 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	1e5a      	subs	r2, r3, #1
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	609a      	str	r2, [r3, #8]
    
    return true;    
 800d4e0:	2301      	movs	r3, #1
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	08014070 	.word	0x08014070
 800d4f0:	08014080 	.word	0x08014080

0800d4f4 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 800d4f4:	b490      	push	{r4, r7}
 800d4f6:	b08a      	sub	sp, #40	; 0x28
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <pb_istream_from_buffer+0x38>)
 800d502:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800d510:	2300      	movs	r3, #0
 800d512:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	461c      	mov	r4, r3
 800d518:	f107 0318 	add.w	r3, r7, #24
 800d51c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d51e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	3728      	adds	r7, #40	; 0x28
 800d526:	46bd      	mov	sp, r7
 800d528:	bc90      	pop	{r4, r7}
 800d52a:	4770      	bx	lr
 800d52c:	0800d357 	.word	0x0800d357

0800d530 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b088      	sub	sp, #32
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800d53c:	f107 0316 	add.w	r3, r7, #22
 800d540:	4619      	mov	r1, r3
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f7ff ff9a 	bl	800d47c <pb_readbyte>
 800d548:	4603      	mov	r3, r0
 800d54a:	f083 0301 	eor.w	r3, r3, #1
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00b      	beq.n	800d56c <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d105      	bne.n	800d568 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 800d568:	2300      	movs	r3, #0
 800d56a:	e064      	b.n	800d636 <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 800d56c:	7dbb      	ldrb	r3, [r7, #22]
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	db02      	blt.n	800d57a <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800d574:	7dbb      	ldrb	r3, [r7, #22]
 800d576:	61fb      	str	r3, [r7, #28]
 800d578:	e059      	b.n	800d62e <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800d57a:	2307      	movs	r3, #7
 800d57c:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800d57e:	7dbb      	ldrb	r3, [r7, #22]
 800d580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d584:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800d586:	f107 0316 	add.w	r3, r7, #22
 800d58a:	4619      	mov	r1, r3
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f7ff ff75 	bl	800d47c <pb_readbyte>
 800d592:	4603      	mov	r3, r0
 800d594:	f083 0301 	eor.w	r3, r3, #1
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <pb_decode_varint32_eof+0x72>
                return false;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e049      	b.n	800d636 <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	2b1f      	cmp	r3, #31
 800d5a6:	d91e      	bls.n	800d5e6 <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	2b3e      	cmp	r3, #62	; 0x3e
 800d5ac:	d801      	bhi.n	800d5b2 <pb_decode_varint32_eof+0x82>
 800d5ae:	23ff      	movs	r3, #255	; 0xff
 800d5b0:	e000      	b.n	800d5b4 <pb_decode_varint32_eof+0x84>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800d5b6:	7dbb      	ldrb	r3, [r7, #22]
 800d5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01b      	beq.n	800d5f8 <pb_decode_varint32_eof+0xc8>
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	da03      	bge.n	800d5ce <pb_decode_varint32_eof+0x9e>
 800d5c6:	7dbb      	ldrb	r3, [r7, #22]
 800d5c8:	7dfa      	ldrb	r2, [r7, #23]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d014      	beq.n	800d5f8 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <pb_decode_varint32_eof+0xac>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	e000      	b.n	800d5de <pb_decode_varint32_eof+0xae>
 800d5dc:	4b18      	ldr	r3, [pc, #96]	; (800d640 <pb_decode_varint32_eof+0x110>)
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	60d3      	str	r3, [r2, #12]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e027      	b.n	800d636 <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800d5e6:	7dbb      	ldrb	r3, [r7, #22]
 800d5e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f2:	69fa      	ldr	r2, [r7, #28]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	3307      	adds	r3, #7
 800d5fc:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800d5fe:	7dbb      	ldrb	r3, [r7, #22]
 800d600:	b25b      	sxtb	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	dbbf      	blt.n	800d586 <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	2b23      	cmp	r3, #35	; 0x23
 800d60a:	d110      	bne.n	800d62e <pb_decode_varint32_eof+0xfe>
 800d60c:	7dbb      	ldrb	r3, [r7, #22]
 800d60e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00b      	beq.n	800d62e <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <pb_decode_varint32_eof+0xf4>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	e000      	b.n	800d626 <pb_decode_varint32_eof+0xf6>
 800d624:	4b06      	ldr	r3, [pc, #24]	; (800d640 <pb_decode_varint32_eof+0x110>)
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	60d3      	str	r3, [r2, #12]
 800d62a:	2300      	movs	r3, #0
 800d62c:	e003      	b.n	800d636 <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	69fa      	ldr	r2, [r7, #28]
 800d632:	601a      	str	r2, [r3, #0]
   return true;
 800d634:	2301      	movs	r3, #1
}
 800d636:	4618      	mov	r0, r3
 800d638:	3720      	adds	r7, #32
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	0801408c 	.word	0x0801408c

0800d644 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800d64e:	2200      	movs	r2, #0
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff ff6c 	bl	800d530 <pb_decode_varint32_eof>
 800d658:	4603      	mov	r3, r0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800d664:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800d668:	b088      	sub	sp, #32
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 800d674:	f04f 0200 	mov.w	r2, #0
 800d678:	f04f 0300 	mov.w	r3, #0
 800d67c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	2b3f      	cmp	r3, #63	; 0x3f
 800d684:	d90b      	bls.n	800d69e <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <pb_decode_varint+0x30>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	e000      	b.n	800d696 <pb_decode_varint+0x32>
 800d694:	4b23      	ldr	r3, [pc, #140]	; (800d724 <pb_decode_varint+0xc0>)
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	60d3      	str	r3, [r2, #12]
 800d69a:	2300      	movs	r3, #0
 800d69c:	e03d      	b.n	800d71a <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 800d69e:	f107 030f 	add.w	r3, r7, #15
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff fee9 	bl	800d47c <pb_readbyte>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f083 0301 	eor.w	r3, r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <pb_decode_varint+0x56>
            return false;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e02f      	b.n	800d71a <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	f04f 0300 	mov.w	r3, #0
 800d6c2:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800d6c6:	f04f 0100 	mov.w	r1, #0
 800d6ca:	ea02 0b00 	and.w	fp, r2, r0
 800d6ce:	ea03 0c01 	and.w	ip, r3, r1
 800d6d2:	69f9      	ldr	r1, [r7, #28]
 800d6d4:	f1a1 0620 	sub.w	r6, r1, #32
 800d6d8:	f1c1 0020 	rsb	r0, r1, #32
 800d6dc:	fa0c f501 	lsl.w	r5, ip, r1
 800d6e0:	fa0b f606 	lsl.w	r6, fp, r6
 800d6e4:	4335      	orrs	r5, r6
 800d6e6:	fa2b f000 	lsr.w	r0, fp, r0
 800d6ea:	4305      	orrs	r5, r0
 800d6ec:	fa0b f401 	lsl.w	r4, fp, r1
 800d6f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d6f4:	ea42 0004 	orr.w	r0, r2, r4
 800d6f8:	ea43 0105 	orr.w	r1, r3, r5
 800d6fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	3307      	adds	r3, #7
 800d704:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	b25b      	sxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	dbb8      	blt.n	800d680 <pb_decode_varint+0x1c>
    
    *dest = result;
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d714:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 800d718:	2301      	movs	r3, #1
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3720      	adds	r7, #32
 800d71e:	46bd      	mov	sp, r7
 800d720:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800d724:	0801408c 	.word	0x0801408c

0800d728 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 800d730:	f107 030f 	add.w	r3, r7, #15
 800d734:	2201      	movs	r2, #1
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff fe37 	bl	800d3ac <pb_read>
 800d73e:	4603      	mov	r3, r0
 800d740:	f083 0301 	eor.w	r3, r3, #1
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <pb_skip_varint+0x26>
            return false;
 800d74a:	2300      	movs	r3, #0
 800d74c:	e004      	b.n	800d758 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	b25b      	sxtb	r3, r3
 800d752:	2b00      	cmp	r3, #0
 800d754:	dbec      	blt.n	800d730 <pb_skip_varint+0x8>
    return true;
 800d756:	2301      	movs	r3, #1
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800d768:	f107 030c 	add.w	r3, r7, #12
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff ff68 	bl	800d644 <pb_decode_varint32>
 800d774:	4603      	mov	r3, r0
 800d776:	f083 0301 	eor.w	r3, r3, #1
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <pb_skip_string+0x24>
        return false;
 800d780:	2300      	movs	r3, #0
 800d782:	e006      	b.n	800d792 <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	461a      	mov	r2, r3
 800d788:	2100      	movs	r1, #0
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7ff fe0e 	bl	800d3ac <pb_read>
 800d790:	4603      	mov	r3, r0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b086      	sub	sp, #24
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	60b9      	str	r1, [r7, #8]
 800d7a4:	607a      	str	r2, [r7, #4]
 800d7a6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800d7ba:	f107 0314 	add.w	r3, r7, #20
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f7ff feb4 	bl	800d530 <pb_decode_varint32_eof>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	f083 0301 	eor.w	r3, r3, #1
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <pb_decode_tag+0x3e>
    {
        return false;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	e013      	b.n	800d800 <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d104      	bne.n	800d7e8 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	701a      	strb	r2, [r3, #0]
        return false;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	e00b      	b.n	800d800 <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	08da      	lsrs	r2, r3, #3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	f003 0307 	and.w	r3, r3, #7
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	701a      	strb	r2, [r3, #0]
    return true;
 800d7fe:	2301      	movs	r3, #1
}
 800d800:	4618      	mov	r0, r3
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800d814:	78fb      	ldrb	r3, [r7, #3]
 800d816:	2b05      	cmp	r3, #5
 800d818:	d826      	bhi.n	800d868 <pb_skip_field+0x60>
 800d81a:	a201      	add	r2, pc, #4	; (adr r2, 800d820 <pb_skip_field+0x18>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d843 	.word	0x0800d843
 800d828:	0800d851 	.word	0x0800d851
 800d82c:	0800d869 	.word	0x0800d869
 800d830:	0800d869 	.word	0x0800d869
 800d834:	0800d85b 	.word	0x0800d85b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7ff ff75 	bl	800d728 <pb_skip_varint>
 800d83e:	4603      	mov	r3, r0
 800d840:	e01d      	b.n	800d87e <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800d842:	2208      	movs	r2, #8
 800d844:	2100      	movs	r1, #0
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fdb0 	bl	800d3ac <pb_read>
 800d84c:	4603      	mov	r3, r0
 800d84e:	e016      	b.n	800d87e <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff ff85 	bl	800d760 <pb_skip_string>
 800d856:	4603      	mov	r3, r0
 800d858:	e011      	b.n	800d87e <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800d85a:	2204      	movs	r2, #4
 800d85c:	2100      	movs	r1, #0
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff fda4 	bl	800d3ac <pb_read>
 800d864:	4603      	mov	r3, r0
 800d866:	e00a      	b.n	800d87e <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <pb_skip_field+0x6e>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	e000      	b.n	800d878 <pb_skip_field+0x70>
 800d876:	4b04      	ldr	r3, [pc, #16]	; (800d888 <pb_skip_field+0x80>)
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	60d3      	str	r3, [r2, #12]
 800d87c:	2300      	movs	r3, #0
    }
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	0801409c 	.word	0x0801409c

0800d88c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	607a      	str	r2, [r7, #4]
 800d896:	603b      	str	r3, [r7, #0]
 800d898:	460b      	mov	r3, r1
 800d89a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d028      	beq.n	800d8fa <read_raw_value+0x6e>
 800d8a8:	2b05      	cmp	r3, #5
 800d8aa:	d030      	beq.n	800d90e <read_raw_value+0x82>
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d138      	bne.n	800d922 <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d201      	bcs.n	800d8ce <read_raw_value+0x42>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e034      	b.n	800d938 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	6879      	ldr	r1, [r7, #4]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f7ff fd6a 	bl	800d3ac <pb_read>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	f083 0301 	eor.w	r3, r3, #1
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <read_raw_value+0x5c>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e027      	b.n	800d938 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	607a      	str	r2, [r7, #4]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	b25b      	sxtb	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	dbdf      	blt.n	800d8b6 <read_raw_value+0x2a>
            return true;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e01e      	b.n	800d938 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2208      	movs	r2, #8
 800d8fe:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800d900:	2208      	movs	r2, #8
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f7ff fd51 	bl	800d3ac <pb_read>
 800d90a:	4603      	mov	r3, r0
 800d90c:	e014      	b.n	800d938 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2204      	movs	r2, #4
 800d912:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800d914:	2204      	movs	r2, #4
 800d916:	6879      	ldr	r1, [r7, #4]
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f7ff fd47 	bl	800d3ac <pb_read>
 800d91e:	4603      	mov	r3, r0
 800d920:	e00a      	b.n	800d938 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d002      	beq.n	800d930 <read_raw_value+0xa4>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	e000      	b.n	800d932 <read_raw_value+0xa6>
 800d930:	4b03      	ldr	r3, [pc, #12]	; (800d940 <read_raw_value+0xb4>)
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	60d3      	str	r3, [r2, #12]
 800d936:	2300      	movs	r3, #0
    }
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3718      	adds	r7, #24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	0801409c 	.word	0x0801409c

0800d944 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800d94e:	f107 030c 	add.w	r3, r7, #12
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7ff fe75 	bl	800d644 <pb_decode_varint32>
 800d95a:	4603      	mov	r3, r0
 800d95c:	f083 0301 	eor.w	r3, r3, #1
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <pb_make_string_substream+0x26>
        return false;
 800d966:	2300      	movs	r3, #0
 800d968:	e020      	b.n	800d9ac <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4614      	mov	r4, r2
 800d970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	689a      	ldr	r2, [r3, #8]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d20b      	bcs.n	800d998 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <pb_make_string_substream+0x4a>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	e000      	b.n	800d990 <pb_make_string_substream+0x4c>
 800d98e:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <pb_make_string_substream+0x70>)
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	60d3      	str	r3, [r2, #12]
 800d994:	2300      	movs	r3, #0
 800d996:	e009      	b.n	800d9ac <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	689a      	ldr	r2, [r3, #8]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	1ad2      	subs	r2, r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	609a      	str	r2, [r3, #8]
    return true;
 800d9aa:	2301      	movs	r3, #1
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd90      	pop	{r4, r7, pc}
 800d9b4:	080140b0 	.word	0x080140b0

0800d9b8 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00e      	beq.n	800d9e8 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	f7ff fcea 	bl	800d3ac <pb_read>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f083 0301 	eor.w	r3, r3, #1
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <pb_close_string_substream+0x30>
            return false;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e008      	b.n	800d9fa <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	68da      	ldr	r2, [r3, #12]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800d9f8:	2301      	movs	r3, #1
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	; 0x38
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	460b      	mov	r3, r1
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	789b      	ldrb	r3, [r3, #2]
 800da18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 800da1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800da20:	f003 030f 	and.w	r3, r3, #15
 800da24:	4a85      	ldr	r2, [pc, #532]	; (800dc3c <decode_static_field+0x238>)
 800da26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 800da2c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800da30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800da34:	2b10      	cmp	r3, #16
 800da36:	d013      	beq.n	800da60 <decode_static_field+0x5c>
 800da38:	2b10      	cmp	r3, #16
 800da3a:	dc02      	bgt.n	800da42 <decode_static_field+0x3e>
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d006      	beq.n	800da4e <decode_static_field+0x4a>
 800da40:	e0ec      	b.n	800dc1c <decode_static_field+0x218>
 800da42:	2b20      	cmp	r3, #32
 800da44:	d01f      	beq.n	800da86 <decode_static_field+0x82>
 800da46:	2b30      	cmp	r3, #48	; 0x30
 800da48:	f000 80bd 	beq.w	800dbc6 <decode_static_field+0x1c2>
 800da4c:	e0e6      	b.n	800dc1c <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6859      	ldr	r1, [r3, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	691a      	ldr	r2, [r3, #16]
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	4798      	blx	r3
 800da5c:	4603      	mov	r3, r0
 800da5e:	e0e8      	b.n	800dc32 <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	695a      	ldr	r2, [r3, #20]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d003      	beq.n	800da74 <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	2201      	movs	r2, #1
 800da72:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6859      	ldr	r1, [r3, #4]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	691a      	ldr	r2, [r3, #16]
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	4798      	blx	r3
 800da82:	4603      	mov	r3, r0
 800da84:	e0d5      	b.n	800dc32 <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800da86:	7afb      	ldrb	r3, [r7, #11]
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d16a      	bne.n	800db62 <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800da8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800da90:	f003 030f 	and.w	r3, r3, #15
 800da94:	2b04      	cmp	r3, #4
 800da96:	dc64      	bgt.n	800db62 <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 800da98:	2301      	movs	r3, #1
 800da9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 800daa4:	f107 0310 	add.w	r3, r7, #16
 800daa8:	4619      	mov	r1, r3
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7ff ff4a 	bl	800d944 <pb_make_string_substream>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f083 0301 	eor.w	r3, r3, #1
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d026      	beq.n	800db0a <decode_static_field+0x106>
                    return false;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e0b8      	b.n	800dc32 <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	6852      	ldr	r2, [r2, #4]
 800dac8:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800dacc:	b292      	uxth	r2, r2
 800dace:	4611      	mov	r1, r2
 800dad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dad2:	8812      	ldrh	r2, [r2, #0]
 800dad4:	fb02 f201 	mul.w	r2, r2, r1
 800dad8:	4413      	add	r3, r2
 800dada:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6859      	ldr	r1, [r3, #4]
 800dae0:	f107 0010 	add.w	r0, r7, #16
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dae8:	4798      	blx	r3
 800daea:	4603      	mov	r3, r0
 800daec:	f083 0301 	eor.w	r3, r3, #1
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d003      	beq.n	800dafe <decode_static_field+0xfa>
                    {
                        status = false;
 800daf6:	2300      	movs	r3, #0
 800daf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 800dafc:	e011      	b.n	800db22 <decode_static_field+0x11e>
                    }
                    (*size)++;
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	3301      	adds	r3, #1
 800db04:	b29a      	uxth	r2, r3
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d008      	beq.n	800db22 <decode_static_field+0x11e>
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	881a      	ldrh	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	429a      	cmp	r2, r3
 800db20:	d3ce      	bcc.n	800dac0 <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00b      	beq.n	800db40 <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <decode_static_field+0x132>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	e000      	b.n	800db38 <decode_static_field+0x134>
 800db36:	4b42      	ldr	r3, [pc, #264]	; (800dc40 <decode_static_field+0x23c>)
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	60d3      	str	r3, [r2, #12]
 800db3c:	2300      	movs	r3, #0
 800db3e:	e078      	b.n	800dc32 <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 800db40:	f107 0310 	add.w	r3, r7, #16
 800db44:	4619      	mov	r1, r3
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7ff ff36 	bl	800d9b8 <pb_close_string_substream>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f083 0301 	eor.w	r3, r3, #1
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <decode_static_field+0x158>
                    return false;
 800db58:	2300      	movs	r3, #0
 800db5a:	e06a      	b.n	800dc32 <decode_static_field+0x22e>

                return status;
 800db5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db60:	e067      	b.n	800dc32 <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	6852      	ldr	r2, [r2, #4]
 800db70:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800db74:	b292      	uxth	r2, r2
 800db76:	4611      	mov	r1, r2
 800db78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db7a:	8812      	ldrh	r2, [r2, #0]
 800db7c:	fb02 f201 	mul.w	r2, r2, r1
 800db80:	4413      	add	r3, r2
 800db82:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	b291      	uxth	r1, r2
 800db8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db8e:	8011      	strh	r1, [r2, #0]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6852      	ldr	r2, [r2, #4]
 800db94:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800db98:	b292      	uxth	r2, r2
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d30b      	bcc.n	800dbb6 <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <decode_static_field+0x1a8>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	e000      	b.n	800dbae <decode_static_field+0x1aa>
 800dbac:	4b24      	ldr	r3, [pc, #144]	; (800dc40 <decode_static_field+0x23c>)
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	60d3      	str	r3, [r2, #12]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e03d      	b.n	800dc32 <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6859      	ldr	r1, [r3, #4]
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	4798      	blx	r3
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	e035      	b.n	800dc32 <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	8812      	ldrh	r2, [r2, #0]
 800dbd0:	b292      	uxth	r2, r2
 800dbd2:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800dbd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800dbd8:	f003 030f 	and.w	r3, r3, #15
 800dbdc:	2b07      	cmp	r3, #7
 800dbde:	d114      	bne.n	800dc0a <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6918      	ldr	r0, [r3, #16]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	461a      	mov	r2, r3
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	f002 f8ef 	bl	800fdd4 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	4619      	mov	r1, r3
 800dc04:	4610      	mov	r0, r2
 800dc06:	f000 fa55 	bl	800e0b4 <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6859      	ldr	r1, [r3, #4]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	691a      	ldr	r2, [r3, #16]
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	4798      	blx	r3
 800dc18:	4603      	mov	r3, r0
 800dc1a:	e00a      	b.n	800dc32 <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <decode_static_field+0x226>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	e000      	b.n	800dc2c <decode_static_field+0x228>
 800dc2a:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <decode_static_field+0x240>)
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	60d3      	str	r3, [r2, #12]
 800dc30:	2300      	movs	r3, #0
    }
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3738      	adds	r7, #56	; 0x38
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	08014c2c 	.word	0x08014c2c
 800dc40:	080140c8 	.word	0x080140c8
 800dc44:	080140d8 	.word	0x080140d8

0800dc48 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	460b      	mov	r3, r1
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <decode_pointer_field+0x1c>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	e000      	b.n	800dc66 <decode_pointer_field+0x1e>
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <decode_pointer_field+0x30>)
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	60d3      	str	r3, [r2, #12]
 800dc6a:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	080140ec 	.word	0x080140ec

0800dc7c <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800dc7c:	b590      	push	{r4, r7, lr}
 800dc7e:	b097      	sub	sp, #92	; 0x5c
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	61f8      	str	r0, [r7, #28]
 800dc84:	460b      	mov	r3, r1
 800dc86:	617a      	str	r2, [r7, #20]
 800dc88:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 800dc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc92:	3304      	adds	r3, #4
 800dc94:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800dc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <decode_callback_field+0x28>
 800dc9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 800dca4:	7efb      	ldrb	r3, [r7, #27]
 800dca6:	4619      	mov	r1, r3
 800dca8:	69f8      	ldr	r0, [r7, #28]
 800dcaa:	f7ff fdad 	bl	800d808 <pb_skip_field>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	e065      	b.n	800dd7e <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 800dcb2:	7efb      	ldrb	r3, [r7, #27]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d13a      	bne.n	800dd2e <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 800dcb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	69f8      	ldr	r0, [r7, #28]
 800dcc0:	f7ff fe40 	bl	800d944 <pb_make_string_substream>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	f083 0301 	eor.w	r3, r3, #1
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <decode_callback_field+0x58>
            return false;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e054      	b.n	800dd7e <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800dcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	697a      	ldr	r2, [r7, #20]
 800dcda:	6851      	ldr	r1, [r2, #4]
 800dcdc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800dce0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dce2:	4798      	blx	r3
 800dce4:	4603      	mov	r3, r0
 800dce6:	f083 0301 	eor.w	r3, r3, #1
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00b      	beq.n	800dd08 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <decode_callback_field+0x82>
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	e000      	b.n	800dd00 <decode_callback_field+0x84>
 800dcfe:	4b22      	ldr	r3, [pc, #136]	; (800dd88 <decode_callback_field+0x10c>)
 800dd00:	69fa      	ldr	r2, [r7, #28]
 800dd02:	60d3      	str	r3, [r2, #12]
 800dd04:	2300      	movs	r3, #0
 800dd06:	e03a      	b.n	800dd7e <decode_callback_field+0x102>
        } while (substream.bytes_left);
 800dd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1e2      	bne.n	800dcd4 <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 800dd0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dd12:	4619      	mov	r1, r3
 800dd14:	69f8      	ldr	r0, [r7, #28]
 800dd16:	f7ff fe4f 	bl	800d9b8 <pb_close_string_substream>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	f083 0301 	eor.w	r3, r3, #1
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <decode_callback_field+0xae>
            return false;
 800dd26:	2300      	movs	r3, #0
 800dd28:	e029      	b.n	800dd7e <decode_callback_field+0x102>

        return true;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e027      	b.n	800dd7e <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800dd2e:	230a      	movs	r3, #10
 800dd30:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800dd32:	f107 0320 	add.w	r3, r7, #32
 800dd36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dd3a:	7ef9      	ldrb	r1, [r7, #27]
 800dd3c:	69f8      	ldr	r0, [r7, #28]
 800dd3e:	f7ff fda5 	bl	800d88c <read_raw_value>
 800dd42:	4603      	mov	r3, r0
 800dd44:	f083 0301 	eor.w	r3, r3, #1
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d001      	beq.n	800dd52 <decode_callback_field+0xd6>
            return false;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	e015      	b.n	800dd7e <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 800dd52:	6a3a      	ldr	r2, [r7, #32]
 800dd54:	463b      	mov	r3, r7
 800dd56:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff fbca 	bl	800d4f4 <pb_istream_from_buffer>
 800dd60:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dd64:	463b      	mov	r3, r7
 800dd66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800dd6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	6851      	ldr	r1, [r2, #4]
 800dd74:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800dd78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd7a:	4798      	blx	r3
 800dd7c:	4603      	mov	r3, r0
    }
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	375c      	adds	r7, #92	; 0x5c
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd90      	pop	{r4, r7, pc}
 800dd86:	bf00      	nop
 800dd88:	08014100 	.word	0x08014100

0800dd8c <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	460b      	mov	r3, r1
 800dd96:	607a      	str	r2, [r7, #4]
 800dd98:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	789b      	ldrb	r3, [r3, #2]
 800dda0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dda4:	2b40      	cmp	r3, #64	; 0x40
 800dda6:	d013      	beq.n	800ddd0 <decode_field+0x44>
 800dda8:	2b80      	cmp	r3, #128	; 0x80
 800ddaa:	d009      	beq.n	800ddc0 <decode_field+0x34>
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d117      	bne.n	800dde0 <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 800ddb0:	7afb      	ldrb	r3, [r7, #11]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7ff fe24 	bl	800da04 <decode_static_field>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	e01a      	b.n	800ddf6 <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 800ddc0:	7afb      	ldrb	r3, [r7, #11]
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f7ff ff3e 	bl	800dc48 <decode_pointer_field>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	e012      	b.n	800ddf6 <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 800ddd0:	7afb      	ldrb	r3, [r7, #11]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7ff ff50 	bl	800dc7c <decode_callback_field>
 800dddc:	4603      	mov	r3, r0
 800ddde:	e00a      	b.n	800ddf6 <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <decode_field+0x62>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	e000      	b.n	800ddf0 <decode_field+0x64>
 800ddee:	4b04      	ldr	r3, [pc, #16]	; (800de00 <decode_field+0x74>)
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	60d3      	str	r3, [r2, #12]
 800ddf4:	2300      	movs	r3, #0
    }
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	080140d8 	.word	0x080140d8

0800de04 <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	461a      	mov	r2, r3
 800de1c:	68f9      	ldr	r1, [r7, #12]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff f9b8 	bl	800d194 <pb_field_iter_begin>
    iter->pData = extension->dest;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	f103 020c 	add.w	r2, r3, #12
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	789b      	ldrb	r3, [r3, #2]
 800de3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de3e:	2b80      	cmp	r3, #128	; 0x80
 800de40:	d103      	bne.n	800de4a <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	1d1a      	adds	r2, r3, #4
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	611a      	str	r2, [r3, #16]
    }
}
 800de4a:	bf00      	nop
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b08c      	sub	sp, #48	; 0x30
 800de56:	af00      	add	r7, sp, #0
 800de58:	60f8      	str	r0, [r7, #12]
 800de5a:	60b9      	str	r1, [r7, #8]
 800de5c:	607a      	str	r2, [r7, #4]
 800de5e:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	881b      	ldrh	r3, [r3, #0]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	461a      	mov	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4293      	cmp	r3, r2
 800de74:	d001      	beq.n	800de7a <default_extension_decoder+0x28>
        return true;
 800de76:	2301      	movs	r3, #1
 800de78:	e010      	b.n	800de9c <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 800de7a:	f107 0314 	add.w	r3, r7, #20
 800de7e:	68b9      	ldr	r1, [r7, #8]
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff ffbf 	bl	800de04 <iter_from_extension>
    extension->found = true;
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2201      	movs	r2, #1
 800de8a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800de8c:	f107 0214 	add.w	r2, r7, #20
 800de90:	78fb      	ldrb	r3, [r7, #3]
 800de92:	4619      	mov	r1, r3
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f7ff ff79 	bl	800dd8c <decode_field>
 800de9a:	4603      	mov	r3, r0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3730      	adds	r7, #48	; 0x30
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800dea4:	b590      	push	{r4, r7, lr}
 800dea6:	b089      	sub	sp, #36	; 0x24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	4613      	mov	r3, r2
 800deb2:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 800dec2:	e022      	b.n	800df0a <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00a      	beq.n	800dee4 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681c      	ldr	r4, [r3, #0]
 800ded4:	79fb      	ldrb	r3, [r7, #7]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	69f9      	ldr	r1, [r7, #28]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	47a0      	blx	r4
 800dede:	4603      	mov	r3, r0
 800dee0:	76fb      	strb	r3, [r7, #27]
 800dee2:	e007      	b.n	800def4 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800dee4:	79fb      	ldrb	r3, [r7, #7]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	69f9      	ldr	r1, [r7, #28]
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f7ff ffb1 	bl	800de52 <default_extension_decoder>
 800def0:	4603      	mov	r3, r0
 800def2:	76fb      	strb	r3, [r7, #27]

        if (!status)
 800def4:	7efb      	ldrb	r3, [r7, #27]
 800def6:	f083 0301 	eor.w	r3, r3, #1
 800defa:	b2db      	uxtb	r3, r3
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <decode_extension+0x60>
            return false;
 800df00:	2300      	movs	r3, #0
 800df02:	e00b      	b.n	800df1c <decode_extension+0x78>
        
        extension = extension->next;
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d004      	beq.n	800df1a <decode_extension+0x76>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	429a      	cmp	r2, r3
 800df18:	d0d4      	beq.n	800dec4 <decode_extension+0x20>
    }
    
    return true;
 800df1a:	2301      	movs	r3, #1
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3724      	adds	r7, #36	; 0x24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd90      	pop	{r4, r7, pc}

0800df24 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	789b      	ldrb	r3, [r3, #2]
 800df38:	f003 030f 	and.w	r3, r3, #15
 800df3c:	2b08      	cmp	r3, #8
 800df3e:	d101      	bne.n	800df44 <find_extension_field+0x20>
            return true;
 800df40:	2301      	movs	r3, #1
 800df42:	e008      	b.n	800df56 <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff f95a 	bl	800d1fe <pb_field_iter_next>
    } while (iter->pos != start);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	429a      	cmp	r2, r3
 800df52:	d1ee      	bne.n	800df32 <find_extension_field+0xe>
    
    return false;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b08a      	sub	sp, #40	; 0x28
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	789b      	ldrb	r3, [r3, #2]
 800df6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800df70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	2b08      	cmp	r3, #8
 800df7a:	d119      	bne.n	800dfb0 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	691b      	ldr	r3, [r3, #16]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800df84:	e010      	b.n	800dfa8 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	2200      	movs	r2, #0
 800df8a:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 800df8c:	f107 0308 	add.w	r3, r7, #8
 800df90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df92:	4618      	mov	r0, r3
 800df94:	f7ff ff36 	bl	800de04 <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 800df98:	f107 0308 	add.w	r3, r7, #8
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff ffde 	bl	800df5e <pb_field_set_to_default>
            ext = ext->next;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1eb      	bne.n	800df86 <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 800dfae:	e07d      	b.n	800e0ac <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800dfb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dfb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d15d      	bne.n	800e078 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800dfc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dfc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dfca:	2b10      	cmp	r3, #16
 800dfcc:	d10a      	bne.n	800dfe4 <pb_field_set_to_default+0x86>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	695a      	ldr	r2, [r3, #20]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d004      	beq.n	800dfe4 <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	695b      	ldr	r3, [r3, #20]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	701a      	strb	r2, [r3, #0]
 800dfe2:	e012      	b.n	800e00a <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800dfe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dfe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dfec:	2b20      	cmp	r3, #32
 800dfee:	d005      	beq.n	800dffc <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800dff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800dff8:	2b30      	cmp	r3, #48	; 0x30
 800dffa:	d106      	bne.n	800e00a <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	695b      	ldr	r3, [r3, #20]
 800e000:	2200      	movs	r2, #0
 800e002:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800e004:	2300      	movs	r3, #0
 800e006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 800e00a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d04c      	beq.n	800e0ac <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	789b      	ldrb	r3, [r3, #2]
 800e018:	f003 030f 	and.w	r3, r3, #15
 800e01c:	2b07      	cmp	r3, #7
 800e01e:	d10a      	bne.n	800e036 <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	4619      	mov	r1, r3
 800e02e:	4610      	mov	r0, r2
 800e030:	f000 f840 	bl	800e0b4 <pb_message_set_to_defaults>
}
 800e034:	e03a      	b.n	800e0ac <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d00e      	beq.n	800e060 <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6918      	ldr	r0, [r3, #16]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	f8d3 100b 	ldr.w	r1, [r3, #11]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e056:	b29b      	uxth	r3, r3
 800e058:	461a      	mov	r2, r3
 800e05a:	f001 feb0 	bl	800fdbe <memcpy>
}
 800e05e:	e025      	b.n	800e0ac <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6918      	ldr	r0, [r3, #16]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	461a      	mov	r2, r3
 800e070:	2100      	movs	r1, #0
 800e072:	f001 feaf 	bl	800fdd4 <memset>
}
 800e076:	e019      	b.n	800e0ac <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800e078:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e07c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e080:	2b80      	cmp	r3, #128	; 0x80
 800e082:	d113      	bne.n	800e0ac <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800e08c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e090:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e094:	2b20      	cmp	r3, #32
 800e096:	d005      	beq.n	800e0a4 <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800e098:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e09c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800e0a0:	2b30      	cmp	r3, #48	; 0x30
 800e0a2:	d103      	bne.n	800e0ac <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	695b      	ldr	r3, [r3, #20]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	801a      	strh	r2, [r3, #0]
}
 800e0ac:	bf00      	nop
 800e0ae:	3728      	adds	r7, #40	; 0x28
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800e0be:	f107 0308 	add.w	r3, r7, #8
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	6879      	ldr	r1, [r7, #4]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff f864 	bl	800d194 <pb_field_iter_begin>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	f083 0301 	eor.w	r3, r3, #1
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10d      	bne.n	800e0f4 <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800e0d8:	f107 0308 	add.w	r3, r7, #8
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff ff3e 	bl	800df5e <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800e0e2:	f107 0308 	add.w	r3, r7, #8
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7ff f889 	bl	800d1fe <pb_field_iter_next>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1f2      	bne.n	800e0d8 <pb_message_set_to_defaults+0x24>
 800e0f2:	e000      	b.n	800e0f6 <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 800e0f4:	bf00      	nop
}
 800e0f6:	3720      	adds	r7, #32
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b098      	sub	sp, #96	; 0x60
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800e108:	2300      	movs	r3, #0
 800e10a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e10c:	2300      	movs	r3, #0
 800e10e:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
 800e114:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 800e11a:	2300      	movs	r3, #0
 800e11c:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800e122:	f107 0320 	add.w	r3, r7, #32
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff f832 	bl	800d194 <pb_field_iter_begin>

    while (stream->bytes_left)
 800e130:	e0bf      	b.n	800e2b2 <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800e132:	f107 0316 	add.w	r3, r7, #22
 800e136:	f107 0218 	add.w	r2, r7, #24
 800e13a:	f107 0117 	add.w	r1, r7, #23
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f7ff fb2b 	bl	800d79a <pb_decode_tag>
 800e144:	4603      	mov	r3, r0
 800e146:	f083 0301 	eor.w	r3, r3, #1
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <pb_decode_noinit+0x60>
        {
            if (eof)
 800e150:	7dbb      	ldrb	r3, [r7, #22]
 800e152:	2b00      	cmp	r3, #0
 800e154:	f040 80b3 	bne.w	800e2be <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 800e158:	2300      	movs	r3, #0
 800e15a:	e130      	b.n	800e3be <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 800e15c:	69ba      	ldr	r2, [r7, #24]
 800e15e:	f107 0320 	add.w	r3, r7, #32
 800e162:	4611      	mov	r1, r2
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff f8d0 	bl	800d30a <pb_field_iter_find>
 800e16a:	4603      	mov	r3, r0
 800e16c:	f083 0301 	eor.w	r3, r3, #1
 800e170:	b2db      	uxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d03e      	beq.n	800e1f4 <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d82d      	bhi.n	800e1da <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 800e17e:	f107 0320 	add.w	r3, r7, #32
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff fece 	bl	800df24 <find_extension_field>
 800e188:	4603      	mov	r3, r0
 800e18a:	f083 0301 	eor.w	r3, r3, #1
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	d003      	beq.n	800e19c <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 800e194:	f04f 33ff 	mov.w	r3, #4294967295
 800e198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e19a:	e003      	b.n	800e1a4 <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d816      	bhi.n	800e1da <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 800e1b2:	69b9      	ldr	r1, [r7, #24]
 800e1b4:	7dfa      	ldrb	r2, [r7, #23]
 800e1b6:	f107 0320 	add.w	r3, r7, #32
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f7ff fe72 	bl	800dea4 <decode_extension>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	f083 0301 	eor.w	r3, r3, #1
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <pb_decode_noinit+0xd4>
                        return false;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e0f6      	b.n	800e3be <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d168      	bne.n	800e2ac <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800e1da:	7dfb      	ldrb	r3, [r7, #23]
 800e1dc:	4619      	mov	r1, r3
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff fb12 	bl	800d808 <pb_skip_field>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f083 0301 	eor.w	r3, r3, #1
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d05f      	beq.n	800e2b0 <pb_decode_noinit+0x1b4>
                return false;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	e0e4      	b.n	800e3be <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	789b      	ldrb	r3, [r3, #2]
 800e1f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e1fc:	2b20      	cmp	r3, #32
 800e1fe:	d124      	bne.n	800e24a <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 800e200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	429a      	cmp	r2, r3
 800e206:	d120      	bne.n	800e24a <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d019      	beq.n	800e244 <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 800e210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e212:	2b00      	cmp	r3, #0
 800e214:	d012      	beq.n	800e23c <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 800e216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e218:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 800e220:	429a      	cmp	r2, r3
 800e222:	d00b      	beq.n	800e23c <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <pb_decode_noinit+0x136>
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	e000      	b.n	800e234 <pb_decode_noinit+0x138>
 800e232:	4b65      	ldr	r3, [pc, #404]	; (800e3c8 <pb_decode_noinit+0x2cc>)
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	60d3      	str	r3, [r2, #12]
 800e238:	2300      	movs	r3, #0
 800e23a:	e0c0      	b.n	800e3be <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 800e244:	f107 031e 	add.w	r3, r7, #30
 800e248:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	789b      	ldrb	r3, [r3, #2]
 800e24e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e252:	2b00      	cmp	r3, #0
 800e254:	d11b      	bne.n	800e28e <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	2b3f      	cmp	r3, #63	; 0x3f
 800e25a:	d818      	bhi.n	800e28e <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	f003 031f 	and.w	r3, r3, #31
 800e262:	2201      	movs	r2, #1
 800e264:	fa02 f303 	lsl.w	r3, r2, r3
 800e268:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	095b      	lsrs	r3, r3, #5
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e274:	4413      	add	r3, r2
 800e276:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	095b      	lsrs	r3, r3, #5
 800e27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e280:	430a      	orrs	r2, r1
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e288:	440b      	add	r3, r1
 800e28a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
 800e290:	f107 0220 	add.w	r2, r7, #32
 800e294:	4619      	mov	r1, r3
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7ff fd78 	bl	800dd8c <decode_field>
 800e29c:	4603      	mov	r3, r0
 800e29e:	f083 0301 	eor.w	r3, r3, #1
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d004      	beq.n	800e2b2 <pb_decode_noinit+0x1b6>
            return false;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	e088      	b.n	800e3be <pb_decode_noinit+0x2c2>
                        continue;
 800e2ac:	bf00      	nop
 800e2ae:	e000      	b.n	800e2b2 <pb_decode_noinit+0x1b6>
            continue;
 800e2b0:	bf00      	nop
    while (stream->bytes_left)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f47f af3b 	bne.w	800e132 <pb_decode_noinit+0x36>
 800e2bc:	e000      	b.n	800e2c0 <pb_decode_noinit+0x1c4>
                break;
 800e2be:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 800e2c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d012      	beq.n	800e2ec <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 800e2c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2c8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d00b      	beq.n	800e2ec <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <pb_decode_noinit+0x1e6>
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	e000      	b.n	800e2e4 <pb_decode_noinit+0x1e8>
 800e2e2:	4b39      	ldr	r3, [pc, #228]	; (800e3c8 <pb_decode_noinit+0x2cc>)
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	60d3      	str	r3, [r2, #12]
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e068      	b.n	800e3be <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ee:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	789b      	ldrb	r3, [r3, #2]
 800e2f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 800e2f8:	f107 0320 	add.w	r3, r7, #32
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fe ff7e 	bl	800d1fe <pb_field_iter_next>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1f1      	bne.n	800e2ec <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800e308:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e30c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e310:	2b00      	cmp	r3, #0
 800e312:	d107      	bne.n	800e324 <pb_decode_noinit+0x228>
 800e314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <pb_decode_noinit+0x228>
            req_field_count++;
 800e31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e320:	3301      	adds	r3, #1
 800e322:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800e324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e326:	2b40      	cmp	r3, #64	; 0x40
 800e328:	d901      	bls.n	800e32e <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800e32a:	2340      	movs	r3, #64	; 0x40
 800e32c:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 800e32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e330:	2b00      	cmp	r3, #0
 800e332:	d043      	beq.n	800e3bc <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800e334:	2300      	movs	r3, #0
 800e336:	653b      	str	r3, [r7, #80]	; 0x50
 800e338:	e018      	b.n	800e36c <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 800e33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e342:	4413      	add	r3, r2
 800e344:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800e348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d00b      	beq.n	800e366 <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d002      	beq.n	800e35c <pb_decode_noinit+0x260>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	e000      	b.n	800e35e <pb_decode_noinit+0x262>
 800e35c:	4b1b      	ldr	r3, [pc, #108]	; (800e3cc <pb_decode_noinit+0x2d0>)
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	60d3      	str	r3, [r2, #12]
 800e362:	2300      	movs	r3, #0
 800e364:	e02b      	b.n	800e3be <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 800e366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e368:	3301      	adds	r3, #1
 800e36a:	653b      	str	r3, [r7, #80]	; 0x50
 800e36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e36e:	095b      	lsrs	r3, r3, #5
 800e370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e372:	429a      	cmp	r2, r3
 800e374:	d3e1      	bcc.n	800e33a <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800e376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e378:	f003 031f 	and.w	r3, r3, #31
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01d      	beq.n	800e3bc <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 800e380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e382:	095b      	lsrs	r3, r3, #5
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e38a:	4413      	add	r3, r2
 800e38c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 800e390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e392:	f003 031f 	and.w	r3, r3, #31
 800e396:	f1c3 0320 	rsb	r3, r3, #32
 800e39a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e39c:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d00b      	beq.n	800e3bc <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <pb_decode_noinit+0x2b6>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	e000      	b.n	800e3b4 <pb_decode_noinit+0x2b8>
 800e3b2:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <pb_decode_noinit+0x2d0>)
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	60d3      	str	r3, [r2, #12]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e000      	b.n	800e3be <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 800e3bc:	2301      	movs	r3, #1
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3760      	adds	r7, #96	; 0x60
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	08014110 	.word	0x08014110
 800e3cc:	08014134 	.word	0x08014134

0800e3d0 <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 800e3dc:	6879      	ldr	r1, [r7, #4]
 800e3de:	68b8      	ldr	r0, [r7, #8]
 800e3e0:	f7ff fe68 	bl	800e0b4 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7ff fe87 	bl	800e0fc <pb_decode_noinit>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08a      	sub	sp, #40	; 0x28
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 800e408:	f107 0314 	add.w	r3, r7, #20
 800e40c:	4619      	mov	r1, r3
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7ff fa98 	bl	800d944 <pb_make_string_substream>
 800e414:	4603      	mov	r3, r0
 800e416:	f083 0301 	eor.w	r3, r3, #1
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <pb_decode_delimited+0x28>
        return false;
 800e420:	2300      	movs	r3, #0
 800e422:	e019      	b.n	800e458 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 800e424:	f107 0314 	add.w	r3, r7, #20
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	68b9      	ldr	r1, [r7, #8]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7ff ffcf 	bl	800e3d0 <pb_decode>
 800e432:	4603      	mov	r3, r0
 800e434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	4619      	mov	r1, r3
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7ff faba 	bl	800d9b8 <pb_close_string_substream>
 800e444:	4603      	mov	r3, r0
 800e446:	f083 0301 	eor.w	r3, r3, #1
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <pb_decode_delimited+0x58>
        return false;
 800e450:	2300      	movs	r3, #0
 800e452:	e001      	b.n	800e458 <pb_decode_delimited+0x5c>
    return status;
 800e454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3728      	adds	r7, #40	; 0x28
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800e460:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e464:	b084      	sub	sp, #16
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800e46c:	f107 0308 	add.w	r3, r7, #8
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff f8f6 	bl	800d664 <pb_decode_varint>
 800e478:	4603      	mov	r3, r0
 800e47a:	f083 0301 	eor.w	r3, r3, #1
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <pb_decode_svarint+0x28>
        return false;
 800e484:	2300      	movs	r3, #0
 800e486:	e021      	b.n	800e4cc <pb_decode_svarint+0x6c>
    
    if (value & 1)
 800e488:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800e48c:	f04f 0101 	mov.w	r1, #1
 800e490:	f04f 0200 	mov.w	r2, #0
 800e494:	ea0b 0301 	and.w	r3, fp, r1
 800e498:	ea0c 0402 	and.w	r4, ip, r2
 800e49c:	4323      	orrs	r3, r4
 800e49e:	d00c      	beq.n	800e4ba <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800e4a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e4a4:	0862      	lsrs	r2, r4, #1
 800e4a6:	ea4f 0133 	mov.w	r1, r3, rrx
 800e4aa:	ea6f 0301 	mvn.w	r3, r1
 800e4ae:	ea6f 0402 	mvn.w	r4, r2
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	e9c2 3400 	strd	r3, r4, [r2]
 800e4b8:	e007      	b.n	800e4ca <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800e4ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e4be:	0864      	lsrs	r4, r4, #1
 800e4c0:	ea4f 0333 	mov.w	r3, r3, rrx
 800e4c4:	683a      	ldr	r2, [r7, #0]
 800e4c6:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800e4ca:	2301      	movs	r3, #1
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e4d6 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 800e4e0:	f107 030c 	add.w	r3, r7, #12
 800e4e4:	2204      	movs	r2, #4
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7fe ff5f 	bl	800d3ac <pb_read>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	f083 0301 	eor.w	r3, r3, #1
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <pb_decode_fixed32+0x28>
        return false;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e00d      	b.n	800e51a <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800e4fe:	7b3b      	ldrb	r3, [r7, #12]
 800e500:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 800e502:	7b7b      	ldrb	r3, [r7, #13]
 800e504:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800e506:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 800e508:	7bbb      	ldrb	r3, [r7, #14]
 800e50a:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 800e50c:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
 800e510:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 800e512:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	601a      	str	r2, [r3, #0]
    return true;
 800e518:	2301      	movs	r3, #1
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800e522:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 800e52e:	f107 0308 	add.w	r3, r7, #8
 800e532:	2208      	movs	r2, #8
 800e534:	4619      	mov	r1, r3
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7fe ff38 	bl	800d3ac <pb_read>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f083 0301 	eor.w	r3, r3, #1
 800e542:	b2db      	uxtb	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <pb_decode_fixed64+0x2a>
        return false;
 800e548:	2300      	movs	r3, #0
 800e54a:	e06c      	b.n	800e626 <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800e54c:	7a3b      	ldrb	r3, [r7, #8]
 800e54e:	fa5f fb83 	uxtb.w	fp, r3
 800e552:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 800e556:	7a7b      	ldrb	r3, [r7, #9]
 800e558:	b2d9      	uxtb	r1, r3
 800e55a:	f04f 0200 	mov.w	r2, #0
 800e55e:	f04f 0300 	mov.w	r3, #0
 800e562:	f04f 0400 	mov.w	r4, #0
 800e566:	0214      	lsls	r4, r2, #8
 800e568:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e56c:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800e56e:	ea4b 0803 	orr.w	r8, fp, r3
 800e572:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 800e576:	7abb      	ldrb	r3, [r7, #10]
 800e578:	b2d9      	uxtb	r1, r3
 800e57a:	f04f 0200 	mov.w	r2, #0
 800e57e:	f04f 0300 	mov.w	r3, #0
 800e582:	f04f 0400 	mov.w	r4, #0
 800e586:	0414      	lsls	r4, r2, #16
 800e588:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800e58c:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 800e58e:	ea48 0103 	orr.w	r1, r8, r3
 800e592:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 800e596:	7afb      	ldrb	r3, [r7, #11]
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	f04f 0400 	mov.w	r4, #0
 800e59e:	0a1e      	lsrs	r6, r3, #8
 800e5a0:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 800e5a2:	ea41 0805 	orr.w	r8, r1, r5
 800e5a6:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 800e5aa:	7b3b      	ldrb	r3, [r7, #12]
 800e5ac:	b2dd      	uxtb	r5, r3
 800e5ae:	f04f 0600 	mov.w	r6, #0
 800e5b2:	f04f 0300 	mov.w	r3, #0
 800e5b6:	f04f 0400 	mov.w	r4, #0
 800e5ba:	002c      	movs	r4, r5
 800e5bc:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 800e5be:	ea48 0103 	orr.w	r1, r8, r3
 800e5c2:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 800e5c6:	7b7b      	ldrb	r3, [r7, #13]
 800e5c8:	b2dd      	uxtb	r5, r3
 800e5ca:	f04f 0600 	mov.w	r6, #0
 800e5ce:	f04f 0300 	mov.w	r3, #0
 800e5d2:	f04f 0400 	mov.w	r4, #0
 800e5d6:	022c      	lsls	r4, r5, #8
 800e5d8:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 800e5da:	ea41 0803 	orr.w	r8, r1, r3
 800e5de:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	b2dd      	uxtb	r5, r3
 800e5e6:	f04f 0600 	mov.w	r6, #0
 800e5ea:	f04f 0300 	mov.w	r3, #0
 800e5ee:	f04f 0400 	mov.w	r4, #0
 800e5f2:	042c      	lsls	r4, r5, #16
 800e5f4:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 800e5f6:	ea48 0103 	orr.w	r1, r8, r3
 800e5fa:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
 800e600:	b2dd      	uxtb	r5, r3
 800e602:	f04f 0600 	mov.w	r6, #0
 800e606:	f04f 0800 	mov.w	r8, #0
 800e60a:	f04f 0900 	mov.w	r9, #0
 800e60e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800e612:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 800e616:	ea48 0301 	orr.w	r3, r8, r1
 800e61a:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800e624:	2301      	movs	r3, #1
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800e630 <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800e630:	b590      	push	{r4, r7, lr}
 800e632:	b08b      	sub	sp, #44	; 0x2c
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 800e63c:	f107 0310 	add.w	r3, r7, #16
 800e640:	4619      	mov	r1, r3
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7ff f80e 	bl	800d664 <pb_decode_varint>
 800e648:	4603      	mov	r3, r0
 800e64a:	f083 0301 	eor.w	r3, r3, #1
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <pb_dec_varint+0x28>
        return false;
 800e654:	2300      	movs	r3, #0
 800e656:	e078      	b.n	800e74a <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	2b08      	cmp	r3, #8
 800e662:	d104      	bne.n	800e66e <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 800e664:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e668:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800e66c:	e005      	b.n	800e67a <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 800e66e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e672:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e676:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e680:	b29b      	uxth	r3, r3
 800e682:	2b08      	cmp	r3, #8
 800e684:	d10a      	bne.n	800e69c <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e68c:	e9c2 3400 	strd	r3, r4, [r2]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e696:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e69a:	e041      	b.n	800e720 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d109      	bne.n	800e6bc <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800e6a8:	6a3a      	ldr	r2, [r7, #32]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e6b6:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e6ba:	e031      	b.n	800e720 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d10c      	bne.n	800e6e2 <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800e6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	801a      	strh	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6d6:	b21b      	sxth	r3, r3
 800e6d8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e6dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e6e0:	e01e      	b.n	800e720 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d10c      	bne.n	800e708 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800e6ee:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f993 3000 	ldrsb.w	r3, [r3]
 800e6fc:	b25b      	sxtb	r3, r3
 800e6fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e702:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e706:	e00b      	b.n	800e720 <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <pb_dec_varint+0xe6>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	e000      	b.n	800e718 <pb_dec_varint+0xe8>
 800e716:	4b0f      	ldr	r3, [pc, #60]	; (800e754 <pb_dec_varint+0x124>)
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	60d3      	str	r3, [r2, #12]
 800e71c:	2300      	movs	r3, #0
 800e71e:	e014      	b.n	800e74a <pb_dec_varint+0x11a>

    if (clamped != svalue)
 800e720:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e724:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e728:	42a2      	cmp	r2, r4
 800e72a:	bf08      	it	eq
 800e72c:	4299      	cmpeq	r1, r3
 800e72e:	d00b      	beq.n	800e748 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <pb_dec_varint+0x10e>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	e000      	b.n	800e740 <pb_dec_varint+0x110>
 800e73e:	4b06      	ldr	r3, [pc, #24]	; (800e758 <pb_dec_varint+0x128>)
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	60d3      	str	r3, [r2, #12]
 800e744:	2300      	movs	r3, #0
 800e746:	e000      	b.n	800e74a <pb_dec_varint+0x11a>
    
    return true;
 800e748:	2301      	movs	r3, #1
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	372c      	adds	r7, #44	; 0x2c
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd90      	pop	{r4, r7, pc}
 800e752:	bf00      	nop
 800e754:	0801414c 	.word	0x0801414c
 800e758:	08014160 	.word	0x08014160

0800e75c <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800e75c:	b590      	push	{r4, r7, lr}
 800e75e:	b089      	sub	sp, #36	; 0x24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 800e768:	f107 0310 	add.w	r3, r7, #16
 800e76c:	4619      	mov	r1, r3
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f7fe ff78 	bl	800d664 <pb_decode_varint>
 800e774:	4603      	mov	r3, r0
 800e776:	f083 0301 	eor.w	r3, r3, #1
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <pb_dec_uvarint+0x28>
        return false;
 800e780:	2300      	movs	r3, #0
 800e782:	e069      	b.n	800e858 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	2b08      	cmp	r3, #8
 800e78e:	d10a      	bne.n	800e7a6 <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 800e790:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	e9c2 3400 	strd	r3, r4, [r2]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e7a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e7a4:	e043      	b.n	800e82e <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d10b      	bne.n	800e7ca <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800e7b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f04f 0400 	mov.w	r4, #0
 800e7c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e7c8:	e031      	b.n	800e82e <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d10c      	bne.n	800e7f0 <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800e7d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	801a      	strh	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f04f 0400 	mov.w	r4, #0
 800e7ea:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e7ee:	e01e      	b.n	800e82e <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d10c      	bne.n	800e816 <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800e7fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e800:	b2da      	uxtb	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	701a      	strb	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	f04f 0400 	mov.w	r4, #0
 800e810:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e814:	e00b      	b.n	800e82e <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <pb_dec_uvarint+0xc8>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	e000      	b.n	800e826 <pb_dec_uvarint+0xca>
 800e824:	4b0e      	ldr	r3, [pc, #56]	; (800e860 <pb_dec_uvarint+0x104>)
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	60d3      	str	r3, [r2, #12]
 800e82a:	2300      	movs	r3, #0
 800e82c:	e014      	b.n	800e858 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800e82e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e832:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e836:	42a2      	cmp	r2, r4
 800e838:	bf08      	it	eq
 800e83a:	4299      	cmpeq	r1, r3
 800e83c:	d00b      	beq.n	800e856 <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d002      	beq.n	800e84c <pb_dec_uvarint+0xf0>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	e000      	b.n	800e84e <pb_dec_uvarint+0xf2>
 800e84c:	4b05      	ldr	r3, [pc, #20]	; (800e864 <pb_dec_uvarint+0x108>)
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	60d3      	str	r3, [r2, #12]
 800e852:	2300      	movs	r3, #0
 800e854:	e000      	b.n	800e858 <pb_dec_uvarint+0xfc>

    return true;
 800e856:	2301      	movs	r3, #1
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3724      	adds	r7, #36	; 0x24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd90      	pop	{r4, r7, pc}
 800e860:	0801414c 	.word	0x0801414c
 800e864:	08014160 	.word	0x08014160

0800e868 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800e868:	b590      	push	{r4, r7, lr}
 800e86a:	b089      	sub	sp, #36	; 0x24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 800e874:	f107 0310 	add.w	r3, r7, #16
 800e878:	4619      	mov	r1, r3
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7ff fdf0 	bl	800e460 <pb_decode_svarint>
 800e880:	4603      	mov	r3, r0
 800e882:	f083 0301 	eor.w	r3, r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d001      	beq.n	800e890 <pb_dec_svarint+0x28>
        return false;
 800e88c:	2300      	movs	r3, #0
 800e88e:	e06b      	b.n	800e968 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e896:	b29b      	uxth	r3, r3
 800e898:	2b08      	cmp	r3, #8
 800e89a:	d10a      	bne.n	800e8b2 <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 800e89c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	e9c2 3400 	strd	r3, r4, [r2]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e8ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e8b0:	e045      	b.n	800e93e <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	2b04      	cmp	r3, #4
 800e8bc:	d10b      	bne.n	800e8d6 <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800e8be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e8d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e8d4:	e033      	b.n	800e93e <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d10d      	bne.n	800e8fe <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800e8e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e8e6:	b21a      	sxth	r2, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	801a      	strh	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8f2:	b21b      	sxth	r3, r3
 800e8f4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e8f8:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e8fc:	e01f      	b.n	800e93e <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e904:	b29b      	uxth	r3, r3
 800e906:	2b01      	cmp	r3, #1
 800e908:	d10d      	bne.n	800e926 <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800e90a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e90e:	b25a      	sxtb	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	701a      	strb	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f993 3000 	ldrsb.w	r3, [r3]
 800e91a:	b25b      	sxtb	r3, r3
 800e91c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e920:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800e924:	e00b      	b.n	800e93e <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <pb_dec_svarint+0xcc>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	e000      	b.n	800e936 <pb_dec_svarint+0xce>
 800e934:	4b0e      	ldr	r3, [pc, #56]	; (800e970 <pb_dec_svarint+0x108>)
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	60d3      	str	r3, [r2, #12]
 800e93a:	2300      	movs	r3, #0
 800e93c:	e014      	b.n	800e968 <pb_dec_svarint+0x100>

    if (clamped != value)
 800e93e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e942:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e946:	42a2      	cmp	r2, r4
 800e948:	bf08      	it	eq
 800e94a:	4299      	cmpeq	r1, r3
 800e94c:	d00b      	beq.n	800e966 <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <pb_dec_svarint+0xf4>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	e000      	b.n	800e95e <pb_dec_svarint+0xf6>
 800e95c:	4b05      	ldr	r3, [pc, #20]	; (800e974 <pb_dec_svarint+0x10c>)
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	60d3      	str	r3, [r2, #12]
 800e962:	2300      	movs	r3, #0
 800e964:	e000      	b.n	800e968 <pb_dec_svarint+0x100>
    
    return true;
 800e966:	2301      	movs	r3, #1
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3724      	adds	r7, #36	; 0x24
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd90      	pop	{r4, r7, pc}
 800e970:	0801414c 	.word	0x0801414c
 800e974:	08014160 	.word	0x08014160

0800e978 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 800e984:	6879      	ldr	r1, [r7, #4]
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff fda5 	bl	800e4d6 <pb_decode_fixed32>
 800e98c:	4603      	mov	r3, r0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	60f8      	str	r0, [r7, #12]
 800e99e:	60b9      	str	r1, [r7, #8]
 800e9a0:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7ff fdbc 	bl	800e522 <pb_decode_fixed64>
 800e9aa:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b088      	sub	sp, #32
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 800e9c0:	f107 0314 	add.w	r3, r7, #20
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7fe fe3c 	bl	800d644 <pb_decode_varint32>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f083 0301 	eor.w	r3, r3, #1
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <pb_dec_bytes+0x28>
        return false;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	e056      	b.n	800ea8a <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9e2:	d30b      	bcc.n	800e9fc <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <pb_dec_bytes+0x3e>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	e000      	b.n	800e9f4 <pb_dec_bytes+0x40>
 800e9f2:	4b28      	ldr	r3, [pc, #160]	; (800ea94 <pb_dec_bytes+0xe0>)
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	60d3      	str	r3, [r2, #12]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	e046      	b.n	800ea8a <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	3302      	adds	r3, #2
 800ea00:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	69fa      	ldr	r2, [r7, #28]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d20b      	bcs.n	800ea22 <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d002      	beq.n	800ea18 <pb_dec_bytes+0x64>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	e000      	b.n	800ea1a <pb_dec_bytes+0x66>
 800ea18:	4b1f      	ldr	r3, [pc, #124]	; (800ea98 <pb_dec_bytes+0xe4>)
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	60d3      	str	r3, [r2, #12]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	e033      	b.n	800ea8a <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	789b      	ldrb	r3, [r3, #2]
 800ea26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ea2a:	2b80      	cmp	r3, #128	; 0x80
 800ea2c:	d10b      	bne.n	800ea46 <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <pb_dec_bytes+0x88>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	e000      	b.n	800ea3e <pb_dec_bytes+0x8a>
 800ea3c:	4b17      	ldr	r3, [pc, #92]	; (800ea9c <pb_dec_bytes+0xe8>)
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	60d3      	str	r3, [r2, #12]
 800ea42:	2300      	movs	r3, #0
 800ea44:	e021      	b.n	800ea8a <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	461a      	mov	r2, r3
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d90b      	bls.n	800ea6e <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <pb_dec_bytes+0xb0>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	e000      	b.n	800ea66 <pb_dec_bytes+0xb2>
 800ea64:	4b0b      	ldr	r3, [pc, #44]	; (800ea94 <pb_dec_bytes+0xe0>)
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	60d3      	str	r3, [r2, #12]
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e00d      	b.n	800ea8a <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	3302      	adds	r3, #2
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4619      	mov	r1, r3
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f7fe fc92 	bl	800d3ac <pb_read>
 800ea88:	4603      	mov	r3, r0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3720      	adds	r7, #32
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	08014174 	.word	0x08014174
 800ea98:	08014184 	.word	0x08014184
 800ea9c:	080140ec 	.word	0x080140ec

0800eaa0 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 800eaac:	f107 0314 	add.w	r3, r7, #20
 800eab0:	4619      	mov	r1, r3
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7fe fdc6 	bl	800d644 <pb_decode_varint32>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f083 0301 	eor.w	r3, r3, #1
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <pb_dec_string+0x28>
        return false;
 800eac4:	2300      	movs	r3, #0
 800eac6:	e046      	b.n	800eb56 <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	3301      	adds	r3, #1
 800eacc:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	69fa      	ldr	r2, [r7, #28]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d20b      	bcs.n	800eaee <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d002      	beq.n	800eae4 <pb_dec_string+0x44>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	e000      	b.n	800eae6 <pb_dec_string+0x46>
 800eae4:	4b1e      	ldr	r3, [pc, #120]	; (800eb60 <pb_dec_string+0xc0>)
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	60d3      	str	r3, [r2, #12]
 800eaea:	2300      	movs	r3, #0
 800eaec:	e033      	b.n	800eb56 <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	789b      	ldrb	r3, [r3, #2]
 800eaf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eaf6:	2b80      	cmp	r3, #128	; 0x80
 800eaf8:	d10b      	bne.n	800eb12 <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d002      	beq.n	800eb08 <pb_dec_string+0x68>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	e000      	b.n	800eb0a <pb_dec_string+0x6a>
 800eb08:	4b16      	ldr	r3, [pc, #88]	; (800eb64 <pb_dec_string+0xc4>)
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	60d3      	str	r3, [r2, #12]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e021      	b.n	800eb56 <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d90b      	bls.n	800eb3a <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d002      	beq.n	800eb30 <pb_dec_string+0x90>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	e000      	b.n	800eb32 <pb_dec_string+0x92>
 800eb30:	4b0d      	ldr	r3, [pc, #52]	; (800eb68 <pb_dec_string+0xc8>)
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	60d3      	str	r3, [r2, #12]
 800eb36:	2300      	movs	r3, #0
 800eb38:	e00d      	b.n	800eb56 <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	6879      	ldr	r1, [r7, #4]
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f7fe fc33 	bl	800d3ac <pb_read>
 800eb46:	4603      	mov	r3, r0
 800eb48:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	4413      	add	r3, r2
 800eb50:	2200      	movs	r2, #0
 800eb52:	701a      	strb	r2, [r3, #0]
    return status;
 800eb54:	7efb      	ldrb	r3, [r7, #27]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3720      	adds	r7, #32
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	08014184 	.word	0x08014184
 800eb64:	080140ec 	.word	0x080140ec
 800eb68:	08014194 	.word	0x08014194

0800eb6c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b08a      	sub	sp, #40	; 0x28
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800eb7e:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 800eb80:	f107 0310 	add.w	r3, r7, #16
 800eb84:	4619      	mov	r1, r3
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7fe fedc 	bl	800d944 <pb_make_string_substream>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f083 0301 	eor.w	r3, r3, #1
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d001      	beq.n	800eb9c <pb_dec_submessage+0x30>
        return false;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e03b      	b.n	800ec14 <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d10b      	bne.n	800ebbe <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d002      	beq.n	800ebb4 <pb_dec_submessage+0x48>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	e000      	b.n	800ebb6 <pb_dec_submessage+0x4a>
 800ebb4:	4b19      	ldr	r3, [pc, #100]	; (800ec1c <pb_dec_submessage+0xb0>)
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	60d3      	str	r3, [r2, #12]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e02a      	b.n	800ec14 <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	789b      	ldrb	r3, [r3, #2]
 800ebc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ebc6:	2b20      	cmp	r3, #32
 800ebc8:	d10a      	bne.n	800ebe0 <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800ebca:	f107 0310 	add.w	r3, r7, #16
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	6a39      	ldr	r1, [r7, #32]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff fbfc 	bl	800e3d0 <pb_decode>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebde:	e009      	b.n	800ebf4 <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800ebe0:	f107 0310 	add.w	r3, r7, #16
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	6a39      	ldr	r1, [r7, #32]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7ff fa87 	bl	800e0fc <pb_decode_noinit>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 800ebf4:	f107 0310 	add.w	r3, r7, #16
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f7fe fedc 	bl	800d9b8 <pb_close_string_substream>
 800ec00:	4603      	mov	r3, r0
 800ec02:	f083 0301 	eor.w	r3, r3, #1
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <pb_dec_submessage+0xa4>
        return false;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	e001      	b.n	800ec14 <pb_dec_submessage+0xa8>
    return status;
 800ec10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3728      	adds	r7, #40	; 0x28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	080141a4 	.word	0x080141a4

0800ec20 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800ec2c:	f107 0314 	add.w	r3, r7, #20
 800ec30:	4619      	mov	r1, r3
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f7fe fd06 	bl	800d644 <pb_decode_varint32>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	f083 0301 	eor.w	r3, r3, #1
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <pb_dec_fixed_length_bytes+0x28>
        return false;
 800ec44:	2300      	movs	r3, #0
 800ec46:	e03b      	b.n	800ecc0 <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec4e:	d30b      	bcc.n	800ec68 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <pb_dec_fixed_length_bytes+0x3e>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	e000      	b.n	800ec60 <pb_dec_fixed_length_bytes+0x40>
 800ec5e:	4b1a      	ldr	r3, [pc, #104]	; (800ecc8 <pb_dec_fixed_length_bytes+0xa8>)
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	60d3      	str	r3, [r2, #12]
 800ec64:	2300      	movs	r3, #0
 800ec66:	e02b      	b.n	800ecc0 <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10a      	bne.n	800ec84 <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	461a      	mov	r2, r3
 800ec78:	2100      	movs	r1, #0
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f001 f8aa 	bl	800fdd4 <memset>
        return true;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e01d      	b.n	800ecc0 <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d00b      	beq.n	800ecac <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <pb_dec_fixed_length_bytes+0x82>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	e000      	b.n	800eca4 <pb_dec_fixed_length_bytes+0x84>
 800eca2:	4b0a      	ldr	r3, [pc, #40]	; (800eccc <pb_dec_fixed_length_bytes+0xac>)
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	60d3      	str	r3, [r2, #12]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	e009      	b.n	800ecc0 <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	6879      	ldr	r1, [r7, #4]
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7fe fb77 	bl	800d3ac <pb_read>
 800ecbe:	4603      	mov	r3, r0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	08014174 	.word	0x08014174
 800eccc:	080141c0 	.word	0x080141c0

0800ecd0 <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d02b      	beq.n	800ed3c <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	68da      	ldr	r2, [r3, #12]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	441a      	add	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d90b      	bls.n	800ed0c <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <pb_write+0x32>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	e000      	b.n	800ed04 <pb_write+0x34>
 800ed02:	4b14      	ldr	r3, [pc, #80]	; (800ed54 <pb_write+0x84>)
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	6113      	str	r3, [r2, #16]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	e01e      	b.n	800ed4a <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	68b9      	ldr	r1, [r7, #8]
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	4798      	blx	r3
 800ed18:	4603      	mov	r3, r0
 800ed1a:	f083 0301 	eor.w	r3, r3, #1
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d00b      	beq.n	800ed3c <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <pb_write+0x62>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	e000      	b.n	800ed34 <pb_write+0x64>
 800ed32:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <pb_write+0x88>)
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	6113      	str	r3, [r2, #16]
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e006      	b.n	800ed4a <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	68da      	ldr	r2, [r3, #12]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	441a      	add	r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	60da      	str	r2, [r3, #12]
    return true;
 800ed48:	2301      	movs	r3, #1
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	080141e4 	.word	0x080141e4
 800ed58:	080141f0 	.word	0x080141f0

0800ed5c <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 800ed5c:	b590      	push	{r4, r7, lr}
 800ed5e:	b08d      	sub	sp, #52	; 0x34
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d101      	bne.n	800ed74 <encode_array+0x18>
        return true;
 800ed70:	2301      	movs	r3, #1
 800ed72:	e0fb      	b.n	800ef6c <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	789b      	ldrb	r3, [r3, #2]
 800ed78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed7c:	2b80      	cmp	r3, #128	; 0x80
 800ed7e:	d013      	beq.n	800eda8 <encode_array+0x4c>
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	461a      	mov	r2, r3
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d90b      	bls.n	800eda8 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <encode_array+0x42>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	e000      	b.n	800eda0 <encode_array+0x44>
 800ed9e:	4b75      	ldr	r3, [pc, #468]	; (800ef74 <encode_array+0x218>)
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	6113      	str	r3, [r2, #16]
 800eda4:	2300      	movs	r3, #0
 800eda6:	e0e1      	b.n	800ef6c <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	789b      	ldrb	r3, [r3, #2]
 800edac:	f003 030f 	and.w	r3, r3, #15
 800edb0:	2b04      	cmp	r3, #4
 800edb2:	f300 808d 	bgt.w	800eed0 <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	461a      	mov	r2, r3
 800edbe:	2102      	movs	r1, #2
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f000 fcb1 	bl	800f728 <pb_encode_tag>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f083 0301 	eor.w	r3, r3, #1
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <encode_array+0x7a>
            return false;
 800edd2:	2300      	movs	r3, #0
 800edd4:	e0ca      	b.n	800ef6c <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	789b      	ldrb	r3, [r3, #2]
 800edda:	f003 030f 	and.w	r3, r3, #15
 800edde:	2b03      	cmp	r3, #3
 800ede0:	d103      	bne.n	800edea <encode_array+0x8e>
        {
            size = 4 * count;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	627b      	str	r3, [r7, #36]	; 0x24
 800ede8:	e035      	b.n	800ee56 <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	789b      	ldrb	r3, [r3, #2]
 800edee:	f003 030f 	and.w	r3, r3, #15
 800edf2:	2b04      	cmp	r3, #4
 800edf4:	d103      	bne.n	800edfe <encode_array+0xa2>
        {
            size = 8 * count;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	627b      	str	r3, [r7, #36]	; 0x24
 800edfc:	e02b      	b.n	800ee56 <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800edfe:	f107 0310 	add.w	r3, r7, #16
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	605a      	str	r2, [r3, #4]
 800ee08:	609a      	str	r2, [r3, #8]
 800ee0a:	60da      	str	r2, [r3, #12]
 800ee0c:	611a      	str	r2, [r3, #16]
            p = pData;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800ee12:	2300      	movs	r3, #0
 800ee14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee16:	e018      	b.n	800ee4a <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 800ee18:	f107 0010 	add.w	r0, r7, #16
 800ee1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee20:	68b9      	ldr	r1, [r7, #8]
 800ee22:	4798      	blx	r3
 800ee24:	4603      	mov	r3, r0
 800ee26:	f083 0301 	eor.w	r3, r3, #1
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <encode_array+0xd8>
                    return false;
 800ee30:	2300      	movs	r3, #0
 800ee32:	e09b      	b.n	800ef6c <encode_array+0x210>
                p = (const char*)p + field->data_size;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee40:	4413      	add	r3, r2
 800ee42:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800ee44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee46:	3301      	adds	r3, #1
 800ee48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d3e2      	bcc.n	800ee18 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	f04f 0400 	mov.w	r4, #0
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	4623      	mov	r3, r4
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 fb5c 	bl	800f51e <pb_encode_varint>
 800ee66:	4603      	mov	r3, r0
 800ee68:	f083 0301 	eor.w	r3, r3, #1
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <encode_array+0x11a>
            return false;
 800ee72:	2300      	movs	r3, #0
 800ee74:	e07a      	b.n	800ef6c <encode_array+0x210>
        
        if (stream->callback == NULL)
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800ee7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee80:	2100      	movs	r1, #0
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff ff24 	bl	800ecd0 <pb_write>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	e06f      	b.n	800ef6c <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ee90:	2300      	movs	r3, #0
 800ee92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee94:	e017      	b.n	800eec6 <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 800ee96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee9a:	68b9      	ldr	r1, [r7, #8]
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	4798      	blx	r3
 800eea0:	4603      	mov	r3, r0
 800eea2:	f083 0301 	eor.w	r3, r3, #1
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d001      	beq.n	800eeb0 <encode_array+0x154>
                return false;
 800eeac:	2300      	movs	r3, #0
 800eeae:	e05d      	b.n	800ef6c <encode_array+0x210>
            p = (const char*)p + field->data_size;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	461a      	mov	r2, r3
 800eeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebc:	4413      	add	r3, r2
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	3301      	adds	r3, #1
 800eec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d3e3      	bcc.n	800ee96 <encode_array+0x13a>
 800eece:	e04c      	b.n	800ef6a <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800eed4:	2300      	movs	r3, #0
 800eed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eed8:	e043      	b.n	800ef62 <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800eeda:	68b9      	ldr	r1, [r7, #8]
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f000 fc47 	bl	800f770 <pb_encode_tag_for_field>
 800eee2:	4603      	mov	r3, r0
 800eee4:	f083 0301 	eor.w	r3, r3, #1
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <encode_array+0x196>
                return false;
 800eeee:	2300      	movs	r3, #0
 800eef0:	e03c      	b.n	800ef6c <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	789b      	ldrb	r3, [r3, #2]
 800eef6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eefa:	2b80      	cmp	r3, #128	; 0x80
 800eefc:	d119      	bne.n	800ef32 <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	789b      	ldrb	r3, [r3, #2]
 800ef02:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ef06:	2b06      	cmp	r3, #6
 800ef08:	d005      	beq.n	800ef16 <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	789b      	ldrb	r3, [r3, #2]
 800ef0e:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	d10d      	bne.n	800ef32 <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 800ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef1c:	68b9      	ldr	r1, [r7, #8]
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	4798      	blx	r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	f083 0301 	eor.w	r3, r3, #1
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00e      	beq.n	800ef4c <encode_array+0x1f0>
                    return false;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e01c      	b.n	800ef6c <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 800ef32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef36:	68b9      	ldr	r1, [r7, #8]
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	4798      	blx	r3
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f083 0301 	eor.w	r3, r3, #1
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <encode_array+0x1f0>
                    return false;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	e00f      	b.n	800ef6c <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	461a      	mov	r2, r3
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	4413      	add	r3, r2
 800ef5a:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5e:	3301      	adds	r3, #1
 800ef60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d3b7      	bcc.n	800eeda <encode_array+0x17e>
        }
    }
    
    return true;
 800ef6a:	2301      	movs	r3, #1
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3734      	adds	r7, #52	; 0x34
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd90      	pop	{r4, r7, pc}
 800ef74:	080141fc 	.word	0x080141fc

0800ef78 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800ef78:	b590      	push	{r4, r7, lr}
 800ef7a:	b08d      	sub	sp, #52	; 0x34
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	789b      	ldrb	r3, [r3, #2]
 800ef86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800ef90:	b21b      	sxth	r3, r3
 800ef92:	461a      	mov	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	4413      	add	r3, r2
 800ef98:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800ef9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ef9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 800efa6:	2300      	movs	r3, #0
 800efa8:	e0af      	b.n	800f10a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800efaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800efb2:	2b20      	cmp	r3, #32
 800efb4:	d107      	bne.n	800efc6 <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 800efb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	bf0c      	ite	eq
 800efbe:	2301      	moveq	r3, #1
 800efc0:	2300      	movne	r3, #0
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	e0a1      	b.n	800f10a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800efc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800efce:	2b30      	cmp	r3, #48	; 0x30
 800efd0:	d107      	bne.n	800efe2 <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800efd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	bf0c      	ite	eq
 800efda:	2301      	moveq	r3, #1
 800efdc:	2300      	movne	r3, #0
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	e093      	b.n	800f10a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800efe2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efe6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800efea:	2b10      	cmp	r3, #16
 800efec:	d113      	bne.n	800f016 <pb_check_proto3_default_value+0x9e>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800eff4:	b21b      	sxth	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00d      	beq.n	800f016 <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	bf14      	ite	ne
 800f002:	2301      	movne	r3, #1
 800f004:	2300      	moveq	r3, #0
 800f006:	b2db      	uxtb	r3, r3
 800f008:	f083 0301 	eor.w	r3, r3, #1
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	b2db      	uxtb	r3, r3
 800f014:	e079      	b.n	800f10a <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800f016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f01a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d15b      	bne.n	800f0da <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800f022:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f026:	f003 030f 	and.w	r3, r3, #15
 800f02a:	2b05      	cmp	r3, #5
 800f02c:	d109      	bne.n	800f042 <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	bf0c      	ite	eq
 800f03a:	2301      	moveq	r3, #1
 800f03c:	2300      	movne	r3, #0
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	e063      	b.n	800f10a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800f042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f046:	f003 030f 	and.w	r3, r3, #15
 800f04a:	2b06      	cmp	r3, #6
 800f04c:	d107      	bne.n	800f05e <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	bf0c      	ite	eq
 800f056:	2301      	moveq	r3, #1
 800f058:	2300      	movne	r3, #0
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	e055      	b.n	800f10a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800f05e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f062:	f003 030f 	and.w	r3, r3, #15
 800f066:	2b09      	cmp	r3, #9
 800f068:	d109      	bne.n	800f07e <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f070:	b29b      	uxth	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	bf0c      	ite	eq
 800f076:	2301      	moveq	r3, #1
 800f078:	2300      	movne	r3, #0
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	e045      	b.n	800f10a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800f07e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f082:	f003 030f 	and.w	r3, r3, #15
 800f086:	2b07      	cmp	r3, #7
 800f088:	d127      	bne.n	800f0da <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 400b 	ldr.w	r4, [r3, #11]
 800f090:	6838      	ldr	r0, [r7, #0]
 800f092:	f000 f9f0 	bl	800f476 <pb_const_cast>
 800f096:	4602      	mov	r2, r0
 800f098:	f107 0308 	add.w	r3, r7, #8
 800f09c:	4621      	mov	r1, r4
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe f878 	bl	800d194 <pb_field_iter_begin>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d015      	beq.n	800f0d6 <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	69ba      	ldr	r2, [r7, #24]
 800f0ae:	4611      	mov	r1, r2
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7ff ff61 	bl	800ef78 <pb_check_proto3_default_value>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	f083 0301 	eor.w	r3, r3, #1
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e021      	b.n	800f10a <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 800f0c6:	f107 0308 	add.w	r3, r7, #8
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fe f897 	bl	800d1fe <pb_field_iter_next>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e9      	bne.n	800f0aa <pb_check_proto3_default_value+0x132>
            }
            return true;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e017      	b.n	800f10a <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 800f0de:	2300      	movs	r3, #0
 800f0e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f0e2:	e00a      	b.n	800f0fa <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 800f0e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0e6:	6a3a      	ldr	r2, [r7, #32]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e00a      	b.n	800f10a <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 800f0f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f100:	b29b      	uxth	r3, r3
 800f102:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f104:	429a      	cmp	r2, r3
 800f106:	d3ed      	bcc.n	800f0e4 <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 800f108:	2301      	movs	r3, #1
	}
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3734      	adds	r7, #52	; 0x34
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd90      	pop	{r4, r7, pc}
	...

0800f114 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b08a      	sub	sp, #40	; 0x28
 800f118:	af02      	add	r7, sp, #8
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 800f120:	f107 0313 	add.w	r3, r7, #19
 800f124:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	789b      	ldrb	r3, [r3, #2]
 800f12a:	f003 030f 	and.w	r3, r3, #15
 800f12e:	4a75      	ldr	r2, [pc, #468]	; (800f304 <encode_basic_field+0x1f0>)
 800f130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f134:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f13c:	b21b      	sxth	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d008      	beq.n	800f154 <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f148:	b21b      	sxth	r3, r3
 800f14a:	461a      	mov	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4413      	add	r3, r2
 800f150:	61fb      	str	r3, [r7, #28]
 800f152:	e019      	b.n	800f188 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	789b      	ldrb	r3, [r3, #2]
 800f158:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f15c:	2b10      	cmp	r3, #16
 800f15e:	d111      	bne.n	800f184 <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800f160:	6879      	ldr	r1, [r7, #4]
 800f162:	68b8      	ldr	r0, [r7, #8]
 800f164:	f7ff ff08 	bl	800ef78 <pb_check_proto3_default_value>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	bf14      	ite	ne
 800f16e:	2301      	movne	r3, #1
 800f170:	2300      	moveq	r3, #0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f083 0301 	eor.w	r3, r3, #1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	74fb      	strb	r3, [r7, #19]
 800f182:	e001      	b.n	800f188 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 800f184:	2301      	movs	r3, #1
 800f186:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	789b      	ldrb	r3, [r3, #2]
 800f18c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f190:	2b80      	cmp	r3, #128	; 0x80
 800f192:	d109      	bne.n	800f1a8 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	bf14      	ite	ne
 800f1a0:	2301      	movne	r3, #1
 800f1a2:	2300      	moveq	r3, #0
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	789b      	ldrb	r3, [r3, #2]
 800f1ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f1b0:	2b10      	cmp	r3, #16
 800f1b2:	d031      	beq.n	800f218 <encode_basic_field+0x104>
 800f1b4:	2b10      	cmp	r3, #16
 800f1b6:	dc02      	bgt.n	800f1be <encode_basic_field+0xaa>
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d005      	beq.n	800f1c8 <encode_basic_field+0xb4>
 800f1bc:	e08a      	b.n	800f2d4 <encode_basic_field+0x1c0>
 800f1be:	2b20      	cmp	r3, #32
 800f1c0:	d047      	beq.n	800f252 <encode_basic_field+0x13e>
 800f1c2:	2b30      	cmp	r3, #48	; 0x30
 800f1c4:	d066      	beq.n	800f294 <encode_basic_field+0x180>
 800f1c6:	e085      	b.n	800f2d4 <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10b      	bne.n	800f1e6 <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <encode_basic_field+0xc8>
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	e000      	b.n	800f1de <encode_basic_field+0xca>
 800f1dc:	4b4a      	ldr	r3, [pc, #296]	; (800f308 <encode_basic_field+0x1f4>)
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	6113      	str	r3, [r2, #16]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	e08a      	b.n	800f2fc <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 800f1e6:	68b9      	ldr	r1, [r7, #8]
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 fac1 	bl	800f770 <pb_encode_tag_for_field>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	f083 0301 	eor.w	r3, r3, #1
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d001      	beq.n	800f1fe <encode_basic_field+0xea>
                return false;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e07e      	b.n	800f2fc <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	68b9      	ldr	r1, [r7, #8]
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	4798      	blx	r3
 800f208:	4603      	mov	r3, r0
 800f20a:	f083 0301 	eor.w	r3, r3, #1
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d06b      	beq.n	800f2ec <encode_basic_field+0x1d8>
                return false;
 800f214:	2300      	movs	r3, #0
 800f216:	e071      	b.n	800f2fc <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d067      	beq.n	800f2f0 <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800f220:	68b9      	ldr	r1, [r7, #8]
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f000 faa4 	bl	800f770 <pb_encode_tag_for_field>
 800f228:	4603      	mov	r3, r0
 800f22a:	f083 0301 	eor.w	r3, r3, #1
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	d001      	beq.n	800f238 <encode_basic_field+0x124>
                    return false;
 800f234:	2300      	movs	r3, #0
 800f236:	e061      	b.n	800f2fc <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	4798      	blx	r3
 800f242:	4603      	mov	r3, r0
 800f244:	f083 0301 	eor.w	r3, r3, #1
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d050      	beq.n	800f2f0 <encode_basic_field+0x1dc>
                    return false;
 800f24e:	2300      	movs	r3, #0
 800f250:	e054      	b.n	800f2fc <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800f258:	b21b      	sxth	r3, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d003      	beq.n	800f266 <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	881b      	ldrh	r3, [r3, #0]
 800f262:	837b      	strh	r3, [r7, #26]
 800f264:	e005      	b.n	800f272 <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	7a5a      	ldrb	r2, [r3, #9]
 800f26a:	7a9b      	ldrb	r3, [r3, #10]
 800f26c:	021b      	lsls	r3, r3, #8
 800f26e:	4313      	orrs	r3, r2
 800f270:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 800f272:	8b7a      	ldrh	r2, [r7, #26]
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	4613      	mov	r3, r2
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	68b9      	ldr	r1, [r7, #8]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f7ff fd6c 	bl	800ed5c <encode_array>
 800f284:	4603      	mov	r3, r0
 800f286:	f083 0301 	eor.w	r3, r3, #1
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d031      	beq.n	800f2f4 <encode_basic_field+0x1e0>
                return false;
 800f290:	2300      	movs	r3, #0
 800f292:	e033      	b.n	800f2fc <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	881a      	ldrh	r2, [r3, #0]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d12a      	bne.n	800f2f8 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800f2a2:	68b9      	ldr	r1, [r7, #8]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 fa63 	bl	800f770 <pb_encode_tag_for_field>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	f083 0301 	eor.w	r3, r3, #1
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <encode_basic_field+0x1a6>
                    return false;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	e020      	b.n	800f2fc <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	4798      	blx	r3
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	f083 0301 	eor.w	r3, r3, #1
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d013      	beq.n	800f2f8 <encode_basic_field+0x1e4>
                    return false;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	e013      	b.n	800f2fc <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <encode_basic_field+0x1ce>
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	e000      	b.n	800f2e4 <encode_basic_field+0x1d0>
 800f2e2:	4b0a      	ldr	r3, [pc, #40]	; (800f30c <encode_basic_field+0x1f8>)
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	6113      	str	r3, [r2, #16]
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	e007      	b.n	800f2fc <encode_basic_field+0x1e8>
            break;
 800f2ec:	bf00      	nop
 800f2ee:	e004      	b.n	800f2fa <encode_basic_field+0x1e6>
            break;
 800f2f0:	bf00      	nop
 800f2f2:	e002      	b.n	800f2fa <encode_basic_field+0x1e6>
            break;
 800f2f4:	bf00      	nop
 800f2f6:	e000      	b.n	800f2fa <encode_basic_field+0x1e6>
            break;
 800f2f8:	bf00      	nop
    }
    
    return true;
 800f2fa:	2301      	movs	r3, #1
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3720      	adds	r7, #32
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	08014c54 	.word	0x08014c54
 800f308:	08014214 	.word	0x08014214
 800f30c:	0801422c 	.word	0x0801422c

0800f310 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b086      	sub	sp, #24
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	3304      	adds	r3, #4
 800f324:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d017      	beq.n	800f35e <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	68b9      	ldr	r1, [r7, #8]
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	4798      	blx	r3
 800f33a:	4603      	mov	r3, r0
 800f33c:	f083 0301 	eor.w	r3, r3, #1
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00b      	beq.n	800f35e <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d002      	beq.n	800f354 <encode_callback_field+0x44>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	691b      	ldr	r3, [r3, #16]
 800f352:	e000      	b.n	800f356 <encode_callback_field+0x46>
 800f354:	4b04      	ldr	r3, [pc, #16]	; (800f368 <encode_callback_field+0x58>)
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	6113      	str	r3, [r2, #16]
 800f35a:	2300      	movs	r3, #0
 800f35c:	e000      	b.n	800f360 <encode_callback_field+0x50>
    }
    return true;
 800f35e:	2301      	movs	r3, #1
}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	08014240 	.word	0x08014240

0800f36c <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	789b      	ldrb	r3, [r3, #2]
 800f37c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f380:	2b40      	cmp	r3, #64	; 0x40
 800f382:	d00a      	beq.n	800f39a <encode_field+0x2e>
 800f384:	2b80      	cmp	r3, #128	; 0x80
 800f386:	d001      	beq.n	800f38c <encode_field+0x20>
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10d      	bne.n	800f3a8 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	68b9      	ldr	r1, [r7, #8]
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f7ff febf 	bl	800f114 <encode_basic_field>
 800f396:	4603      	mov	r3, r0
 800f398:	e011      	b.n	800f3be <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	68b9      	ldr	r1, [r7, #8]
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f7ff ffb6 	bl	800f310 <encode_callback_field>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	e00a      	b.n	800f3be <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d002      	beq.n	800f3b6 <encode_field+0x4a>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	e000      	b.n	800f3b8 <encode_field+0x4c>
 800f3b6:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <encode_field+0x5c>)
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	6113      	str	r3, [r2, #16]
 800f3bc:	2300      	movs	r3, #0
    }
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	0801422c 	.word	0x0801422c

0800f3cc <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	789b      	ldrb	r3, [r3, #2]
 800f3e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f3e6:	2b80      	cmp	r3, #128	; 0x80
 800f3e8:	d108      	bne.n	800f3fc <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	68f9      	ldr	r1, [r7, #12]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff ffba 	bl	800f36c <encode_field>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	e007      	b.n	800f40c <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	461a      	mov	r2, r3
 800f402:	68f9      	ldr	r1, [r7, #12]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff ffb1 	bl	800f36c <encode_field>
 800f40a:	4603      	mov	r3, r0
    }
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 800f426:	e01e      	b.n	800f466 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d008      	beq.n	800f444 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	6979      	ldr	r1, [r7, #20]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	4798      	blx	r3
 800f43e:	4603      	mov	r3, r0
 800f440:	74fb      	strb	r3, [r7, #19]
 800f442:	e005      	b.n	800f450 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800f444:	6979      	ldr	r1, [r7, #20]
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f7ff ffc0 	bl	800f3cc <default_extension_encoder>
 800f44c:	4603      	mov	r3, r0
 800f44e:	74fb      	strb	r3, [r7, #19]

        if (!status)
 800f450:	7cfb      	ldrb	r3, [r7, #19]
 800f452:	f083 0301 	eor.w	r3, r3, #1
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <encode_extension_field+0x4c>
            return false;
 800f45c:	2300      	movs	r3, #0
 800f45e:	e006      	b.n	800f46e <encode_extension_field+0x5a>
        
        extension = extension->next;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	617b      	str	r3, [r7, #20]
    while (extension)
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1dd      	bne.n	800f428 <encode_extension_field+0x14>
    }
    
    return true;
 800f46c:	2301      	movs	r3, #1
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 800f476:	b480      	push	{r7}
 800f478:	b085      	sub	sp, #20
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800f482:	68fb      	ldr	r3, [r7, #12]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b08a      	sub	sp, #40	; 0x28
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff ffea 	bl	800f476 <pb_const_cast>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	f107 0310 	add.w	r3, r7, #16
 800f4a8:	68b9      	ldr	r1, [r7, #8]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fd fe72 	bl	800d194 <pb_field_iter_begin>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	f083 0301 	eor.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <pb_encode+0x30>
        return true; /* Empty message type */
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e02a      	b.n	800f516 <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	789b      	ldrb	r3, [r3, #2]
 800f4c4:	f003 030f 	and.w	r3, r3, #15
 800f4c8:	2b08      	cmp	r3, #8
 800f4ca:	d10d      	bne.n	800f4e8 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	6a3a      	ldr	r2, [r7, #32]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f7ff ff9e 	bl	800f414 <encode_extension_field>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	f083 0301 	eor.w	r3, r3, #1
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00f      	beq.n	800f504 <pb_encode+0x74>
                return false;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	e016      	b.n	800f516 <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	6a3a      	ldr	r2, [r7, #32]
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7ff ff3c 	bl	800f36c <encode_field>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f083 0301 	eor.w	r3, r3, #1
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <pb_encode+0x74>
                return false;
 800f500:	2300      	movs	r3, #0
 800f502:	e008      	b.n	800f516 <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 800f504:	f107 0310 	add.w	r3, r7, #16
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fd fe78 	bl	800d1fe <pb_field_iter_next>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1d5      	bne.n	800f4c0 <pb_encode+0x30>
    
    return true;
 800f514:	2301      	movs	r3, #1
}
 800f516:	4618      	mov	r0, r3
 800f518:	3728      	adds	r7, #40	; 0x28
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800f51e:	b590      	push	{r4, r7, lr}
 800f520:	b08b      	sub	sp, #44	; 0x2c
 800f522:	af00      	add	r7, sp, #0
 800f524:	60f8      	str	r0, [r7, #12]
 800f526:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 800f52e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f532:	2c00      	cmp	r4, #0
 800f534:	bf08      	it	eq
 800f536:	2b80      	cmpeq	r3, #128	; 0x80
 800f538:	d223      	bcs.n	800f582 <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 800f53a:	783b      	ldrb	r3, [r7, #0]
 800f53c:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 800f53e:	f107 0317 	add.w	r3, r7, #23
 800f542:	2201      	movs	r2, #1
 800f544:	4619      	mov	r1, r3
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f7ff fbc2 	bl	800ecd0 <pb_write>
 800f54c:	4603      	mov	r3, r0
 800f54e:	e035      	b.n	800f5bc <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800f550:	783b      	ldrb	r3, [r7, #0]
 800f552:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f556:	b2d9      	uxtb	r1, r3
 800f558:	f107 0218 	add.w	r2, r7, #24
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	4413      	add	r3, r2
 800f560:	460a      	mov	r2, r1
 800f562:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 800f564:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f568:	f04f 0300 	mov.w	r3, #0
 800f56c:	f04f 0400 	mov.w	r4, #0
 800f570:	09cb      	lsrs	r3, r1, #7
 800f572:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800f576:	09d4      	lsrs	r4, r2, #7
 800f578:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 800f57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57e:	3301      	adds	r3, #1
 800f580:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 800f582:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f586:	4323      	orrs	r3, r4
 800f588:	d1e2      	bne.n	800f550 <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	3b01      	subs	r3, #1
 800f58e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f592:	4413      	add	r3, r2
 800f594:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800f598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59a:	3b01      	subs	r3, #1
 800f59c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f5a0:	b2d2      	uxtb	r2, r2
 800f5a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f5a6:	440b      	add	r3, r1
 800f5a8:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 800f5ac:	f107 0318 	add.w	r3, r7, #24
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f7ff fb8b 	bl	800ecd0 <pb_write>
 800f5ba:	4603      	mov	r3, r0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	372c      	adds	r7, #44	; 0x2c
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd90      	pop	{r4, r7, pc}

0800f5c4 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800f5c4:	b590      	push	{r4, r7, lr}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 800f5d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f174 0300 	sbcs.w	r3, r4, #0
 800f5da:	da0d      	bge.n	800f5f8 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 800f5dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f5e0:	184b      	adds	r3, r1, r1
 800f5e2:	eb42 0402 	adc.w	r4, r2, r2
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	4622      	mov	r2, r4
 800f5ea:	ea6f 0301 	mvn.w	r3, r1
 800f5ee:	ea6f 0402 	mvn.w	r4, r2
 800f5f2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800f5f6:	e006      	b.n	800f606 <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800f5f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f5fc:	184b      	adds	r3, r1, r1
 800f5fe:	eb42 0402 	adc.w	r4, r2, r2
 800f602:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 800f606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f7ff ff87 	bl	800f51e <pb_encode_varint>
 800f610:	4603      	mov	r3, r0
}
 800f612:	4618      	mov	r0, r3
 800f614:	371c      	adds	r7, #28
 800f616:	46bd      	mov	sp, r7
 800f618:	bd90      	pop	{r4, r7, pc}

0800f61a <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b084      	sub	sp, #16
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	0a1b      	lsrs	r3, r3, #8
 800f634:	b2db      	uxtb	r3, r3
 800f636:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	0c1b      	lsrs	r3, r3, #16
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	0e1b      	lsrs	r3, r3, #24
 800f644:	b2db      	uxtb	r3, r3
 800f646:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 800f648:	f107 0308 	add.w	r3, r7, #8
 800f64c:	2204      	movs	r2, #4
 800f64e:	4619      	mov	r1, r3
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7ff fb3d 	bl	800ecd0 <pb_write>
 800f656:	4603      	mov	r3, r0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800f660:	b590      	push	{r4, r7, lr}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f670:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800f674:	7c3b      	ldrb	r3, [r7, #16]
 800f676:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800f678:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f67c:	f04f 0300 	mov.w	r3, #0
 800f680:	f04f 0400 	mov.w	r4, #0
 800f684:	0a0b      	lsrs	r3, r1, #8
 800f686:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f68a:	0a14      	lsrs	r4, r2, #8
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800f690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f694:	f04f 0300 	mov.w	r3, #0
 800f698:	f04f 0400 	mov.w	r4, #0
 800f69c:	0c0b      	lsrs	r3, r1, #16
 800f69e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6a2:	0c14      	lsrs	r4, r2, #16
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800f6a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f6ac:	f04f 0300 	mov.w	r3, #0
 800f6b0:	f04f 0400 	mov.w	r4, #0
 800f6b4:	0e0b      	lsrs	r3, r1, #24
 800f6b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f6ba:	0e14      	lsrs	r4, r2, #24
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800f6c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f6c4:	f04f 0300 	mov.w	r3, #0
 800f6c8:	f04f 0400 	mov.w	r4, #0
 800f6cc:	0013      	movs	r3, r2
 800f6ce:	2400      	movs	r4, #0
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800f6d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f6d8:	f04f 0300 	mov.w	r3, #0
 800f6dc:	f04f 0400 	mov.w	r4, #0
 800f6e0:	0a13      	lsrs	r3, r2, #8
 800f6e2:	2400      	movs	r4, #0
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800f6e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f6ec:	f04f 0300 	mov.w	r3, #0
 800f6f0:	f04f 0400 	mov.w	r4, #0
 800f6f4:	0c13      	lsrs	r3, r2, #16
 800f6f6:	2400      	movs	r4, #0
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800f6fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f700:	f04f 0300 	mov.w	r3, #0
 800f704:	f04f 0400 	mov.w	r4, #0
 800f708:	0e13      	lsrs	r3, r2, #24
 800f70a:	2400      	movs	r4, #0
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 800f710:	f107 0308 	add.w	r3, r7, #8
 800f714:	2208      	movs	r2, #8
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7ff fad9 	bl	800ecd0 <pb_write>
 800f71e:	4603      	mov	r3, r0
}
 800f720:	4618      	mov	r0, r3
 800f722:	371c      	adds	r7, #28
 800f724:	46bd      	mov	sp, r7
 800f726:	bd90      	pop	{r4, r7, pc}

0800f728 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800f728:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f72c:	b086      	sub	sp, #24
 800f72e:	af00      	add	r7, sp, #0
 800f730:	60f8      	str	r0, [r7, #12]
 800f732:	607a      	str	r2, [r7, #4]
 800f734:	460a      	mov	r2, r1
 800f736:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	4611      	mov	r1, r2
 800f73c:	f04f 0200 	mov.w	r2, #0
 800f740:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 800f744:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 800f748:	7af9      	ldrb	r1, [r7, #11]
 800f74a:	f04f 0200 	mov.w	r2, #0
 800f74e:	ea4b 0301 	orr.w	r3, fp, r1
 800f752:	ea4c 0402 	orr.w	r4, ip, r2
 800f756:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 800f75a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f7ff fedd 	bl	800f51e <pb_encode_varint>
 800f764:	4603      	mov	r3, r0
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f770 <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	789b      	ldrb	r3, [r3, #2]
 800f77e:	f003 030f 	and.w	r3, r3, #15
 800f782:	2b09      	cmp	r3, #9
 800f784:	d822      	bhi.n	800f7cc <pb_encode_tag_for_field+0x5c>
 800f786:	a201      	add	r2, pc, #4	; (adr r2, 800f78c <pb_encode_tag_for_field+0x1c>)
 800f788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78c:	0800f7b5 	.word	0x0800f7b5
 800f790:	0800f7b5 	.word	0x0800f7b5
 800f794:	0800f7b5 	.word	0x0800f7b5
 800f798:	0800f7bb 	.word	0x0800f7bb
 800f79c:	0800f7c1 	.word	0x0800f7c1
 800f7a0:	0800f7c7 	.word	0x0800f7c7
 800f7a4:	0800f7c7 	.word	0x0800f7c7
 800f7a8:	0800f7c7 	.word	0x0800f7c7
 800f7ac:	0800f7cd 	.word	0x0800f7cd
 800f7b0:	0800f7c7 	.word	0x0800f7c7
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	73fb      	strb	r3, [r7, #15]
            break;
 800f7b8:	e014      	b.n	800f7e4 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800f7ba:	2305      	movs	r3, #5
 800f7bc:	73fb      	strb	r3, [r7, #15]
            break;
 800f7be:	e011      	b.n	800f7e4 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	73fb      	strb	r3, [r7, #15]
            break;
 800f7c4:	e00e      	b.n	800f7e4 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	73fb      	strb	r3, [r7, #15]
            break;
 800f7ca:	e00b      	b.n	800f7e4 <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	691b      	ldr	r3, [r3, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d002      	beq.n	800f7da <pb_encode_tag_for_field+0x6a>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	e000      	b.n	800f7dc <pb_encode_tag_for_field+0x6c>
 800f7da:	4b09      	ldr	r3, [pc, #36]	; (800f800 <pb_encode_tag_for_field+0x90>)
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	6113      	str	r3, [r2, #16]
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	e009      	b.n	800f7f8 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	881b      	ldrh	r3, [r3, #0]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	7bfb      	ldrb	r3, [r7, #15]
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7ff ff99 	bl	800f728 <pb_encode_tag>
 800f7f6:	4603      	mov	r3, r0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	0801422c 	.word	0x0801422c

0800f804 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800f804:	b590      	push	{r4, r7, lr}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f04f 0400 	mov.w	r4, #0
 800f816:	461a      	mov	r2, r3
 800f818:	4623      	mov	r3, r4
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f7ff fe7f 	bl	800f51e <pb_encode_varint>
 800f820:	4603      	mov	r3, r0
 800f822:	f083 0301 	eor.w	r3, r3, #1
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d001      	beq.n	800f830 <pb_encode_string+0x2c>
        return false;
 800f82c:	2300      	movs	r3, #0
 800f82e:	e005      	b.n	800f83c <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	68b9      	ldr	r1, [r7, #8]
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f7ff fa4b 	bl	800ecd0 <pb_write>
 800f83a:	4603      	mov	r3, r0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3714      	adds	r7, #20
 800f840:	46bd      	mov	sp, r7
 800f842:	bd90      	pop	{r4, r7, pc}

0800f844 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b08d      	sub	sp, #52	; 0x34
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800f850:	f107 0314 	add.w	r3, r7, #20
 800f854:	2200      	movs	r2, #0
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	605a      	str	r2, [r3, #4]
 800f85a:	609a      	str	r2, [r3, #8]
 800f85c:	60da      	str	r2, [r3, #12]
 800f85e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800f860:	f107 0314 	add.w	r3, r7, #20
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	68b9      	ldr	r1, [r7, #8]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7ff fe11 	bl	800f490 <pb_encode>
 800f86e:	4603      	mov	r3, r0
 800f870:	f083 0301 	eor.w	r3, r3, #1
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d004      	beq.n	800f884 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800f87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800f880:	2300      	movs	r3, #0
 800f882:	e064      	b.n	800f94e <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 800f884:	6a3b      	ldr	r3, [r7, #32]
 800f886:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88a:	f04f 0400 	mov.w	r4, #0
 800f88e:	461a      	mov	r2, r3
 800f890:	4623      	mov	r3, r4
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7ff fe43 	bl	800f51e <pb_encode_varint>
 800f898:	4603      	mov	r3, r0
 800f89a:	f083 0301 	eor.w	r3, r3, #1
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <pb_encode_submessage+0x64>
        return false;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	e052      	b.n	800f94e <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d106      	bne.n	800f8be <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800f8b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7ff fa0b 	bl	800ecd0 <pb_write>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	e047      	b.n	800f94e <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	68da      	ldr	r2, [r3, #12]
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	441a      	add	r2, r3
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d90b      	bls.n	800f8e6 <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d002      	beq.n	800f8dc <pb_encode_submessage+0x98>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	691b      	ldr	r3, [r3, #16]
 800f8da:	e000      	b.n	800f8de <pb_encode_submessage+0x9a>
 800f8dc:	4b1e      	ldr	r3, [pc, #120]	; (800f958 <pb_encode_submessage+0x114>)
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	6113      	str	r3, [r2, #16]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	e033      	b.n	800f94e <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800f8fe:	f107 0314 	add.w	r3, r7, #20
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	68b9      	ldr	r1, [r7, #8]
 800f906:	4618      	mov	r0, r3
 800f908:	f7ff fdc2 	bl	800f490 <pb_encode>
 800f90c:	4603      	mov	r3, r0
 800f90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	68da      	ldr	r2, [r3, #12]
 800f916:	6a3b      	ldr	r3, [r7, #32]
 800f918:	441a      	add	r2, r3
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800f91e:	69ba      	ldr	r2, [r7, #24]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800f924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f92e:	429a      	cmp	r2, r3
 800f930:	d00b      	beq.n	800f94a <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <pb_encode_submessage+0xfc>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	e000      	b.n	800f942 <pb_encode_submessage+0xfe>
 800f940:	4b06      	ldr	r3, [pc, #24]	; (800f95c <pb_encode_submessage+0x118>)
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	6113      	str	r3, [r2, #16]
 800f946:	2300      	movs	r3, #0
 800f948:	e001      	b.n	800f94e <pb_encode_submessage+0x10a>
    
    return status;
 800f94a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3734      	adds	r7, #52	; 0x34
 800f952:	46bd      	mov	sp, r7
 800f954:	bd90      	pop	{r4, r7, pc}
 800f956:	bf00      	nop
 800f958:	080141e4 	.word	0x080141e4
 800f95c:	08014250 	.word	0x08014250

0800f960 <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800f960:	b590      	push	{r4, r7, lr}
 800f962:	b087      	sub	sp, #28
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800f96c:	f04f 0300 	mov.w	r3, #0
 800f970:	f04f 0400 	mov.w	r4, #0
 800f974:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f97e:	b29b      	uxth	r3, r3
 800f980:	2b01      	cmp	r3, #1
 800f982:	d108      	bne.n	800f996 <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f993 3000 	ldrsb.w	r3, [r3]
 800f98a:	b25b      	sxtb	r3, r3
 800f98c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f990:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800f994:	e033      	b.n	800f9fe <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	2b02      	cmp	r3, #2
 800f9a0:	d108      	bne.n	800f9b4 <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9a8:	b21b      	sxth	r3, r3
 800f9aa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f9ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800f9b2:	e024      	b.n	800f9fe <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	2b04      	cmp	r3, #4
 800f9be:	d106      	bne.n	800f9ce <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800f9c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800f9cc:	e017      	b.n	800f9fe <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	2b08      	cmp	r3, #8
 800f9d8:	d105      	bne.n	800f9e6 <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f9e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800f9e4:	e00b      	b.n	800f9fe <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <pb_enc_varint+0x94>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	e000      	b.n	800f9f6 <pb_enc_varint+0x96>
 800f9f4:	4b08      	ldr	r3, [pc, #32]	; (800fa18 <pb_enc_varint+0xb8>)
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	6113      	str	r3, [r2, #16]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	e007      	b.n	800fa0e <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800f9fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fa02:	461a      	mov	r2, r3
 800fa04:	4623      	mov	r3, r4
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7ff fd89 	bl	800f51e <pb_encode_varint>
 800fa0c:	4603      	mov	r3, r0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	371c      	adds	r7, #28
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd90      	pop	{r4, r7, pc}
 800fa16:	bf00      	nop
 800fa18:	08014264 	.word	0x08014264

0800fa1c <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fa1c:	b590      	push	{r4, r7, lr}
 800fa1e:	b087      	sub	sp, #28
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 800fa28:	f04f 0300 	mov.w	r3, #0
 800fa2c:	f04f 0400 	mov.w	r4, #0
 800fa30:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d107      	bne.n	800fa50 <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	f04f 0400 	mov.w	r4, #0
 800fa4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fa4e:	e032      	b.n	800fab6 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d107      	bne.n	800fa6c <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	f04f 0400 	mov.w	r4, #0
 800fa66:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fa6a:	e024      	b.n	800fab6 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	2b04      	cmp	r3, #4
 800fa76:	d106      	bne.n	800fa86 <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f04f 0400 	mov.w	r4, #0
 800fa80:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fa84:	e017      	b.n	800fab6 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	2b08      	cmp	r3, #8
 800fa90:	d105      	bne.n	800fa9e <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fa98:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fa9c:	e00b      	b.n	800fab6 <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d002      	beq.n	800faac <pb_enc_uvarint+0x90>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	e000      	b.n	800faae <pb_enc_uvarint+0x92>
 800faac:	4b07      	ldr	r3, [pc, #28]	; (800facc <pb_enc_uvarint+0xb0>)
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	6113      	str	r3, [r2, #16]
 800fab2:	2300      	movs	r3, #0
 800fab4:	e005      	b.n	800fac2 <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 800fab6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f7ff fd2f 	bl	800f51e <pb_encode_varint>
 800fac0:	4603      	mov	r3, r0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	371c      	adds	r7, #28
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd90      	pop	{r4, r7, pc}
 800faca:	bf00      	nop
 800facc:	08014264 	.word	0x08014264

0800fad0 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fad0:	b590      	push	{r4, r7, lr}
 800fad2:	b087      	sub	sp, #28
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800fadc:	f04f 0300 	mov.w	r3, #0
 800fae0:	f04f 0400 	mov.w	r4, #0
 800fae4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d108      	bne.n	800fb06 <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f993 3000 	ldrsb.w	r3, [r3]
 800fafa:	b25b      	sxtb	r3, r3
 800fafc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fb00:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fb04:	e033      	b.n	800fb6e <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d108      	bne.n	800fb24 <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb18:	b21b      	sxth	r3, r3
 800fb1a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fb1e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fb22:	e024      	b.n	800fb6e <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	2b04      	cmp	r3, #4
 800fb2e:	d106      	bne.n	800fb3e <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800fb38:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fb3c:	e017      	b.n	800fb6e <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	2b08      	cmp	r3, #8
 800fb48:	d105      	bne.n	800fb56 <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fb50:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800fb54:	e00b      	b.n	800fb6e <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d002      	beq.n	800fb64 <pb_enc_svarint+0x94>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	691b      	ldr	r3, [r3, #16]
 800fb62:	e000      	b.n	800fb66 <pb_enc_svarint+0x96>
 800fb64:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <pb_enc_svarint+0xb4>)
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	6113      	str	r3, [r2, #16]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e005      	b.n	800fb7a <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 800fb6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff fd26 	bl	800f5c4 <pb_encode_svarint>
 800fb78:	4603      	mov	r3, r0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	371c      	adds	r7, #28
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd90      	pop	{r4, r7, pc}
 800fb82:	bf00      	nop
 800fb84:	08014264 	.word	0x08014264

0800fb88 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 800fb94:	6879      	ldr	r1, [r7, #4]
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f7ff fd62 	bl	800f660 <pb_encode_fixed64>
 800fb9c:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	60f8      	str	r0, [r7, #12]
 800fbae:	60b9      	str	r1, [r7, #8]
 800fbb0:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800fbb2:	6879      	ldr	r1, [r7, #4]
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7ff fd30 	bl	800f61a <pb_encode_fixed32>
 800fbba:	4603      	mov	r3, r0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3710      	adds	r7, #16
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b086      	sub	sp, #24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d106      	bne.n	800fbec <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800fbde:	2200      	movs	r2, #0
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	f7ff fe0e 	bl	800f804 <pb_encode_string>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	e023      	b.n	800fc34 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	789b      	ldrb	r3, [r3, #2]
 800fbf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d114      	bne.n	800fc22 <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	881b      	ldrh	r3, [r3, #0]
 800fbfc:	3302      	adds	r3, #2
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800fc04:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d90b      	bls.n	800fc22 <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d002      	beq.n	800fc18 <pb_enc_bytes+0x54>
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	e000      	b.n	800fc1a <pb_enc_bytes+0x56>
 800fc18:	4b08      	ldr	r3, [pc, #32]	; (800fc3c <pb_enc_bytes+0x78>)
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	6113      	str	r3, [r2, #16]
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e008      	b.n	800fc34 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	1c99      	adds	r1, r3, #2
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7ff fde9 	bl	800f804 <pb_encode_string>
 800fc32:	4603      	mov	r3, r0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3718      	adds	r7, #24
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	08014278 	.word	0x08014278

0800fc40 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	789b      	ldrb	r3, [r3, #2]
 800fc62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fc66:	2b80      	cmp	r3, #128	; 0x80
 800fc68:	d102      	bne.n	800fc70 <pb_enc_string+0x30>
        max_size = (size_t)-1;
 800fc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc6e:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d108      	bne.n	800fc88 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 800fc76:	2300      	movs	r3, #0
 800fc78:	61fb      	str	r3, [r7, #28]
 800fc7a:	e00d      	b.n	800fc98 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	61fb      	str	r3, [r7, #28]
            p++;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	3301      	adds	r3, #1
 800fc86:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 800fc88:	69fa      	ldr	r2, [r7, #28]
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d203      	bcs.n	800fc98 <pb_enc_string+0x58>
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1f1      	bne.n	800fc7c <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800fc98:	69fa      	ldr	r2, [r7, #28]
 800fc9a:	6879      	ldr	r1, [r7, #4]
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f7ff fdb1 	bl	800f804 <pb_encode_string>
 800fca2:	4603      	mov	r3, r0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3720      	adds	r7, #32
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10b      	bne.n	800fcda <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d002      	beq.n	800fcd0 <pb_enc_submessage+0x24>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	e000      	b.n	800fcd2 <pb_enc_submessage+0x26>
 800fcd0:	4b08      	ldr	r3, [pc, #32]	; (800fcf4 <pb_enc_submessage+0x48>)
 800fcd2:	68fa      	ldr	r2, [r7, #12]
 800fcd4:	6113      	str	r3, [r2, #16]
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	e008      	b.n	800fcec <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	4619      	mov	r1, r3
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f7ff fdad 	bl	800f844 <pb_encode_submessage>
 800fcea:	4603      	mov	r3, r0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	0801428c 	.word	0x0801428c

0800fcf8 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	6879      	ldr	r1, [r7, #4]
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f7ff fd77 	bl	800f804 <pb_encode_string>
 800fd16:	4603      	mov	r3, r0
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3710      	adds	r7, #16
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <__aeabi_memclr>:
 800fd20:	2200      	movs	r2, #0
 800fd22:	f7f7 b853 	b.w	8006dcc <__aeabi_memset>

0800fd26 <__aeabi_memcpy>:
 800fd26:	f000 b84a 	b.w	800fdbe <memcpy>
	...

0800fd2c <__errno>:
 800fd2c:	4b01      	ldr	r3, [pc, #4]	; (800fd34 <__errno+0x8>)
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	200006c8 	.word	0x200006c8

0800fd38 <__libc_init_array>:
 800fd38:	b570      	push	{r4, r5, r6, lr}
 800fd3a:	4e0d      	ldr	r6, [pc, #52]	; (800fd70 <__libc_init_array+0x38>)
 800fd3c:	4c0d      	ldr	r4, [pc, #52]	; (800fd74 <__libc_init_array+0x3c>)
 800fd3e:	1ba4      	subs	r4, r4, r6
 800fd40:	10a4      	asrs	r4, r4, #2
 800fd42:	2500      	movs	r5, #0
 800fd44:	42a5      	cmp	r5, r4
 800fd46:	d109      	bne.n	800fd5c <__libc_init_array+0x24>
 800fd48:	4e0b      	ldr	r6, [pc, #44]	; (800fd78 <__libc_init_array+0x40>)
 800fd4a:	4c0c      	ldr	r4, [pc, #48]	; (800fd7c <__libc_init_array+0x44>)
 800fd4c:	f003 fdbc 	bl	80138c8 <_init>
 800fd50:	1ba4      	subs	r4, r4, r6
 800fd52:	10a4      	asrs	r4, r4, #2
 800fd54:	2500      	movs	r5, #0
 800fd56:	42a5      	cmp	r5, r4
 800fd58:	d105      	bne.n	800fd66 <__libc_init_array+0x2e>
 800fd5a:	bd70      	pop	{r4, r5, r6, pc}
 800fd5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd60:	4798      	blx	r3
 800fd62:	3501      	adds	r5, #1
 800fd64:	e7ee      	b.n	800fd44 <__libc_init_array+0xc>
 800fd66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd6a:	4798      	blx	r3
 800fd6c:	3501      	adds	r5, #1
 800fd6e:	e7f2      	b.n	800fd56 <__libc_init_array+0x1e>
 800fd70:	08015948 	.word	0x08015948
 800fd74:	08015948 	.word	0x08015948
 800fd78:	08015948 	.word	0x08015948
 800fd7c:	0801594c 	.word	0x0801594c

0800fd80 <malloc>:
 800fd80:	4b02      	ldr	r3, [pc, #8]	; (800fd8c <malloc+0xc>)
 800fd82:	4601      	mov	r1, r0
 800fd84:	6818      	ldr	r0, [r3, #0]
 800fd86:	f000 b87b 	b.w	800fe80 <_malloc_r>
 800fd8a:	bf00      	nop
 800fd8c:	200006c8 	.word	0x200006c8

0800fd90 <free>:
 800fd90:	4b02      	ldr	r3, [pc, #8]	; (800fd9c <free+0xc>)
 800fd92:	4601      	mov	r1, r0
 800fd94:	6818      	ldr	r0, [r3, #0]
 800fd96:	f000 b825 	b.w	800fde4 <_free_r>
 800fd9a:	bf00      	nop
 800fd9c:	200006c8 	.word	0x200006c8

0800fda0 <memcmp>:
 800fda0:	b530      	push	{r4, r5, lr}
 800fda2:	2400      	movs	r4, #0
 800fda4:	42a2      	cmp	r2, r4
 800fda6:	d101      	bne.n	800fdac <memcmp+0xc>
 800fda8:	2000      	movs	r0, #0
 800fdaa:	e007      	b.n	800fdbc <memcmp+0x1c>
 800fdac:	5d03      	ldrb	r3, [r0, r4]
 800fdae:	3401      	adds	r4, #1
 800fdb0:	190d      	adds	r5, r1, r4
 800fdb2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800fdb6:	42ab      	cmp	r3, r5
 800fdb8:	d0f4      	beq.n	800fda4 <memcmp+0x4>
 800fdba:	1b58      	subs	r0, r3, r5
 800fdbc:	bd30      	pop	{r4, r5, pc}

0800fdbe <memcpy>:
 800fdbe:	b510      	push	{r4, lr}
 800fdc0:	1e43      	subs	r3, r0, #1
 800fdc2:	440a      	add	r2, r1
 800fdc4:	4291      	cmp	r1, r2
 800fdc6:	d100      	bne.n	800fdca <memcpy+0xc>
 800fdc8:	bd10      	pop	{r4, pc}
 800fdca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdd2:	e7f7      	b.n	800fdc4 <memcpy+0x6>

0800fdd4 <memset>:
 800fdd4:	4402      	add	r2, r0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d100      	bne.n	800fdde <memset+0xa>
 800fddc:	4770      	bx	lr
 800fdde:	f803 1b01 	strb.w	r1, [r3], #1
 800fde2:	e7f9      	b.n	800fdd8 <memset+0x4>

0800fde4 <_free_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4605      	mov	r5, r0
 800fde8:	2900      	cmp	r1, #0
 800fdea:	d045      	beq.n	800fe78 <_free_r+0x94>
 800fdec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdf0:	1f0c      	subs	r4, r1, #4
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	bfb8      	it	lt
 800fdf6:	18e4      	addlt	r4, r4, r3
 800fdf8:	f000 fbf4 	bl	80105e4 <__malloc_lock>
 800fdfc:	4a1f      	ldr	r2, [pc, #124]	; (800fe7c <_free_r+0x98>)
 800fdfe:	6813      	ldr	r3, [r2, #0]
 800fe00:	4610      	mov	r0, r2
 800fe02:	b933      	cbnz	r3, 800fe12 <_free_r+0x2e>
 800fe04:	6063      	str	r3, [r4, #4]
 800fe06:	6014      	str	r4, [r2, #0]
 800fe08:	4628      	mov	r0, r5
 800fe0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe0e:	f000 bbea 	b.w	80105e6 <__malloc_unlock>
 800fe12:	42a3      	cmp	r3, r4
 800fe14:	d90c      	bls.n	800fe30 <_free_r+0x4c>
 800fe16:	6821      	ldr	r1, [r4, #0]
 800fe18:	1862      	adds	r2, r4, r1
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	bf04      	itt	eq
 800fe1e:	681a      	ldreq	r2, [r3, #0]
 800fe20:	685b      	ldreq	r3, [r3, #4]
 800fe22:	6063      	str	r3, [r4, #4]
 800fe24:	bf04      	itt	eq
 800fe26:	1852      	addeq	r2, r2, r1
 800fe28:	6022      	streq	r2, [r4, #0]
 800fe2a:	6004      	str	r4, [r0, #0]
 800fe2c:	e7ec      	b.n	800fe08 <_free_r+0x24>
 800fe2e:	4613      	mov	r3, r2
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	b10a      	cbz	r2, 800fe38 <_free_r+0x54>
 800fe34:	42a2      	cmp	r2, r4
 800fe36:	d9fa      	bls.n	800fe2e <_free_r+0x4a>
 800fe38:	6819      	ldr	r1, [r3, #0]
 800fe3a:	1858      	adds	r0, r3, r1
 800fe3c:	42a0      	cmp	r0, r4
 800fe3e:	d10b      	bne.n	800fe58 <_free_r+0x74>
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	4401      	add	r1, r0
 800fe44:	1858      	adds	r0, r3, r1
 800fe46:	4282      	cmp	r2, r0
 800fe48:	6019      	str	r1, [r3, #0]
 800fe4a:	d1dd      	bne.n	800fe08 <_free_r+0x24>
 800fe4c:	6810      	ldr	r0, [r2, #0]
 800fe4e:	6852      	ldr	r2, [r2, #4]
 800fe50:	605a      	str	r2, [r3, #4]
 800fe52:	4401      	add	r1, r0
 800fe54:	6019      	str	r1, [r3, #0]
 800fe56:	e7d7      	b.n	800fe08 <_free_r+0x24>
 800fe58:	d902      	bls.n	800fe60 <_free_r+0x7c>
 800fe5a:	230c      	movs	r3, #12
 800fe5c:	602b      	str	r3, [r5, #0]
 800fe5e:	e7d3      	b.n	800fe08 <_free_r+0x24>
 800fe60:	6820      	ldr	r0, [r4, #0]
 800fe62:	1821      	adds	r1, r4, r0
 800fe64:	428a      	cmp	r2, r1
 800fe66:	bf04      	itt	eq
 800fe68:	6811      	ldreq	r1, [r2, #0]
 800fe6a:	6852      	ldreq	r2, [r2, #4]
 800fe6c:	6062      	str	r2, [r4, #4]
 800fe6e:	bf04      	itt	eq
 800fe70:	1809      	addeq	r1, r1, r0
 800fe72:	6021      	streq	r1, [r4, #0]
 800fe74:	605c      	str	r4, [r3, #4]
 800fe76:	e7c7      	b.n	800fe08 <_free_r+0x24>
 800fe78:	bd38      	pop	{r3, r4, r5, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20000cac 	.word	0x20000cac

0800fe80 <_malloc_r>:
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	1ccd      	adds	r5, r1, #3
 800fe84:	f025 0503 	bic.w	r5, r5, #3
 800fe88:	3508      	adds	r5, #8
 800fe8a:	2d0c      	cmp	r5, #12
 800fe8c:	bf38      	it	cc
 800fe8e:	250c      	movcc	r5, #12
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	4606      	mov	r6, r0
 800fe94:	db01      	blt.n	800fe9a <_malloc_r+0x1a>
 800fe96:	42a9      	cmp	r1, r5
 800fe98:	d903      	bls.n	800fea2 <_malloc_r+0x22>
 800fe9a:	230c      	movs	r3, #12
 800fe9c:	6033      	str	r3, [r6, #0]
 800fe9e:	2000      	movs	r0, #0
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
 800fea2:	f000 fb9f 	bl	80105e4 <__malloc_lock>
 800fea6:	4a21      	ldr	r2, [pc, #132]	; (800ff2c <_malloc_r+0xac>)
 800fea8:	6814      	ldr	r4, [r2, #0]
 800feaa:	4621      	mov	r1, r4
 800feac:	b991      	cbnz	r1, 800fed4 <_malloc_r+0x54>
 800feae:	4c20      	ldr	r4, [pc, #128]	; (800ff30 <_malloc_r+0xb0>)
 800feb0:	6823      	ldr	r3, [r4, #0]
 800feb2:	b91b      	cbnz	r3, 800febc <_malloc_r+0x3c>
 800feb4:	4630      	mov	r0, r6
 800feb6:	f000 f8d5 	bl	8010064 <_sbrk_r>
 800feba:	6020      	str	r0, [r4, #0]
 800febc:	4629      	mov	r1, r5
 800febe:	4630      	mov	r0, r6
 800fec0:	f000 f8d0 	bl	8010064 <_sbrk_r>
 800fec4:	1c43      	adds	r3, r0, #1
 800fec6:	d124      	bne.n	800ff12 <_malloc_r+0x92>
 800fec8:	230c      	movs	r3, #12
 800feca:	6033      	str	r3, [r6, #0]
 800fecc:	4630      	mov	r0, r6
 800fece:	f000 fb8a 	bl	80105e6 <__malloc_unlock>
 800fed2:	e7e4      	b.n	800fe9e <_malloc_r+0x1e>
 800fed4:	680b      	ldr	r3, [r1, #0]
 800fed6:	1b5b      	subs	r3, r3, r5
 800fed8:	d418      	bmi.n	800ff0c <_malloc_r+0x8c>
 800feda:	2b0b      	cmp	r3, #11
 800fedc:	d90f      	bls.n	800fefe <_malloc_r+0x7e>
 800fede:	600b      	str	r3, [r1, #0]
 800fee0:	50cd      	str	r5, [r1, r3]
 800fee2:	18cc      	adds	r4, r1, r3
 800fee4:	4630      	mov	r0, r6
 800fee6:	f000 fb7e 	bl	80105e6 <__malloc_unlock>
 800feea:	f104 000b 	add.w	r0, r4, #11
 800feee:	1d23      	adds	r3, r4, #4
 800fef0:	f020 0007 	bic.w	r0, r0, #7
 800fef4:	1ac3      	subs	r3, r0, r3
 800fef6:	d0d3      	beq.n	800fea0 <_malloc_r+0x20>
 800fef8:	425a      	negs	r2, r3
 800fefa:	50e2      	str	r2, [r4, r3]
 800fefc:	e7d0      	b.n	800fea0 <_malloc_r+0x20>
 800fefe:	428c      	cmp	r4, r1
 800ff00:	684b      	ldr	r3, [r1, #4]
 800ff02:	bf16      	itet	ne
 800ff04:	6063      	strne	r3, [r4, #4]
 800ff06:	6013      	streq	r3, [r2, #0]
 800ff08:	460c      	movne	r4, r1
 800ff0a:	e7eb      	b.n	800fee4 <_malloc_r+0x64>
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	6849      	ldr	r1, [r1, #4]
 800ff10:	e7cc      	b.n	800feac <_malloc_r+0x2c>
 800ff12:	1cc4      	adds	r4, r0, #3
 800ff14:	f024 0403 	bic.w	r4, r4, #3
 800ff18:	42a0      	cmp	r0, r4
 800ff1a:	d005      	beq.n	800ff28 <_malloc_r+0xa8>
 800ff1c:	1a21      	subs	r1, r4, r0
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f000 f8a0 	bl	8010064 <_sbrk_r>
 800ff24:	3001      	adds	r0, #1
 800ff26:	d0cf      	beq.n	800fec8 <_malloc_r+0x48>
 800ff28:	6025      	str	r5, [r4, #0]
 800ff2a:	e7db      	b.n	800fee4 <_malloc_r+0x64>
 800ff2c:	20000cac 	.word	0x20000cac
 800ff30:	20000cb0 	.word	0x20000cb0

0800ff34 <iprintf>:
 800ff34:	b40f      	push	{r0, r1, r2, r3}
 800ff36:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <iprintf+0x2c>)
 800ff38:	b513      	push	{r0, r1, r4, lr}
 800ff3a:	681c      	ldr	r4, [r3, #0]
 800ff3c:	b124      	cbz	r4, 800ff48 <iprintf+0x14>
 800ff3e:	69a3      	ldr	r3, [r4, #24]
 800ff40:	b913      	cbnz	r3, 800ff48 <iprintf+0x14>
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fa60 	bl	8010408 <__sinit>
 800ff48:	ab05      	add	r3, sp, #20
 800ff4a:	9a04      	ldr	r2, [sp, #16]
 800ff4c:	68a1      	ldr	r1, [r4, #8]
 800ff4e:	9301      	str	r3, [sp, #4]
 800ff50:	4620      	mov	r0, r4
 800ff52:	f000 fb99 	bl	8010688 <_vfiprintf_r>
 800ff56:	b002      	add	sp, #8
 800ff58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff5c:	b004      	add	sp, #16
 800ff5e:	4770      	bx	lr
 800ff60:	200006c8 	.word	0x200006c8

0800ff64 <putchar>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4b08      	ldr	r3, [pc, #32]	; (800ff88 <putchar+0x24>)
 800ff68:	681c      	ldr	r4, [r3, #0]
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	b124      	cbz	r4, 800ff78 <putchar+0x14>
 800ff6e:	69a3      	ldr	r3, [r4, #24]
 800ff70:	b913      	cbnz	r3, 800ff78 <putchar+0x14>
 800ff72:	4620      	mov	r0, r4
 800ff74:	f000 fa48 	bl	8010408 <__sinit>
 800ff78:	68a2      	ldr	r2, [r4, #8]
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff82:	f000 be1f 	b.w	8010bc4 <_putc_r>
 800ff86:	bf00      	nop
 800ff88:	200006c8 	.word	0x200006c8

0800ff8c <_puts_r>:
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	460e      	mov	r6, r1
 800ff90:	4605      	mov	r5, r0
 800ff92:	b118      	cbz	r0, 800ff9c <_puts_r+0x10>
 800ff94:	6983      	ldr	r3, [r0, #24]
 800ff96:	b90b      	cbnz	r3, 800ff9c <_puts_r+0x10>
 800ff98:	f000 fa36 	bl	8010408 <__sinit>
 800ff9c:	69ab      	ldr	r3, [r5, #24]
 800ff9e:	68ac      	ldr	r4, [r5, #8]
 800ffa0:	b913      	cbnz	r3, 800ffa8 <_puts_r+0x1c>
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	f000 fa30 	bl	8010408 <__sinit>
 800ffa8:	4b23      	ldr	r3, [pc, #140]	; (8010038 <_puts_r+0xac>)
 800ffaa:	429c      	cmp	r4, r3
 800ffac:	d117      	bne.n	800ffde <_puts_r+0x52>
 800ffae:	686c      	ldr	r4, [r5, #4]
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	071b      	lsls	r3, r3, #28
 800ffb4:	d51d      	bpl.n	800fff2 <_puts_r+0x66>
 800ffb6:	6923      	ldr	r3, [r4, #16]
 800ffb8:	b1db      	cbz	r3, 800fff2 <_puts_r+0x66>
 800ffba:	3e01      	subs	r6, #1
 800ffbc:	68a3      	ldr	r3, [r4, #8]
 800ffbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	60a3      	str	r3, [r4, #8]
 800ffc6:	b9e9      	cbnz	r1, 8010004 <_puts_r+0x78>
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	da2e      	bge.n	801002a <_puts_r+0x9e>
 800ffcc:	4622      	mov	r2, r4
 800ffce:	210a      	movs	r1, #10
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	f000 f869 	bl	80100a8 <__swbuf_r>
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	d011      	beq.n	800fffe <_puts_r+0x72>
 800ffda:	200a      	movs	r0, #10
 800ffdc:	e011      	b.n	8010002 <_puts_r+0x76>
 800ffde:	4b17      	ldr	r3, [pc, #92]	; (801003c <_puts_r+0xb0>)
 800ffe0:	429c      	cmp	r4, r3
 800ffe2:	d101      	bne.n	800ffe8 <_puts_r+0x5c>
 800ffe4:	68ac      	ldr	r4, [r5, #8]
 800ffe6:	e7e3      	b.n	800ffb0 <_puts_r+0x24>
 800ffe8:	4b15      	ldr	r3, [pc, #84]	; (8010040 <_puts_r+0xb4>)
 800ffea:	429c      	cmp	r4, r3
 800ffec:	bf08      	it	eq
 800ffee:	68ec      	ldreq	r4, [r5, #12]
 800fff0:	e7de      	b.n	800ffb0 <_puts_r+0x24>
 800fff2:	4621      	mov	r1, r4
 800fff4:	4628      	mov	r0, r5
 800fff6:	f000 f8a9 	bl	801014c <__swsetup_r>
 800fffa:	2800      	cmp	r0, #0
 800fffc:	d0dd      	beq.n	800ffba <_puts_r+0x2e>
 800fffe:	f04f 30ff 	mov.w	r0, #4294967295
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	2b00      	cmp	r3, #0
 8010006:	da04      	bge.n	8010012 <_puts_r+0x86>
 8010008:	69a2      	ldr	r2, [r4, #24]
 801000a:	429a      	cmp	r2, r3
 801000c:	dc06      	bgt.n	801001c <_puts_r+0x90>
 801000e:	290a      	cmp	r1, #10
 8010010:	d004      	beq.n	801001c <_puts_r+0x90>
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	1c5a      	adds	r2, r3, #1
 8010016:	6022      	str	r2, [r4, #0]
 8010018:	7019      	strb	r1, [r3, #0]
 801001a:	e7cf      	b.n	800ffbc <_puts_r+0x30>
 801001c:	4622      	mov	r2, r4
 801001e:	4628      	mov	r0, r5
 8010020:	f000 f842 	bl	80100a8 <__swbuf_r>
 8010024:	3001      	adds	r0, #1
 8010026:	d1c9      	bne.n	800ffbc <_puts_r+0x30>
 8010028:	e7e9      	b.n	800fffe <_puts_r+0x72>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	200a      	movs	r0, #10
 801002e:	1c5a      	adds	r2, r3, #1
 8010030:	6022      	str	r2, [r4, #0]
 8010032:	7018      	strb	r0, [r3, #0]
 8010034:	e7e5      	b.n	8010002 <_puts_r+0x76>
 8010036:	bf00      	nop
 8010038:	0801511c 	.word	0x0801511c
 801003c:	0801513c 	.word	0x0801513c
 8010040:	080150fc 	.word	0x080150fc

08010044 <puts>:
 8010044:	4b02      	ldr	r3, [pc, #8]	; (8010050 <puts+0xc>)
 8010046:	4601      	mov	r1, r0
 8010048:	6818      	ldr	r0, [r3, #0]
 801004a:	f7ff bf9f 	b.w	800ff8c <_puts_r>
 801004e:	bf00      	nop
 8010050:	200006c8 	.word	0x200006c8

08010054 <realloc>:
 8010054:	4b02      	ldr	r3, [pc, #8]	; (8010060 <realloc+0xc>)
 8010056:	460a      	mov	r2, r1
 8010058:	4601      	mov	r1, r0
 801005a:	6818      	ldr	r0, [r3, #0]
 801005c:	f000 bac4 	b.w	80105e8 <_realloc_r>
 8010060:	200006c8 	.word	0x200006c8

08010064 <_sbrk_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4c06      	ldr	r4, [pc, #24]	; (8010080 <_sbrk_r+0x1c>)
 8010068:	2300      	movs	r3, #0
 801006a:	4605      	mov	r5, r0
 801006c:	4608      	mov	r0, r1
 801006e:	6023      	str	r3, [r4, #0]
 8010070:	f7f7 fe4c 	bl	8007d0c <_sbrk>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d102      	bne.n	801007e <_sbrk_r+0x1a>
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	b103      	cbz	r3, 801007e <_sbrk_r+0x1a>
 801007c:	602b      	str	r3, [r5, #0]
 801007e:	bd38      	pop	{r3, r4, r5, pc}
 8010080:	20000f60 	.word	0x20000f60

08010084 <strncmp>:
 8010084:	b510      	push	{r4, lr}
 8010086:	b16a      	cbz	r2, 80100a4 <strncmp+0x20>
 8010088:	3901      	subs	r1, #1
 801008a:	1884      	adds	r4, r0, r2
 801008c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010090:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010094:	4293      	cmp	r3, r2
 8010096:	d103      	bne.n	80100a0 <strncmp+0x1c>
 8010098:	42a0      	cmp	r0, r4
 801009a:	d001      	beq.n	80100a0 <strncmp+0x1c>
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1f5      	bne.n	801008c <strncmp+0x8>
 80100a0:	1a98      	subs	r0, r3, r2
 80100a2:	bd10      	pop	{r4, pc}
 80100a4:	4610      	mov	r0, r2
 80100a6:	e7fc      	b.n	80100a2 <strncmp+0x1e>

080100a8 <__swbuf_r>:
 80100a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100aa:	460e      	mov	r6, r1
 80100ac:	4614      	mov	r4, r2
 80100ae:	4605      	mov	r5, r0
 80100b0:	b118      	cbz	r0, 80100ba <__swbuf_r+0x12>
 80100b2:	6983      	ldr	r3, [r0, #24]
 80100b4:	b90b      	cbnz	r3, 80100ba <__swbuf_r+0x12>
 80100b6:	f000 f9a7 	bl	8010408 <__sinit>
 80100ba:	4b21      	ldr	r3, [pc, #132]	; (8010140 <__swbuf_r+0x98>)
 80100bc:	429c      	cmp	r4, r3
 80100be:	d12a      	bne.n	8010116 <__swbuf_r+0x6e>
 80100c0:	686c      	ldr	r4, [r5, #4]
 80100c2:	69a3      	ldr	r3, [r4, #24]
 80100c4:	60a3      	str	r3, [r4, #8]
 80100c6:	89a3      	ldrh	r3, [r4, #12]
 80100c8:	071a      	lsls	r2, r3, #28
 80100ca:	d52e      	bpl.n	801012a <__swbuf_r+0x82>
 80100cc:	6923      	ldr	r3, [r4, #16]
 80100ce:	b363      	cbz	r3, 801012a <__swbuf_r+0x82>
 80100d0:	6923      	ldr	r3, [r4, #16]
 80100d2:	6820      	ldr	r0, [r4, #0]
 80100d4:	1ac0      	subs	r0, r0, r3
 80100d6:	6963      	ldr	r3, [r4, #20]
 80100d8:	b2f6      	uxtb	r6, r6
 80100da:	4283      	cmp	r3, r0
 80100dc:	4637      	mov	r7, r6
 80100de:	dc04      	bgt.n	80100ea <__swbuf_r+0x42>
 80100e0:	4621      	mov	r1, r4
 80100e2:	4628      	mov	r0, r5
 80100e4:	f000 f926 	bl	8010334 <_fflush_r>
 80100e8:	bb28      	cbnz	r0, 8010136 <__swbuf_r+0x8e>
 80100ea:	68a3      	ldr	r3, [r4, #8]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	60a3      	str	r3, [r4, #8]
 80100f0:	6823      	ldr	r3, [r4, #0]
 80100f2:	1c5a      	adds	r2, r3, #1
 80100f4:	6022      	str	r2, [r4, #0]
 80100f6:	701e      	strb	r6, [r3, #0]
 80100f8:	6963      	ldr	r3, [r4, #20]
 80100fa:	3001      	adds	r0, #1
 80100fc:	4283      	cmp	r3, r0
 80100fe:	d004      	beq.n	801010a <__swbuf_r+0x62>
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	07db      	lsls	r3, r3, #31
 8010104:	d519      	bpl.n	801013a <__swbuf_r+0x92>
 8010106:	2e0a      	cmp	r6, #10
 8010108:	d117      	bne.n	801013a <__swbuf_r+0x92>
 801010a:	4621      	mov	r1, r4
 801010c:	4628      	mov	r0, r5
 801010e:	f000 f911 	bl	8010334 <_fflush_r>
 8010112:	b190      	cbz	r0, 801013a <__swbuf_r+0x92>
 8010114:	e00f      	b.n	8010136 <__swbuf_r+0x8e>
 8010116:	4b0b      	ldr	r3, [pc, #44]	; (8010144 <__swbuf_r+0x9c>)
 8010118:	429c      	cmp	r4, r3
 801011a:	d101      	bne.n	8010120 <__swbuf_r+0x78>
 801011c:	68ac      	ldr	r4, [r5, #8]
 801011e:	e7d0      	b.n	80100c2 <__swbuf_r+0x1a>
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <__swbuf_r+0xa0>)
 8010122:	429c      	cmp	r4, r3
 8010124:	bf08      	it	eq
 8010126:	68ec      	ldreq	r4, [r5, #12]
 8010128:	e7cb      	b.n	80100c2 <__swbuf_r+0x1a>
 801012a:	4621      	mov	r1, r4
 801012c:	4628      	mov	r0, r5
 801012e:	f000 f80d 	bl	801014c <__swsetup_r>
 8010132:	2800      	cmp	r0, #0
 8010134:	d0cc      	beq.n	80100d0 <__swbuf_r+0x28>
 8010136:	f04f 37ff 	mov.w	r7, #4294967295
 801013a:	4638      	mov	r0, r7
 801013c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801013e:	bf00      	nop
 8010140:	0801511c 	.word	0x0801511c
 8010144:	0801513c 	.word	0x0801513c
 8010148:	080150fc 	.word	0x080150fc

0801014c <__swsetup_r>:
 801014c:	4b32      	ldr	r3, [pc, #200]	; (8010218 <__swsetup_r+0xcc>)
 801014e:	b570      	push	{r4, r5, r6, lr}
 8010150:	681d      	ldr	r5, [r3, #0]
 8010152:	4606      	mov	r6, r0
 8010154:	460c      	mov	r4, r1
 8010156:	b125      	cbz	r5, 8010162 <__swsetup_r+0x16>
 8010158:	69ab      	ldr	r3, [r5, #24]
 801015a:	b913      	cbnz	r3, 8010162 <__swsetup_r+0x16>
 801015c:	4628      	mov	r0, r5
 801015e:	f000 f953 	bl	8010408 <__sinit>
 8010162:	4b2e      	ldr	r3, [pc, #184]	; (801021c <__swsetup_r+0xd0>)
 8010164:	429c      	cmp	r4, r3
 8010166:	d10f      	bne.n	8010188 <__swsetup_r+0x3c>
 8010168:	686c      	ldr	r4, [r5, #4]
 801016a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801016e:	b29a      	uxth	r2, r3
 8010170:	0715      	lsls	r5, r2, #28
 8010172:	d42c      	bmi.n	80101ce <__swsetup_r+0x82>
 8010174:	06d0      	lsls	r0, r2, #27
 8010176:	d411      	bmi.n	801019c <__swsetup_r+0x50>
 8010178:	2209      	movs	r2, #9
 801017a:	6032      	str	r2, [r6, #0]
 801017c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010180:	81a3      	strh	r3, [r4, #12]
 8010182:	f04f 30ff 	mov.w	r0, #4294967295
 8010186:	e03e      	b.n	8010206 <__swsetup_r+0xba>
 8010188:	4b25      	ldr	r3, [pc, #148]	; (8010220 <__swsetup_r+0xd4>)
 801018a:	429c      	cmp	r4, r3
 801018c:	d101      	bne.n	8010192 <__swsetup_r+0x46>
 801018e:	68ac      	ldr	r4, [r5, #8]
 8010190:	e7eb      	b.n	801016a <__swsetup_r+0x1e>
 8010192:	4b24      	ldr	r3, [pc, #144]	; (8010224 <__swsetup_r+0xd8>)
 8010194:	429c      	cmp	r4, r3
 8010196:	bf08      	it	eq
 8010198:	68ec      	ldreq	r4, [r5, #12]
 801019a:	e7e6      	b.n	801016a <__swsetup_r+0x1e>
 801019c:	0751      	lsls	r1, r2, #29
 801019e:	d512      	bpl.n	80101c6 <__swsetup_r+0x7a>
 80101a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101a2:	b141      	cbz	r1, 80101b6 <__swsetup_r+0x6a>
 80101a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101a8:	4299      	cmp	r1, r3
 80101aa:	d002      	beq.n	80101b2 <__swsetup_r+0x66>
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7ff fe19 	bl	800fde4 <_free_r>
 80101b2:	2300      	movs	r3, #0
 80101b4:	6363      	str	r3, [r4, #52]	; 0x34
 80101b6:	89a3      	ldrh	r3, [r4, #12]
 80101b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101bc:	81a3      	strh	r3, [r4, #12]
 80101be:	2300      	movs	r3, #0
 80101c0:	6063      	str	r3, [r4, #4]
 80101c2:	6923      	ldr	r3, [r4, #16]
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	89a3      	ldrh	r3, [r4, #12]
 80101c8:	f043 0308 	orr.w	r3, r3, #8
 80101cc:	81a3      	strh	r3, [r4, #12]
 80101ce:	6923      	ldr	r3, [r4, #16]
 80101d0:	b94b      	cbnz	r3, 80101e6 <__swsetup_r+0x9a>
 80101d2:	89a3      	ldrh	r3, [r4, #12]
 80101d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101dc:	d003      	beq.n	80101e6 <__swsetup_r+0x9a>
 80101de:	4621      	mov	r1, r4
 80101e0:	4630      	mov	r0, r6
 80101e2:	f000 f9bf 	bl	8010564 <__smakebuf_r>
 80101e6:	89a2      	ldrh	r2, [r4, #12]
 80101e8:	f012 0301 	ands.w	r3, r2, #1
 80101ec:	d00c      	beq.n	8010208 <__swsetup_r+0xbc>
 80101ee:	2300      	movs	r3, #0
 80101f0:	60a3      	str	r3, [r4, #8]
 80101f2:	6963      	ldr	r3, [r4, #20]
 80101f4:	425b      	negs	r3, r3
 80101f6:	61a3      	str	r3, [r4, #24]
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	b953      	cbnz	r3, 8010212 <__swsetup_r+0xc6>
 80101fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010200:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010204:	d1ba      	bne.n	801017c <__swsetup_r+0x30>
 8010206:	bd70      	pop	{r4, r5, r6, pc}
 8010208:	0792      	lsls	r2, r2, #30
 801020a:	bf58      	it	pl
 801020c:	6963      	ldrpl	r3, [r4, #20]
 801020e:	60a3      	str	r3, [r4, #8]
 8010210:	e7f2      	b.n	80101f8 <__swsetup_r+0xac>
 8010212:	2000      	movs	r0, #0
 8010214:	e7f7      	b.n	8010206 <__swsetup_r+0xba>
 8010216:	bf00      	nop
 8010218:	200006c8 	.word	0x200006c8
 801021c:	0801511c 	.word	0x0801511c
 8010220:	0801513c 	.word	0x0801513c
 8010224:	080150fc 	.word	0x080150fc

08010228 <__sflush_r>:
 8010228:	898a      	ldrh	r2, [r1, #12]
 801022a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022e:	4605      	mov	r5, r0
 8010230:	0710      	lsls	r0, r2, #28
 8010232:	460c      	mov	r4, r1
 8010234:	d458      	bmi.n	80102e8 <__sflush_r+0xc0>
 8010236:	684b      	ldr	r3, [r1, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	dc05      	bgt.n	8010248 <__sflush_r+0x20>
 801023c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801023e:	2b00      	cmp	r3, #0
 8010240:	dc02      	bgt.n	8010248 <__sflush_r+0x20>
 8010242:	2000      	movs	r0, #0
 8010244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801024a:	2e00      	cmp	r6, #0
 801024c:	d0f9      	beq.n	8010242 <__sflush_r+0x1a>
 801024e:	2300      	movs	r3, #0
 8010250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010254:	682f      	ldr	r7, [r5, #0]
 8010256:	6a21      	ldr	r1, [r4, #32]
 8010258:	602b      	str	r3, [r5, #0]
 801025a:	d032      	beq.n	80102c2 <__sflush_r+0x9a>
 801025c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	075a      	lsls	r2, r3, #29
 8010262:	d505      	bpl.n	8010270 <__sflush_r+0x48>
 8010264:	6863      	ldr	r3, [r4, #4]
 8010266:	1ac0      	subs	r0, r0, r3
 8010268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801026a:	b10b      	cbz	r3, 8010270 <__sflush_r+0x48>
 801026c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801026e:	1ac0      	subs	r0, r0, r3
 8010270:	2300      	movs	r3, #0
 8010272:	4602      	mov	r2, r0
 8010274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010276:	6a21      	ldr	r1, [r4, #32]
 8010278:	4628      	mov	r0, r5
 801027a:	47b0      	blx	r6
 801027c:	1c43      	adds	r3, r0, #1
 801027e:	89a3      	ldrh	r3, [r4, #12]
 8010280:	d106      	bne.n	8010290 <__sflush_r+0x68>
 8010282:	6829      	ldr	r1, [r5, #0]
 8010284:	291d      	cmp	r1, #29
 8010286:	d848      	bhi.n	801031a <__sflush_r+0xf2>
 8010288:	4a29      	ldr	r2, [pc, #164]	; (8010330 <__sflush_r+0x108>)
 801028a:	40ca      	lsrs	r2, r1
 801028c:	07d6      	lsls	r6, r2, #31
 801028e:	d544      	bpl.n	801031a <__sflush_r+0xf2>
 8010290:	2200      	movs	r2, #0
 8010292:	6062      	str	r2, [r4, #4]
 8010294:	04d9      	lsls	r1, r3, #19
 8010296:	6922      	ldr	r2, [r4, #16]
 8010298:	6022      	str	r2, [r4, #0]
 801029a:	d504      	bpl.n	80102a6 <__sflush_r+0x7e>
 801029c:	1c42      	adds	r2, r0, #1
 801029e:	d101      	bne.n	80102a4 <__sflush_r+0x7c>
 80102a0:	682b      	ldr	r3, [r5, #0]
 80102a2:	b903      	cbnz	r3, 80102a6 <__sflush_r+0x7e>
 80102a4:	6560      	str	r0, [r4, #84]	; 0x54
 80102a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102a8:	602f      	str	r7, [r5, #0]
 80102aa:	2900      	cmp	r1, #0
 80102ac:	d0c9      	beq.n	8010242 <__sflush_r+0x1a>
 80102ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102b2:	4299      	cmp	r1, r3
 80102b4:	d002      	beq.n	80102bc <__sflush_r+0x94>
 80102b6:	4628      	mov	r0, r5
 80102b8:	f7ff fd94 	bl	800fde4 <_free_r>
 80102bc:	2000      	movs	r0, #0
 80102be:	6360      	str	r0, [r4, #52]	; 0x34
 80102c0:	e7c0      	b.n	8010244 <__sflush_r+0x1c>
 80102c2:	2301      	movs	r3, #1
 80102c4:	4628      	mov	r0, r5
 80102c6:	47b0      	blx	r6
 80102c8:	1c41      	adds	r1, r0, #1
 80102ca:	d1c8      	bne.n	801025e <__sflush_r+0x36>
 80102cc:	682b      	ldr	r3, [r5, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d0c5      	beq.n	801025e <__sflush_r+0x36>
 80102d2:	2b1d      	cmp	r3, #29
 80102d4:	d001      	beq.n	80102da <__sflush_r+0xb2>
 80102d6:	2b16      	cmp	r3, #22
 80102d8:	d101      	bne.n	80102de <__sflush_r+0xb6>
 80102da:	602f      	str	r7, [r5, #0]
 80102dc:	e7b1      	b.n	8010242 <__sflush_r+0x1a>
 80102de:	89a3      	ldrh	r3, [r4, #12]
 80102e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102e4:	81a3      	strh	r3, [r4, #12]
 80102e6:	e7ad      	b.n	8010244 <__sflush_r+0x1c>
 80102e8:	690f      	ldr	r7, [r1, #16]
 80102ea:	2f00      	cmp	r7, #0
 80102ec:	d0a9      	beq.n	8010242 <__sflush_r+0x1a>
 80102ee:	0793      	lsls	r3, r2, #30
 80102f0:	680e      	ldr	r6, [r1, #0]
 80102f2:	bf08      	it	eq
 80102f4:	694b      	ldreq	r3, [r1, #20]
 80102f6:	600f      	str	r7, [r1, #0]
 80102f8:	bf18      	it	ne
 80102fa:	2300      	movne	r3, #0
 80102fc:	eba6 0807 	sub.w	r8, r6, r7
 8010300:	608b      	str	r3, [r1, #8]
 8010302:	f1b8 0f00 	cmp.w	r8, #0
 8010306:	dd9c      	ble.n	8010242 <__sflush_r+0x1a>
 8010308:	4643      	mov	r3, r8
 801030a:	463a      	mov	r2, r7
 801030c:	6a21      	ldr	r1, [r4, #32]
 801030e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010310:	4628      	mov	r0, r5
 8010312:	47b0      	blx	r6
 8010314:	2800      	cmp	r0, #0
 8010316:	dc06      	bgt.n	8010326 <__sflush_r+0xfe>
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801031e:	81a3      	strh	r3, [r4, #12]
 8010320:	f04f 30ff 	mov.w	r0, #4294967295
 8010324:	e78e      	b.n	8010244 <__sflush_r+0x1c>
 8010326:	4407      	add	r7, r0
 8010328:	eba8 0800 	sub.w	r8, r8, r0
 801032c:	e7e9      	b.n	8010302 <__sflush_r+0xda>
 801032e:	bf00      	nop
 8010330:	20400001 	.word	0x20400001

08010334 <_fflush_r>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	690b      	ldr	r3, [r1, #16]
 8010338:	4605      	mov	r5, r0
 801033a:	460c      	mov	r4, r1
 801033c:	b1db      	cbz	r3, 8010376 <_fflush_r+0x42>
 801033e:	b118      	cbz	r0, 8010348 <_fflush_r+0x14>
 8010340:	6983      	ldr	r3, [r0, #24]
 8010342:	b90b      	cbnz	r3, 8010348 <_fflush_r+0x14>
 8010344:	f000 f860 	bl	8010408 <__sinit>
 8010348:	4b0c      	ldr	r3, [pc, #48]	; (801037c <_fflush_r+0x48>)
 801034a:	429c      	cmp	r4, r3
 801034c:	d109      	bne.n	8010362 <_fflush_r+0x2e>
 801034e:	686c      	ldr	r4, [r5, #4]
 8010350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010354:	b17b      	cbz	r3, 8010376 <_fflush_r+0x42>
 8010356:	4621      	mov	r1, r4
 8010358:	4628      	mov	r0, r5
 801035a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801035e:	f7ff bf63 	b.w	8010228 <__sflush_r>
 8010362:	4b07      	ldr	r3, [pc, #28]	; (8010380 <_fflush_r+0x4c>)
 8010364:	429c      	cmp	r4, r3
 8010366:	d101      	bne.n	801036c <_fflush_r+0x38>
 8010368:	68ac      	ldr	r4, [r5, #8]
 801036a:	e7f1      	b.n	8010350 <_fflush_r+0x1c>
 801036c:	4b05      	ldr	r3, [pc, #20]	; (8010384 <_fflush_r+0x50>)
 801036e:	429c      	cmp	r4, r3
 8010370:	bf08      	it	eq
 8010372:	68ec      	ldreq	r4, [r5, #12]
 8010374:	e7ec      	b.n	8010350 <_fflush_r+0x1c>
 8010376:	2000      	movs	r0, #0
 8010378:	bd38      	pop	{r3, r4, r5, pc}
 801037a:	bf00      	nop
 801037c:	0801511c 	.word	0x0801511c
 8010380:	0801513c 	.word	0x0801513c
 8010384:	080150fc 	.word	0x080150fc

08010388 <std>:
 8010388:	2300      	movs	r3, #0
 801038a:	b510      	push	{r4, lr}
 801038c:	4604      	mov	r4, r0
 801038e:	e9c0 3300 	strd	r3, r3, [r0]
 8010392:	6083      	str	r3, [r0, #8]
 8010394:	8181      	strh	r1, [r0, #12]
 8010396:	6643      	str	r3, [r0, #100]	; 0x64
 8010398:	81c2      	strh	r2, [r0, #14]
 801039a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801039e:	6183      	str	r3, [r0, #24]
 80103a0:	4619      	mov	r1, r3
 80103a2:	2208      	movs	r2, #8
 80103a4:	305c      	adds	r0, #92	; 0x5c
 80103a6:	f7ff fd15 	bl	800fdd4 <memset>
 80103aa:	4b05      	ldr	r3, [pc, #20]	; (80103c0 <std+0x38>)
 80103ac:	6263      	str	r3, [r4, #36]	; 0x24
 80103ae:	4b05      	ldr	r3, [pc, #20]	; (80103c4 <std+0x3c>)
 80103b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80103b2:	4b05      	ldr	r3, [pc, #20]	; (80103c8 <std+0x40>)
 80103b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103b6:	4b05      	ldr	r3, [pc, #20]	; (80103cc <std+0x44>)
 80103b8:	6224      	str	r4, [r4, #32]
 80103ba:	6323      	str	r3, [r4, #48]	; 0x30
 80103bc:	bd10      	pop	{r4, pc}
 80103be:	bf00      	nop
 80103c0:	08010c31 	.word	0x08010c31
 80103c4:	08010c53 	.word	0x08010c53
 80103c8:	08010c8b 	.word	0x08010c8b
 80103cc:	08010caf 	.word	0x08010caf

080103d0 <_cleanup_r>:
 80103d0:	4901      	ldr	r1, [pc, #4]	; (80103d8 <_cleanup_r+0x8>)
 80103d2:	f000 b885 	b.w	80104e0 <_fwalk_reent>
 80103d6:	bf00      	nop
 80103d8:	08010335 	.word	0x08010335

080103dc <__sfmoreglue>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	1e4a      	subs	r2, r1, #1
 80103e0:	2568      	movs	r5, #104	; 0x68
 80103e2:	4355      	muls	r5, r2
 80103e4:	460e      	mov	r6, r1
 80103e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103ea:	f7ff fd49 	bl	800fe80 <_malloc_r>
 80103ee:	4604      	mov	r4, r0
 80103f0:	b140      	cbz	r0, 8010404 <__sfmoreglue+0x28>
 80103f2:	2100      	movs	r1, #0
 80103f4:	e9c0 1600 	strd	r1, r6, [r0]
 80103f8:	300c      	adds	r0, #12
 80103fa:	60a0      	str	r0, [r4, #8]
 80103fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010400:	f7ff fce8 	bl	800fdd4 <memset>
 8010404:	4620      	mov	r0, r4
 8010406:	bd70      	pop	{r4, r5, r6, pc}

08010408 <__sinit>:
 8010408:	6983      	ldr	r3, [r0, #24]
 801040a:	b510      	push	{r4, lr}
 801040c:	4604      	mov	r4, r0
 801040e:	bb33      	cbnz	r3, 801045e <__sinit+0x56>
 8010410:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010414:	6503      	str	r3, [r0, #80]	; 0x50
 8010416:	4b12      	ldr	r3, [pc, #72]	; (8010460 <__sinit+0x58>)
 8010418:	4a12      	ldr	r2, [pc, #72]	; (8010464 <__sinit+0x5c>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	6282      	str	r2, [r0, #40]	; 0x28
 801041e:	4298      	cmp	r0, r3
 8010420:	bf04      	itt	eq
 8010422:	2301      	moveq	r3, #1
 8010424:	6183      	streq	r3, [r0, #24]
 8010426:	f000 f81f 	bl	8010468 <__sfp>
 801042a:	6060      	str	r0, [r4, #4]
 801042c:	4620      	mov	r0, r4
 801042e:	f000 f81b 	bl	8010468 <__sfp>
 8010432:	60a0      	str	r0, [r4, #8]
 8010434:	4620      	mov	r0, r4
 8010436:	f000 f817 	bl	8010468 <__sfp>
 801043a:	2200      	movs	r2, #0
 801043c:	60e0      	str	r0, [r4, #12]
 801043e:	2104      	movs	r1, #4
 8010440:	6860      	ldr	r0, [r4, #4]
 8010442:	f7ff ffa1 	bl	8010388 <std>
 8010446:	2201      	movs	r2, #1
 8010448:	2109      	movs	r1, #9
 801044a:	68a0      	ldr	r0, [r4, #8]
 801044c:	f7ff ff9c 	bl	8010388 <std>
 8010450:	2202      	movs	r2, #2
 8010452:	2112      	movs	r1, #18
 8010454:	68e0      	ldr	r0, [r4, #12]
 8010456:	f7ff ff97 	bl	8010388 <std>
 801045a:	2301      	movs	r3, #1
 801045c:	61a3      	str	r3, [r4, #24]
 801045e:	bd10      	pop	{r4, pc}
 8010460:	080150f8 	.word	0x080150f8
 8010464:	080103d1 	.word	0x080103d1

08010468 <__sfp>:
 8010468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046a:	4b1b      	ldr	r3, [pc, #108]	; (80104d8 <__sfp+0x70>)
 801046c:	681e      	ldr	r6, [r3, #0]
 801046e:	69b3      	ldr	r3, [r6, #24]
 8010470:	4607      	mov	r7, r0
 8010472:	b913      	cbnz	r3, 801047a <__sfp+0x12>
 8010474:	4630      	mov	r0, r6
 8010476:	f7ff ffc7 	bl	8010408 <__sinit>
 801047a:	3648      	adds	r6, #72	; 0x48
 801047c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010480:	3b01      	subs	r3, #1
 8010482:	d503      	bpl.n	801048c <__sfp+0x24>
 8010484:	6833      	ldr	r3, [r6, #0]
 8010486:	b133      	cbz	r3, 8010496 <__sfp+0x2e>
 8010488:	6836      	ldr	r6, [r6, #0]
 801048a:	e7f7      	b.n	801047c <__sfp+0x14>
 801048c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010490:	b16d      	cbz	r5, 80104ae <__sfp+0x46>
 8010492:	3468      	adds	r4, #104	; 0x68
 8010494:	e7f4      	b.n	8010480 <__sfp+0x18>
 8010496:	2104      	movs	r1, #4
 8010498:	4638      	mov	r0, r7
 801049a:	f7ff ff9f 	bl	80103dc <__sfmoreglue>
 801049e:	6030      	str	r0, [r6, #0]
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1f1      	bne.n	8010488 <__sfp+0x20>
 80104a4:	230c      	movs	r3, #12
 80104a6:	603b      	str	r3, [r7, #0]
 80104a8:	4604      	mov	r4, r0
 80104aa:	4620      	mov	r0, r4
 80104ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ae:	4b0b      	ldr	r3, [pc, #44]	; (80104dc <__sfp+0x74>)
 80104b0:	6665      	str	r5, [r4, #100]	; 0x64
 80104b2:	e9c4 5500 	strd	r5, r5, [r4]
 80104b6:	60a5      	str	r5, [r4, #8]
 80104b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80104bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80104c0:	2208      	movs	r2, #8
 80104c2:	4629      	mov	r1, r5
 80104c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104c8:	f7ff fc84 	bl	800fdd4 <memset>
 80104cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104d4:	e7e9      	b.n	80104aa <__sfp+0x42>
 80104d6:	bf00      	nop
 80104d8:	080150f8 	.word	0x080150f8
 80104dc:	ffff0001 	.word	0xffff0001

080104e0 <_fwalk_reent>:
 80104e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104e4:	4680      	mov	r8, r0
 80104e6:	4689      	mov	r9, r1
 80104e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104ec:	2600      	movs	r6, #0
 80104ee:	b914      	cbnz	r4, 80104f6 <_fwalk_reent+0x16>
 80104f0:	4630      	mov	r0, r6
 80104f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80104fa:	3f01      	subs	r7, #1
 80104fc:	d501      	bpl.n	8010502 <_fwalk_reent+0x22>
 80104fe:	6824      	ldr	r4, [r4, #0]
 8010500:	e7f5      	b.n	80104ee <_fwalk_reent+0xe>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d907      	bls.n	8010518 <_fwalk_reent+0x38>
 8010508:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801050c:	3301      	adds	r3, #1
 801050e:	d003      	beq.n	8010518 <_fwalk_reent+0x38>
 8010510:	4629      	mov	r1, r5
 8010512:	4640      	mov	r0, r8
 8010514:	47c8      	blx	r9
 8010516:	4306      	orrs	r6, r0
 8010518:	3568      	adds	r5, #104	; 0x68
 801051a:	e7ee      	b.n	80104fa <_fwalk_reent+0x1a>

0801051c <__swhatbuf_r>:
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	460e      	mov	r6, r1
 8010520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010524:	2900      	cmp	r1, #0
 8010526:	b096      	sub	sp, #88	; 0x58
 8010528:	4614      	mov	r4, r2
 801052a:	461d      	mov	r5, r3
 801052c:	da07      	bge.n	801053e <__swhatbuf_r+0x22>
 801052e:	2300      	movs	r3, #0
 8010530:	602b      	str	r3, [r5, #0]
 8010532:	89b3      	ldrh	r3, [r6, #12]
 8010534:	061a      	lsls	r2, r3, #24
 8010536:	d410      	bmi.n	801055a <__swhatbuf_r+0x3e>
 8010538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801053c:	e00e      	b.n	801055c <__swhatbuf_r+0x40>
 801053e:	466a      	mov	r2, sp
 8010540:	f000 fbdc 	bl	8010cfc <_fstat_r>
 8010544:	2800      	cmp	r0, #0
 8010546:	dbf2      	blt.n	801052e <__swhatbuf_r+0x12>
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801054e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010552:	425a      	negs	r2, r3
 8010554:	415a      	adcs	r2, r3
 8010556:	602a      	str	r2, [r5, #0]
 8010558:	e7ee      	b.n	8010538 <__swhatbuf_r+0x1c>
 801055a:	2340      	movs	r3, #64	; 0x40
 801055c:	2000      	movs	r0, #0
 801055e:	6023      	str	r3, [r4, #0]
 8010560:	b016      	add	sp, #88	; 0x58
 8010562:	bd70      	pop	{r4, r5, r6, pc}

08010564 <__smakebuf_r>:
 8010564:	898b      	ldrh	r3, [r1, #12]
 8010566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010568:	079d      	lsls	r5, r3, #30
 801056a:	4606      	mov	r6, r0
 801056c:	460c      	mov	r4, r1
 801056e:	d507      	bpl.n	8010580 <__smakebuf_r+0x1c>
 8010570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	6123      	str	r3, [r4, #16]
 8010578:	2301      	movs	r3, #1
 801057a:	6163      	str	r3, [r4, #20]
 801057c:	b002      	add	sp, #8
 801057e:	bd70      	pop	{r4, r5, r6, pc}
 8010580:	ab01      	add	r3, sp, #4
 8010582:	466a      	mov	r2, sp
 8010584:	f7ff ffca 	bl	801051c <__swhatbuf_r>
 8010588:	9900      	ldr	r1, [sp, #0]
 801058a:	4605      	mov	r5, r0
 801058c:	4630      	mov	r0, r6
 801058e:	f7ff fc77 	bl	800fe80 <_malloc_r>
 8010592:	b948      	cbnz	r0, 80105a8 <__smakebuf_r+0x44>
 8010594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010598:	059a      	lsls	r2, r3, #22
 801059a:	d4ef      	bmi.n	801057c <__smakebuf_r+0x18>
 801059c:	f023 0303 	bic.w	r3, r3, #3
 80105a0:	f043 0302 	orr.w	r3, r3, #2
 80105a4:	81a3      	strh	r3, [r4, #12]
 80105a6:	e7e3      	b.n	8010570 <__smakebuf_r+0xc>
 80105a8:	4b0d      	ldr	r3, [pc, #52]	; (80105e0 <__smakebuf_r+0x7c>)
 80105aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80105ac:	89a3      	ldrh	r3, [r4, #12]
 80105ae:	6020      	str	r0, [r4, #0]
 80105b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105b4:	81a3      	strh	r3, [r4, #12]
 80105b6:	9b00      	ldr	r3, [sp, #0]
 80105b8:	6163      	str	r3, [r4, #20]
 80105ba:	9b01      	ldr	r3, [sp, #4]
 80105bc:	6120      	str	r0, [r4, #16]
 80105be:	b15b      	cbz	r3, 80105d8 <__smakebuf_r+0x74>
 80105c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105c4:	4630      	mov	r0, r6
 80105c6:	f000 fbab 	bl	8010d20 <_isatty_r>
 80105ca:	b128      	cbz	r0, 80105d8 <__smakebuf_r+0x74>
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	f023 0303 	bic.w	r3, r3, #3
 80105d2:	f043 0301 	orr.w	r3, r3, #1
 80105d6:	81a3      	strh	r3, [r4, #12]
 80105d8:	89a3      	ldrh	r3, [r4, #12]
 80105da:	431d      	orrs	r5, r3
 80105dc:	81a5      	strh	r5, [r4, #12]
 80105de:	e7cd      	b.n	801057c <__smakebuf_r+0x18>
 80105e0:	080103d1 	.word	0x080103d1

080105e4 <__malloc_lock>:
 80105e4:	4770      	bx	lr

080105e6 <__malloc_unlock>:
 80105e6:	4770      	bx	lr

080105e8 <_realloc_r>:
 80105e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ea:	4607      	mov	r7, r0
 80105ec:	4614      	mov	r4, r2
 80105ee:	460e      	mov	r6, r1
 80105f0:	b921      	cbnz	r1, 80105fc <_realloc_r+0x14>
 80105f2:	4611      	mov	r1, r2
 80105f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80105f8:	f7ff bc42 	b.w	800fe80 <_malloc_r>
 80105fc:	b922      	cbnz	r2, 8010608 <_realloc_r+0x20>
 80105fe:	f7ff fbf1 	bl	800fde4 <_free_r>
 8010602:	4625      	mov	r5, r4
 8010604:	4628      	mov	r0, r5
 8010606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010608:	f000 fbac 	bl	8010d64 <_malloc_usable_size_r>
 801060c:	42a0      	cmp	r0, r4
 801060e:	d20f      	bcs.n	8010630 <_realloc_r+0x48>
 8010610:	4621      	mov	r1, r4
 8010612:	4638      	mov	r0, r7
 8010614:	f7ff fc34 	bl	800fe80 <_malloc_r>
 8010618:	4605      	mov	r5, r0
 801061a:	2800      	cmp	r0, #0
 801061c:	d0f2      	beq.n	8010604 <_realloc_r+0x1c>
 801061e:	4631      	mov	r1, r6
 8010620:	4622      	mov	r2, r4
 8010622:	f7ff fbcc 	bl	800fdbe <memcpy>
 8010626:	4631      	mov	r1, r6
 8010628:	4638      	mov	r0, r7
 801062a:	f7ff fbdb 	bl	800fde4 <_free_r>
 801062e:	e7e9      	b.n	8010604 <_realloc_r+0x1c>
 8010630:	4635      	mov	r5, r6
 8010632:	e7e7      	b.n	8010604 <_realloc_r+0x1c>

08010634 <__sfputc_r>:
 8010634:	6893      	ldr	r3, [r2, #8]
 8010636:	3b01      	subs	r3, #1
 8010638:	2b00      	cmp	r3, #0
 801063a:	b410      	push	{r4}
 801063c:	6093      	str	r3, [r2, #8]
 801063e:	da08      	bge.n	8010652 <__sfputc_r+0x1e>
 8010640:	6994      	ldr	r4, [r2, #24]
 8010642:	42a3      	cmp	r3, r4
 8010644:	db01      	blt.n	801064a <__sfputc_r+0x16>
 8010646:	290a      	cmp	r1, #10
 8010648:	d103      	bne.n	8010652 <__sfputc_r+0x1e>
 801064a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801064e:	f7ff bd2b 	b.w	80100a8 <__swbuf_r>
 8010652:	6813      	ldr	r3, [r2, #0]
 8010654:	1c58      	adds	r0, r3, #1
 8010656:	6010      	str	r0, [r2, #0]
 8010658:	7019      	strb	r1, [r3, #0]
 801065a:	4608      	mov	r0, r1
 801065c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010660:	4770      	bx	lr

08010662 <__sfputs_r>:
 8010662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010664:	4606      	mov	r6, r0
 8010666:	460f      	mov	r7, r1
 8010668:	4614      	mov	r4, r2
 801066a:	18d5      	adds	r5, r2, r3
 801066c:	42ac      	cmp	r4, r5
 801066e:	d101      	bne.n	8010674 <__sfputs_r+0x12>
 8010670:	2000      	movs	r0, #0
 8010672:	e007      	b.n	8010684 <__sfputs_r+0x22>
 8010674:	463a      	mov	r2, r7
 8010676:	f814 1b01 	ldrb.w	r1, [r4], #1
 801067a:	4630      	mov	r0, r6
 801067c:	f7ff ffda 	bl	8010634 <__sfputc_r>
 8010680:	1c43      	adds	r3, r0, #1
 8010682:	d1f3      	bne.n	801066c <__sfputs_r+0xa>
 8010684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010688 <_vfiprintf_r>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	460c      	mov	r4, r1
 801068e:	b09d      	sub	sp, #116	; 0x74
 8010690:	4617      	mov	r7, r2
 8010692:	461d      	mov	r5, r3
 8010694:	4606      	mov	r6, r0
 8010696:	b118      	cbz	r0, 80106a0 <_vfiprintf_r+0x18>
 8010698:	6983      	ldr	r3, [r0, #24]
 801069a:	b90b      	cbnz	r3, 80106a0 <_vfiprintf_r+0x18>
 801069c:	f7ff feb4 	bl	8010408 <__sinit>
 80106a0:	4b7c      	ldr	r3, [pc, #496]	; (8010894 <_vfiprintf_r+0x20c>)
 80106a2:	429c      	cmp	r4, r3
 80106a4:	d158      	bne.n	8010758 <_vfiprintf_r+0xd0>
 80106a6:	6874      	ldr	r4, [r6, #4]
 80106a8:	89a3      	ldrh	r3, [r4, #12]
 80106aa:	0718      	lsls	r0, r3, #28
 80106ac:	d55e      	bpl.n	801076c <_vfiprintf_r+0xe4>
 80106ae:	6923      	ldr	r3, [r4, #16]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d05b      	beq.n	801076c <_vfiprintf_r+0xe4>
 80106b4:	2300      	movs	r3, #0
 80106b6:	9309      	str	r3, [sp, #36]	; 0x24
 80106b8:	2320      	movs	r3, #32
 80106ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106be:	2330      	movs	r3, #48	; 0x30
 80106c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106c4:	9503      	str	r5, [sp, #12]
 80106c6:	f04f 0b01 	mov.w	fp, #1
 80106ca:	46b8      	mov	r8, r7
 80106cc:	4645      	mov	r5, r8
 80106ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80106d2:	b10b      	cbz	r3, 80106d8 <_vfiprintf_r+0x50>
 80106d4:	2b25      	cmp	r3, #37	; 0x25
 80106d6:	d154      	bne.n	8010782 <_vfiprintf_r+0xfa>
 80106d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80106dc:	d00b      	beq.n	80106f6 <_vfiprintf_r+0x6e>
 80106de:	4653      	mov	r3, sl
 80106e0:	463a      	mov	r2, r7
 80106e2:	4621      	mov	r1, r4
 80106e4:	4630      	mov	r0, r6
 80106e6:	f7ff ffbc 	bl	8010662 <__sfputs_r>
 80106ea:	3001      	adds	r0, #1
 80106ec:	f000 80c2 	beq.w	8010874 <_vfiprintf_r+0x1ec>
 80106f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f2:	4453      	add	r3, sl
 80106f4:	9309      	str	r3, [sp, #36]	; 0x24
 80106f6:	f898 3000 	ldrb.w	r3, [r8]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f000 80ba 	beq.w	8010874 <_vfiprintf_r+0x1ec>
 8010700:	2300      	movs	r3, #0
 8010702:	f04f 32ff 	mov.w	r2, #4294967295
 8010706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801070a:	9304      	str	r3, [sp, #16]
 801070c:	9307      	str	r3, [sp, #28]
 801070e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010712:	931a      	str	r3, [sp, #104]	; 0x68
 8010714:	46a8      	mov	r8, r5
 8010716:	2205      	movs	r2, #5
 8010718:	f818 1b01 	ldrb.w	r1, [r8], #1
 801071c:	485e      	ldr	r0, [pc, #376]	; (8010898 <_vfiprintf_r+0x210>)
 801071e:	f7f6 fbaf 	bl	8006e80 <memchr>
 8010722:	9b04      	ldr	r3, [sp, #16]
 8010724:	bb78      	cbnz	r0, 8010786 <_vfiprintf_r+0xfe>
 8010726:	06d9      	lsls	r1, r3, #27
 8010728:	bf44      	itt	mi
 801072a:	2220      	movmi	r2, #32
 801072c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010730:	071a      	lsls	r2, r3, #28
 8010732:	bf44      	itt	mi
 8010734:	222b      	movmi	r2, #43	; 0x2b
 8010736:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801073a:	782a      	ldrb	r2, [r5, #0]
 801073c:	2a2a      	cmp	r2, #42	; 0x2a
 801073e:	d02a      	beq.n	8010796 <_vfiprintf_r+0x10e>
 8010740:	9a07      	ldr	r2, [sp, #28]
 8010742:	46a8      	mov	r8, r5
 8010744:	2000      	movs	r0, #0
 8010746:	250a      	movs	r5, #10
 8010748:	4641      	mov	r1, r8
 801074a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801074e:	3b30      	subs	r3, #48	; 0x30
 8010750:	2b09      	cmp	r3, #9
 8010752:	d969      	bls.n	8010828 <_vfiprintf_r+0x1a0>
 8010754:	b360      	cbz	r0, 80107b0 <_vfiprintf_r+0x128>
 8010756:	e024      	b.n	80107a2 <_vfiprintf_r+0x11a>
 8010758:	4b50      	ldr	r3, [pc, #320]	; (801089c <_vfiprintf_r+0x214>)
 801075a:	429c      	cmp	r4, r3
 801075c:	d101      	bne.n	8010762 <_vfiprintf_r+0xda>
 801075e:	68b4      	ldr	r4, [r6, #8]
 8010760:	e7a2      	b.n	80106a8 <_vfiprintf_r+0x20>
 8010762:	4b4f      	ldr	r3, [pc, #316]	; (80108a0 <_vfiprintf_r+0x218>)
 8010764:	429c      	cmp	r4, r3
 8010766:	bf08      	it	eq
 8010768:	68f4      	ldreq	r4, [r6, #12]
 801076a:	e79d      	b.n	80106a8 <_vfiprintf_r+0x20>
 801076c:	4621      	mov	r1, r4
 801076e:	4630      	mov	r0, r6
 8010770:	f7ff fcec 	bl	801014c <__swsetup_r>
 8010774:	2800      	cmp	r0, #0
 8010776:	d09d      	beq.n	80106b4 <_vfiprintf_r+0x2c>
 8010778:	f04f 30ff 	mov.w	r0, #4294967295
 801077c:	b01d      	add	sp, #116	; 0x74
 801077e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010782:	46a8      	mov	r8, r5
 8010784:	e7a2      	b.n	80106cc <_vfiprintf_r+0x44>
 8010786:	4a44      	ldr	r2, [pc, #272]	; (8010898 <_vfiprintf_r+0x210>)
 8010788:	1a80      	subs	r0, r0, r2
 801078a:	fa0b f000 	lsl.w	r0, fp, r0
 801078e:	4318      	orrs	r0, r3
 8010790:	9004      	str	r0, [sp, #16]
 8010792:	4645      	mov	r5, r8
 8010794:	e7be      	b.n	8010714 <_vfiprintf_r+0x8c>
 8010796:	9a03      	ldr	r2, [sp, #12]
 8010798:	1d11      	adds	r1, r2, #4
 801079a:	6812      	ldr	r2, [r2, #0]
 801079c:	9103      	str	r1, [sp, #12]
 801079e:	2a00      	cmp	r2, #0
 80107a0:	db01      	blt.n	80107a6 <_vfiprintf_r+0x11e>
 80107a2:	9207      	str	r2, [sp, #28]
 80107a4:	e004      	b.n	80107b0 <_vfiprintf_r+0x128>
 80107a6:	4252      	negs	r2, r2
 80107a8:	f043 0302 	orr.w	r3, r3, #2
 80107ac:	9207      	str	r2, [sp, #28]
 80107ae:	9304      	str	r3, [sp, #16]
 80107b0:	f898 3000 	ldrb.w	r3, [r8]
 80107b4:	2b2e      	cmp	r3, #46	; 0x2e
 80107b6:	d10e      	bne.n	80107d6 <_vfiprintf_r+0x14e>
 80107b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80107bc:	2b2a      	cmp	r3, #42	; 0x2a
 80107be:	d138      	bne.n	8010832 <_vfiprintf_r+0x1aa>
 80107c0:	9b03      	ldr	r3, [sp, #12]
 80107c2:	1d1a      	adds	r2, r3, #4
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	9203      	str	r2, [sp, #12]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	bfb8      	it	lt
 80107cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80107d0:	f108 0802 	add.w	r8, r8, #2
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	4d33      	ldr	r5, [pc, #204]	; (80108a4 <_vfiprintf_r+0x21c>)
 80107d8:	f898 1000 	ldrb.w	r1, [r8]
 80107dc:	2203      	movs	r2, #3
 80107de:	4628      	mov	r0, r5
 80107e0:	f7f6 fb4e 	bl	8006e80 <memchr>
 80107e4:	b140      	cbz	r0, 80107f8 <_vfiprintf_r+0x170>
 80107e6:	2340      	movs	r3, #64	; 0x40
 80107e8:	1b40      	subs	r0, r0, r5
 80107ea:	fa03 f000 	lsl.w	r0, r3, r0
 80107ee:	9b04      	ldr	r3, [sp, #16]
 80107f0:	4303      	orrs	r3, r0
 80107f2:	f108 0801 	add.w	r8, r8, #1
 80107f6:	9304      	str	r3, [sp, #16]
 80107f8:	f898 1000 	ldrb.w	r1, [r8]
 80107fc:	482a      	ldr	r0, [pc, #168]	; (80108a8 <_vfiprintf_r+0x220>)
 80107fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010802:	2206      	movs	r2, #6
 8010804:	f108 0701 	add.w	r7, r8, #1
 8010808:	f7f6 fb3a 	bl	8006e80 <memchr>
 801080c:	2800      	cmp	r0, #0
 801080e:	d037      	beq.n	8010880 <_vfiprintf_r+0x1f8>
 8010810:	4b26      	ldr	r3, [pc, #152]	; (80108ac <_vfiprintf_r+0x224>)
 8010812:	bb1b      	cbnz	r3, 801085c <_vfiprintf_r+0x1d4>
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	3307      	adds	r3, #7
 8010818:	f023 0307 	bic.w	r3, r3, #7
 801081c:	3308      	adds	r3, #8
 801081e:	9303      	str	r3, [sp, #12]
 8010820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010822:	444b      	add	r3, r9
 8010824:	9309      	str	r3, [sp, #36]	; 0x24
 8010826:	e750      	b.n	80106ca <_vfiprintf_r+0x42>
 8010828:	fb05 3202 	mla	r2, r5, r2, r3
 801082c:	2001      	movs	r0, #1
 801082e:	4688      	mov	r8, r1
 8010830:	e78a      	b.n	8010748 <_vfiprintf_r+0xc0>
 8010832:	2300      	movs	r3, #0
 8010834:	f108 0801 	add.w	r8, r8, #1
 8010838:	9305      	str	r3, [sp, #20]
 801083a:	4619      	mov	r1, r3
 801083c:	250a      	movs	r5, #10
 801083e:	4640      	mov	r0, r8
 8010840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010844:	3a30      	subs	r2, #48	; 0x30
 8010846:	2a09      	cmp	r2, #9
 8010848:	d903      	bls.n	8010852 <_vfiprintf_r+0x1ca>
 801084a:	2b00      	cmp	r3, #0
 801084c:	d0c3      	beq.n	80107d6 <_vfiprintf_r+0x14e>
 801084e:	9105      	str	r1, [sp, #20]
 8010850:	e7c1      	b.n	80107d6 <_vfiprintf_r+0x14e>
 8010852:	fb05 2101 	mla	r1, r5, r1, r2
 8010856:	2301      	movs	r3, #1
 8010858:	4680      	mov	r8, r0
 801085a:	e7f0      	b.n	801083e <_vfiprintf_r+0x1b6>
 801085c:	ab03      	add	r3, sp, #12
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	4622      	mov	r2, r4
 8010862:	4b13      	ldr	r3, [pc, #76]	; (80108b0 <_vfiprintf_r+0x228>)
 8010864:	a904      	add	r1, sp, #16
 8010866:	4630      	mov	r0, r6
 8010868:	f3af 8000 	nop.w
 801086c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010870:	4681      	mov	r9, r0
 8010872:	d1d5      	bne.n	8010820 <_vfiprintf_r+0x198>
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	065b      	lsls	r3, r3, #25
 8010878:	f53f af7e 	bmi.w	8010778 <_vfiprintf_r+0xf0>
 801087c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801087e:	e77d      	b.n	801077c <_vfiprintf_r+0xf4>
 8010880:	ab03      	add	r3, sp, #12
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	4622      	mov	r2, r4
 8010886:	4b0a      	ldr	r3, [pc, #40]	; (80108b0 <_vfiprintf_r+0x228>)
 8010888:	a904      	add	r1, sp, #16
 801088a:	4630      	mov	r0, r6
 801088c:	f000 f888 	bl	80109a0 <_printf_i>
 8010890:	e7ec      	b.n	801086c <_vfiprintf_r+0x1e4>
 8010892:	bf00      	nop
 8010894:	0801511c 	.word	0x0801511c
 8010898:	0801515c 	.word	0x0801515c
 801089c:	0801513c 	.word	0x0801513c
 80108a0:	080150fc 	.word	0x080150fc
 80108a4:	08015162 	.word	0x08015162
 80108a8:	08015166 	.word	0x08015166
 80108ac:	00000000 	.word	0x00000000
 80108b0:	08010663 	.word	0x08010663

080108b4 <_printf_common>:
 80108b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b8:	4691      	mov	r9, r2
 80108ba:	461f      	mov	r7, r3
 80108bc:	688a      	ldr	r2, [r1, #8]
 80108be:	690b      	ldr	r3, [r1, #16]
 80108c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108c4:	4293      	cmp	r3, r2
 80108c6:	bfb8      	it	lt
 80108c8:	4613      	movlt	r3, r2
 80108ca:	f8c9 3000 	str.w	r3, [r9]
 80108ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108d2:	4606      	mov	r6, r0
 80108d4:	460c      	mov	r4, r1
 80108d6:	b112      	cbz	r2, 80108de <_printf_common+0x2a>
 80108d8:	3301      	adds	r3, #1
 80108da:	f8c9 3000 	str.w	r3, [r9]
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	0699      	lsls	r1, r3, #26
 80108e2:	bf42      	ittt	mi
 80108e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80108e8:	3302      	addmi	r3, #2
 80108ea:	f8c9 3000 	strmi.w	r3, [r9]
 80108ee:	6825      	ldr	r5, [r4, #0]
 80108f0:	f015 0506 	ands.w	r5, r5, #6
 80108f4:	d107      	bne.n	8010906 <_printf_common+0x52>
 80108f6:	f104 0a19 	add.w	sl, r4, #25
 80108fa:	68e3      	ldr	r3, [r4, #12]
 80108fc:	f8d9 2000 	ldr.w	r2, [r9]
 8010900:	1a9b      	subs	r3, r3, r2
 8010902:	42ab      	cmp	r3, r5
 8010904:	dc28      	bgt.n	8010958 <_printf_common+0xa4>
 8010906:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	3300      	adds	r3, #0
 801090e:	bf18      	it	ne
 8010910:	2301      	movne	r3, #1
 8010912:	0692      	lsls	r2, r2, #26
 8010914:	d42d      	bmi.n	8010972 <_printf_common+0xbe>
 8010916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801091a:	4639      	mov	r1, r7
 801091c:	4630      	mov	r0, r6
 801091e:	47c0      	blx	r8
 8010920:	3001      	adds	r0, #1
 8010922:	d020      	beq.n	8010966 <_printf_common+0xb2>
 8010924:	6823      	ldr	r3, [r4, #0]
 8010926:	68e5      	ldr	r5, [r4, #12]
 8010928:	f8d9 2000 	ldr.w	r2, [r9]
 801092c:	f003 0306 	and.w	r3, r3, #6
 8010930:	2b04      	cmp	r3, #4
 8010932:	bf08      	it	eq
 8010934:	1aad      	subeq	r5, r5, r2
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	6922      	ldr	r2, [r4, #16]
 801093a:	bf0c      	ite	eq
 801093c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010940:	2500      	movne	r5, #0
 8010942:	4293      	cmp	r3, r2
 8010944:	bfc4      	itt	gt
 8010946:	1a9b      	subgt	r3, r3, r2
 8010948:	18ed      	addgt	r5, r5, r3
 801094a:	f04f 0900 	mov.w	r9, #0
 801094e:	341a      	adds	r4, #26
 8010950:	454d      	cmp	r5, r9
 8010952:	d11a      	bne.n	801098a <_printf_common+0xd6>
 8010954:	2000      	movs	r0, #0
 8010956:	e008      	b.n	801096a <_printf_common+0xb6>
 8010958:	2301      	movs	r3, #1
 801095a:	4652      	mov	r2, sl
 801095c:	4639      	mov	r1, r7
 801095e:	4630      	mov	r0, r6
 8010960:	47c0      	blx	r8
 8010962:	3001      	adds	r0, #1
 8010964:	d103      	bne.n	801096e <_printf_common+0xba>
 8010966:	f04f 30ff 	mov.w	r0, #4294967295
 801096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801096e:	3501      	adds	r5, #1
 8010970:	e7c3      	b.n	80108fa <_printf_common+0x46>
 8010972:	18e1      	adds	r1, r4, r3
 8010974:	1c5a      	adds	r2, r3, #1
 8010976:	2030      	movs	r0, #48	; 0x30
 8010978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801097c:	4422      	add	r2, r4
 801097e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010982:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010986:	3302      	adds	r3, #2
 8010988:	e7c5      	b.n	8010916 <_printf_common+0x62>
 801098a:	2301      	movs	r3, #1
 801098c:	4622      	mov	r2, r4
 801098e:	4639      	mov	r1, r7
 8010990:	4630      	mov	r0, r6
 8010992:	47c0      	blx	r8
 8010994:	3001      	adds	r0, #1
 8010996:	d0e6      	beq.n	8010966 <_printf_common+0xb2>
 8010998:	f109 0901 	add.w	r9, r9, #1
 801099c:	e7d8      	b.n	8010950 <_printf_common+0x9c>
	...

080109a0 <_printf_i>:
 80109a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80109a8:	460c      	mov	r4, r1
 80109aa:	7e09      	ldrb	r1, [r1, #24]
 80109ac:	b085      	sub	sp, #20
 80109ae:	296e      	cmp	r1, #110	; 0x6e
 80109b0:	4617      	mov	r7, r2
 80109b2:	4606      	mov	r6, r0
 80109b4:	4698      	mov	r8, r3
 80109b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109b8:	f000 80b3 	beq.w	8010b22 <_printf_i+0x182>
 80109bc:	d822      	bhi.n	8010a04 <_printf_i+0x64>
 80109be:	2963      	cmp	r1, #99	; 0x63
 80109c0:	d036      	beq.n	8010a30 <_printf_i+0x90>
 80109c2:	d80a      	bhi.n	80109da <_printf_i+0x3a>
 80109c4:	2900      	cmp	r1, #0
 80109c6:	f000 80b9 	beq.w	8010b3c <_printf_i+0x19c>
 80109ca:	2958      	cmp	r1, #88	; 0x58
 80109cc:	f000 8083 	beq.w	8010ad6 <_printf_i+0x136>
 80109d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80109d8:	e032      	b.n	8010a40 <_printf_i+0xa0>
 80109da:	2964      	cmp	r1, #100	; 0x64
 80109dc:	d001      	beq.n	80109e2 <_printf_i+0x42>
 80109de:	2969      	cmp	r1, #105	; 0x69
 80109e0:	d1f6      	bne.n	80109d0 <_printf_i+0x30>
 80109e2:	6820      	ldr	r0, [r4, #0]
 80109e4:	6813      	ldr	r3, [r2, #0]
 80109e6:	0605      	lsls	r5, r0, #24
 80109e8:	f103 0104 	add.w	r1, r3, #4
 80109ec:	d52a      	bpl.n	8010a44 <_printf_i+0xa4>
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6011      	str	r1, [r2, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	da03      	bge.n	80109fe <_printf_i+0x5e>
 80109f6:	222d      	movs	r2, #45	; 0x2d
 80109f8:	425b      	negs	r3, r3
 80109fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80109fe:	486f      	ldr	r0, [pc, #444]	; (8010bbc <_printf_i+0x21c>)
 8010a00:	220a      	movs	r2, #10
 8010a02:	e039      	b.n	8010a78 <_printf_i+0xd8>
 8010a04:	2973      	cmp	r1, #115	; 0x73
 8010a06:	f000 809d 	beq.w	8010b44 <_printf_i+0x1a4>
 8010a0a:	d808      	bhi.n	8010a1e <_printf_i+0x7e>
 8010a0c:	296f      	cmp	r1, #111	; 0x6f
 8010a0e:	d020      	beq.n	8010a52 <_printf_i+0xb2>
 8010a10:	2970      	cmp	r1, #112	; 0x70
 8010a12:	d1dd      	bne.n	80109d0 <_printf_i+0x30>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	f043 0320 	orr.w	r3, r3, #32
 8010a1a:	6023      	str	r3, [r4, #0]
 8010a1c:	e003      	b.n	8010a26 <_printf_i+0x86>
 8010a1e:	2975      	cmp	r1, #117	; 0x75
 8010a20:	d017      	beq.n	8010a52 <_printf_i+0xb2>
 8010a22:	2978      	cmp	r1, #120	; 0x78
 8010a24:	d1d4      	bne.n	80109d0 <_printf_i+0x30>
 8010a26:	2378      	movs	r3, #120	; 0x78
 8010a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a2c:	4864      	ldr	r0, [pc, #400]	; (8010bc0 <_printf_i+0x220>)
 8010a2e:	e055      	b.n	8010adc <_printf_i+0x13c>
 8010a30:	6813      	ldr	r3, [r2, #0]
 8010a32:	1d19      	adds	r1, r3, #4
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	6011      	str	r1, [r2, #0]
 8010a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a40:	2301      	movs	r3, #1
 8010a42:	e08c      	b.n	8010b5e <_printf_i+0x1be>
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	6011      	str	r1, [r2, #0]
 8010a48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a4c:	bf18      	it	ne
 8010a4e:	b21b      	sxthne	r3, r3
 8010a50:	e7cf      	b.n	80109f2 <_printf_i+0x52>
 8010a52:	6813      	ldr	r3, [r2, #0]
 8010a54:	6825      	ldr	r5, [r4, #0]
 8010a56:	1d18      	adds	r0, r3, #4
 8010a58:	6010      	str	r0, [r2, #0]
 8010a5a:	0628      	lsls	r0, r5, #24
 8010a5c:	d501      	bpl.n	8010a62 <_printf_i+0xc2>
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	e002      	b.n	8010a68 <_printf_i+0xc8>
 8010a62:	0668      	lsls	r0, r5, #25
 8010a64:	d5fb      	bpl.n	8010a5e <_printf_i+0xbe>
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	4854      	ldr	r0, [pc, #336]	; (8010bbc <_printf_i+0x21c>)
 8010a6a:	296f      	cmp	r1, #111	; 0x6f
 8010a6c:	bf14      	ite	ne
 8010a6e:	220a      	movne	r2, #10
 8010a70:	2208      	moveq	r2, #8
 8010a72:	2100      	movs	r1, #0
 8010a74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a78:	6865      	ldr	r5, [r4, #4]
 8010a7a:	60a5      	str	r5, [r4, #8]
 8010a7c:	2d00      	cmp	r5, #0
 8010a7e:	f2c0 8095 	blt.w	8010bac <_printf_i+0x20c>
 8010a82:	6821      	ldr	r1, [r4, #0]
 8010a84:	f021 0104 	bic.w	r1, r1, #4
 8010a88:	6021      	str	r1, [r4, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d13d      	bne.n	8010b0a <_printf_i+0x16a>
 8010a8e:	2d00      	cmp	r5, #0
 8010a90:	f040 808e 	bne.w	8010bb0 <_printf_i+0x210>
 8010a94:	4665      	mov	r5, ip
 8010a96:	2a08      	cmp	r2, #8
 8010a98:	d10b      	bne.n	8010ab2 <_printf_i+0x112>
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	07db      	lsls	r3, r3, #31
 8010a9e:	d508      	bpl.n	8010ab2 <_printf_i+0x112>
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	6862      	ldr	r2, [r4, #4]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	bfde      	ittt	le
 8010aa8:	2330      	movle	r3, #48	; 0x30
 8010aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010aae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ab2:	ebac 0305 	sub.w	r3, ip, r5
 8010ab6:	6123      	str	r3, [r4, #16]
 8010ab8:	f8cd 8000 	str.w	r8, [sp]
 8010abc:	463b      	mov	r3, r7
 8010abe:	aa03      	add	r2, sp, #12
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	f7ff fef6 	bl	80108b4 <_printf_common>
 8010ac8:	3001      	adds	r0, #1
 8010aca:	d14d      	bne.n	8010b68 <_printf_i+0x1c8>
 8010acc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad0:	b005      	add	sp, #20
 8010ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ad6:	4839      	ldr	r0, [pc, #228]	; (8010bbc <_printf_i+0x21c>)
 8010ad8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010adc:	6813      	ldr	r3, [r2, #0]
 8010ade:	6821      	ldr	r1, [r4, #0]
 8010ae0:	1d1d      	adds	r5, r3, #4
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	6015      	str	r5, [r2, #0]
 8010ae6:	060a      	lsls	r2, r1, #24
 8010ae8:	d50b      	bpl.n	8010b02 <_printf_i+0x162>
 8010aea:	07ca      	lsls	r2, r1, #31
 8010aec:	bf44      	itt	mi
 8010aee:	f041 0120 	orrmi.w	r1, r1, #32
 8010af2:	6021      	strmi	r1, [r4, #0]
 8010af4:	b91b      	cbnz	r3, 8010afe <_printf_i+0x15e>
 8010af6:	6822      	ldr	r2, [r4, #0]
 8010af8:	f022 0220 	bic.w	r2, r2, #32
 8010afc:	6022      	str	r2, [r4, #0]
 8010afe:	2210      	movs	r2, #16
 8010b00:	e7b7      	b.n	8010a72 <_printf_i+0xd2>
 8010b02:	064d      	lsls	r5, r1, #25
 8010b04:	bf48      	it	mi
 8010b06:	b29b      	uxthmi	r3, r3
 8010b08:	e7ef      	b.n	8010aea <_printf_i+0x14a>
 8010b0a:	4665      	mov	r5, ip
 8010b0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b10:	fb02 3311 	mls	r3, r2, r1, r3
 8010b14:	5cc3      	ldrb	r3, [r0, r3]
 8010b16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	d1f5      	bne.n	8010b0c <_printf_i+0x16c>
 8010b20:	e7b9      	b.n	8010a96 <_printf_i+0xf6>
 8010b22:	6813      	ldr	r3, [r2, #0]
 8010b24:	6825      	ldr	r5, [r4, #0]
 8010b26:	6961      	ldr	r1, [r4, #20]
 8010b28:	1d18      	adds	r0, r3, #4
 8010b2a:	6010      	str	r0, [r2, #0]
 8010b2c:	0628      	lsls	r0, r5, #24
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	d501      	bpl.n	8010b36 <_printf_i+0x196>
 8010b32:	6019      	str	r1, [r3, #0]
 8010b34:	e002      	b.n	8010b3c <_printf_i+0x19c>
 8010b36:	066a      	lsls	r2, r5, #25
 8010b38:	d5fb      	bpl.n	8010b32 <_printf_i+0x192>
 8010b3a:	8019      	strh	r1, [r3, #0]
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	6123      	str	r3, [r4, #16]
 8010b40:	4665      	mov	r5, ip
 8010b42:	e7b9      	b.n	8010ab8 <_printf_i+0x118>
 8010b44:	6813      	ldr	r3, [r2, #0]
 8010b46:	1d19      	adds	r1, r3, #4
 8010b48:	6011      	str	r1, [r2, #0]
 8010b4a:	681d      	ldr	r5, [r3, #0]
 8010b4c:	6862      	ldr	r2, [r4, #4]
 8010b4e:	2100      	movs	r1, #0
 8010b50:	4628      	mov	r0, r5
 8010b52:	f7f6 f995 	bl	8006e80 <memchr>
 8010b56:	b108      	cbz	r0, 8010b5c <_printf_i+0x1bc>
 8010b58:	1b40      	subs	r0, r0, r5
 8010b5a:	6060      	str	r0, [r4, #4]
 8010b5c:	6863      	ldr	r3, [r4, #4]
 8010b5e:	6123      	str	r3, [r4, #16]
 8010b60:	2300      	movs	r3, #0
 8010b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b66:	e7a7      	b.n	8010ab8 <_printf_i+0x118>
 8010b68:	6923      	ldr	r3, [r4, #16]
 8010b6a:	462a      	mov	r2, r5
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	4630      	mov	r0, r6
 8010b70:	47c0      	blx	r8
 8010b72:	3001      	adds	r0, #1
 8010b74:	d0aa      	beq.n	8010acc <_printf_i+0x12c>
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	079b      	lsls	r3, r3, #30
 8010b7a:	d413      	bmi.n	8010ba4 <_printf_i+0x204>
 8010b7c:	68e0      	ldr	r0, [r4, #12]
 8010b7e:	9b03      	ldr	r3, [sp, #12]
 8010b80:	4298      	cmp	r0, r3
 8010b82:	bfb8      	it	lt
 8010b84:	4618      	movlt	r0, r3
 8010b86:	e7a3      	b.n	8010ad0 <_printf_i+0x130>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	464a      	mov	r2, r9
 8010b8c:	4639      	mov	r1, r7
 8010b8e:	4630      	mov	r0, r6
 8010b90:	47c0      	blx	r8
 8010b92:	3001      	adds	r0, #1
 8010b94:	d09a      	beq.n	8010acc <_printf_i+0x12c>
 8010b96:	3501      	adds	r5, #1
 8010b98:	68e3      	ldr	r3, [r4, #12]
 8010b9a:	9a03      	ldr	r2, [sp, #12]
 8010b9c:	1a9b      	subs	r3, r3, r2
 8010b9e:	42ab      	cmp	r3, r5
 8010ba0:	dcf2      	bgt.n	8010b88 <_printf_i+0x1e8>
 8010ba2:	e7eb      	b.n	8010b7c <_printf_i+0x1dc>
 8010ba4:	2500      	movs	r5, #0
 8010ba6:	f104 0919 	add.w	r9, r4, #25
 8010baa:	e7f5      	b.n	8010b98 <_printf_i+0x1f8>
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1ac      	bne.n	8010b0a <_printf_i+0x16a>
 8010bb0:	7803      	ldrb	r3, [r0, #0]
 8010bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bba:	e76c      	b.n	8010a96 <_printf_i+0xf6>
 8010bbc:	0801516d 	.word	0x0801516d
 8010bc0:	0801517e 	.word	0x0801517e

08010bc4 <_putc_r>:
 8010bc4:	b570      	push	{r4, r5, r6, lr}
 8010bc6:	460d      	mov	r5, r1
 8010bc8:	4614      	mov	r4, r2
 8010bca:	4606      	mov	r6, r0
 8010bcc:	b118      	cbz	r0, 8010bd6 <_putc_r+0x12>
 8010bce:	6983      	ldr	r3, [r0, #24]
 8010bd0:	b90b      	cbnz	r3, 8010bd6 <_putc_r+0x12>
 8010bd2:	f7ff fc19 	bl	8010408 <__sinit>
 8010bd6:	4b13      	ldr	r3, [pc, #76]	; (8010c24 <_putc_r+0x60>)
 8010bd8:	429c      	cmp	r4, r3
 8010bda:	d112      	bne.n	8010c02 <_putc_r+0x3e>
 8010bdc:	6874      	ldr	r4, [r6, #4]
 8010bde:	68a3      	ldr	r3, [r4, #8]
 8010be0:	3b01      	subs	r3, #1
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	60a3      	str	r3, [r4, #8]
 8010be6:	da16      	bge.n	8010c16 <_putc_r+0x52>
 8010be8:	69a2      	ldr	r2, [r4, #24]
 8010bea:	4293      	cmp	r3, r2
 8010bec:	db02      	blt.n	8010bf4 <_putc_r+0x30>
 8010bee:	b2eb      	uxtb	r3, r5
 8010bf0:	2b0a      	cmp	r3, #10
 8010bf2:	d110      	bne.n	8010c16 <_putc_r+0x52>
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bfe:	f7ff ba53 	b.w	80100a8 <__swbuf_r>
 8010c02:	4b09      	ldr	r3, [pc, #36]	; (8010c28 <_putc_r+0x64>)
 8010c04:	429c      	cmp	r4, r3
 8010c06:	d101      	bne.n	8010c0c <_putc_r+0x48>
 8010c08:	68b4      	ldr	r4, [r6, #8]
 8010c0a:	e7e8      	b.n	8010bde <_putc_r+0x1a>
 8010c0c:	4b07      	ldr	r3, [pc, #28]	; (8010c2c <_putc_r+0x68>)
 8010c0e:	429c      	cmp	r4, r3
 8010c10:	bf08      	it	eq
 8010c12:	68f4      	ldreq	r4, [r6, #12]
 8010c14:	e7e3      	b.n	8010bde <_putc_r+0x1a>
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	6022      	str	r2, [r4, #0]
 8010c1c:	701d      	strb	r5, [r3, #0]
 8010c1e:	b2e8      	uxtb	r0, r5
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
 8010c22:	bf00      	nop
 8010c24:	0801511c 	.word	0x0801511c
 8010c28:	0801513c 	.word	0x0801513c
 8010c2c:	080150fc 	.word	0x080150fc

08010c30 <__sread>:
 8010c30:	b510      	push	{r4, lr}
 8010c32:	460c      	mov	r4, r1
 8010c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c38:	f000 f89c 	bl	8010d74 <_read_r>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	bfab      	itete	ge
 8010c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c42:	89a3      	ldrhlt	r3, [r4, #12]
 8010c44:	181b      	addge	r3, r3, r0
 8010c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c4a:	bfac      	ite	ge
 8010c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c4e:	81a3      	strhlt	r3, [r4, #12]
 8010c50:	bd10      	pop	{r4, pc}

08010c52 <__swrite>:
 8010c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c56:	461f      	mov	r7, r3
 8010c58:	898b      	ldrh	r3, [r1, #12]
 8010c5a:	05db      	lsls	r3, r3, #23
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	460c      	mov	r4, r1
 8010c60:	4616      	mov	r6, r2
 8010c62:	d505      	bpl.n	8010c70 <__swrite+0x1e>
 8010c64:	2302      	movs	r3, #2
 8010c66:	2200      	movs	r2, #0
 8010c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c6c:	f000 f868 	bl	8010d40 <_lseek_r>
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c7a:	81a3      	strh	r3, [r4, #12]
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	463b      	mov	r3, r7
 8010c80:	4628      	mov	r0, r5
 8010c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c86:	f000 b817 	b.w	8010cb8 <_write_r>

08010c8a <__sseek>:
 8010c8a:	b510      	push	{r4, lr}
 8010c8c:	460c      	mov	r4, r1
 8010c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c92:	f000 f855 	bl	8010d40 <_lseek_r>
 8010c96:	1c43      	adds	r3, r0, #1
 8010c98:	89a3      	ldrh	r3, [r4, #12]
 8010c9a:	bf15      	itete	ne
 8010c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ca6:	81a3      	strheq	r3, [r4, #12]
 8010ca8:	bf18      	it	ne
 8010caa:	81a3      	strhne	r3, [r4, #12]
 8010cac:	bd10      	pop	{r4, pc}

08010cae <__sclose>:
 8010cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cb2:	f000 b813 	b.w	8010cdc <_close_r>
	...

08010cb8 <_write_r>:
 8010cb8:	b538      	push	{r3, r4, r5, lr}
 8010cba:	4c07      	ldr	r4, [pc, #28]	; (8010cd8 <_write_r+0x20>)
 8010cbc:	4605      	mov	r5, r0
 8010cbe:	4608      	mov	r0, r1
 8010cc0:	4611      	mov	r1, r2
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	6022      	str	r2, [r4, #0]
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	f7fa fbf0 	bl	800b4ac <_write>
 8010ccc:	1c43      	adds	r3, r0, #1
 8010cce:	d102      	bne.n	8010cd6 <_write_r+0x1e>
 8010cd0:	6823      	ldr	r3, [r4, #0]
 8010cd2:	b103      	cbz	r3, 8010cd6 <_write_r+0x1e>
 8010cd4:	602b      	str	r3, [r5, #0]
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	20000f60 	.word	0x20000f60

08010cdc <_close_r>:
 8010cdc:	b538      	push	{r3, r4, r5, lr}
 8010cde:	4c06      	ldr	r4, [pc, #24]	; (8010cf8 <_close_r+0x1c>)
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	4605      	mov	r5, r0
 8010ce4:	4608      	mov	r0, r1
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	f7f6 ffdb 	bl	8007ca2 <_close>
 8010cec:	1c43      	adds	r3, r0, #1
 8010cee:	d102      	bne.n	8010cf6 <_close_r+0x1a>
 8010cf0:	6823      	ldr	r3, [r4, #0]
 8010cf2:	b103      	cbz	r3, 8010cf6 <_close_r+0x1a>
 8010cf4:	602b      	str	r3, [r5, #0]
 8010cf6:	bd38      	pop	{r3, r4, r5, pc}
 8010cf8:	20000f60 	.word	0x20000f60

08010cfc <_fstat_r>:
 8010cfc:	b538      	push	{r3, r4, r5, lr}
 8010cfe:	4c07      	ldr	r4, [pc, #28]	; (8010d1c <_fstat_r+0x20>)
 8010d00:	2300      	movs	r3, #0
 8010d02:	4605      	mov	r5, r0
 8010d04:	4608      	mov	r0, r1
 8010d06:	4611      	mov	r1, r2
 8010d08:	6023      	str	r3, [r4, #0]
 8010d0a:	f7f6 ffd6 	bl	8007cba <_fstat>
 8010d0e:	1c43      	adds	r3, r0, #1
 8010d10:	d102      	bne.n	8010d18 <_fstat_r+0x1c>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	b103      	cbz	r3, 8010d18 <_fstat_r+0x1c>
 8010d16:	602b      	str	r3, [r5, #0]
 8010d18:	bd38      	pop	{r3, r4, r5, pc}
 8010d1a:	bf00      	nop
 8010d1c:	20000f60 	.word	0x20000f60

08010d20 <_isatty_r>:
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	4c06      	ldr	r4, [pc, #24]	; (8010d3c <_isatty_r+0x1c>)
 8010d24:	2300      	movs	r3, #0
 8010d26:	4605      	mov	r5, r0
 8010d28:	4608      	mov	r0, r1
 8010d2a:	6023      	str	r3, [r4, #0]
 8010d2c:	f7f6 ffd5 	bl	8007cda <_isatty>
 8010d30:	1c43      	adds	r3, r0, #1
 8010d32:	d102      	bne.n	8010d3a <_isatty_r+0x1a>
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	b103      	cbz	r3, 8010d3a <_isatty_r+0x1a>
 8010d38:	602b      	str	r3, [r5, #0]
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	20000f60 	.word	0x20000f60

08010d40 <_lseek_r>:
 8010d40:	b538      	push	{r3, r4, r5, lr}
 8010d42:	4c07      	ldr	r4, [pc, #28]	; (8010d60 <_lseek_r+0x20>)
 8010d44:	4605      	mov	r5, r0
 8010d46:	4608      	mov	r0, r1
 8010d48:	4611      	mov	r1, r2
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	6022      	str	r2, [r4, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	f7f6 ffce 	bl	8007cf0 <_lseek>
 8010d54:	1c43      	adds	r3, r0, #1
 8010d56:	d102      	bne.n	8010d5e <_lseek_r+0x1e>
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	b103      	cbz	r3, 8010d5e <_lseek_r+0x1e>
 8010d5c:	602b      	str	r3, [r5, #0]
 8010d5e:	bd38      	pop	{r3, r4, r5, pc}
 8010d60:	20000f60 	.word	0x20000f60

08010d64 <_malloc_usable_size_r>:
 8010d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d68:	1f18      	subs	r0, r3, #4
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	bfbc      	itt	lt
 8010d6e:	580b      	ldrlt	r3, [r1, r0]
 8010d70:	18c0      	addlt	r0, r0, r3
 8010d72:	4770      	bx	lr

08010d74 <_read_r>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4c07      	ldr	r4, [pc, #28]	; (8010d94 <_read_r+0x20>)
 8010d78:	4605      	mov	r5, r0
 8010d7a:	4608      	mov	r0, r1
 8010d7c:	4611      	mov	r1, r2
 8010d7e:	2200      	movs	r2, #0
 8010d80:	6022      	str	r2, [r4, #0]
 8010d82:	461a      	mov	r2, r3
 8010d84:	f7f6 ff70 	bl	8007c68 <_read>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d102      	bne.n	8010d92 <_read_r+0x1e>
 8010d8c:	6823      	ldr	r3, [r4, #0]
 8010d8e:	b103      	cbz	r3, 8010d92 <_read_r+0x1e>
 8010d90:	602b      	str	r3, [r5, #0]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	20000f60 	.word	0x20000f60

08010d98 <asinhf>:
 8010d98:	b510      	push	{r4, lr}
 8010d9a:	ee10 4a10 	vmov	r4, s0
 8010d9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010da2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010da6:	ed2d 8b04 	vpush	{d8-d9}
 8010daa:	eeb0 8a40 	vmov.f32	s16, s0
 8010dae:	db06      	blt.n	8010dbe <asinhf+0x26>
 8010db0:	ee30 8a00 	vadd.f32	s16, s0, s0
 8010db4:	eeb0 0a48 	vmov.f32	s0, s16
 8010db8:	ecbd 8b04 	vpop	{d8-d9}
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8010dc2:	da21      	bge.n	8010e08 <asinhf+0x70>
 8010dc4:	eddf 7a26 	vldr	s15, [pc, #152]	; 8010e60 <asinhf+0xc8>
 8010dc8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd8:	dcec      	bgt.n	8010db4 <asinhf+0x1c>
 8010dda:	eeb0 0a48 	vmov.f32	s0, s16
 8010dde:	f000 fbf3 	bl	80115c8 <fabsf>
 8010de2:	ee68 8a08 	vmul.f32	s17, s16, s16
 8010de6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010dea:	eeb0 9a40 	vmov.f32	s18, s0
 8010dee:	ee38 0a88 	vadd.f32	s0, s17, s16
 8010df2:	f001 ff61 	bl	8012cb8 <__ieee754_sqrtf>
 8010df6:	ee30 8a08 	vadd.f32	s16, s0, s16
 8010dfa:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8010dfe:	ee30 0a09 	vadd.f32	s0, s0, s18
 8010e02:	f000 fc93 	bl	801172c <log1pf>
 8010e06:	e028      	b.n	8010e5a <asinhf+0xc2>
 8010e08:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8010e0c:	dd0c      	ble.n	8010e28 <asinhf+0x90>
 8010e0e:	f000 fbdb 	bl	80115c8 <fabsf>
 8010e12:	f000 fc23 	bl	801165c <logf>
 8010e16:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8010e64 <asinhf+0xcc>
 8010e1a:	ee30 8a08 	vadd.f32	s16, s0, s16
 8010e1e:	2c00      	cmp	r4, #0
 8010e20:	bfd8      	it	le
 8010e22:	eeb1 8a48 	vnegle.f32	s16, s16
 8010e26:	e7c5      	b.n	8010db4 <asinhf+0x1c>
 8010e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e2c:	ddd5      	ble.n	8010dda <asinhf+0x42>
 8010e2e:	f000 fbcb 	bl	80115c8 <fabsf>
 8010e32:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8010e36:	eef0 8a40 	vmov.f32	s17, s0
 8010e3a:	eeb0 0a49 	vmov.f32	s0, s18
 8010e3e:	eea8 0a08 	vfma.f32	s0, s16, s16
 8010e42:	f001 ff39 	bl	8012cb8 <__ieee754_sqrtf>
 8010e46:	ee70 7a28 	vadd.f32	s15, s0, s17
 8010e4a:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8010e4e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010e52:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010e56:	f000 fc01 	bl	801165c <logf>
 8010e5a:	eeb0 8a40 	vmov.f32	s16, s0
 8010e5e:	e7de      	b.n	8010e1e <asinhf+0x86>
 8010e60:	7149f2ca 	.word	0x7149f2ca
 8010e64:	3f317218 	.word	0x3f317218

08010e68 <atanf>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	ee10 5a10 	vmov	r5, s0
 8010e6e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010e72:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010e76:	eef0 7a40 	vmov.f32	s15, s0
 8010e7a:	db0f      	blt.n	8010e9c <atanf+0x34>
 8010e7c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010e80:	dd04      	ble.n	8010e8c <atanf+0x24>
 8010e82:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010e86:	eeb0 0a67 	vmov.f32	s0, s15
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
 8010e8c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8010fc0 <atanf+0x158>
 8010e90:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8010fc4 <atanf+0x15c>
 8010e94:	2d00      	cmp	r5, #0
 8010e96:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8010e9a:	e7f4      	b.n	8010e86 <atanf+0x1e>
 8010e9c:	4b4a      	ldr	r3, [pc, #296]	; (8010fc8 <atanf+0x160>)
 8010e9e:	429c      	cmp	r4, r3
 8010ea0:	dc10      	bgt.n	8010ec4 <atanf+0x5c>
 8010ea2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010ea6:	da0a      	bge.n	8010ebe <atanf+0x56>
 8010ea8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010fcc <atanf+0x164>
 8010eac:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eb4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebc:	dce3      	bgt.n	8010e86 <atanf+0x1e>
 8010ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec2:	e013      	b.n	8010eec <atanf+0x84>
 8010ec4:	f000 fb80 	bl	80115c8 <fabsf>
 8010ec8:	4b41      	ldr	r3, [pc, #260]	; (8010fd0 <atanf+0x168>)
 8010eca:	429c      	cmp	r4, r3
 8010ecc:	dc4f      	bgt.n	8010f6e <atanf+0x106>
 8010ece:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010ed2:	429c      	cmp	r4, r3
 8010ed4:	dc41      	bgt.n	8010f5a <atanf+0xf2>
 8010ed6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010eda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010ede:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ee8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010eec:	1c5a      	adds	r2, r3, #1
 8010eee:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010ef2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010fd4 <atanf+0x16c>
 8010ef6:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010fd8 <atanf+0x170>
 8010efa:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010fdc <atanf+0x174>
 8010efe:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010f02:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010f06:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010fe0 <atanf+0x178>
 8010f0a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010f0e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010fe4 <atanf+0x17c>
 8010f12:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010f16:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010fe8 <atanf+0x180>
 8010f1a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010f1e:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010fec <atanf+0x184>
 8010f22:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010f26:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010ff0 <atanf+0x188>
 8010f2a:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010f2e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010ff4 <atanf+0x18c>
 8010f32:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010f36:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010ff8 <atanf+0x190>
 8010f3a:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010f3e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010ffc <atanf+0x194>
 8010f42:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010f46:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010f4a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f52:	d121      	bne.n	8010f98 <atanf+0x130>
 8010f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f58:	e795      	b.n	8010e86 <atanf+0x1e>
 8010f5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010f5e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010f62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f66:	2301      	movs	r3, #1
 8010f68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010f6c:	e7be      	b.n	8010eec <atanf+0x84>
 8010f6e:	4b24      	ldr	r3, [pc, #144]	; (8011000 <atanf+0x198>)
 8010f70:	429c      	cmp	r4, r3
 8010f72:	dc0b      	bgt.n	8010f8c <atanf+0x124>
 8010f74:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f7c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010f80:	2302      	movs	r3, #2
 8010f82:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f8a:	e7af      	b.n	8010eec <atanf+0x84>
 8010f8c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010f90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010f94:	2303      	movs	r3, #3
 8010f96:	e7a9      	b.n	8010eec <atanf+0x84>
 8010f98:	4a1a      	ldr	r2, [pc, #104]	; (8011004 <atanf+0x19c>)
 8010f9a:	491b      	ldr	r1, [pc, #108]	; (8011008 <atanf+0x1a0>)
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	441a      	add	r2, r3
 8010fa0:	440b      	add	r3, r1
 8010fa2:	edd3 6a00 	vldr	s13, [r3]
 8010fa6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010faa:	2d00      	cmp	r5, #0
 8010fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fb0:	ed92 7a00 	vldr	s14, [r2]
 8010fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fb8:	bfb8      	it	lt
 8010fba:	eef1 7a67 	vneglt.f32	s15, s15
 8010fbe:	e762      	b.n	8010e86 <atanf+0x1e>
 8010fc0:	bfc90fdb 	.word	0xbfc90fdb
 8010fc4:	3fc90fdb 	.word	0x3fc90fdb
 8010fc8:	3edfffff 	.word	0x3edfffff
 8010fcc:	7149f2ca 	.word	0x7149f2ca
 8010fd0:	3f97ffff 	.word	0x3f97ffff
 8010fd4:	3c8569d7 	.word	0x3c8569d7
 8010fd8:	3d4bda59 	.word	0x3d4bda59
 8010fdc:	bd6ef16b 	.word	0xbd6ef16b
 8010fe0:	3d886b35 	.word	0x3d886b35
 8010fe4:	3dba2e6e 	.word	0x3dba2e6e
 8010fe8:	3e124925 	.word	0x3e124925
 8010fec:	3eaaaaab 	.word	0x3eaaaaab
 8010ff0:	bd15a221 	.word	0xbd15a221
 8010ff4:	bd9d8795 	.word	0xbd9d8795
 8010ff8:	bde38e38 	.word	0xbde38e38
 8010ffc:	be4ccccd 	.word	0xbe4ccccd
 8011000:	401bffff 	.word	0x401bffff
 8011004:	08015190 	.word	0x08015190
 8011008:	080151a0 	.word	0x080151a0

0801100c <ceilf>:
 801100c:	ee10 3a10 	vmov	r3, s0
 8011010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011014:	0dca      	lsrs	r2, r1, #23
 8011016:	3a7f      	subs	r2, #127	; 0x7f
 8011018:	2a16      	cmp	r2, #22
 801101a:	dc2a      	bgt.n	8011072 <ceilf+0x66>
 801101c:	2a00      	cmp	r2, #0
 801101e:	da11      	bge.n	8011044 <ceilf+0x38>
 8011020:	eddf 7a18 	vldr	s15, [pc, #96]	; 8011084 <ceilf+0x78>
 8011024:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011028:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	dd05      	ble.n	801103e <ceilf+0x32>
 8011032:	2b00      	cmp	r3, #0
 8011034:	db23      	blt.n	801107e <ceilf+0x72>
 8011036:	2900      	cmp	r1, #0
 8011038:	bf18      	it	ne
 801103a:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801103e:	ee00 3a10 	vmov	s0, r3
 8011042:	4770      	bx	lr
 8011044:	4910      	ldr	r1, [pc, #64]	; (8011088 <ceilf+0x7c>)
 8011046:	4111      	asrs	r1, r2
 8011048:	420b      	tst	r3, r1
 801104a:	d0fa      	beq.n	8011042 <ceilf+0x36>
 801104c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011084 <ceilf+0x78>
 8011050:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011054:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105c:	ddef      	ble.n	801103e <ceilf+0x32>
 801105e:	2b00      	cmp	r3, #0
 8011060:	bfc2      	ittt	gt
 8011062:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8011066:	fa40 f202 	asrgt.w	r2, r0, r2
 801106a:	189b      	addgt	r3, r3, r2
 801106c:	ea23 0301 	bic.w	r3, r3, r1
 8011070:	e7e5      	b.n	801103e <ceilf+0x32>
 8011072:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011076:	d3e4      	bcc.n	8011042 <ceilf+0x36>
 8011078:	ee30 0a00 	vadd.f32	s0, s0, s0
 801107c:	4770      	bx	lr
 801107e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011082:	e7dc      	b.n	801103e <ceilf+0x32>
 8011084:	7149f2ca 	.word	0x7149f2ca
 8011088:	007fffff 	.word	0x007fffff

0801108c <cosf>:
 801108c:	ee10 3a10 	vmov	r3, s0
 8011090:	b507      	push	{r0, r1, r2, lr}
 8011092:	4a1c      	ldr	r2, [pc, #112]	; (8011104 <cosf+0x78>)
 8011094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011098:	4293      	cmp	r3, r2
 801109a:	dc04      	bgt.n	80110a6 <cosf+0x1a>
 801109c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8011108 <cosf+0x7c>
 80110a0:	f001 fe0e 	bl	8012cc0 <__kernel_cosf>
 80110a4:	e004      	b.n	80110b0 <cosf+0x24>
 80110a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80110aa:	db04      	blt.n	80110b6 <cosf+0x2a>
 80110ac:	ee30 0a40 	vsub.f32	s0, s0, s0
 80110b0:	b003      	add	sp, #12
 80110b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80110b6:	4668      	mov	r0, sp
 80110b8:	f001 fc64 	bl	8012984 <__ieee754_rem_pio2f>
 80110bc:	f000 0003 	and.w	r0, r0, #3
 80110c0:	2801      	cmp	r0, #1
 80110c2:	d007      	beq.n	80110d4 <cosf+0x48>
 80110c4:	2802      	cmp	r0, #2
 80110c6:	d00e      	beq.n	80110e6 <cosf+0x5a>
 80110c8:	b9a0      	cbnz	r0, 80110f4 <cosf+0x68>
 80110ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80110ce:	ed9d 0a00 	vldr	s0, [sp]
 80110d2:	e7e5      	b.n	80110a0 <cosf+0x14>
 80110d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80110d8:	ed9d 0a00 	vldr	s0, [sp]
 80110dc:	f002 f8d0 	bl	8013280 <__kernel_sinf>
 80110e0:	eeb1 0a40 	vneg.f32	s0, s0
 80110e4:	e7e4      	b.n	80110b0 <cosf+0x24>
 80110e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80110ea:	ed9d 0a00 	vldr	s0, [sp]
 80110ee:	f001 fde7 	bl	8012cc0 <__kernel_cosf>
 80110f2:	e7f5      	b.n	80110e0 <cosf+0x54>
 80110f4:	2001      	movs	r0, #1
 80110f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80110fa:	ed9d 0a00 	vldr	s0, [sp]
 80110fe:	f002 f8bf 	bl	8013280 <__kernel_sinf>
 8011102:	e7d5      	b.n	80110b0 <cosf+0x24>
 8011104:	3f490fd8 	.word	0x3f490fd8
 8011108:	00000000 	.word	0x00000000

0801110c <erff>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	ee10 4a10 	vmov	r4, s0
 8011112:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 8011116:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801111a:	ed2d 8b06 	vpush	{d8-d10}
 801111e:	eef0 7a40 	vmov.f32	s15, s0
 8011122:	db12      	blt.n	801114a <erff+0x3e>
 8011124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801112c:	0fe4      	lsrs	r4, r4, #31
 801112e:	0064      	lsls	r4, r4, #1
 8011130:	f1c4 0301 	rsb	r3, r4, #1
 8011134:	ee00 3a10 	vmov	s0, r3
 8011138:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801113c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011140:	ecbd 8b06 	vpop	{d8-d10}
 8011144:	eeb0 0a67 	vmov.f32	s0, s15
 8011148:	bd38      	pop	{r3, r4, r5, pc}
 801114a:	4ba4      	ldr	r3, [pc, #656]	; (80113dc <erff+0x2d0>)
 801114c:	429d      	cmp	r5, r3
 801114e:	dc4a      	bgt.n	80111e6 <erff+0xda>
 8011150:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8011154:	da16      	bge.n	8011184 <erff+0x78>
 8011156:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 801115a:	da0e      	bge.n	801117a <erff+0x6e>
 801115c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80113e0 <erff+0x2d4>
 8011160:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011164:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8011168:	eea7 0a87 	vfma.f32	s0, s15, s14
 801116c:	eef0 7a40 	vmov.f32	s15, s0
 8011170:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8011174:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011178:	e7e2      	b.n	8011140 <erff+0x34>
 801117a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80113e4 <erff+0x2d8>
 801117e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011182:	e7dd      	b.n	8011140 <erff+0x34>
 8011184:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011188:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80113e8 <erff+0x2dc>
 801118c:	eddf 6a97 	vldr	s13, [pc, #604]	; 80113ec <erff+0x2e0>
 8011190:	eddf 5a97 	vldr	s11, [pc, #604]	; 80113f0 <erff+0x2e4>
 8011194:	eee7 6a06 	vfma.f32	s13, s14, s12
 8011198:	ed9f 6a96 	vldr	s12, [pc, #600]	; 80113f4 <erff+0x2e8>
 801119c:	eea6 6a87 	vfma.f32	s12, s13, s14
 80111a0:	eddf 6a95 	vldr	s13, [pc, #596]	; 80113f8 <erff+0x2ec>
 80111a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80111a8:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 80113e4 <erff+0x2d8>
 80111ac:	eea6 6a87 	vfma.f32	s12, s13, s14
 80111b0:	eddf 6a92 	vldr	s13, [pc, #584]	; 80113fc <erff+0x2f0>
 80111b4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80111b8:	eddf 5a91 	vldr	s11, [pc, #580]	; 8011400 <erff+0x2f4>
 80111bc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80111c0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8011404 <erff+0x2f8>
 80111c4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80111c8:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8011408 <erff+0x2fc>
 80111cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80111d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111d4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80111d8:	eeb0 7a66 	vmov.f32	s14, s13
 80111dc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80111e0:	eee0 7a26 	vfma.f32	s15, s0, s13
 80111e4:	e7ac      	b.n	8011140 <erff+0x34>
 80111e6:	4b89      	ldr	r3, [pc, #548]	; (801140c <erff+0x300>)
 80111e8:	429d      	cmp	r5, r3
 80111ea:	dc44      	bgt.n	8011276 <erff+0x16a>
 80111ec:	f000 f9ec 	bl	80115c8 <fabsf>
 80111f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80111f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80111f8:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8011410 <erff+0x304>
 80111fc:	eddf 6a85 	vldr	s13, [pc, #532]	; 8011414 <erff+0x308>
 8011200:	ed9f 6a85 	vldr	s12, [pc, #532]	; 8011418 <erff+0x30c>
 8011204:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011208:	2c00      	cmp	r4, #0
 801120a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801141c <erff+0x310>
 801120e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8011212:	eddf 6a83 	vldr	s13, [pc, #524]	; 8011420 <erff+0x314>
 8011216:	eee7 6a00 	vfma.f32	s13, s14, s0
 801121a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8011424 <erff+0x318>
 801121e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8011222:	eddf 6a81 	vldr	s13, [pc, #516]	; 8011428 <erff+0x31c>
 8011226:	eee7 6a00 	vfma.f32	s13, s14, s0
 801122a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 801142c <erff+0x320>
 801122e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8011232:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8011430 <erff+0x324>
 8011236:	eee0 6a06 	vfma.f32	s13, s0, s12
 801123a:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 8011434 <erff+0x328>
 801123e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8011242:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8011438 <erff+0x32c>
 8011246:	eee6 6a00 	vfma.f32	s13, s12, s0
 801124a:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 801143c <erff+0x330>
 801124e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8011252:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8011440 <erff+0x334>
 8011256:	eee6 6a00 	vfma.f32	s13, s12, s0
 801125a:	eee6 7a80 	vfma.f32	s15, s13, s0
 801125e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011262:	bfab      	itete	ge
 8011264:	eddf 7a77 	vldrge	s15, [pc, #476]	; 8011444 <erff+0x338>
 8011268:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 8011448 <erff+0x33c>
 801126c:	ee70 7a27 	vaddge.f32	s15, s0, s15
 8011270:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 8011274:	e764      	b.n	8011140 <erff+0x34>
 8011276:	4b75      	ldr	r3, [pc, #468]	; (801144c <erff+0x340>)
 8011278:	429d      	cmp	r5, r3
 801127a:	dd07      	ble.n	801128c <erff+0x180>
 801127c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011280:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011284:	2c00      	cmp	r4, #0
 8011286:	fe60 7a27 	vselge.f32	s15, s0, s15
 801128a:	e759      	b.n	8011140 <erff+0x34>
 801128c:	f000 f99c 	bl	80115c8 <fabsf>
 8011290:	4b6f      	ldr	r3, [pc, #444]	; (8011450 <erff+0x344>)
 8011292:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011296:	eeb0 9a40 	vmov.f32	s18, s0
 801129a:	429d      	cmp	r5, r3
 801129c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80112a0:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80112a4:	eef0 8a40 	vmov.f32	s17, s0
 80112a8:	dc64      	bgt.n	8011374 <erff+0x268>
 80112aa:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8011454 <erff+0x348>
 80112ae:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8011458 <erff+0x34c>
 80112b2:	eddf 9a6a 	vldr	s19, [pc, #424]	; 801145c <erff+0x350>
 80112b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80112ba:	eddf 7a69 	vldr	s15, [pc, #420]	; 8011460 <erff+0x354>
 80112be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80112c2:	eddf 6a68 	vldr	s13, [pc, #416]	; 8011464 <erff+0x358>
 80112c6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80112ca:	eddf 7a67 	vldr	s15, [pc, #412]	; 8011468 <erff+0x35c>
 80112ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80112d2:	eddf 6a66 	vldr	s13, [pc, #408]	; 801146c <erff+0x360>
 80112d6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80112da:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011470 <erff+0x364>
 80112de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80112e2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8011474 <erff+0x368>
 80112e6:	eee7 9a87 	vfma.f32	s19, s15, s14
 80112ea:	eddf 7a63 	vldr	s15, [pc, #396]	; 8011478 <erff+0x36c>
 80112ee:	eee7 7a26 	vfma.f32	s15, s14, s13
 80112f2:	eddf 6a62 	vldr	s13, [pc, #392]	; 801147c <erff+0x370>
 80112f6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80112fa:	eddf 7a61 	vldr	s15, [pc, #388]	; 8011480 <erff+0x374>
 80112fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011302:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011484 <erff+0x378>
 8011306:	eee7 6a87 	vfma.f32	s13, s15, s14
 801130a:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8011488 <erff+0x37c>
 801130e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011312:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801148c <erff+0x380>
 8011316:	eee7 6a87 	vfma.f32	s13, s15, s14
 801131a:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8011490 <erff+0x384>
 801131e:	ee19 3a10 	vmov	r3, s18
 8011322:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011326:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801132a:	f023 030f 	bic.w	r3, r3, #15
 801132e:	ee08 3a10 	vmov	s16, r3
 8011332:	eef0 aa68 	vmov.f32	s21, s17
 8011336:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 801133a:	eee7 aa87 	vfma.f32	s21, s15, s14
 801133e:	eea8 0a48 	vfms.f32	s0, s16, s16
 8011342:	f000 f8c3 	bl	80114cc <expf>
 8011346:	eeb0 aa40 	vmov.f32	s20, s0
 801134a:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 801134e:	ee78 7a49 	vsub.f32	s15, s16, s18
 8011352:	ee38 8a09 	vadd.f32	s16, s16, s18
 8011356:	eea7 0a88 	vfma.f32	s0, s15, s16
 801135a:	f000 f8b7 	bl	80114cc <expf>
 801135e:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8011362:	2c00      	cmp	r4, #0
 8011364:	eec0 7a09 	vdiv.f32	s15, s0, s18
 8011368:	bfac      	ite	ge
 801136a:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 801136e:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 8011372:	e6e5      	b.n	8011140 <erff+0x34>
 8011374:	eddf 6a47 	vldr	s13, [pc, #284]	; 8011494 <erff+0x388>
 8011378:	eddf 7a47 	vldr	s15, [pc, #284]	; 8011498 <erff+0x38c>
 801137c:	eddf 9a47 	vldr	s19, [pc, #284]	; 801149c <erff+0x390>
 8011380:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011384:	eddf 6a46 	vldr	s13, [pc, #280]	; 80114a0 <erff+0x394>
 8011388:	eee7 6a87 	vfma.f32	s13, s15, s14
 801138c:	eddf 7a45 	vldr	s15, [pc, #276]	; 80114a4 <erff+0x398>
 8011390:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011394:	eddf 6a44 	vldr	s13, [pc, #272]	; 80114a8 <erff+0x39c>
 8011398:	eee7 6a87 	vfma.f32	s13, s15, s14
 801139c:	eddf 7a43 	vldr	s15, [pc, #268]	; 80114ac <erff+0x3a0>
 80113a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80113a4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80114b0 <erff+0x3a4>
 80113a8:	eee7 9a87 	vfma.f32	s19, s15, s14
 80113ac:	eddf 7a41 	vldr	s15, [pc, #260]	; 80114b4 <erff+0x3a8>
 80113b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80113b4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80114b8 <erff+0x3ac>
 80113b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80113bc:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80114bc <erff+0x3b0>
 80113c0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80113c4:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80114c0 <erff+0x3b4>
 80113c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80113cc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80114c4 <erff+0x3b8>
 80113d0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80113d4:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80114c8 <erff+0x3bc>
 80113d8:	e7a1      	b.n	801131e <erff+0x212>
 80113da:	bf00      	nop
 80113dc:	3f57ffff 	.word	0x3f57ffff
 80113e0:	3f8375d4 	.word	0x3f8375d4
 80113e4:	3e0375d4 	.word	0x3e0375d4
 80113e8:	b7c756b1 	.word	0xb7c756b1
 80113ec:	bbbd1489 	.word	0xbbbd1489
 80113f0:	b684e21a 	.word	0xb684e21a
 80113f4:	bce9528f 	.word	0xbce9528f
 80113f8:	bea66beb 	.word	0xbea66beb
 80113fc:	390aee49 	.word	0x390aee49
 8011400:	3ba68116 	.word	0x3ba68116
 8011404:	3d852a63 	.word	0x3d852a63
 8011408:	3ecbbbce 	.word	0x3ecbbbce
 801140c:	3f9fffff 	.word	0x3f9fffff
 8011410:	bb0df9c0 	.word	0xbb0df9c0
 8011414:	3d1151b3 	.word	0x3d1151b3
 8011418:	3c445aa3 	.word	0x3c445aa3
 801141c:	bde31cc2 	.word	0xbde31cc2
 8011420:	3ea2fe54 	.word	0x3ea2fe54
 8011424:	bebe9208 	.word	0xbebe9208
 8011428:	3ed46805 	.word	0x3ed46805
 801142c:	bb1acdc6 	.word	0xbb1acdc6
 8011430:	3c5f6e13 	.word	0x3c5f6e13
 8011434:	3e013307 	.word	0x3e013307
 8011438:	3d931ae7 	.word	0x3d931ae7
 801143c:	3f0a5785 	.word	0x3f0a5785
 8011440:	3dd9f331 	.word	0x3dd9f331
 8011444:	3f58560b 	.word	0x3f58560b
 8011448:	bf58560b 	.word	0xbf58560b
 801144c:	40bfffff 	.word	0x40bfffff
 8011450:	4036db6d 	.word	0x4036db6d
 8011454:	c11d077e 	.word	0xc11d077e
 8011458:	c2a2932b 	.word	0xc2a2932b
 801145c:	bc21a093 	.word	0xbc21a093
 8011460:	c3389ae7 	.word	0xc3389ae7
 8011464:	c322658c 	.word	0xc322658c
 8011468:	c2798057 	.word	0xc2798057
 801146c:	c128f022 	.word	0xc128f022
 8011470:	bf31a0b7 	.word	0xbf31a0b7
 8011474:	bd777f97 	.word	0xbd777f97
 8011478:	40d23f7c 	.word	0x40d23f7c
 801147c:	42d9451f 	.word	0x42d9451f
 8011480:	43d6810b 	.word	0x43d6810b
 8011484:	442158c9 	.word	0x442158c9
 8011488:	43d9486f 	.word	0x43d9486f
 801148c:	4309a863 	.word	0x4309a863
 8011490:	419d35ce 	.word	0x419d35ce
 8011494:	c3f1c275 	.word	0xc3f1c275
 8011498:	c480230b 	.word	0xc480230b
 801149c:	bc21a092 	.word	0xbc21a092
 80114a0:	c41f6441 	.word	0xc41f6441
 80114a4:	c320a2ea 	.word	0xc320a2ea
 80114a8:	c18e104b 	.word	0xc18e104b
 80114ac:	bf4c9dd4 	.word	0xbf4c9dd4
 80114b0:	43ed43a7 	.word	0x43ed43a7
 80114b4:	c1b38712 	.word	0xc1b38712
 80114b8:	451f90ce 	.word	0x451f90ce
 80114bc:	4547fdbb 	.word	0x4547fdbb
 80114c0:	44c01759 	.word	0x44c01759
 80114c4:	43a2e571 	.word	0x43a2e571
 80114c8:	41f2b459 	.word	0x41f2b459

080114cc <expf>:
 80114cc:	ee10 2a10 	vmov	r2, s0
 80114d0:	f240 412a 	movw	r1, #1066	; 0x42a
 80114d4:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80114d8:	428b      	cmp	r3, r1
 80114da:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 80114de:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80114e2:	d92e      	bls.n	8011542 <expf+0x76>
 80114e4:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80114e8:	d061      	beq.n	80115ae <expf+0xe2>
 80114ea:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80114ee:	d304      	bcc.n	80114fa <expf+0x2e>
 80114f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80114f4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80114f8:	4770      	bx	lr
 80114fa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80115b4 <expf+0xe8>
 80114fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011506:	dd04      	ble.n	8011512 <expf+0x46>
 8011508:	2000      	movs	r0, #0
 801150a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801150e:	f002 b809 	b.w	8013524 <__math_oflowf>
 8011512:	eddf 7a29 	vldr	s15, [pc, #164]	; 80115b8 <expf+0xec>
 8011516:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801151e:	d504      	bpl.n	801152a <expf+0x5e>
 8011520:	2000      	movs	r0, #0
 8011522:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8011526:	f001 bff1 	b.w	801350c <__math_uflowf>
 801152a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80115bc <expf+0xf0>
 801152e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011536:	d504      	bpl.n	8011542 <expf+0x76>
 8011538:	2000      	movs	r0, #0
 801153a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801153e:	f001 bfeb 	b.w	8013518 <__math_may_uflowf>
 8011542:	491f      	ldr	r1, [pc, #124]	; (80115c0 <expf+0xf4>)
 8011544:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011548:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 801154c:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 8011550:	eeb0 4b47 	vmov.f64	d4, d7
 8011554:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011558:	ec55 4b14 	vmov	r4, r5, d4
 801155c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8011560:	f004 021f 	and.w	r2, r4, #31
 8011564:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011568:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801156c:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 8011570:	e9d2 4500 	ldrd	r4, r5, [r2]
 8011574:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011578:	ee14 0a10 	vmov	r0, s8
 801157c:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 8011580:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 8011584:	f04f 0b00 	mov.w	fp, #0
 8011588:	eb1b 0204 	adds.w	r2, fp, r4
 801158c:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 8011590:	eb4c 0305 	adc.w	r3, ip, r5
 8011594:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011598:	ee27 7b07 	vmul.f64	d7, d7, d7
 801159c:	eea6 0b07 	vfma.f64	d0, d6, d7
 80115a0:	ec43 2b17 	vmov	d7, r2, r3
 80115a4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80115ac:	e7a2      	b.n	80114f4 <expf+0x28>
 80115ae:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80115c4 <expf+0xf8>
 80115b2:	e79f      	b.n	80114f4 <expf+0x28>
 80115b4:	42b17217 	.word	0x42b17217
 80115b8:	c2cff1b4 	.word	0xc2cff1b4
 80115bc:	c2ce8ecf 	.word	0xc2ce8ecf
 80115c0:	080151b0 	.word	0x080151b0
 80115c4:	00000000 	.word	0x00000000

080115c8 <fabsf>:
 80115c8:	ee10 3a10 	vmov	r3, s0
 80115cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80115d0:	ee00 3a10 	vmov	s0, r3
 80115d4:	4770      	bx	lr
	...

080115d8 <floorf>:
 80115d8:	ee10 3a10 	vmov	r3, s0
 80115dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80115e0:	0dca      	lsrs	r2, r1, #23
 80115e2:	3a7f      	subs	r2, #127	; 0x7f
 80115e4:	2a16      	cmp	r2, #22
 80115e6:	dc2a      	bgt.n	801163e <floorf+0x66>
 80115e8:	2a00      	cmp	r2, #0
 80115ea:	da11      	bge.n	8011610 <floorf+0x38>
 80115ec:	eddf 7a18 	vldr	s15, [pc, #96]	; 8011650 <floorf+0x78>
 80115f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80115f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80115f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fc:	dd05      	ble.n	801160a <floorf+0x32>
 80115fe:	2b00      	cmp	r3, #0
 8011600:	da23      	bge.n	801164a <floorf+0x72>
 8011602:	4a14      	ldr	r2, [pc, #80]	; (8011654 <floorf+0x7c>)
 8011604:	2900      	cmp	r1, #0
 8011606:	bf18      	it	ne
 8011608:	4613      	movne	r3, r2
 801160a:	ee00 3a10 	vmov	s0, r3
 801160e:	4770      	bx	lr
 8011610:	4911      	ldr	r1, [pc, #68]	; (8011658 <floorf+0x80>)
 8011612:	4111      	asrs	r1, r2
 8011614:	420b      	tst	r3, r1
 8011616:	d0fa      	beq.n	801160e <floorf+0x36>
 8011618:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011650 <floorf+0x78>
 801161c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011620:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011628:	ddef      	ble.n	801160a <floorf+0x32>
 801162a:	2b00      	cmp	r3, #0
 801162c:	bfbe      	ittt	lt
 801162e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8011632:	fa40 f202 	asrlt.w	r2, r0, r2
 8011636:	189b      	addlt	r3, r3, r2
 8011638:	ea23 0301 	bic.w	r3, r3, r1
 801163c:	e7e5      	b.n	801160a <floorf+0x32>
 801163e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011642:	d3e4      	bcc.n	801160e <floorf+0x36>
 8011644:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011648:	4770      	bx	lr
 801164a:	2300      	movs	r3, #0
 801164c:	e7dd      	b.n	801160a <floorf+0x32>
 801164e:	bf00      	nop
 8011650:	7149f2ca 	.word	0x7149f2ca
 8011654:	bf800000 	.word	0xbf800000
 8011658:	007fffff 	.word	0x007fffff

0801165c <logf>:
 801165c:	ee10 3a10 	vmov	r3, s0
 8011660:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011664:	b410      	push	{r4}
 8011666:	d057      	beq.n	8011718 <logf+0xbc>
 8011668:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 801166c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8011670:	d31a      	bcc.n	80116a8 <logf+0x4c>
 8011672:	005a      	lsls	r2, r3, #1
 8011674:	d104      	bne.n	8011680 <logf+0x24>
 8011676:	2001      	movs	r0, #1
 8011678:	f85d 4b04 	ldr.w	r4, [sp], #4
 801167c:	f001 bf58 	b.w	8013530 <__math_divzerof>
 8011680:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011684:	d045      	beq.n	8011712 <logf+0xb6>
 8011686:	2b00      	cmp	r3, #0
 8011688:	db02      	blt.n	8011690 <logf+0x34>
 801168a:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801168e:	d303      	bcc.n	8011698 <logf+0x3c>
 8011690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011694:	f001 bf5c 	b.w	8013550 <__math_invalidf>
 8011698:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011720 <logf+0xc4>
 801169c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80116a0:	ee10 3a10 	vmov	r3, s0
 80116a4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80116a8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80116ac:	491d      	ldr	r1, [pc, #116]	; (8011724 <logf+0xc8>)
 80116ae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80116b2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80116b6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80116ba:	0dd4      	lsrs	r4, r2, #23
 80116bc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80116c0:	05e4      	lsls	r4, r4, #23
 80116c2:	ed90 5b00 	vldr	d5, [r0]
 80116c6:	1b1b      	subs	r3, r3, r4
 80116c8:	ee07 3a90 	vmov	s15, r3
 80116cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80116d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 80116d4:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 80116d8:	ee26 3b06 	vmul.f64	d3, d6, d6
 80116dc:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 80116e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80116e4:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80116e8:	15d2      	asrs	r2, r2, #23
 80116ea:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 80116ee:	eea5 7b03 	vfma.f64	d7, d5, d3
 80116f2:	eeb0 5b47 	vmov.f64	d5, d7
 80116f6:	ed90 0b02 	vldr	d0, [r0, #8]
 80116fa:	ee07 2a90 	vmov	s15, r2
 80116fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011702:	eea7 0b04 	vfma.f64	d0, d7, d4
 8011706:	ee30 0b06 	vadd.f64	d0, d0, d6
 801170a:	eea3 0b05 	vfma.f64	d0, d3, d5
 801170e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011716:	4770      	bx	lr
 8011718:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011728 <logf+0xcc>
 801171c:	e7f9      	b.n	8011712 <logf+0xb6>
 801171e:	bf00      	nop
 8011720:	4b000000 	.word	0x4b000000
 8011724:	080152f8 	.word	0x080152f8
 8011728:	00000000 	.word	0x00000000

0801172c <log1pf>:
 801172c:	ee10 2a10 	vmov	r2, s0
 8011730:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011734:	db02      	blt.n	801173c <log1pf+0x10>
 8011736:	ee30 0a00 	vadd.f32	s0, s0, s0
 801173a:	4770      	bx	lr
 801173c:	4b70      	ldr	r3, [pc, #448]	; (8011900 <log1pf+0x1d4>)
 801173e:	429a      	cmp	r2, r3
 8011740:	dc78      	bgt.n	8011834 <log1pf+0x108>
 8011742:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011746:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801174a:	db12      	blt.n	8011772 <log1pf+0x46>
 801174c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011750:	eeb4 0a67 	vcmp.f32	s0, s15
 8011754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011758:	bf05      	ittet	eq
 801175a:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 8011904 <log1pf+0x1d8>
 801175e:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 8011908 <log1pf+0x1dc>
 8011762:	ee70 7a40 	vsubne.f32	s15, s0, s0
 8011766:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 801176a:	bf18      	it	ne
 801176c:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 8011770:	4770      	bx	lr
 8011772:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 8011776:	da13      	bge.n	80117a0 <log1pf+0x74>
 8011778:	eddf 7a64 	vldr	s15, [pc, #400]	; 801190c <log1pf+0x1e0>
 801177c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011788:	dd03      	ble.n	8011792 <log1pf+0x66>
 801178a:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 801178e:	f2c0 80b6 	blt.w	80118fe <log1pf+0x1d2>
 8011792:	ee20 7a40 	vnmul.f32	s14, s0, s0
 8011796:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801179a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801179e:	4770      	bx	lr
 80117a0:	4b5b      	ldr	r3, [pc, #364]	; (8011910 <log1pf+0x1e4>)
 80117a2:	441a      	add	r2, r3
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d84d      	bhi.n	8011844 <log1pf+0x118>
 80117a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80117ac:	ee30 7a27 	vadd.f32	s14, s0, s15
 80117b0:	ee17 2a10 	vmov	r2, s14
 80117b4:	15d3      	asrs	r3, r2, #23
 80117b6:	3b7f      	subs	r3, #127	; 0x7f
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	bfcb      	itete	gt
 80117bc:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 80117c0:	ee77 7a67 	vsuble.f32	s15, s14, s15
 80117c4:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 80117c8:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80117cc:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80117d0:	4950      	ldr	r1, [pc, #320]	; (8011914 <log1pf+0x1e8>)
 80117d2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80117d6:	428a      	cmp	r2, r1
 80117d8:	bfc9      	itett	gt
 80117da:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 80117de:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 80117e2:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 80117e6:	3301      	addgt	r3, #1
 80117e8:	bfc8      	it	gt
 80117ea:	1092      	asrgt	r2, r2, #2
 80117ec:	ee07 1a90 	vmov	s15, r1
 80117f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80117f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80117f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80117fc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011800:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011804:	2a00      	cmp	r2, #0
 8011806:	d13d      	bne.n	8011884 <log1pf+0x158>
 8011808:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011810:	d11b      	bne.n	801184a <log1pf+0x11e>
 8011812:	2b00      	cmp	r3, #0
 8011814:	d071      	beq.n	80118fa <log1pf+0x1ce>
 8011816:	ee07 3a90 	vmov	s15, r3
 801181a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8011918 <log1pf+0x1ec>
 801181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011822:	eee7 6a87 	vfma.f32	s13, s15, s14
 8011826:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 801191c <log1pf+0x1f0>
 801182a:	eeb0 0a66 	vmov.f32	s0, s13
 801182e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011832:	4770      	bx	lr
 8011834:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 8011838:	dbb6      	blt.n	80117a8 <log1pf+0x7c>
 801183a:	15d3      	asrs	r3, r2, #23
 801183c:	3b7f      	subs	r3, #127	; 0x7f
 801183e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8011908 <log1pf+0x1dc>
 8011842:	e7c5      	b.n	80117d0 <log1pf+0xa4>
 8011844:	2201      	movs	r2, #1
 8011846:	2300      	movs	r3, #0
 8011848:	e7d6      	b.n	80117f8 <log1pf+0xcc>
 801184a:	eddf 7a35 	vldr	s15, [pc, #212]	; 8011920 <log1pf+0x1f4>
 801184e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011852:	eea0 6a67 	vfms.f32	s12, s0, s15
 8011856:	ee26 6a07 	vmul.f32	s12, s12, s14
 801185a:	b913      	cbnz	r3, 8011862 <log1pf+0x136>
 801185c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011860:	4770      	bx	lr
 8011862:	ee07 3a90 	vmov	s15, r3
 8011866:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8011918 <log1pf+0x1ec>
 801186a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801186e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8011872:	ee36 7a66 	vsub.f32	s14, s12, s13
 8011876:	ee37 0a40 	vsub.f32	s0, s14, s0
 801187a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801191c <log1pf+0x1f0>
 801187e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011882:	4770      	bx	lr
 8011884:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011888:	ee70 7a27 	vadd.f32	s15, s0, s15
 801188c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8011924 <log1pf+0x1f8>
 8011890:	ed9f 5a25 	vldr	s10, [pc, #148]	; 8011928 <log1pf+0x1fc>
 8011894:	eec0 5a27 	vdiv.f32	s11, s0, s15
 8011898:	ee65 7aa5 	vmul.f32	s15, s11, s11
 801189c:	eea7 5a86 	vfma.f32	s10, s15, s12
 80118a0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801192c <log1pf+0x200>
 80118a4:	eea5 6a27 	vfma.f32	s12, s10, s15
 80118a8:	ed9f 5a21 	vldr	s10, [pc, #132]	; 8011930 <log1pf+0x204>
 80118ac:	eea6 5a27 	vfma.f32	s10, s12, s15
 80118b0:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8011934 <log1pf+0x208>
 80118b4:	eea5 6a27 	vfma.f32	s12, s10, s15
 80118b8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8011938 <log1pf+0x20c>
 80118bc:	eea6 5a27 	vfma.f32	s10, s12, s15
 80118c0:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8011920 <log1pf+0x1f4>
 80118c4:	eea5 6a27 	vfma.f32	s12, s10, s15
 80118c8:	eeb0 5a47 	vmov.f32	s10, s14
 80118cc:	eea6 5a27 	vfma.f32	s10, s12, s15
 80118d0:	ee25 6a25 	vmul.f32	s12, s10, s11
 80118d4:	b923      	cbnz	r3, 80118e0 <log1pf+0x1b4>
 80118d6:	ee37 7a46 	vsub.f32	s14, s14, s12
 80118da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80118de:	4770      	bx	lr
 80118e0:	ee07 3a90 	vmov	s15, r3
 80118e4:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8011918 <log1pf+0x1ec>
 80118e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118ec:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80118f0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80118f4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80118f8:	e7bd      	b.n	8011876 <log1pf+0x14a>
 80118fa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011908 <log1pf+0x1dc>
 80118fe:	4770      	bx	lr
 8011900:	3ed413d6 	.word	0x3ed413d6
 8011904:	cc000000 	.word	0xcc000000
 8011908:	00000000 	.word	0x00000000
 801190c:	4c000000 	.word	0x4c000000
 8011910:	416a09e0 	.word	0x416a09e0
 8011914:	003504f6 	.word	0x003504f6
 8011918:	3717f7d1 	.word	0x3717f7d1
 801191c:	3f317180 	.word	0x3f317180
 8011920:	3f2aaaab 	.word	0x3f2aaaab
 8011924:	3e178897 	.word	0x3e178897
 8011928:	3e1cd04f 	.word	0x3e1cd04f
 801192c:	3e3a3325 	.word	0x3e3a3325
 8011930:	3e638e29 	.word	0x3e638e29
 8011934:	3e924925 	.word	0x3e924925
 8011938:	3ecccccd 	.word	0x3ecccccd

0801193c <checkint>:
 801193c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011940:	2b7e      	cmp	r3, #126	; 0x7e
 8011942:	dd10      	ble.n	8011966 <checkint+0x2a>
 8011944:	2b96      	cmp	r3, #150	; 0x96
 8011946:	dc0c      	bgt.n	8011962 <checkint+0x26>
 8011948:	2201      	movs	r2, #1
 801194a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801194e:	fa02 f303 	lsl.w	r3, r2, r3
 8011952:	1e5a      	subs	r2, r3, #1
 8011954:	4202      	tst	r2, r0
 8011956:	d106      	bne.n	8011966 <checkint+0x2a>
 8011958:	4203      	tst	r3, r0
 801195a:	bf0c      	ite	eq
 801195c:	2002      	moveq	r0, #2
 801195e:	2001      	movne	r0, #1
 8011960:	4770      	bx	lr
 8011962:	2002      	movs	r0, #2
 8011964:	4770      	bx	lr
 8011966:	2000      	movs	r0, #0
 8011968:	4770      	bx	lr
 801196a:	0000      	movs	r0, r0
 801196c:	0000      	movs	r0, r0
	...

08011970 <powf>:
 8011970:	ee10 1a10 	vmov	r1, s0
 8011974:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8011978:	ee10 4a90 	vmov	r4, s1
 801197c:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8011980:	0062      	lsls	r2, r4, #1
 8011982:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011986:	eef0 4a60 	vmov.f32	s9, s1
 801198a:	f102 30ff 	add.w	r0, r2, #4294967295
 801198e:	4b92      	ldr	r3, [pc, #584]	; (8011bd8 <powf+0x268>)
 8011990:	d255      	bcs.n	8011a3e <powf+0xce>
 8011992:	4298      	cmp	r0, r3
 8011994:	d855      	bhi.n	8011a42 <powf+0xd2>
 8011996:	2000      	movs	r0, #0
 8011998:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801199c:	4a8f      	ldr	r2, [pc, #572]	; (8011bdc <powf+0x26c>)
 801199e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 80119a2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80119a6:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80119aa:	0ddb      	lsrs	r3, r3, #23
 80119ac:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80119b0:	05db      	lsls	r3, r3, #23
 80119b2:	ed94 6b00 	vldr	d6, [r4]
 80119b6:	1ac9      	subs	r1, r1, r3
 80119b8:	ee07 1a90 	vmov	s15, r1
 80119bc:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 80119c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80119c4:	eea6 2b07 	vfma.f64	d2, d6, d7
 80119c8:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 80119cc:	ee22 6b02 	vmul.f64	d6, d2, d2
 80119d0:	eea2 7b05 	vfma.f64	d7, d2, d5
 80119d4:	15db      	asrs	r3, r3, #23
 80119d6:	ed94 5b02 	vldr	d5, [r4, #8]
 80119da:	ee00 3a10 	vmov	s0, r3
 80119de:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80119e2:	ee30 0b05 	vadd.f64	d0, d0, d5
 80119e6:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 80119ea:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 80119ee:	eea2 0b05 	vfma.f64	d0, d2, d5
 80119f2:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80119f6:	eea2 5b03 	vfma.f64	d5, d2, d3
 80119fa:	eea6 0b05 	vfma.f64	d0, d6, d5
 80119fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011a02:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011a06:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8011a0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a0e:	ee10 3a90 	vmov	r3, s1
 8011a12:	2500      	movs	r5, #0
 8011a14:	0bda      	lsrs	r2, r3, #15
 8011a16:	2300      	movs	r3, #0
 8011a18:	b292      	uxth	r2, r2
 8011a1a:	f248 04be 	movw	r4, #32958	; 0x80be
 8011a1e:	429d      	cmp	r5, r3
 8011a20:	bf08      	it	eq
 8011a22:	4294      	cmpeq	r4, r2
 8011a24:	f080 8094 	bcs.w	8011b50 <powf+0x1e0>
 8011a28:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8011bc0 <powf+0x250>
 8011a2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a34:	dd76      	ble.n	8011b24 <powf+0x1b4>
 8011a36:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011a3a:	f001 bd73 	b.w	8013524 <__math_oflowf>
 8011a3e:	4298      	cmp	r0, r3
 8011a40:	d92d      	bls.n	8011a9e <powf+0x12e>
 8011a42:	b952      	cbnz	r2, 8011a5a <powf+0xea>
 8011a44:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8011a4e:	f240 80ae 	bls.w	8011bae <powf+0x23e>
 8011a52:	ee30 0a24 	vadd.f32	s0, s0, s9
 8011a56:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8011a5a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8011a5e:	d105      	bne.n	8011a6c <powf+0xfc>
 8011a60:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8011a64:	0064      	lsls	r4, r4, #1
 8011a66:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011a6a:	e7f0      	b.n	8011a4e <powf+0xde>
 8011a6c:	004b      	lsls	r3, r1, #1
 8011a6e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8011a72:	d8ee      	bhi.n	8011a52 <powf+0xe2>
 8011a74:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8011a78:	d1eb      	bne.n	8011a52 <powf+0xe2>
 8011a7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011a7e:	f000 8096 	beq.w	8011bae <powf+0x23e>
 8011a82:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011a86:	ea6f 0404 	mvn.w	r4, r4
 8011a8a:	bf34      	ite	cc
 8011a8c:	2300      	movcc	r3, #0
 8011a8e:	2301      	movcs	r3, #1
 8011a90:	0fe4      	lsrs	r4, r4, #31
 8011a92:	42a3      	cmp	r3, r4
 8011a94:	f040 808e 	bne.w	8011bb4 <powf+0x244>
 8011a98:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8011a9c:	e7db      	b.n	8011a56 <powf+0xe6>
 8011a9e:	004d      	lsls	r5, r1, #1
 8011aa0:	1e6a      	subs	r2, r5, #1
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d91b      	bls.n	8011ade <powf+0x16e>
 8011aa6:	2900      	cmp	r1, #0
 8011aa8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011aac:	da0e      	bge.n	8011acc <powf+0x15c>
 8011aae:	ee10 0a90 	vmov	r0, s1
 8011ab2:	f7ff ff43 	bl	801193c <checkint>
 8011ab6:	2801      	cmp	r0, #1
 8011ab8:	d108      	bne.n	8011acc <powf+0x15c>
 8011aba:	eeb1 0a40 	vneg.f32	s0, s0
 8011abe:	b93d      	cbnz	r5, 8011ad0 <powf+0x160>
 8011ac0:	2c00      	cmp	r4, #0
 8011ac2:	dac8      	bge.n	8011a56 <powf+0xe6>
 8011ac4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011ac8:	f001 bd32 	b.w	8013530 <__math_divzerof>
 8011acc:	2000      	movs	r0, #0
 8011ace:	e7f6      	b.n	8011abe <powf+0x14e>
 8011ad0:	2c00      	cmp	r4, #0
 8011ad2:	dac0      	bge.n	8011a56 <powf+0xe6>
 8011ad4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011ad8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011adc:	e7bb      	b.n	8011a56 <powf+0xe6>
 8011ade:	2900      	cmp	r1, #0
 8011ae0:	da1e      	bge.n	8011b20 <powf+0x1b0>
 8011ae2:	ee10 0a90 	vmov	r0, s1
 8011ae6:	f7ff ff29 	bl	801193c <checkint>
 8011aea:	b918      	cbnz	r0, 8011af4 <powf+0x184>
 8011aec:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011af0:	f001 bd2e 	b.w	8013550 <__math_invalidf>
 8011af4:	2801      	cmp	r0, #1
 8011af6:	bf0c      	ite	eq
 8011af8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8011afc:	2000      	movne	r0, #0
 8011afe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011b02:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8011b06:	f4bf af47 	bcs.w	8011998 <powf+0x28>
 8011b0a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8011be0 <powf+0x270>
 8011b0e:	ee20 0a20 	vmul.f32	s0, s0, s1
 8011b12:	ee10 3a10 	vmov	r3, s0
 8011b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b1a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8011b1e:	e73b      	b.n	8011998 <powf+0x28>
 8011b20:	2000      	movs	r0, #0
 8011b22:	e7ee      	b.n	8011b02 <powf+0x192>
 8011b24:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8011bc8 <powf+0x258>
 8011b28:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b30:	d803      	bhi.n	8011b3a <powf+0x1ca>
 8011b32:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011b36:	f001 bce9 	b.w	801350c <__math_uflowf>
 8011b3a:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8011bd0 <powf+0x260>
 8011b3e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b46:	d503      	bpl.n	8011b50 <powf+0x1e0>
 8011b48:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011b4c:	f001 bce4 	b.w	8013518 <__math_may_uflowf>
 8011b50:	4924      	ldr	r1, [pc, #144]	; (8011be4 <powf+0x274>)
 8011b52:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8011b56:	ee30 6b07 	vadd.f64	d6, d0, d7
 8011b5a:	ec55 4b16 	vmov	r4, r5, d6
 8011b5e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b62:	f004 021f 	and.w	r2, r4, #31
 8011b66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011b6a:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8011b6e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011b72:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011b76:	e9d2 6700 	ldrd	r6, r7, [r2]
 8011b7a:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011b7e:	1824      	adds	r4, r4, r0
 8011b80:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8011b84:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8011b88:	2000      	movs	r0, #0
 8011b8a:	1982      	adds	r2, r0, r6
 8011b8c:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8011b90:	eb41 0307 	adc.w	r3, r1, r7
 8011b94:	eea0 6b05 	vfma.f64	d6, d0, d5
 8011b98:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011b9c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8011ba0:	ec43 2b16 	vmov	d6, r2, r3
 8011ba4:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011ba8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011bac:	e753      	b.n	8011a56 <powf+0xe6>
 8011bae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011bb2:	e750      	b.n	8011a56 <powf+0xe6>
 8011bb4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011be8 <powf+0x278>
 8011bb8:	e74d      	b.n	8011a56 <powf+0xe6>
 8011bba:	bf00      	nop
 8011bbc:	f3af 8000 	nop.w
 8011bc0:	ffd1d571 	.word	0xffd1d571
 8011bc4:	405fffff 	.word	0x405fffff
 8011bc8:	00000000 	.word	0x00000000
 8011bcc:	c062c000 	.word	0xc062c000
 8011bd0:	00000000 	.word	0x00000000
 8011bd4:	c062a000 	.word	0xc062a000
 8011bd8:	fefffffe 	.word	0xfefffffe
 8011bdc:	08015418 	.word	0x08015418
 8011be0:	4b000000 	.word	0x4b000000
 8011be4:	080151b0 	.word	0x080151b0
 8011be8:	00000000 	.word	0x00000000

08011bec <roundf>:
 8011bec:	ee10 0a10 	vmov	r0, s0
 8011bf0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011bf4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8011bf8:	2a16      	cmp	r2, #22
 8011bfa:	dc15      	bgt.n	8011c28 <roundf+0x3c>
 8011bfc:	2a00      	cmp	r2, #0
 8011bfe:	da08      	bge.n	8011c12 <roundf+0x26>
 8011c00:	3201      	adds	r2, #1
 8011c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8011c06:	d101      	bne.n	8011c0c <roundf+0x20>
 8011c08:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011c0c:	ee00 3a10 	vmov	s0, r3
 8011c10:	4770      	bx	lr
 8011c12:	4908      	ldr	r1, [pc, #32]	; (8011c34 <roundf+0x48>)
 8011c14:	4111      	asrs	r1, r2
 8011c16:	4208      	tst	r0, r1
 8011c18:	d0fa      	beq.n	8011c10 <roundf+0x24>
 8011c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011c1e:	4113      	asrs	r3, r2
 8011c20:	4403      	add	r3, r0
 8011c22:	ea23 0301 	bic.w	r3, r3, r1
 8011c26:	e7f1      	b.n	8011c0c <roundf+0x20>
 8011c28:	2a80      	cmp	r2, #128	; 0x80
 8011c2a:	d1f1      	bne.n	8011c10 <roundf+0x24>
 8011c2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	007fffff 	.word	0x007fffff

08011c38 <sinf>:
 8011c38:	ee10 3a10 	vmov	r3, s0
 8011c3c:	b507      	push	{r0, r1, r2, lr}
 8011c3e:	4a1d      	ldr	r2, [pc, #116]	; (8011cb4 <sinf+0x7c>)
 8011c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c44:	4293      	cmp	r3, r2
 8011c46:	dc05      	bgt.n	8011c54 <sinf+0x1c>
 8011c48:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8011cb8 <sinf+0x80>
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	f001 fb17 	bl	8013280 <__kernel_sinf>
 8011c52:	e004      	b.n	8011c5e <sinf+0x26>
 8011c54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011c58:	db04      	blt.n	8011c64 <sinf+0x2c>
 8011c5a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011c5e:	b003      	add	sp, #12
 8011c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c64:	4668      	mov	r0, sp
 8011c66:	f000 fe8d 	bl	8012984 <__ieee754_rem_pio2f>
 8011c6a:	f000 0003 	and.w	r0, r0, #3
 8011c6e:	2801      	cmp	r0, #1
 8011c70:	d008      	beq.n	8011c84 <sinf+0x4c>
 8011c72:	2802      	cmp	r0, #2
 8011c74:	d00d      	beq.n	8011c92 <sinf+0x5a>
 8011c76:	b9b0      	cbnz	r0, 8011ca6 <sinf+0x6e>
 8011c78:	2001      	movs	r0, #1
 8011c7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c7e:	ed9d 0a00 	vldr	s0, [sp]
 8011c82:	e7e4      	b.n	8011c4e <sinf+0x16>
 8011c84:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c88:	ed9d 0a00 	vldr	s0, [sp]
 8011c8c:	f001 f818 	bl	8012cc0 <__kernel_cosf>
 8011c90:	e7e5      	b.n	8011c5e <sinf+0x26>
 8011c92:	2001      	movs	r0, #1
 8011c94:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c98:	ed9d 0a00 	vldr	s0, [sp]
 8011c9c:	f001 faf0 	bl	8013280 <__kernel_sinf>
 8011ca0:	eeb1 0a40 	vneg.f32	s0, s0
 8011ca4:	e7db      	b.n	8011c5e <sinf+0x26>
 8011ca6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011caa:	ed9d 0a00 	vldr	s0, [sp]
 8011cae:	f001 f807 	bl	8012cc0 <__kernel_cosf>
 8011cb2:	e7f5      	b.n	8011ca0 <sinf+0x68>
 8011cb4:	3f490fd8 	.word	0x3f490fd8
 8011cb8:	00000000 	.word	0x00000000

08011cbc <tanf>:
 8011cbc:	ee10 3a10 	vmov	r3, s0
 8011cc0:	b507      	push	{r0, r1, r2, lr}
 8011cc2:	4a10      	ldr	r2, [pc, #64]	; (8011d04 <tanf+0x48>)
 8011cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	dc05      	bgt.n	8011cd8 <tanf+0x1c>
 8011ccc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8011d08 <tanf+0x4c>
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	f001 fb1d 	bl	8013310 <__kernel_tanf>
 8011cd6:	e004      	b.n	8011ce2 <tanf+0x26>
 8011cd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011cdc:	db04      	blt.n	8011ce8 <tanf+0x2c>
 8011cde:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011ce2:	b003      	add	sp, #12
 8011ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ce8:	4668      	mov	r0, sp
 8011cea:	f000 fe4b 	bl	8012984 <__ieee754_rem_pio2f>
 8011cee:	0040      	lsls	r0, r0, #1
 8011cf0:	f000 0002 	and.w	r0, r0, #2
 8011cf4:	f1c0 0001 	rsb	r0, r0, #1
 8011cf8:	eddd 0a01 	vldr	s1, [sp, #4]
 8011cfc:	ed9d 0a00 	vldr	s0, [sp]
 8011d00:	e7e7      	b.n	8011cd2 <tanf+0x16>
 8011d02:	bf00      	nop
 8011d04:	3f490fda 	.word	0x3f490fda
 8011d08:	00000000 	.word	0x00000000

08011d0c <tanhf>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	ee10 4a10 	vmov	r4, s0
 8011d12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d1a:	ed2d 8b02 	vpush	{d8}
 8011d1e:	eef0 7a40 	vmov.f32	s15, s0
 8011d22:	db0c      	blt.n	8011d3e <tanhf+0x32>
 8011d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011d28:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011d2c:	2c00      	cmp	r4, #0
 8011d2e:	bfac      	ite	ge
 8011d30:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8011d34:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8011d38:	ecbd 8b02 	vpop	{d8}
 8011d3c:	bd10      	pop	{r4, pc}
 8011d3e:	4a1b      	ldr	r2, [pc, #108]	; (8011dac <tanhf+0xa0>)
 8011d40:	4293      	cmp	r3, r2
 8011d42:	dc30      	bgt.n	8011da6 <tanhf+0x9a>
 8011d44:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8011d48:	da06      	bge.n	8011d58 <tanhf+0x4c>
 8011d4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011d4e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011d52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d56:	e7ef      	b.n	8011d38 <tanhf+0x2c>
 8011d58:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011d5c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8011d60:	db12      	blt.n	8011d88 <tanhf+0x7c>
 8011d62:	f7ff fc31 	bl	80115c8 <fabsf>
 8011d66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011d6a:	f001 fc0d 	bl	8013588 <expm1f>
 8011d6e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011d72:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8011d76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d7e:	2c00      	cmp	r4, #0
 8011d80:	bfb8      	it	lt
 8011d82:	eeb1 0a40 	vneglt.f32	s0, s0
 8011d86:	e7d7      	b.n	8011d38 <tanhf+0x2c>
 8011d88:	f7ff fc1e 	bl	80115c8 <fabsf>
 8011d8c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8011d90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d94:	f001 fbf8 	bl	8013588 <expm1f>
 8011d98:	ee70 7a08 	vadd.f32	s15, s0, s16
 8011d9c:	eeb1 7a40 	vneg.f32	s14, s0
 8011da0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011da4:	e7eb      	b.n	8011d7e <tanhf+0x72>
 8011da6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011daa:	e7e8      	b.n	8011d7e <tanhf+0x72>
 8011dac:	41afffff 	.word	0x41afffff

08011db0 <acosf>:
 8011db0:	b510      	push	{r4, lr}
 8011db2:	ed2d 8b02 	vpush	{d8}
 8011db6:	4c25      	ldr	r4, [pc, #148]	; (8011e4c <acosf+0x9c>)
 8011db8:	b08a      	sub	sp, #40	; 0x28
 8011dba:	eeb0 8a40 	vmov.f32	s16, s0
 8011dbe:	f000 fa77 	bl	80122b0 <__ieee754_acosf>
 8011dc2:	f994 3000 	ldrsb.w	r3, [r4]
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	eef0 8a40 	vmov.f32	s17, s0
 8011dcc:	d038      	beq.n	8011e40 <acosf+0x90>
 8011dce:	eeb4 8a48 	vcmp.f32	s16, s16
 8011dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd6:	d633      	bvs.n	8011e40 <acosf+0x90>
 8011dd8:	eeb0 0a48 	vmov.f32	s0, s16
 8011ddc:	f7ff fbf4 	bl	80115c8 <fabsf>
 8011de0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011de4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dec:	dd28      	ble.n	8011e40 <acosf+0x90>
 8011dee:	2301      	movs	r3, #1
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8011df6:	4b16      	ldr	r3, [pc, #88]	; (8011e50 <acosf+0xa0>)
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	4816      	ldr	r0, [pc, #88]	; (8011e54 <acosf+0xa4>)
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	9308      	str	r3, [sp, #32]
 8011e00:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011e04:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011e08:	f001 fbb6 	bl	8013578 <nan>
 8011e0c:	f994 3000 	ldrsb.w	r3, [r4]
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011e16:	d104      	bne.n	8011e22 <acosf+0x72>
 8011e18:	f7fd ff88 	bl	800fd2c <__errno>
 8011e1c:	2321      	movs	r3, #33	; 0x21
 8011e1e:	6003      	str	r3, [r0, #0]
 8011e20:	e004      	b.n	8011e2c <acosf+0x7c>
 8011e22:	4668      	mov	r0, sp
 8011e24:	f001 fba3 	bl	801356e <matherr>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d0f5      	beq.n	8011e18 <acosf+0x68>
 8011e2c:	9b08      	ldr	r3, [sp, #32]
 8011e2e:	b11b      	cbz	r3, 8011e38 <acosf+0x88>
 8011e30:	f7fd ff7c 	bl	800fd2c <__errno>
 8011e34:	9b08      	ldr	r3, [sp, #32]
 8011e36:	6003      	str	r3, [r0, #0]
 8011e38:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011e3c:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8011e40:	eeb0 0a68 	vmov.f32	s0, s17
 8011e44:	b00a      	add	sp, #40	; 0x28
 8011e46:	ecbd 8b02 	vpop	{d8}
 8011e4a:	bd10      	pop	{r4, pc}
 8011e4c:	2000072c 	.word	0x2000072c
 8011e50:	08015540 	.word	0x08015540
 8011e54:	08015161 	.word	0x08015161

08011e58 <acoshf>:
 8011e58:	b500      	push	{lr}
 8011e5a:	ed2d 8b02 	vpush	{d8}
 8011e5e:	b08b      	sub	sp, #44	; 0x2c
 8011e60:	eeb0 8a40 	vmov.f32	s16, s0
 8011e64:	f000 fb20 	bl	80124a8 <__ieee754_acoshf>
 8011e68:	4b21      	ldr	r3, [pc, #132]	; (8011ef0 <acoshf+0x98>)
 8011e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8011e6e:	1c5a      	adds	r2, r3, #1
 8011e70:	d034      	beq.n	8011edc <acoshf+0x84>
 8011e72:	eeb4 8a48 	vcmp.f32	s16, s16
 8011e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e7a:	d62f      	bvs.n	8011edc <acoshf+0x84>
 8011e7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e80:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e88:	d528      	bpl.n	8011edc <acoshf+0x84>
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011ee8 <acoshf+0x90>
 8011e90:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8011e94:	9200      	str	r2, [sp, #0]
 8011e96:	4a17      	ldr	r2, [pc, #92]	; (8011ef4 <acoshf+0x9c>)
 8011e98:	9201      	str	r2, [sp, #4]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	f04f 0200 	mov.w	r2, #0
 8011ea0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8011ea4:	9208      	str	r2, [sp, #32]
 8011ea6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011eaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011eae:	ed8d 6b06 	vstr	d6, [sp, #24]
 8011eb2:	d104      	bne.n	8011ebe <acoshf+0x66>
 8011eb4:	f7fd ff3a 	bl	800fd2c <__errno>
 8011eb8:	2321      	movs	r3, #33	; 0x21
 8011eba:	6003      	str	r3, [r0, #0]
 8011ebc:	e004      	b.n	8011ec8 <acoshf+0x70>
 8011ebe:	4668      	mov	r0, sp
 8011ec0:	f001 fb55 	bl	801356e <matherr>
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	d0f5      	beq.n	8011eb4 <acoshf+0x5c>
 8011ec8:	9b08      	ldr	r3, [sp, #32]
 8011eca:	b11b      	cbz	r3, 8011ed4 <acoshf+0x7c>
 8011ecc:	f7fd ff2e 	bl	800fd2c <__errno>
 8011ed0:	9b08      	ldr	r3, [sp, #32]
 8011ed2:	6003      	str	r3, [r0, #0]
 8011ed4:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011ed8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011edc:	b00b      	add	sp, #44	; 0x2c
 8011ede:	ecbd 8b02 	vpop	{d8}
 8011ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ee6:	bf00      	nop
	...
 8011ef0:	2000072c 	.word	0x2000072c
 8011ef4:	08015546 	.word	0x08015546

08011ef8 <asinf>:
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	ed2d 8b02 	vpush	{d8}
 8011efe:	4c25      	ldr	r4, [pc, #148]	; (8011f94 <asinf+0x9c>)
 8011f00:	b08a      	sub	sp, #40	; 0x28
 8011f02:	eeb0 8a40 	vmov.f32	s16, s0
 8011f06:	f000 fb23 	bl	8012550 <__ieee754_asinf>
 8011f0a:	f994 3000 	ldrsb.w	r3, [r4]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	eef0 8a40 	vmov.f32	s17, s0
 8011f14:	d038      	beq.n	8011f88 <asinf+0x90>
 8011f16:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	d633      	bvs.n	8011f88 <asinf+0x90>
 8011f20:	eeb0 0a48 	vmov.f32	s0, s16
 8011f24:	f7ff fb50 	bl	80115c8 <fabsf>
 8011f28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f34:	dd28      	ble.n	8011f88 <asinf+0x90>
 8011f36:	2301      	movs	r3, #1
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8011f3e:	4b16      	ldr	r3, [pc, #88]	; (8011f98 <asinf+0xa0>)
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	4816      	ldr	r0, [pc, #88]	; (8011f9c <asinf+0xa4>)
 8011f44:	2300      	movs	r3, #0
 8011f46:	9308      	str	r3, [sp, #32]
 8011f48:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011f4c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011f50:	f001 fb12 	bl	8013578 <nan>
 8011f54:	f994 3000 	ldrsb.w	r3, [r4]
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011f5e:	d104      	bne.n	8011f6a <asinf+0x72>
 8011f60:	f7fd fee4 	bl	800fd2c <__errno>
 8011f64:	2321      	movs	r3, #33	; 0x21
 8011f66:	6003      	str	r3, [r0, #0]
 8011f68:	e004      	b.n	8011f74 <asinf+0x7c>
 8011f6a:	4668      	mov	r0, sp
 8011f6c:	f001 faff 	bl	801356e <matherr>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d0f5      	beq.n	8011f60 <asinf+0x68>
 8011f74:	9b08      	ldr	r3, [sp, #32]
 8011f76:	b11b      	cbz	r3, 8011f80 <asinf+0x88>
 8011f78:	f7fd fed8 	bl	800fd2c <__errno>
 8011f7c:	9b08      	ldr	r3, [sp, #32]
 8011f7e:	6003      	str	r3, [r0, #0]
 8011f80:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011f84:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8011f88:	eeb0 0a68 	vmov.f32	s0, s17
 8011f8c:	b00a      	add	sp, #40	; 0x28
 8011f8e:	ecbd 8b02 	vpop	{d8}
 8011f92:	bd10      	pop	{r4, pc}
 8011f94:	2000072c 	.word	0x2000072c
 8011f98:	0801554d 	.word	0x0801554d
 8011f9c:	08015161 	.word	0x08015161

08011fa0 <atanhf>:
 8011fa0:	b510      	push	{r4, lr}
 8011fa2:	ed2d 8b02 	vpush	{d8}
 8011fa6:	4c30      	ldr	r4, [pc, #192]	; (8012068 <atanhf+0xc8>)
 8011fa8:	b08a      	sub	sp, #40	; 0x28
 8011faa:	eeb0 8a40 	vmov.f32	s16, s0
 8011fae:	f000 fbb7 	bl	8012720 <__ieee754_atanhf>
 8011fb2:	f994 3000 	ldrsb.w	r3, [r4]
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	eef0 8a40 	vmov.f32	s17, s0
 8011fbc:	d049      	beq.n	8012052 <atanhf+0xb2>
 8011fbe:	eeb4 8a48 	vcmp.f32	s16, s16
 8011fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc6:	d644      	bvs.n	8012052 <atanhf+0xb2>
 8011fc8:	eeb0 0a48 	vmov.f32	s0, s16
 8011fcc:	f7ff fafc 	bl	80115c8 <fabsf>
 8011fd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011fd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fdc:	db39      	blt.n	8012052 <atanhf+0xb2>
 8011fde:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8011fe2:	f994 3000 	ldrsb.w	r3, [r4]
 8011fe6:	4a21      	ldr	r2, [pc, #132]	; (801206c <atanhf+0xcc>)
 8011fe8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8012060 <atanhf+0xc0>
 8011fec:	dd13      	ble.n	8012016 <atanhf+0x76>
 8011fee:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011ff8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ffc:	ed8d 6b06 	vstr	d6, [sp, #24]
 8012000:	e9cd 1200 	strd	r1, r2, [sp]
 8012004:	2200      	movs	r2, #0
 8012006:	9208      	str	r2, [sp, #32]
 8012008:	2b02      	cmp	r3, #2
 801200a:	d113      	bne.n	8012034 <atanhf+0x94>
 801200c:	f7fd fe8e 	bl	800fd2c <__errno>
 8012010:	2321      	movs	r3, #33	; 0x21
 8012012:	6003      	str	r3, [r0, #0]
 8012014:	e013      	b.n	801203e <atanhf+0x9e>
 8012016:	2102      	movs	r1, #2
 8012018:	e9cd 1200 	strd	r1, r2, [sp]
 801201c:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8012020:	2200      	movs	r2, #0
 8012022:	9208      	str	r2, [sp, #32]
 8012024:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012028:	ed8d 8b02 	vstr	d8, [sp, #8]
 801202c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8012030:	428b      	cmp	r3, r1
 8012032:	e7ea      	b.n	801200a <atanhf+0x6a>
 8012034:	4668      	mov	r0, sp
 8012036:	f001 fa9a 	bl	801356e <matherr>
 801203a:	2800      	cmp	r0, #0
 801203c:	d0e6      	beq.n	801200c <atanhf+0x6c>
 801203e:	9b08      	ldr	r3, [sp, #32]
 8012040:	b11b      	cbz	r3, 801204a <atanhf+0xaa>
 8012042:	f7fd fe73 	bl	800fd2c <__errno>
 8012046:	9b08      	ldr	r3, [sp, #32]
 8012048:	6003      	str	r3, [r0, #0]
 801204a:	ed9d 0b06 	vldr	d0, [sp, #24]
 801204e:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8012052:	eeb0 0a68 	vmov.f32	s0, s17
 8012056:	b00a      	add	sp, #40	; 0x28
 8012058:	ecbd 8b02 	vpop	{d8}
 801205c:	bd10      	pop	{r4, pc}
 801205e:	bf00      	nop
	...
 8012068:	2000072c 	.word	0x2000072c
 801206c:	08015553 	.word	0x08015553

08012070 <coshf>:
 8012070:	b510      	push	{r4, lr}
 8012072:	ed2d 8b02 	vpush	{d8}
 8012076:	4c27      	ldr	r4, [pc, #156]	; (8012114 <coshf+0xa4>)
 8012078:	b08a      	sub	sp, #40	; 0x28
 801207a:	eeb0 8a40 	vmov.f32	s16, s0
 801207e:	f000 fb95 	bl	80127ac <__ieee754_coshf>
 8012082:	f994 3000 	ldrsb.w	r3, [r4]
 8012086:	3301      	adds	r3, #1
 8012088:	eef0 8a40 	vmov.f32	s17, s0
 801208c:	d031      	beq.n	80120f2 <coshf+0x82>
 801208e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012096:	d62c      	bvs.n	80120f2 <coshf+0x82>
 8012098:	eeb0 0a48 	vmov.f32	s0, s16
 801209c:	f7ff fa94 	bl	80115c8 <fabsf>
 80120a0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8012118 <coshf+0xa8>
 80120a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	dd21      	ble.n	80120f2 <coshf+0x82>
 80120ae:	2303      	movs	r3, #3
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	4b1a      	ldr	r3, [pc, #104]	; (801211c <coshf+0xac>)
 80120b4:	9301      	str	r3, [sp, #4]
 80120b6:	2300      	movs	r3, #0
 80120b8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80120bc:	9308      	str	r3, [sp, #32]
 80120be:	f994 3000 	ldrsb.w	r3, [r4]
 80120c2:	ed8d 8b04 	vstr	d8, [sp, #16]
 80120c6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80120ca:	b9c3      	cbnz	r3, 80120fe <coshf+0x8e>
 80120cc:	4b14      	ldr	r3, [pc, #80]	; (8012120 <coshf+0xb0>)
 80120ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80120d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80120d6:	4668      	mov	r0, sp
 80120d8:	f001 fa49 	bl	801356e <matherr>
 80120dc:	b1a8      	cbz	r0, 801210a <coshf+0x9a>
 80120de:	9b08      	ldr	r3, [sp, #32]
 80120e0:	b11b      	cbz	r3, 80120ea <coshf+0x7a>
 80120e2:	f7fd fe23 	bl	800fd2c <__errno>
 80120e6:	9b08      	ldr	r3, [sp, #32]
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	ed9d 0b06 	vldr	d0, [sp, #24]
 80120ee:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 80120f2:	eeb0 0a68 	vmov.f32	s0, s17
 80120f6:	b00a      	add	sp, #40	; 0x28
 80120f8:	ecbd 8b02 	vpop	{d8}
 80120fc:	bd10      	pop	{r4, pc}
 80120fe:	4909      	ldr	r1, [pc, #36]	; (8012124 <coshf+0xb4>)
 8012100:	2000      	movs	r0, #0
 8012102:	2b02      	cmp	r3, #2
 8012104:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012108:	d1e5      	bne.n	80120d6 <coshf+0x66>
 801210a:	f7fd fe0f 	bl	800fd2c <__errno>
 801210e:	2322      	movs	r3, #34	; 0x22
 8012110:	6003      	str	r3, [r0, #0]
 8012112:	e7e4      	b.n	80120de <coshf+0x6e>
 8012114:	2000072c 	.word	0x2000072c
 8012118:	42b2d4fc 	.word	0x42b2d4fc
 801211c:	08015547 	.word	0x08015547
 8012120:	47efffff 	.word	0x47efffff
 8012124:	7ff00000 	.word	0x7ff00000

08012128 <fmodf>:
 8012128:	b500      	push	{lr}
 801212a:	ed2d 8b02 	vpush	{d8}
 801212e:	b08b      	sub	sp, #44	; 0x2c
 8012130:	eeb0 8a40 	vmov.f32	s16, s0
 8012134:	eef0 8a60 	vmov.f32	s17, s1
 8012138:	f000 fb9c 	bl	8012874 <__ieee754_fmodf>
 801213c:	4b24      	ldr	r3, [pc, #144]	; (80121d0 <fmodf+0xa8>)
 801213e:	f993 3000 	ldrsb.w	r3, [r3]
 8012142:	1c5a      	adds	r2, r3, #1
 8012144:	d02d      	beq.n	80121a2 <fmodf+0x7a>
 8012146:	eef4 8a68 	vcmp.f32	s17, s17
 801214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214e:	d628      	bvs.n	80121a2 <fmodf+0x7a>
 8012150:	eeb4 8a48 	vcmp.f32	s16, s16
 8012154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012158:	d623      	bvs.n	80121a2 <fmodf+0x7a>
 801215a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	d11e      	bne.n	80121a2 <fmodf+0x7a>
 8012164:	2201      	movs	r2, #1
 8012166:	9200      	str	r2, [sp, #0]
 8012168:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
 801216c:	4a19      	ldr	r2, [pc, #100]	; (80121d4 <fmodf+0xac>)
 801216e:	9201      	str	r2, [sp, #4]
 8012170:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8012174:	2200      	movs	r2, #0
 8012176:	9208      	str	r2, [sp, #32]
 8012178:	ed8d 0b02 	vstr	d0, [sp, #8]
 801217c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012180:	b9a3      	cbnz	r3, 80121ac <fmodf+0x84>
 8012182:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012186:	4668      	mov	r0, sp
 8012188:	f001 f9f1 	bl	801356e <matherr>
 801218c:	b1b0      	cbz	r0, 80121bc <fmodf+0x94>
 801218e:	9b08      	ldr	r3, [sp, #32]
 8012190:	b11b      	cbz	r3, 801219a <fmodf+0x72>
 8012192:	f7fd fdcb 	bl	800fd2c <__errno>
 8012196:	9b08      	ldr	r3, [sp, #32]
 8012198:	6003      	str	r3, [r0, #0]
 801219a:	ed9d 0b06 	vldr	d0, [sp, #24]
 801219e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80121a2:	b00b      	add	sp, #44	; 0x2c
 80121a4:	ecbd 8b02 	vpop	{d8}
 80121a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80121ac:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80121c8 <fmodf+0xa0>
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80121b6:	ed8d 6b06 	vstr	d6, [sp, #24]
 80121ba:	d1e4      	bne.n	8012186 <fmodf+0x5e>
 80121bc:	f7fd fdb6 	bl	800fd2c <__errno>
 80121c0:	2321      	movs	r3, #33	; 0x21
 80121c2:	6003      	str	r3, [r0, #0]
 80121c4:	e7e3      	b.n	801218e <fmodf+0x66>
 80121c6:	bf00      	nop
	...
 80121d0:	2000072c 	.word	0x2000072c
 80121d4:	0801555a 	.word	0x0801555a

080121d8 <sinhf>:
 80121d8:	b530      	push	{r4, r5, lr}
 80121da:	ed2d 8b02 	vpush	{d8}
 80121de:	4c32      	ldr	r4, [pc, #200]	; (80122a8 <sinhf+0xd0>)
 80121e0:	b08b      	sub	sp, #44	; 0x2c
 80121e2:	eef0 8a40 	vmov.f32	s17, s0
 80121e6:	f000 fcf9 	bl	8012bdc <__ieee754_sinhf>
 80121ea:	f994 3000 	ldrsb.w	r3, [r4]
 80121ee:	3301      	adds	r3, #1
 80121f0:	eeb0 8a40 	vmov.f32	s16, s0
 80121f4:	d030      	beq.n	8012258 <sinhf+0x80>
 80121f6:	f001 faf1 	bl	80137dc <finitef>
 80121fa:	4605      	mov	r5, r0
 80121fc:	bb60      	cbnz	r0, 8012258 <sinhf+0x80>
 80121fe:	eeb0 0a68 	vmov.f32	s0, s17
 8012202:	f001 faeb 	bl	80137dc <finitef>
 8012206:	b338      	cbz	r0, 8012258 <sinhf+0x80>
 8012208:	2303      	movs	r3, #3
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	4b27      	ldr	r3, [pc, #156]	; (80122ac <sinhf+0xd4>)
 801220e:	9301      	str	r3, [sp, #4]
 8012210:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8012214:	f994 3000 	ldrsb.w	r3, [r4]
 8012218:	9508      	str	r5, [sp, #32]
 801221a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801221e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012222:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8012226:	b9eb      	cbnz	r3, 8012264 <sinhf+0x8c>
 8012228:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8012288 <sinhf+0xb0>
 801222c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8012290 <sinhf+0xb8>
 8012230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012234:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8012238:	ed8d 7b06 	vstr	d7, [sp, #24]
 801223c:	4668      	mov	r0, sp
 801223e:	f001 f996 	bl	801356e <matherr>
 8012242:	b1d8      	cbz	r0, 801227c <sinhf+0xa4>
 8012244:	9b08      	ldr	r3, [sp, #32]
 8012246:	b11b      	cbz	r3, 8012250 <sinhf+0x78>
 8012248:	f7fd fd70 	bl	800fd2c <__errno>
 801224c:	9b08      	ldr	r3, [sp, #32]
 801224e:	6003      	str	r3, [r0, #0]
 8012250:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012254:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 8012258:	eeb0 0a48 	vmov.f32	s0, s16
 801225c:	b00b      	add	sp, #44	; 0x2c
 801225e:	ecbd 8b02 	vpop	{d8}
 8012262:	bd30      	pop	{r4, r5, pc}
 8012264:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012298 <sinhf+0xc0>
 8012268:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80122a0 <sinhf+0xc8>
 801226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012270:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8012274:	2b02      	cmp	r3, #2
 8012276:	ed8d 7b06 	vstr	d7, [sp, #24]
 801227a:	d1df      	bne.n	801223c <sinhf+0x64>
 801227c:	f7fd fd56 	bl	800fd2c <__errno>
 8012280:	2322      	movs	r3, #34	; 0x22
 8012282:	6003      	str	r3, [r0, #0]
 8012284:	e7de      	b.n	8012244 <sinhf+0x6c>
 8012286:	bf00      	nop
 8012288:	e0000000 	.word	0xe0000000
 801228c:	47efffff 	.word	0x47efffff
 8012290:	e0000000 	.word	0xe0000000
 8012294:	c7efffff 	.word	0xc7efffff
 8012298:	00000000 	.word	0x00000000
 801229c:	7ff00000 	.word	0x7ff00000
 80122a0:	00000000 	.word	0x00000000
 80122a4:	fff00000 	.word	0xfff00000
 80122a8:	2000072c 	.word	0x2000072c
 80122ac:	08015560 	.word	0x08015560

080122b0 <__ieee754_acosf>:
 80122b0:	b508      	push	{r3, lr}
 80122b2:	ee10 3a10 	vmov	r3, s0
 80122b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80122ba:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80122be:	ed2d 8b0c 	vpush	{d8-d13}
 80122c2:	d109      	bne.n	80122d8 <__ieee754_acosf+0x28>
 80122c4:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8012464 <__ieee754_acosf+0x1b4>
 80122c8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8012468 <__ieee754_acosf+0x1b8>
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	fe30 0a08 	vselgt.f32	s0, s0, s16
 80122d2:	ecbd 8b0c 	vpop	{d8-d13}
 80122d6:	bd08      	pop	{r3, pc}
 80122d8:	dd04      	ble.n	80122e4 <__ieee754_acosf+0x34>
 80122da:	ee30 8a40 	vsub.f32	s16, s0, s0
 80122de:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80122e2:	e7f6      	b.n	80122d2 <__ieee754_acosf+0x22>
 80122e4:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80122e8:	da3e      	bge.n	8012368 <__ieee754_acosf+0xb8>
 80122ea:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80122ee:	f340 80b5 	ble.w	801245c <__ieee754_acosf+0x1ac>
 80122f2:	ee60 7a00 	vmul.f32	s15, s0, s0
 80122f6:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801246c <__ieee754_acosf+0x1bc>
 80122fa:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012470 <__ieee754_acosf+0x1c0>
 80122fe:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8012474 <__ieee754_acosf+0x1c4>
 8012302:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8012478 <__ieee754_acosf+0x1c8>
 8012306:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801230a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801247c <__ieee754_acosf+0x1cc>
 801230e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012312:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8012480 <__ieee754_acosf+0x1d0>
 8012316:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801231a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8012484 <__ieee754_acosf+0x1d4>
 801231e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012322:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8012488 <__ieee754_acosf+0x1d8>
 8012326:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801232a:	eddf 6a58 	vldr	s13, [pc, #352]	; 801248c <__ieee754_acosf+0x1dc>
 801232e:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8012332:	eddf 6a57 	vldr	s13, [pc, #348]	; 8012490 <__ieee754_acosf+0x1e0>
 8012336:	eee6 6a27 	vfma.f32	s13, s12, s15
 801233a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8012494 <__ieee754_acosf+0x1e4>
 801233e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012346:	eee6 6a27 	vfma.f32	s13, s12, s15
 801234a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801234e:	eef0 7a66 	vmov.f32	s15, s13
 8012352:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012356:	eea0 8a66 	vfms.f32	s16, s0, s13
 801235a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801235e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8012498 <__ieee754_acosf+0x1e8>
 8012362:	ee30 0a48 	vsub.f32	s0, s0, s16
 8012366:	e7b4      	b.n	80122d2 <__ieee754_acosf+0x22>
 8012368:	2b00      	cmp	r3, #0
 801236a:	eddf da40 	vldr	s27, [pc, #256]	; 801246c <__ieee754_acosf+0x1bc>
 801236e:	eddf ca40 	vldr	s25, [pc, #256]	; 8012470 <__ieee754_acosf+0x1c0>
 8012372:	ed9f ca42 	vldr	s24, [pc, #264]	; 801247c <__ieee754_acosf+0x1cc>
 8012376:	eddf ba42 	vldr	s23, [pc, #264]	; 8012480 <__ieee754_acosf+0x1d0>
 801237a:	ed9f ba42 	vldr	s22, [pc, #264]	; 8012484 <__ieee754_acosf+0x1d4>
 801237e:	eddf 8a42 	vldr	s17, [pc, #264]	; 8012488 <__ieee754_acosf+0x1d8>
 8012382:	ed9f da42 	vldr	s26, [pc, #264]	; 801248c <__ieee754_acosf+0x1dc>
 8012386:	eddf aa3b 	vldr	s21, [pc, #236]	; 8012474 <__ieee754_acosf+0x1c4>
 801238a:	ed9f aa41 	vldr	s20, [pc, #260]	; 8012490 <__ieee754_acosf+0x1e0>
 801238e:	eddf 9a41 	vldr	s19, [pc, #260]	; 8012494 <__ieee754_acosf+0x1e4>
 8012392:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012396:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801239a:	da28      	bge.n	80123ee <__ieee754_acosf+0x13e>
 801239c:	ee30 0a09 	vadd.f32	s0, s0, s18
 80123a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80123a4:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80123a8:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80123ac:	eeac ca80 	vfma.f32	s24, s25, s0
 80123b0:	eeaa aa80 	vfma.f32	s20, s21, s0
 80123b4:	eeec ba00 	vfma.f32	s23, s24, s0
 80123b8:	eeea 9a00 	vfma.f32	s19, s20, s0
 80123bc:	eeab ba80 	vfma.f32	s22, s23, s0
 80123c0:	eea9 9a80 	vfma.f32	s18, s19, s0
 80123c4:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80123c8:	ee68 8a80 	vmul.f32	s17, s17, s0
 80123cc:	f000 fc74 	bl	8012cb8 <__ieee754_sqrtf>
 80123d0:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80123d4:	eddf 7a31 	vldr	s15, [pc, #196]	; 801249c <__ieee754_acosf+0x1ec>
 80123d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80123dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80123e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80123e4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80124a0 <__ieee754_acosf+0x1f0>
 80123e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80123ec:	e771      	b.n	80122d2 <__ieee754_acosf+0x22>
 80123ee:	ee39 8a40 	vsub.f32	s16, s18, s0
 80123f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80123f6:	eeb0 0a48 	vmov.f32	s0, s16
 80123fa:	f000 fc5d 	bl	8012cb8 <__ieee754_sqrtf>
 80123fe:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8012402:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8012406:	eeac ca88 	vfma.f32	s24, s25, s16
 801240a:	eeaa aa88 	vfma.f32	s20, s21, s16
 801240e:	eeec ba08 	vfma.f32	s23, s24, s16
 8012412:	ee10 3a10 	vmov	r3, s0
 8012416:	eeab ba88 	vfma.f32	s22, s23, s16
 801241a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801241e:	f023 030f 	bic.w	r3, r3, #15
 8012422:	eeea 9a08 	vfma.f32	s19, s20, s16
 8012426:	ee07 3a90 	vmov	s15, r3
 801242a:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801242e:	eeb0 6a48 	vmov.f32	s12, s16
 8012432:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8012436:	eea9 9a88 	vfma.f32	s18, s19, s16
 801243a:	ee70 6a27 	vadd.f32	s13, s0, s15
 801243e:	ee68 8a88 	vmul.f32	s17, s17, s16
 8012442:	eeb0 7a40 	vmov.f32	s14, s0
 8012446:	ee86 0a26 	vdiv.f32	s0, s12, s13
 801244a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801244e:	eea7 0a26 	vfma.f32	s0, s14, s13
 8012452:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012456:	ee30 0a00 	vadd.f32	s0, s0, s0
 801245a:	e73a      	b.n	80122d2 <__ieee754_acosf+0x22>
 801245c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80124a4 <__ieee754_acosf+0x1f4>
 8012460:	e737      	b.n	80122d2 <__ieee754_acosf+0x22>
 8012462:	bf00      	nop
 8012464:	00000000 	.word	0x00000000
 8012468:	40490fdb 	.word	0x40490fdb
 801246c:	3811ef08 	.word	0x3811ef08
 8012470:	3a4f7f04 	.word	0x3a4f7f04
 8012474:	bf303361 	.word	0xbf303361
 8012478:	33a22168 	.word	0x33a22168
 801247c:	bd241146 	.word	0xbd241146
 8012480:	3e4e0aa8 	.word	0x3e4e0aa8
 8012484:	bea6b090 	.word	0xbea6b090
 8012488:	3e2aaaab 	.word	0x3e2aaaab
 801248c:	3d9dc62e 	.word	0x3d9dc62e
 8012490:	4001572d 	.word	0x4001572d
 8012494:	c019d139 	.word	0xc019d139
 8012498:	3fc90fda 	.word	0x3fc90fda
 801249c:	b3a22168 	.word	0xb3a22168
 80124a0:	40490fda 	.word	0x40490fda
 80124a4:	3fc90fdb 	.word	0x3fc90fdb

080124a8 <__ieee754_acoshf>:
 80124a8:	b508      	push	{r3, lr}
 80124aa:	ee10 3a10 	vmov	r3, s0
 80124ae:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80124b2:	ed2d 8b04 	vpush	{d8-d9}
 80124b6:	eeb0 8a40 	vmov.f32	s16, s0
 80124ba:	da06      	bge.n	80124ca <__ieee754_acoshf+0x22>
 80124bc:	ee30 8a40 	vsub.f32	s16, s0, s0
 80124c0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80124c4:	ecbd 8b04 	vpop	{d8-d9}
 80124c8:	bd08      	pop	{r3, pc}
 80124ca:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 80124ce:	db0c      	blt.n	80124ea <__ieee754_acoshf+0x42>
 80124d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80124d4:	db02      	blt.n	80124dc <__ieee754_acoshf+0x34>
 80124d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80124da:	e7f3      	b.n	80124c4 <__ieee754_acoshf+0x1c>
 80124dc:	f7ff f8be 	bl	801165c <logf>
 80124e0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8012548 <__ieee754_acoshf+0xa0>
 80124e4:	ee30 0a08 	vadd.f32	s0, s0, s16
 80124e8:	e7ec      	b.n	80124c4 <__ieee754_acoshf+0x1c>
 80124ea:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80124ee:	d028      	beq.n	8012542 <__ieee754_acoshf+0x9a>
 80124f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124f4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80124f8:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80124fc:	dd11      	ble.n	8012522 <__ieee754_acoshf+0x7a>
 80124fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012502:	eea8 0a08 	vfma.f32	s0, s16, s16
 8012506:	f000 fbd7 	bl	8012cb8 <__ieee754_sqrtf>
 801250a:	ee70 7a08 	vadd.f32	s15, s0, s16
 801250e:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8012512:	ee98 0a28 	vfnms.f32	s0, s16, s17
 8012516:	ecbd 8b04 	vpop	{d8-d9}
 801251a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801251e:	f7ff b89d 	b.w	801165c <logf>
 8012522:	ee30 8a49 	vsub.f32	s16, s0, s18
 8012526:	ee28 0a08 	vmul.f32	s0, s16, s16
 801252a:	eea8 0a28 	vfma.f32	s0, s16, s17
 801252e:	f000 fbc3 	bl	8012cb8 <__ieee754_sqrtf>
 8012532:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012536:	ecbd 8b04 	vpop	{d8-d9}
 801253a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801253e:	f7ff b8f5 	b.w	801172c <log1pf>
 8012542:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801254c <__ieee754_acoshf+0xa4>
 8012546:	e7bd      	b.n	80124c4 <__ieee754_acoshf+0x1c>
 8012548:	3f317218 	.word	0x3f317218
 801254c:	00000000 	.word	0x00000000

08012550 <__ieee754_asinf>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	ee10 5a10 	vmov	r5, s0
 8012556:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801255a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801255e:	ed2d 8b04 	vpush	{d8-d9}
 8012562:	d10c      	bne.n	801257e <__ieee754_asinf+0x2e>
 8012564:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80126e0 <__ieee754_asinf+0x190>
 8012568:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80126e4 <__ieee754_asinf+0x194>
 801256c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012570:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012574:	eeb0 0a67 	vmov.f32	s0, s15
 8012578:	ecbd 8b04 	vpop	{d8-d9}
 801257c:	bd38      	pop	{r3, r4, r5, pc}
 801257e:	dd04      	ble.n	801258a <__ieee754_asinf+0x3a>
 8012580:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012584:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012588:	e7f6      	b.n	8012578 <__ieee754_asinf+0x28>
 801258a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801258e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012592:	da0b      	bge.n	80125ac <__ieee754_asinf+0x5c>
 8012594:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012598:	da52      	bge.n	8012640 <__ieee754_asinf+0xf0>
 801259a:	eddf 7a53 	vldr	s15, [pc, #332]	; 80126e8 <__ieee754_asinf+0x198>
 801259e:	ee70 7a27 	vadd.f32	s15, s0, s15
 80125a2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	dce5      	bgt.n	8012578 <__ieee754_asinf+0x28>
 80125ac:	f7ff f80c 	bl	80115c8 <fabsf>
 80125b0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80125b4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80125b8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80125bc:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80126ec <__ieee754_asinf+0x19c>
 80125c0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80126f0 <__ieee754_asinf+0x1a0>
 80125c4:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80126f4 <__ieee754_asinf+0x1a4>
 80125c8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80125cc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80126f8 <__ieee754_asinf+0x1a8>
 80125d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80125d4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80126fc <__ieee754_asinf+0x1ac>
 80125d8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80125dc:	eddf 7a48 	vldr	s15, [pc, #288]	; 8012700 <__ieee754_asinf+0x1b0>
 80125e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80125e4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012704 <__ieee754_asinf+0x1b4>
 80125e8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80125ec:	eddf 7a46 	vldr	s15, [pc, #280]	; 8012708 <__ieee754_asinf+0x1b8>
 80125f0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80125f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801270c <__ieee754_asinf+0x1bc>
 80125f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80125fc:	eddf 7a44 	vldr	s15, [pc, #272]	; 8012710 <__ieee754_asinf+0x1c0>
 8012600:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012604:	eeb0 0a48 	vmov.f32	s0, s16
 8012608:	eee7 8a88 	vfma.f32	s17, s15, s16
 801260c:	f000 fb54 	bl	8012cb8 <__ieee754_sqrtf>
 8012610:	4b40      	ldr	r3, [pc, #256]	; (8012714 <__ieee754_asinf+0x1c4>)
 8012612:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012616:	429c      	cmp	r4, r3
 8012618:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801261c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8012620:	dd3d      	ble.n	801269e <__ieee754_asinf+0x14e>
 8012622:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012626:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8012718 <__ieee754_asinf+0x1c8>
 801262a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801262e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80126e4 <__ieee754_asinf+0x194>
 8012632:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012636:	2d00      	cmp	r5, #0
 8012638:	bfd8      	it	le
 801263a:	eeb1 0a40 	vnegle.f32	s0, s0
 801263e:	e79b      	b.n	8012578 <__ieee754_asinf+0x28>
 8012640:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012644:	eddf 6a29 	vldr	s13, [pc, #164]	; 80126ec <__ieee754_asinf+0x19c>
 8012648:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80126f0 <__ieee754_asinf+0x1a0>
 801264c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8012704 <__ieee754_asinf+0x1b4>
 8012650:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012654:	eddf 6a28 	vldr	s13, [pc, #160]	; 80126f8 <__ieee754_asinf+0x1a8>
 8012658:	eee7 6a27 	vfma.f32	s13, s14, s15
 801265c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80126fc <__ieee754_asinf+0x1ac>
 8012660:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012664:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012700 <__ieee754_asinf+0x1b0>
 8012668:	eee7 6a27 	vfma.f32	s13, s14, s15
 801266c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80126f4 <__ieee754_asinf+0x1a4>
 8012670:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012674:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012708 <__ieee754_asinf+0x1b8>
 8012678:	eee7 6a86 	vfma.f32	s13, s15, s12
 801267c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 801270c <__ieee754_asinf+0x1bc>
 8012680:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012684:	eddf 6a22 	vldr	s13, [pc, #136]	; 8012710 <__ieee754_asinf+0x1c0>
 8012688:	eee6 6a27 	vfma.f32	s13, s12, s15
 801268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012690:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012694:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012698:	eea0 0a27 	vfma.f32	s0, s0, s15
 801269c:	e76c      	b.n	8012578 <__ieee754_asinf+0x28>
 801269e:	ee10 3a10 	vmov	r3, s0
 80126a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80126a6:	f023 030f 	bic.w	r3, r3, #15
 80126aa:	ee07 3a90 	vmov	s15, r3
 80126ae:	eef1 6a67 	vneg.f32	s13, s15
 80126b2:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80126b6:	ee70 5a00 	vadd.f32	s11, s0, s0
 80126ba:	ee37 0a80 	vadd.f32	s0, s15, s0
 80126be:	eddf 7a08 	vldr	s15, [pc, #32]	; 80126e0 <__ieee754_asinf+0x190>
 80126c2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80126c6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 801271c <__ieee754_asinf+0x1cc>
 80126ca:	eee5 7a47 	vfms.f32	s15, s10, s14
 80126ce:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80126d2:	eeb0 6a40 	vmov.f32	s12, s0
 80126d6:	eea6 6a87 	vfma.f32	s12, s13, s14
 80126da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80126de:	e7a8      	b.n	8012632 <__ieee754_asinf+0xe2>
 80126e0:	b33bbd2e 	.word	0xb33bbd2e
 80126e4:	3fc90fdb 	.word	0x3fc90fdb
 80126e8:	7149f2ca 	.word	0x7149f2ca
 80126ec:	3811ef08 	.word	0x3811ef08
 80126f0:	3a4f7f04 	.word	0x3a4f7f04
 80126f4:	3e2aaaab 	.word	0x3e2aaaab
 80126f8:	bd241146 	.word	0xbd241146
 80126fc:	3e4e0aa8 	.word	0x3e4e0aa8
 8012700:	bea6b090 	.word	0xbea6b090
 8012704:	3d9dc62e 	.word	0x3d9dc62e
 8012708:	bf303361 	.word	0xbf303361
 801270c:	4001572d 	.word	0x4001572d
 8012710:	c019d139 	.word	0xc019d139
 8012714:	3f799999 	.word	0x3f799999
 8012718:	333bbd2e 	.word	0x333bbd2e
 801271c:	3f490fdb 	.word	0x3f490fdb

08012720 <__ieee754_atanhf>:
 8012720:	b510      	push	{r4, lr}
 8012722:	ee10 4a10 	vmov	r4, s0
 8012726:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801272a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801272e:	ed2d 8b02 	vpush	{d8}
 8012732:	dd06      	ble.n	8012742 <__ieee754_atanhf+0x22>
 8012734:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012738:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801273c:	ecbd 8b02 	vpop	{d8}
 8012740:	bd10      	pop	{r4, pc}
 8012742:	d104      	bne.n	801274e <__ieee754_atanhf+0x2e>
 8012744:	eddf 7a17 	vldr	s15, [pc, #92]	; 80127a4 <__ieee754_atanhf+0x84>
 8012748:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801274c:	e7f6      	b.n	801273c <__ieee754_atanhf+0x1c>
 801274e:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8012752:	da08      	bge.n	8012766 <__ieee754_atanhf+0x46>
 8012754:	eddf 7a14 	vldr	s15, [pc, #80]	; 80127a8 <__ieee754_atanhf+0x88>
 8012758:	ee70 7a27 	vadd.f32	s15, s0, s15
 801275c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012764:	dcea      	bgt.n	801273c <__ieee754_atanhf+0x1c>
 8012766:	ee07 3a90 	vmov	s15, r3
 801276a:	ee37 0aa7 	vadd.f32	s0, s15, s15
 801276e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012776:	ee37 7a67 	vsub.f32	s14, s14, s15
 801277a:	bfb6      	itet	lt
 801277c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012780:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8012784:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8012788:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801278c:	bfb8      	it	lt
 801278e:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 8012792:	f7fe ffcb 	bl	801172c <log1pf>
 8012796:	ee20 0a08 	vmul.f32	s0, s0, s16
 801279a:	2c00      	cmp	r4, #0
 801279c:	bfb8      	it	lt
 801279e:	eeb1 0a40 	vneglt.f32	s0, s0
 80127a2:	e7cb      	b.n	801273c <__ieee754_atanhf+0x1c>
 80127a4:	00000000 	.word	0x00000000
 80127a8:	7149f2ca 	.word	0x7149f2ca

080127ac <__ieee754_coshf>:
 80127ac:	b510      	push	{r4, lr}
 80127ae:	ee10 4a10 	vmov	r4, s0
 80127b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80127b6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80127ba:	ed2d 8b02 	vpush	{d8}
 80127be:	db04      	blt.n	80127ca <__ieee754_coshf+0x1e>
 80127c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80127c4:	ecbd 8b02 	vpop	{d8}
 80127c8:	bd10      	pop	{r4, pc}
 80127ca:	4b25      	ldr	r3, [pc, #148]	; (8012860 <__ieee754_coshf+0xb4>)
 80127cc:	429c      	cmp	r4, r3
 80127ce:	dc15      	bgt.n	80127fc <__ieee754_coshf+0x50>
 80127d0:	f7fe fefa 	bl	80115c8 <fabsf>
 80127d4:	f000 fed8 	bl	8013588 <expm1f>
 80127d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127dc:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 80127e0:	eef0 7a40 	vmov.f32	s15, s0
 80127e4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80127e8:	dbec      	blt.n	80127c4 <__ieee754_coshf+0x18>
 80127ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80127f2:	eec7 6a80 	vdiv.f32	s13, s15, s0
 80127f6:	ee36 0a87 	vadd.f32	s0, s13, s14
 80127fa:	e7e3      	b.n	80127c4 <__ieee754_coshf+0x18>
 80127fc:	4b19      	ldr	r3, [pc, #100]	; (8012864 <__ieee754_coshf+0xb8>)
 80127fe:	429c      	cmp	r4, r3
 8012800:	dc0c      	bgt.n	801281c <__ieee754_coshf+0x70>
 8012802:	f7fe fee1 	bl	80115c8 <fabsf>
 8012806:	f7fe fe61 	bl	80114cc <expf>
 801280a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801280e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012812:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012816:	eeb0 0a67 	vmov.f32	s0, s15
 801281a:	e7d3      	b.n	80127c4 <__ieee754_coshf+0x18>
 801281c:	4b12      	ldr	r3, [pc, #72]	; (8012868 <__ieee754_coshf+0xbc>)
 801281e:	429c      	cmp	r4, r3
 8012820:	dc08      	bgt.n	8012834 <__ieee754_coshf+0x88>
 8012822:	f7fe fed1 	bl	80115c8 <fabsf>
 8012826:	f7fe fe51 	bl	80114cc <expf>
 801282a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801282e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012832:	e7c7      	b.n	80127c4 <__ieee754_coshf+0x18>
 8012834:	4b0d      	ldr	r3, [pc, #52]	; (801286c <__ieee754_coshf+0xc0>)
 8012836:	429c      	cmp	r4, r3
 8012838:	dc0c      	bgt.n	8012854 <__ieee754_coshf+0xa8>
 801283a:	f7fe fec5 	bl	80115c8 <fabsf>
 801283e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012842:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012846:	f7fe fe41 	bl	80114cc <expf>
 801284a:	ee20 8a08 	vmul.f32	s16, s0, s16
 801284e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012852:	e7b7      	b.n	80127c4 <__ieee754_coshf+0x18>
 8012854:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8012870 <__ieee754_coshf+0xc4>
 8012858:	ee20 0a00 	vmul.f32	s0, s0, s0
 801285c:	e7b2      	b.n	80127c4 <__ieee754_coshf+0x18>
 801285e:	bf00      	nop
 8012860:	3eb17217 	.word	0x3eb17217
 8012864:	41afffff 	.word	0x41afffff
 8012868:	42b17217 	.word	0x42b17217
 801286c:	42b2d4fc 	.word	0x42b2d4fc
 8012870:	7149f2ca 	.word	0x7149f2ca

08012874 <__ieee754_fmodf>:
 8012874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012876:	ee10 6a90 	vmov	r6, s1
 801287a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801287e:	ee10 3a10 	vmov	r3, s0
 8012882:	d009      	beq.n	8012898 <__ieee754_fmodf+0x24>
 8012884:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012888:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801288c:	ee10 7a10 	vmov	r7, s0
 8012890:	da02      	bge.n	8012898 <__ieee754_fmodf+0x24>
 8012892:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012896:	dd0a      	ble.n	80128ae <__ieee754_fmodf+0x3a>
 8012898:	ee07 3a90 	vmov	s15, r3
 801289c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80128a0:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 80128a4:	ee17 3a90 	vmov	r3, s15
 80128a8:	ee00 3a10 	vmov	s0, r3
 80128ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128ae:	42a9      	cmp	r1, r5
 80128b0:	dbfa      	blt.n	80128a8 <__ieee754_fmodf+0x34>
 80128b2:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 80128b6:	d105      	bne.n	80128c4 <__ieee754_fmodf+0x50>
 80128b8:	4a30      	ldr	r2, [pc, #192]	; (801297c <__ieee754_fmodf+0x108>)
 80128ba:	0fe3      	lsrs	r3, r4, #31
 80128bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	e7f1      	b.n	80128a8 <__ieee754_fmodf+0x34>
 80128c4:	4b2e      	ldr	r3, [pc, #184]	; (8012980 <__ieee754_fmodf+0x10c>)
 80128c6:	4299      	cmp	r1, r3
 80128c8:	dc3e      	bgt.n	8012948 <__ieee754_fmodf+0xd4>
 80128ca:	020a      	lsls	r2, r1, #8
 80128cc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80128d0:	2a00      	cmp	r2, #0
 80128d2:	dc36      	bgt.n	8012942 <__ieee754_fmodf+0xce>
 80128d4:	429d      	cmp	r5, r3
 80128d6:	dc3a      	bgt.n	801294e <__ieee754_fmodf+0xda>
 80128d8:	022b      	lsls	r3, r5, #8
 80128da:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80128de:	005b      	lsls	r3, r3, #1
 80128e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80128e4:	d5fb      	bpl.n	80128de <__ieee754_fmodf+0x6a>
 80128e6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80128ea:	bfbb      	ittet	lt
 80128ec:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80128f0:	1a1b      	sublt	r3, r3, r0
 80128f2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80128f6:	4099      	lsllt	r1, r3
 80128f8:	bfa8      	it	ge
 80128fa:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80128fe:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8012902:	bfb5      	itete	lt
 8012904:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8012908:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 801290c:	1a9b      	sublt	r3, r3, r2
 801290e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8012912:	bfb8      	it	lt
 8012914:	409d      	lsllt	r5, r3
 8012916:	1a80      	subs	r0, r0, r2
 8012918:	1b4b      	subs	r3, r1, r5
 801291a:	b9d8      	cbnz	r0, 8012954 <__ieee754_fmodf+0xe0>
 801291c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012920:	bf28      	it	cs
 8012922:	460b      	movcs	r3, r1
 8012924:	2b00      	cmp	r3, #0
 8012926:	d0c7      	beq.n	80128b8 <__ieee754_fmodf+0x44>
 8012928:	4915      	ldr	r1, [pc, #84]	; (8012980 <__ieee754_fmodf+0x10c>)
 801292a:	428b      	cmp	r3, r1
 801292c:	dd1a      	ble.n	8012964 <__ieee754_fmodf+0xf0>
 801292e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8012932:	db1a      	blt.n	801296a <__ieee754_fmodf+0xf6>
 8012934:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012938:	4323      	orrs	r3, r4
 801293a:	327f      	adds	r2, #127	; 0x7f
 801293c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012940:	e7b2      	b.n	80128a8 <__ieee754_fmodf+0x34>
 8012942:	3801      	subs	r0, #1
 8012944:	0052      	lsls	r2, r2, #1
 8012946:	e7c3      	b.n	80128d0 <__ieee754_fmodf+0x5c>
 8012948:	15c8      	asrs	r0, r1, #23
 801294a:	387f      	subs	r0, #127	; 0x7f
 801294c:	e7c2      	b.n	80128d4 <__ieee754_fmodf+0x60>
 801294e:	15ea      	asrs	r2, r5, #23
 8012950:	3a7f      	subs	r2, #127	; 0x7f
 8012952:	e7c8      	b.n	80128e6 <__ieee754_fmodf+0x72>
 8012954:	2b00      	cmp	r3, #0
 8012956:	da02      	bge.n	801295e <__ieee754_fmodf+0xea>
 8012958:	0049      	lsls	r1, r1, #1
 801295a:	3801      	subs	r0, #1
 801295c:	e7dc      	b.n	8012918 <__ieee754_fmodf+0xa4>
 801295e:	d0ab      	beq.n	80128b8 <__ieee754_fmodf+0x44>
 8012960:	0059      	lsls	r1, r3, #1
 8012962:	e7fa      	b.n	801295a <__ieee754_fmodf+0xe6>
 8012964:	005b      	lsls	r3, r3, #1
 8012966:	3a01      	subs	r2, #1
 8012968:	e7df      	b.n	801292a <__ieee754_fmodf+0xb6>
 801296a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801296e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012972:	3282      	adds	r2, #130	; 0x82
 8012974:	4113      	asrs	r3, r2
 8012976:	4323      	orrs	r3, r4
 8012978:	e796      	b.n	80128a8 <__ieee754_fmodf+0x34>
 801297a:	bf00      	nop
 801297c:	08015568 	.word	0x08015568
 8012980:	007fffff 	.word	0x007fffff

08012984 <__ieee754_rem_pio2f>:
 8012984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012986:	ee10 6a10 	vmov	r6, s0
 801298a:	4b86      	ldr	r3, [pc, #536]	; (8012ba4 <__ieee754_rem_pio2f+0x220>)
 801298c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8012990:	429c      	cmp	r4, r3
 8012992:	b087      	sub	sp, #28
 8012994:	4605      	mov	r5, r0
 8012996:	dc05      	bgt.n	80129a4 <__ieee754_rem_pio2f+0x20>
 8012998:	2300      	movs	r3, #0
 801299a:	ed85 0a00 	vstr	s0, [r5]
 801299e:	6043      	str	r3, [r0, #4]
 80129a0:	2000      	movs	r0, #0
 80129a2:	e020      	b.n	80129e6 <__ieee754_rem_pio2f+0x62>
 80129a4:	4b80      	ldr	r3, [pc, #512]	; (8012ba8 <__ieee754_rem_pio2f+0x224>)
 80129a6:	429c      	cmp	r4, r3
 80129a8:	dc38      	bgt.n	8012a1c <__ieee754_rem_pio2f+0x98>
 80129aa:	2e00      	cmp	r6, #0
 80129ac:	f024 040f 	bic.w	r4, r4, #15
 80129b0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8012bac <__ieee754_rem_pio2f+0x228>
 80129b4:	4b7e      	ldr	r3, [pc, #504]	; (8012bb0 <__ieee754_rem_pio2f+0x22c>)
 80129b6:	dd18      	ble.n	80129ea <__ieee754_rem_pio2f+0x66>
 80129b8:	429c      	cmp	r4, r3
 80129ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 80129be:	bf09      	itett	eq
 80129c0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8012bb4 <__ieee754_rem_pio2f+0x230>
 80129c4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8012bb8 <__ieee754_rem_pio2f+0x234>
 80129c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80129cc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8012bbc <__ieee754_rem_pio2f+0x238>
 80129d0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80129d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80129d8:	edc0 6a00 	vstr	s13, [r0]
 80129dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80129e4:	2001      	movs	r0, #1
 80129e6:	b007      	add	sp, #28
 80129e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ea:	429c      	cmp	r4, r3
 80129ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 80129f0:	bf09      	itett	eq
 80129f2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8012bb4 <__ieee754_rem_pio2f+0x230>
 80129f6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8012bb8 <__ieee754_rem_pio2f+0x234>
 80129fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80129fe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8012bbc <__ieee754_rem_pio2f+0x238>
 8012a02:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012a06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a0a:	edc0 6a00 	vstr	s13, [r0]
 8012a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a12:	edc0 7a01 	vstr	s15, [r0, #4]
 8012a16:	f04f 30ff 	mov.w	r0, #4294967295
 8012a1a:	e7e4      	b.n	80129e6 <__ieee754_rem_pio2f+0x62>
 8012a1c:	4b68      	ldr	r3, [pc, #416]	; (8012bc0 <__ieee754_rem_pio2f+0x23c>)
 8012a1e:	429c      	cmp	r4, r3
 8012a20:	dc71      	bgt.n	8012b06 <__ieee754_rem_pio2f+0x182>
 8012a22:	f7fe fdd1 	bl	80115c8 <fabsf>
 8012a26:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8012bc4 <__ieee754_rem_pio2f+0x240>
 8012a2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012a2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a36:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8012a3a:	ee17 0a90 	vmov	r0, s15
 8012a3e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8012bac <__ieee754_rem_pio2f+0x228>
 8012a42:	eeb1 7a46 	vneg.f32	s14, s12
 8012a46:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012a4a:	281f      	cmp	r0, #31
 8012a4c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8012bb8 <__ieee754_rem_pio2f+0x234>
 8012a50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012a54:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012a58:	ee16 3a90 	vmov	r3, s13
 8012a5c:	dc1c      	bgt.n	8012a98 <__ieee754_rem_pio2f+0x114>
 8012a5e:	1e47      	subs	r7, r0, #1
 8012a60:	4959      	ldr	r1, [pc, #356]	; (8012bc8 <__ieee754_rem_pio2f+0x244>)
 8012a62:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8012a66:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8012a6a:	428a      	cmp	r2, r1
 8012a6c:	d014      	beq.n	8012a98 <__ieee754_rem_pio2f+0x114>
 8012a6e:	602b      	str	r3, [r5, #0]
 8012a70:	ed95 7a00 	vldr	s14, [r5]
 8012a74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012a78:	2e00      	cmp	r6, #0
 8012a7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a7e:	ed85 0a01 	vstr	s0, [r5, #4]
 8012a82:	dab0      	bge.n	80129e6 <__ieee754_rem_pio2f+0x62>
 8012a84:	eeb1 7a47 	vneg.f32	s14, s14
 8012a88:	eeb1 0a40 	vneg.f32	s0, s0
 8012a8c:	ed85 7a00 	vstr	s14, [r5]
 8012a90:	ed85 0a01 	vstr	s0, [r5, #4]
 8012a94:	4240      	negs	r0, r0
 8012a96:	e7a6      	b.n	80129e6 <__ieee754_rem_pio2f+0x62>
 8012a98:	15e4      	asrs	r4, r4, #23
 8012a9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012a9e:	1aa2      	subs	r2, r4, r2
 8012aa0:	2a08      	cmp	r2, #8
 8012aa2:	dde4      	ble.n	8012a6e <__ieee754_rem_pio2f+0xea>
 8012aa4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012bb4 <__ieee754_rem_pio2f+0x230>
 8012aa8:	eef0 6a40 	vmov.f32	s13, s0
 8012aac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012ab0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8012ab4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012ab8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012bbc <__ieee754_rem_pio2f+0x238>
 8012abc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8012ac0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8012ac4:	eef0 7a40 	vmov.f32	s15, s0
 8012ac8:	ee15 3a90 	vmov	r3, s11
 8012acc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012ad0:	1aa4      	subs	r4, r4, r2
 8012ad2:	2c19      	cmp	r4, #25
 8012ad4:	dc04      	bgt.n	8012ae0 <__ieee754_rem_pio2f+0x15c>
 8012ad6:	edc5 5a00 	vstr	s11, [r5]
 8012ada:	eeb0 0a66 	vmov.f32	s0, s13
 8012ade:	e7c7      	b.n	8012a70 <__ieee754_rem_pio2f+0xec>
 8012ae0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8012bcc <__ieee754_rem_pio2f+0x248>
 8012ae4:	eeb0 0a66 	vmov.f32	s0, s13
 8012ae8:	eea7 0a25 	vfma.f32	s0, s14, s11
 8012aec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012af0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012af4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012bd0 <__ieee754_rem_pio2f+0x24c>
 8012af8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8012afc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012b00:	ed85 7a00 	vstr	s14, [r5]
 8012b04:	e7b4      	b.n	8012a70 <__ieee754_rem_pio2f+0xec>
 8012b06:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012b0a:	db06      	blt.n	8012b1a <__ieee754_rem_pio2f+0x196>
 8012b0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b10:	edc0 7a01 	vstr	s15, [r0, #4]
 8012b14:	edc0 7a00 	vstr	s15, [r0]
 8012b18:	e742      	b.n	80129a0 <__ieee754_rem_pio2f+0x1c>
 8012b1a:	15e2      	asrs	r2, r4, #23
 8012b1c:	3a86      	subs	r2, #134	; 0x86
 8012b1e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8012b22:	ee07 3a90 	vmov	s15, r3
 8012b26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012b2a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8012bd4 <__ieee754_rem_pio2f+0x250>
 8012b2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b36:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012b42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b4a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012b4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	edcd 7a05 	vstr	s15, [sp, #20]
 8012b5e:	d11e      	bne.n	8012b9e <__ieee754_rem_pio2f+0x21a>
 8012b60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b68:	bf0c      	ite	eq
 8012b6a:	2301      	moveq	r3, #1
 8012b6c:	2302      	movne	r3, #2
 8012b6e:	491a      	ldr	r1, [pc, #104]	; (8012bd8 <__ieee754_rem_pio2f+0x254>)
 8012b70:	9101      	str	r1, [sp, #4]
 8012b72:	2102      	movs	r1, #2
 8012b74:	9100      	str	r1, [sp, #0]
 8012b76:	a803      	add	r0, sp, #12
 8012b78:	4629      	mov	r1, r5
 8012b7a:	f000 f8ff 	bl	8012d7c <__kernel_rem_pio2f>
 8012b7e:	2e00      	cmp	r6, #0
 8012b80:	f6bf af31 	bge.w	80129e6 <__ieee754_rem_pio2f+0x62>
 8012b84:	edd5 7a00 	vldr	s15, [r5]
 8012b88:	eef1 7a67 	vneg.f32	s15, s15
 8012b8c:	edc5 7a00 	vstr	s15, [r5]
 8012b90:	edd5 7a01 	vldr	s15, [r5, #4]
 8012b94:	eef1 7a67 	vneg.f32	s15, s15
 8012b98:	edc5 7a01 	vstr	s15, [r5, #4]
 8012b9c:	e77a      	b.n	8012a94 <__ieee754_rem_pio2f+0x110>
 8012b9e:	2303      	movs	r3, #3
 8012ba0:	e7e5      	b.n	8012b6e <__ieee754_rem_pio2f+0x1ea>
 8012ba2:	bf00      	nop
 8012ba4:	3f490fd8 	.word	0x3f490fd8
 8012ba8:	4016cbe3 	.word	0x4016cbe3
 8012bac:	3fc90f80 	.word	0x3fc90f80
 8012bb0:	3fc90fd0 	.word	0x3fc90fd0
 8012bb4:	37354400 	.word	0x37354400
 8012bb8:	37354443 	.word	0x37354443
 8012bbc:	2e85a308 	.word	0x2e85a308
 8012bc0:	43490f80 	.word	0x43490f80
 8012bc4:	3f22f984 	.word	0x3f22f984
 8012bc8:	08015570 	.word	0x08015570
 8012bcc:	2e85a300 	.word	0x2e85a300
 8012bd0:	248d3132 	.word	0x248d3132
 8012bd4:	43800000 	.word	0x43800000
 8012bd8:	080155f0 	.word	0x080155f0

08012bdc <__ieee754_sinhf>:
 8012bdc:	b510      	push	{r4, lr}
 8012bde:	ee10 3a10 	vmov	r3, s0
 8012be2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012be6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012bea:	ed2d 8b02 	vpush	{d8}
 8012bee:	eef0 7a40 	vmov.f32	s15, s0
 8012bf2:	db06      	blt.n	8012c02 <__ieee754_sinhf+0x26>
 8012bf4:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012bf8:	ecbd 8b02 	vpop	{d8}
 8012bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8012c00:	bd10      	pop	{r4, pc}
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	4b28      	ldr	r3, [pc, #160]	; (8012ca8 <__ieee754_sinhf+0xcc>)
 8012c06:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8012c0a:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8012c0e:	fe28 8a88 	vselge.f32	s16, s17, s16
 8012c12:	429c      	cmp	r4, r3
 8012c14:	dc2a      	bgt.n	8012c6c <__ieee754_sinhf+0x90>
 8012c16:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8012c1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012c1e:	da08      	bge.n	8012c32 <__ieee754_sinhf+0x56>
 8012c20:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8012cac <__ieee754_sinhf+0xd0>
 8012c24:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012c28:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8012c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c30:	dce2      	bgt.n	8012bf8 <__ieee754_sinhf+0x1c>
 8012c32:	eeb0 0a67 	vmov.f32	s0, s15
 8012c36:	f7fe fcc7 	bl	80115c8 <fabsf>
 8012c3a:	f000 fca5 	bl	8013588 <expm1f>
 8012c3e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012c42:	bfbb      	ittet	lt
 8012c44:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8012c48:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8012c4c:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8012c50:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8012c54:	bfad      	iteet	ge
 8012c56:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8012c5a:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8012c5e:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8012c62:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8012c66:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012c6a:	e7c5      	b.n	8012bf8 <__ieee754_sinhf+0x1c>
 8012c6c:	4b10      	ldr	r3, [pc, #64]	; (8012cb0 <__ieee754_sinhf+0xd4>)
 8012c6e:	429c      	cmp	r4, r3
 8012c70:	dc06      	bgt.n	8012c80 <__ieee754_sinhf+0xa4>
 8012c72:	f7fe fca9 	bl	80115c8 <fabsf>
 8012c76:	f7fe fc29 	bl	80114cc <expf>
 8012c7a:	ee60 7a08 	vmul.f32	s15, s0, s16
 8012c7e:	e7bb      	b.n	8012bf8 <__ieee754_sinhf+0x1c>
 8012c80:	4b0c      	ldr	r3, [pc, #48]	; (8012cb4 <__ieee754_sinhf+0xd8>)
 8012c82:	429c      	cmp	r4, r3
 8012c84:	dc0a      	bgt.n	8012c9c <__ieee754_sinhf+0xc0>
 8012c86:	f7fe fc9f 	bl	80115c8 <fabsf>
 8012c8a:	ee20 0a28 	vmul.f32	s0, s0, s17
 8012c8e:	f7fe fc1d 	bl	80114cc <expf>
 8012c92:	ee68 7a00 	vmul.f32	s15, s16, s0
 8012c96:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012c9a:	e7ad      	b.n	8012bf8 <__ieee754_sinhf+0x1c>
 8012c9c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8012cac <__ieee754_sinhf+0xd0>
 8012ca0:	ee60 7a07 	vmul.f32	s15, s0, s14
 8012ca4:	e7a8      	b.n	8012bf8 <__ieee754_sinhf+0x1c>
 8012ca6:	bf00      	nop
 8012ca8:	41afffff 	.word	0x41afffff
 8012cac:	7cf0bdc2 	.word	0x7cf0bdc2
 8012cb0:	42b17217 	.word	0x42b17217
 8012cb4:	42b2d4fc 	.word	0x42b2d4fc

08012cb8 <__ieee754_sqrtf>:
 8012cb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012cbc:	4770      	bx	lr
	...

08012cc0 <__kernel_cosf>:
 8012cc0:	ee10 3a10 	vmov	r3, s0
 8012cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cc8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012cd0:	da05      	bge.n	8012cde <__kernel_cosf+0x1e>
 8012cd2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012cd6:	ee17 2a90 	vmov	r2, s15
 8012cda:	2a00      	cmp	r2, #0
 8012cdc:	d03b      	beq.n	8012d56 <__kernel_cosf+0x96>
 8012cde:	ee20 6a00 	vmul.f32	s12, s0, s0
 8012ce2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012d5c <__kernel_cosf+0x9c>
 8012cea:	4a1d      	ldr	r2, [pc, #116]	; (8012d60 <__kernel_cosf+0xa0>)
 8012cec:	ee66 7a07 	vmul.f32	s15, s12, s14
 8012cf0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012d64 <__kernel_cosf+0xa4>
 8012cf4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8012d68 <__kernel_cosf+0xa8>
 8012cfe:	eee7 5a06 	vfma.f32	s11, s14, s12
 8012d02:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012d6c <__kernel_cosf+0xac>
 8012d06:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012d0a:	eddf 5a19 	vldr	s11, [pc, #100]	; 8012d70 <__kernel_cosf+0xb0>
 8012d0e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8012d12:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8012d74 <__kernel_cosf+0xb4>
 8012d16:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012d1a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012d1e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012d22:	eee6 0a07 	vfma.f32	s1, s12, s14
 8012d26:	dc04      	bgt.n	8012d32 <__kernel_cosf+0x72>
 8012d28:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8012d2c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8012d30:	4770      	bx	lr
 8012d32:	4a11      	ldr	r2, [pc, #68]	; (8012d78 <__kernel_cosf+0xb8>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	bfda      	itte	le
 8012d38:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012d3c:	ee07 3a10 	vmovle	s14, r3
 8012d40:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8012d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d48:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8012d4c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012d54:	4770      	bx	lr
 8012d56:	eeb0 0a66 	vmov.f32	s0, s13
 8012d5a:	4770      	bx	lr
 8012d5c:	ad47d74e 	.word	0xad47d74e
 8012d60:	3e999999 	.word	0x3e999999
 8012d64:	310f74f6 	.word	0x310f74f6
 8012d68:	b493f27c 	.word	0xb493f27c
 8012d6c:	37d00d01 	.word	0x37d00d01
 8012d70:	bab60b61 	.word	0xbab60b61
 8012d74:	3d2aaaab 	.word	0x3d2aaaab
 8012d78:	3f480000 	.word	0x3f480000

08012d7c <__kernel_rem_pio2f>:
 8012d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d80:	ed2d 8b04 	vpush	{d8-d9}
 8012d84:	b0d7      	sub	sp, #348	; 0x15c
 8012d86:	469b      	mov	fp, r3
 8012d88:	460e      	mov	r6, r1
 8012d8a:	4bbe      	ldr	r3, [pc, #760]	; (8013084 <__kernel_rem_pio2f+0x308>)
 8012d8c:	9964      	ldr	r1, [sp, #400]	; 0x190
 8012d8e:	9002      	str	r0, [sp, #8]
 8012d90:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8012d94:	9865      	ldr	r0, [sp, #404]	; 0x194
 8012d96:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8013094 <__kernel_rem_pio2f+0x318>
 8012d9a:	1ed1      	subs	r1, r2, #3
 8012d9c:	2308      	movs	r3, #8
 8012d9e:	fb91 f1f3 	sdiv	r1, r1, r3
 8012da2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8012da6:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012daa:	1c4c      	adds	r4, r1, #1
 8012dac:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8012db0:	eba1 050a 	sub.w	r5, r1, sl
 8012db4:	aa1a      	add	r2, sp, #104	; 0x68
 8012db6:	eb09 070a 	add.w	r7, r9, sl
 8012dba:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8012dbe:	4696      	mov	lr, r2
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	42bb      	cmp	r3, r7
 8012dc4:	dd0f      	ble.n	8012de6 <__kernel_rem_pio2f+0x6a>
 8012dc6:	af42      	add	r7, sp, #264	; 0x108
 8012dc8:	2200      	movs	r2, #0
 8012dca:	454a      	cmp	r2, r9
 8012dcc:	dc27      	bgt.n	8012e1e <__kernel_rem_pio2f+0xa2>
 8012dce:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8012dd2:	eb0b 0302 	add.w	r3, fp, r2
 8012dd6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8012dda:	9d02      	ldr	r5, [sp, #8]
 8012ddc:	eddf 7aad 	vldr	s15, [pc, #692]	; 8013094 <__kernel_rem_pio2f+0x318>
 8012de0:	f04f 0c00 	mov.w	ip, #0
 8012de4:	e015      	b.n	8012e12 <__kernel_rem_pio2f+0x96>
 8012de6:	42dd      	cmn	r5, r3
 8012de8:	bf5d      	ittte	pl
 8012dea:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8012dee:	ee07 2a90 	vmovpl	s15, r2
 8012df2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012df6:	eef0 7a47 	vmovmi.f32	s15, s14
 8012dfa:	ecee 7a01 	vstmia	lr!, {s15}
 8012dfe:	3301      	adds	r3, #1
 8012e00:	e7df      	b.n	8012dc2 <__kernel_rem_pio2f+0x46>
 8012e02:	ecf5 6a01 	vldmia	r5!, {s13}
 8012e06:	ed33 7a01 	vldmdb	r3!, {s14}
 8012e0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012e0e:	f10c 0c01 	add.w	ip, ip, #1
 8012e12:	45d4      	cmp	ip, sl
 8012e14:	ddf5      	ble.n	8012e02 <__kernel_rem_pio2f+0x86>
 8012e16:	ece7 7a01 	vstmia	r7!, {s15}
 8012e1a:	3201      	adds	r2, #1
 8012e1c:	e7d5      	b.n	8012dca <__kernel_rem_pio2f+0x4e>
 8012e1e:	ab06      	add	r3, sp, #24
 8012e20:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012e24:	9304      	str	r3, [sp, #16]
 8012e26:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8013090 <__kernel_rem_pio2f+0x314>
 8012e2a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 801308c <__kernel_rem_pio2f+0x310>
 8012e2e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8012e32:	9303      	str	r3, [sp, #12]
 8012e34:	464d      	mov	r5, r9
 8012e36:	ab56      	add	r3, sp, #344	; 0x158
 8012e38:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8012e3c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8012e40:	3f01      	subs	r7, #1
 8012e42:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8012e46:	00bf      	lsls	r7, r7, #2
 8012e48:	ab56      	add	r3, sp, #344	; 0x158
 8012e4a:	19da      	adds	r2, r3, r7
 8012e4c:	3a4c      	subs	r2, #76	; 0x4c
 8012e4e:	2300      	movs	r3, #0
 8012e50:	1ae9      	subs	r1, r5, r3
 8012e52:	2900      	cmp	r1, #0
 8012e54:	dc4c      	bgt.n	8012ef0 <__kernel_rem_pio2f+0x174>
 8012e56:	4620      	mov	r0, r4
 8012e58:	f000 fcca 	bl	80137f0 <scalbnf>
 8012e5c:	eeb0 8a40 	vmov.f32	s16, s0
 8012e60:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012e64:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012e68:	f7fe fbb6 	bl	80115d8 <floorf>
 8012e6c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012e70:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012e74:	2c00      	cmp	r4, #0
 8012e76:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012e7a:	edcd 7a01 	vstr	s15, [sp, #4]
 8012e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e82:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012e86:	dd48      	ble.n	8012f1a <__kernel_rem_pio2f+0x19e>
 8012e88:	1e69      	subs	r1, r5, #1
 8012e8a:	ab06      	add	r3, sp, #24
 8012e8c:	f1c4 0008 	rsb	r0, r4, #8
 8012e90:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8012e94:	9a01      	ldr	r2, [sp, #4]
 8012e96:	fa4c f300 	asr.w	r3, ip, r0
 8012e9a:	441a      	add	r2, r3
 8012e9c:	4083      	lsls	r3, r0
 8012e9e:	9201      	str	r2, [sp, #4]
 8012ea0:	ebac 0203 	sub.w	r2, ip, r3
 8012ea4:	ab06      	add	r3, sp, #24
 8012ea6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8012eaa:	f1c4 0307 	rsb	r3, r4, #7
 8012eae:	fa42 f803 	asr.w	r8, r2, r3
 8012eb2:	f1b8 0f00 	cmp.w	r8, #0
 8012eb6:	dd41      	ble.n	8012f3c <__kernel_rem_pio2f+0x1c0>
 8012eb8:	9b01      	ldr	r3, [sp, #4]
 8012eba:	2000      	movs	r0, #0
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	9301      	str	r3, [sp, #4]
 8012ec0:	4601      	mov	r1, r0
 8012ec2:	4285      	cmp	r5, r0
 8012ec4:	dc6d      	bgt.n	8012fa2 <__kernel_rem_pio2f+0x226>
 8012ec6:	2c00      	cmp	r4, #0
 8012ec8:	dd04      	ble.n	8012ed4 <__kernel_rem_pio2f+0x158>
 8012eca:	2c01      	cmp	r4, #1
 8012ecc:	d07e      	beq.n	8012fcc <__kernel_rem_pio2f+0x250>
 8012ece:	2c02      	cmp	r4, #2
 8012ed0:	f000 8086 	beq.w	8012fe0 <__kernel_rem_pio2f+0x264>
 8012ed4:	f1b8 0f02 	cmp.w	r8, #2
 8012ed8:	d130      	bne.n	8012f3c <__kernel_rem_pio2f+0x1c0>
 8012eda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012ede:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012ee2:	b359      	cbz	r1, 8012f3c <__kernel_rem_pio2f+0x1c0>
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f000 fc83 	bl	80137f0 <scalbnf>
 8012eea:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012eee:	e025      	b.n	8012f3c <__kernel_rem_pio2f+0x1c0>
 8012ef0:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012ef4:	a806      	add	r0, sp, #24
 8012ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012efe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012f02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012f06:	ee10 1a10 	vmov	r1, s0
 8012f0a:	ed32 0a01 	vldmdb	r2!, {s0}
 8012f0e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8012f12:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012f16:	3301      	adds	r3, #1
 8012f18:	e79a      	b.n	8012e50 <__kernel_rem_pio2f+0xd4>
 8012f1a:	d106      	bne.n	8012f2a <__kernel_rem_pio2f+0x1ae>
 8012f1c:	1e6b      	subs	r3, r5, #1
 8012f1e:	aa06      	add	r2, sp, #24
 8012f20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012f24:	ea4f 2822 	mov.w	r8, r2, asr #8
 8012f28:	e7c3      	b.n	8012eb2 <__kernel_rem_pio2f+0x136>
 8012f2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f36:	da31      	bge.n	8012f9c <__kernel_rem_pio2f+0x220>
 8012f38:	f04f 0800 	mov.w	r8, #0
 8012f3c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f44:	f040 80a8 	bne.w	8013098 <__kernel_rem_pio2f+0x31c>
 8012f48:	1e6b      	subs	r3, r5, #1
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	4548      	cmp	r0, r9
 8012f50:	da4d      	bge.n	8012fee <__kernel_rem_pio2f+0x272>
 8012f52:	2a00      	cmp	r2, #0
 8012f54:	f000 8087 	beq.w	8013066 <__kernel_rem_pio2f+0x2ea>
 8012f58:	aa06      	add	r2, sp, #24
 8012f5a:	3c08      	subs	r4, #8
 8012f5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012f60:	2900      	cmp	r1, #0
 8012f62:	f000 808d 	beq.w	8013080 <__kernel_rem_pio2f+0x304>
 8012f66:	4620      	mov	r0, r4
 8012f68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012f6c:	9302      	str	r3, [sp, #8]
 8012f6e:	f000 fc3f 	bl	80137f0 <scalbnf>
 8012f72:	9b02      	ldr	r3, [sp, #8]
 8012f74:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013090 <__kernel_rem_pio2f+0x314>
 8012f78:	0099      	lsls	r1, r3, #2
 8012f7a:	aa42      	add	r2, sp, #264	; 0x108
 8012f7c:	1850      	adds	r0, r2, r1
 8012f7e:	1d05      	adds	r5, r0, #4
 8012f80:	461c      	mov	r4, r3
 8012f82:	2c00      	cmp	r4, #0
 8012f84:	f280 80b8 	bge.w	80130f8 <__kernel_rem_pio2f+0x37c>
 8012f88:	2500      	movs	r5, #0
 8012f8a:	1b5c      	subs	r4, r3, r5
 8012f8c:	2c00      	cmp	r4, #0
 8012f8e:	f2c0 80d8 	blt.w	8013142 <__kernel_rem_pio2f+0x3c6>
 8012f92:	4f3d      	ldr	r7, [pc, #244]	; (8013088 <__kernel_rem_pio2f+0x30c>)
 8012f94:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8013094 <__kernel_rem_pio2f+0x318>
 8012f98:	2400      	movs	r4, #0
 8012f9a:	e0c6      	b.n	801312a <__kernel_rem_pio2f+0x3ae>
 8012f9c:	f04f 0802 	mov.w	r8, #2
 8012fa0:	e78a      	b.n	8012eb8 <__kernel_rem_pio2f+0x13c>
 8012fa2:	ab06      	add	r3, sp, #24
 8012fa4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012fa8:	b949      	cbnz	r1, 8012fbe <__kernel_rem_pio2f+0x242>
 8012faa:	b12b      	cbz	r3, 8012fb8 <__kernel_rem_pio2f+0x23c>
 8012fac:	aa06      	add	r2, sp, #24
 8012fae:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8012fb2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	3001      	adds	r0, #1
 8012fba:	4619      	mov	r1, r3
 8012fbc:	e781      	b.n	8012ec2 <__kernel_rem_pio2f+0x146>
 8012fbe:	aa06      	add	r2, sp, #24
 8012fc0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012fc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8012fc8:	460b      	mov	r3, r1
 8012fca:	e7f5      	b.n	8012fb8 <__kernel_rem_pio2f+0x23c>
 8012fcc:	1e68      	subs	r0, r5, #1
 8012fce:	ab06      	add	r3, sp, #24
 8012fd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fd8:	aa06      	add	r2, sp, #24
 8012fda:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8012fde:	e779      	b.n	8012ed4 <__kernel_rem_pio2f+0x158>
 8012fe0:	1e68      	subs	r0, r5, #1
 8012fe2:	ab06      	add	r3, sp, #24
 8012fe4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fec:	e7f4      	b.n	8012fd8 <__kernel_rem_pio2f+0x25c>
 8012fee:	a906      	add	r1, sp, #24
 8012ff0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012ff4:	3801      	subs	r0, #1
 8012ff6:	430a      	orrs	r2, r1
 8012ff8:	e7a9      	b.n	8012f4e <__kernel_rem_pio2f+0x1d2>
 8012ffa:	f10c 0c01 	add.w	ip, ip, #1
 8012ffe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013002:	2a00      	cmp	r2, #0
 8013004:	d0f9      	beq.n	8012ffa <__kernel_rem_pio2f+0x27e>
 8013006:	eb0b 0305 	add.w	r3, fp, r5
 801300a:	aa1a      	add	r2, sp, #104	; 0x68
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	1898      	adds	r0, r3, r2
 8013010:	3004      	adds	r0, #4
 8013012:	1c69      	adds	r1, r5, #1
 8013014:	3704      	adds	r7, #4
 8013016:	2200      	movs	r2, #0
 8013018:	4465      	add	r5, ip
 801301a:	9005      	str	r0, [sp, #20]
 801301c:	428d      	cmp	r5, r1
 801301e:	f6ff af0a 	blt.w	8012e36 <__kernel_rem_pio2f+0xba>
 8013022:	a81a      	add	r0, sp, #104	; 0x68
 8013024:	eb02 0c03 	add.w	ip, r2, r3
 8013028:	4484      	add	ip, r0
 801302a:	9803      	ldr	r0, [sp, #12]
 801302c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013030:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8013034:	9001      	str	r0, [sp, #4]
 8013036:	ee07 0a90 	vmov	s15, r0
 801303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801303e:	9805      	ldr	r0, [sp, #20]
 8013040:	edcc 7a00 	vstr	s15, [ip]
 8013044:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013094 <__kernel_rem_pio2f+0x318>
 8013048:	eb00 0802 	add.w	r8, r0, r2
 801304c:	f04f 0c00 	mov.w	ip, #0
 8013050:	45d4      	cmp	ip, sl
 8013052:	dd0c      	ble.n	801306e <__kernel_rem_pio2f+0x2f2>
 8013054:	eb02 0c07 	add.w	ip, r2, r7
 8013058:	a842      	add	r0, sp, #264	; 0x108
 801305a:	4484      	add	ip, r0
 801305c:	edcc 7a01 	vstr	s15, [ip, #4]
 8013060:	3101      	adds	r1, #1
 8013062:	3204      	adds	r2, #4
 8013064:	e7da      	b.n	801301c <__kernel_rem_pio2f+0x2a0>
 8013066:	9b04      	ldr	r3, [sp, #16]
 8013068:	f04f 0c01 	mov.w	ip, #1
 801306c:	e7c7      	b.n	8012ffe <__kernel_rem_pio2f+0x282>
 801306e:	ecfe 6a01 	vldmia	lr!, {s13}
 8013072:	ed38 7a01 	vldmdb	r8!, {s14}
 8013076:	f10c 0c01 	add.w	ip, ip, #1
 801307a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801307e:	e7e7      	b.n	8013050 <__kernel_rem_pio2f+0x2d4>
 8013080:	3b01      	subs	r3, #1
 8013082:	e769      	b.n	8012f58 <__kernel_rem_pio2f+0x1dc>
 8013084:	08015934 	.word	0x08015934
 8013088:	08015908 	.word	0x08015908
 801308c:	43800000 	.word	0x43800000
 8013090:	3b800000 	.word	0x3b800000
 8013094:	00000000 	.word	0x00000000
 8013098:	4260      	negs	r0, r4
 801309a:	eeb0 0a48 	vmov.f32	s0, s16
 801309e:	f000 fba7 	bl	80137f0 <scalbnf>
 80130a2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 801308c <__kernel_rem_pio2f+0x310>
 80130a6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80130aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ae:	db1a      	blt.n	80130e6 <__kernel_rem_pio2f+0x36a>
 80130b0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013090 <__kernel_rem_pio2f+0x314>
 80130b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80130b8:	aa06      	add	r2, sp, #24
 80130ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130be:	a906      	add	r1, sp, #24
 80130c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130c4:	3408      	adds	r4, #8
 80130c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80130ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80130d2:	ee10 3a10 	vmov	r3, s0
 80130d6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80130da:	1c6b      	adds	r3, r5, #1
 80130dc:	ee17 2a90 	vmov	r2, s15
 80130e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80130e4:	e73f      	b.n	8012f66 <__kernel_rem_pio2f+0x1ea>
 80130e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80130ea:	aa06      	add	r2, sp, #24
 80130ec:	ee10 3a10 	vmov	r3, s0
 80130f0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80130f4:	462b      	mov	r3, r5
 80130f6:	e736      	b.n	8012f66 <__kernel_rem_pio2f+0x1ea>
 80130f8:	aa06      	add	r2, sp, #24
 80130fa:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80130fe:	9202      	str	r2, [sp, #8]
 8013100:	ee07 2a90 	vmov	s15, r2
 8013104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013108:	3c01      	subs	r4, #1
 801310a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801310e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013112:	ed65 7a01 	vstmdb	r5!, {s15}
 8013116:	e734      	b.n	8012f82 <__kernel_rem_pio2f+0x206>
 8013118:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801311c:	ecf7 6a01 	vldmia	r7!, {s13}
 8013120:	ed9c 7a00 	vldr	s14, [ip]
 8013124:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013128:	3401      	adds	r4, #1
 801312a:	454c      	cmp	r4, r9
 801312c:	dc01      	bgt.n	8013132 <__kernel_rem_pio2f+0x3b6>
 801312e:	42a5      	cmp	r5, r4
 8013130:	daf2      	bge.n	8013118 <__kernel_rem_pio2f+0x39c>
 8013132:	aa56      	add	r2, sp, #344	; 0x158
 8013134:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8013138:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 801313c:	3501      	adds	r5, #1
 801313e:	3804      	subs	r0, #4
 8013140:	e723      	b.n	8012f8a <__kernel_rem_pio2f+0x20e>
 8013142:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013144:	2a03      	cmp	r2, #3
 8013146:	d84d      	bhi.n	80131e4 <__kernel_rem_pio2f+0x468>
 8013148:	e8df f002 	tbb	[pc, r2]
 801314c:	021f1f3e 	.word	0x021f1f3e
 8013150:	aa56      	add	r2, sp, #344	; 0x158
 8013152:	4411      	add	r1, r2
 8013154:	399c      	subs	r1, #156	; 0x9c
 8013156:	4608      	mov	r0, r1
 8013158:	461c      	mov	r4, r3
 801315a:	2c00      	cmp	r4, #0
 801315c:	dc5f      	bgt.n	801321e <__kernel_rem_pio2f+0x4a2>
 801315e:	4608      	mov	r0, r1
 8013160:	461c      	mov	r4, r3
 8013162:	2c01      	cmp	r4, #1
 8013164:	dc6b      	bgt.n	801323e <__kernel_rem_pio2f+0x4c2>
 8013166:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8013094 <__kernel_rem_pio2f+0x318>
 801316a:	2b01      	cmp	r3, #1
 801316c:	dc77      	bgt.n	801325e <__kernel_rem_pio2f+0x4e2>
 801316e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8013172:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8013176:	f1b8 0f00 	cmp.w	r8, #0
 801317a:	d176      	bne.n	801326a <__kernel_rem_pio2f+0x4ee>
 801317c:	edc6 6a00 	vstr	s13, [r6]
 8013180:	ed86 7a01 	vstr	s14, [r6, #4]
 8013184:	edc6 7a02 	vstr	s15, [r6, #8]
 8013188:	e02c      	b.n	80131e4 <__kernel_rem_pio2f+0x468>
 801318a:	aa56      	add	r2, sp, #344	; 0x158
 801318c:	4411      	add	r1, r2
 801318e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8013094 <__kernel_rem_pio2f+0x318>
 8013192:	399c      	subs	r1, #156	; 0x9c
 8013194:	4618      	mov	r0, r3
 8013196:	2800      	cmp	r0, #0
 8013198:	da32      	bge.n	8013200 <__kernel_rem_pio2f+0x484>
 801319a:	f1b8 0f00 	cmp.w	r8, #0
 801319e:	d035      	beq.n	801320c <__kernel_rem_pio2f+0x490>
 80131a0:	eef1 7a47 	vneg.f32	s15, s14
 80131a4:	edc6 7a00 	vstr	s15, [r6]
 80131a8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80131ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131b0:	a82f      	add	r0, sp, #188	; 0xbc
 80131b2:	2101      	movs	r1, #1
 80131b4:	428b      	cmp	r3, r1
 80131b6:	da2c      	bge.n	8013212 <__kernel_rem_pio2f+0x496>
 80131b8:	f1b8 0f00 	cmp.w	r8, #0
 80131bc:	d001      	beq.n	80131c2 <__kernel_rem_pio2f+0x446>
 80131be:	eef1 7a67 	vneg.f32	s15, s15
 80131c2:	edc6 7a01 	vstr	s15, [r6, #4]
 80131c6:	e00d      	b.n	80131e4 <__kernel_rem_pio2f+0x468>
 80131c8:	aa56      	add	r2, sp, #344	; 0x158
 80131ca:	4411      	add	r1, r2
 80131cc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8013094 <__kernel_rem_pio2f+0x318>
 80131d0:	399c      	subs	r1, #156	; 0x9c
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	da0e      	bge.n	80131f4 <__kernel_rem_pio2f+0x478>
 80131d6:	f1b8 0f00 	cmp.w	r8, #0
 80131da:	d001      	beq.n	80131e0 <__kernel_rem_pio2f+0x464>
 80131dc:	eef1 7a67 	vneg.f32	s15, s15
 80131e0:	edc6 7a00 	vstr	s15, [r6]
 80131e4:	9b01      	ldr	r3, [sp, #4]
 80131e6:	f003 0007 	and.w	r0, r3, #7
 80131ea:	b057      	add	sp, #348	; 0x15c
 80131ec:	ecbd 8b04 	vpop	{d8-d9}
 80131f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f4:	ed31 7a01 	vldmdb	r1!, {s14}
 80131f8:	3b01      	subs	r3, #1
 80131fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131fe:	e7e8      	b.n	80131d2 <__kernel_rem_pio2f+0x456>
 8013200:	ed71 7a01 	vldmdb	r1!, {s15}
 8013204:	3801      	subs	r0, #1
 8013206:	ee37 7a27 	vadd.f32	s14, s14, s15
 801320a:	e7c4      	b.n	8013196 <__kernel_rem_pio2f+0x41a>
 801320c:	eef0 7a47 	vmov.f32	s15, s14
 8013210:	e7c8      	b.n	80131a4 <__kernel_rem_pio2f+0x428>
 8013212:	ecb0 7a01 	vldmia	r0!, {s14}
 8013216:	3101      	adds	r1, #1
 8013218:	ee77 7a87 	vadd.f32	s15, s15, s14
 801321c:	e7ca      	b.n	80131b4 <__kernel_rem_pio2f+0x438>
 801321e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8013222:	ed70 6a01 	vldmdb	r0!, {s13}
 8013226:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801322a:	3c01      	subs	r4, #1
 801322c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013230:	ed00 7a01 	vstr	s14, [r0, #-4]
 8013234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013238:	edc0 7a00 	vstr	s15, [r0]
 801323c:	e78d      	b.n	801315a <__kernel_rem_pio2f+0x3de>
 801323e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8013242:	ed70 6a01 	vldmdb	r0!, {s13}
 8013246:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801324a:	3c01      	subs	r4, #1
 801324c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013250:	ed00 7a01 	vstr	s14, [r0, #-4]
 8013254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013258:	edc0 7a00 	vstr	s15, [r0]
 801325c:	e781      	b.n	8013162 <__kernel_rem_pio2f+0x3e6>
 801325e:	ed31 7a01 	vldmdb	r1!, {s14}
 8013262:	3b01      	subs	r3, #1
 8013264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013268:	e77f      	b.n	801316a <__kernel_rem_pio2f+0x3ee>
 801326a:	eef1 6a66 	vneg.f32	s13, s13
 801326e:	eeb1 7a47 	vneg.f32	s14, s14
 8013272:	edc6 6a00 	vstr	s13, [r6]
 8013276:	ed86 7a01 	vstr	s14, [r6, #4]
 801327a:	eef1 7a67 	vneg.f32	s15, s15
 801327e:	e781      	b.n	8013184 <__kernel_rem_pio2f+0x408>

08013280 <__kernel_sinf>:
 8013280:	ee10 3a10 	vmov	r3, s0
 8013284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013288:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801328c:	da04      	bge.n	8013298 <__kernel_sinf+0x18>
 801328e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013292:	ee17 3a90 	vmov	r3, s15
 8013296:	b35b      	cbz	r3, 80132f0 <__kernel_sinf+0x70>
 8013298:	ee20 7a00 	vmul.f32	s14, s0, s0
 801329c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80132f4 <__kernel_sinf+0x74>
 80132a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80132f8 <__kernel_sinf+0x78>
 80132a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80132a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 80132fc <__kernel_sinf+0x7c>
 80132ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80132b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013300 <__kernel_sinf+0x80>
 80132b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80132b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013304 <__kernel_sinf+0x84>
 80132bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80132c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80132c4:	b930      	cbnz	r0, 80132d4 <__kernel_sinf+0x54>
 80132c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013308 <__kernel_sinf+0x88>
 80132ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 80132ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 80132d2:	4770      	bx	lr
 80132d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80132d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80132dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80132e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80132e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 801330c <__kernel_sinf+0x8c>
 80132e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80132ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop
 80132f4:	2f2ec9d3 	.word	0x2f2ec9d3
 80132f8:	b2d72f34 	.word	0xb2d72f34
 80132fc:	3638ef1b 	.word	0x3638ef1b
 8013300:	b9500d01 	.word	0xb9500d01
 8013304:	3c088889 	.word	0x3c088889
 8013308:	be2aaaab 	.word	0xbe2aaaab
 801330c:	3e2aaaab 	.word	0x3e2aaaab

08013310 <__kernel_tanf>:
 8013310:	b508      	push	{r3, lr}
 8013312:	ee10 3a10 	vmov	r3, s0
 8013316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801331a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801331e:	eef0 7a40 	vmov.f32	s15, s0
 8013322:	da17      	bge.n	8013354 <__kernel_tanf+0x44>
 8013324:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013328:	ee17 1a10 	vmov	r1, s14
 801332c:	bb41      	cbnz	r1, 8013380 <__kernel_tanf+0x70>
 801332e:	1c43      	adds	r3, r0, #1
 8013330:	4313      	orrs	r3, r2
 8013332:	d108      	bne.n	8013346 <__kernel_tanf+0x36>
 8013334:	f7fe f948 	bl	80115c8 <fabsf>
 8013338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801333c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013340:	eeb0 0a67 	vmov.f32	s0, s15
 8013344:	bd08      	pop	{r3, pc}
 8013346:	2801      	cmp	r0, #1
 8013348:	d0fa      	beq.n	8013340 <__kernel_tanf+0x30>
 801334a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801334e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013352:	e7f5      	b.n	8013340 <__kernel_tanf+0x30>
 8013354:	494e      	ldr	r1, [pc, #312]	; (8013490 <__kernel_tanf+0x180>)
 8013356:	428a      	cmp	r2, r1
 8013358:	dd12      	ble.n	8013380 <__kernel_tanf+0x70>
 801335a:	2b00      	cmp	r3, #0
 801335c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013494 <__kernel_tanf+0x184>
 8013360:	bfb8      	it	lt
 8013362:	eef1 7a40 	vneglt.f32	s15, s0
 8013366:	ee77 7a67 	vsub.f32	s15, s14, s15
 801336a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013498 <__kernel_tanf+0x188>
 801336e:	bfb8      	it	lt
 8013370:	eef1 0a60 	vneglt.f32	s1, s1
 8013374:	ee77 0a60 	vsub.f32	s1, s14, s1
 8013378:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801337c:	eddf 0a47 	vldr	s1, [pc, #284]	; 801349c <__kernel_tanf+0x18c>
 8013380:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80134a0 <__kernel_tanf+0x190>
 8013384:	eddf 5a47 	vldr	s11, [pc, #284]	; 80134a4 <__kernel_tanf+0x194>
 8013388:	ed9f 5a47 	vldr	s10, [pc, #284]	; 80134a8 <__kernel_tanf+0x198>
 801338c:	4940      	ldr	r1, [pc, #256]	; (8013490 <__kernel_tanf+0x180>)
 801338e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013392:	428a      	cmp	r2, r1
 8013394:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013398:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801339c:	eee7 5a06 	vfma.f32	s11, s14, s12
 80133a0:	ed9f 6a42 	vldr	s12, [pc, #264]	; 80134ac <__kernel_tanf+0x19c>
 80133a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80133a8:	eddf 5a41 	vldr	s11, [pc, #260]	; 80134b0 <__kernel_tanf+0x1a0>
 80133ac:	eee6 5a07 	vfma.f32	s11, s12, s14
 80133b0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80134b4 <__kernel_tanf+0x1a4>
 80133b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80133b8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80134b8 <__kernel_tanf+0x1a8>
 80133bc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80133c0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80134bc <__kernel_tanf+0x1ac>
 80133c4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80133c8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80134c0 <__kernel_tanf+0x1b0>
 80133cc:	eea6 5a07 	vfma.f32	s10, s12, s14
 80133d0:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 80134c4 <__kernel_tanf+0x1b4>
 80133d4:	eea5 6a07 	vfma.f32	s12, s10, s14
 80133d8:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80134c8 <__kernel_tanf+0x1b8>
 80133dc:	eea6 5a07 	vfma.f32	s10, s12, s14
 80133e0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80134cc <__kernel_tanf+0x1bc>
 80133e4:	eea5 6a07 	vfma.f32	s12, s10, s14
 80133e8:	eeb0 7a46 	vmov.f32	s14, s12
 80133ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80133f0:	eeb0 6a60 	vmov.f32	s12, s1
 80133f4:	eea7 6a24 	vfma.f32	s12, s14, s9
 80133f8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80134d0 <__kernel_tanf+0x1c0>
 80133fc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8013400:	eee4 0a87 	vfma.f32	s1, s9, s14
 8013404:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8013408:	dd1d      	ble.n	8013446 <__kernel_tanf+0x136>
 801340a:	ee07 0a10 	vmov	s14, r0
 801340e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013412:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8013416:	ee76 6a87 	vadd.f32	s13, s13, s14
 801341a:	179b      	asrs	r3, r3, #30
 801341c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8013420:	f003 0302 	and.w	r3, r3, #2
 8013424:	f1c3 0301 	rsb	r3, r3, #1
 8013428:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801342c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8013430:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013434:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013438:	ee07 3a90 	vmov	s15, r3
 801343c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013444:	e77c      	b.n	8013340 <__kernel_tanf+0x30>
 8013446:	2801      	cmp	r0, #1
 8013448:	d01f      	beq.n	801348a <__kernel_tanf+0x17a>
 801344a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801344e:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8013452:	4b20      	ldr	r3, [pc, #128]	; (80134d4 <__kernel_tanf+0x1c4>)
 8013454:	ee16 2a90 	vmov	r2, s13
 8013458:	401a      	ands	r2, r3
 801345a:	ee06 2a10 	vmov	s12, r2
 801345e:	ee15 2a90 	vmov	r2, s11
 8013462:	4013      	ands	r3, r2
 8013464:	ee07 3a10 	vmov	s14, r3
 8013468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801346c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013470:	ee76 7a67 	vsub.f32	s15, s12, s15
 8013474:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013478:	eef0 7a66 	vmov.f32	s15, s13
 801347c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8013480:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013484:	eef0 7a47 	vmov.f32	s15, s14
 8013488:	e75a      	b.n	8013340 <__kernel_tanf+0x30>
 801348a:	eef0 7a66 	vmov.f32	s15, s13
 801348e:	e757      	b.n	8013340 <__kernel_tanf+0x30>
 8013490:	3f2ca13f 	.word	0x3f2ca13f
 8013494:	3f490fda 	.word	0x3f490fda
 8013498:	33222168 	.word	0x33222168
 801349c:	00000000 	.word	0x00000000
 80134a0:	37d95384 	.word	0x37d95384
 80134a4:	3895c07a 	.word	0x3895c07a
 80134a8:	b79bae5f 	.word	0xb79bae5f
 80134ac:	398137b9 	.word	0x398137b9
 80134b0:	3abede48 	.word	0x3abede48
 80134b4:	3c11371f 	.word	0x3c11371f
 80134b8:	3d5d0dd1 	.word	0x3d5d0dd1
 80134bc:	38a3f445 	.word	0x38a3f445
 80134c0:	3a1a26c8 	.word	0x3a1a26c8
 80134c4:	3b6b6916 	.word	0x3b6b6916
 80134c8:	3cb327a4 	.word	0x3cb327a4
 80134cc:	3e088889 	.word	0x3e088889
 80134d0:	3eaaaaab 	.word	0x3eaaaaab
 80134d4:	fffff000 	.word	0xfffff000

080134d8 <with_errnof>:
 80134d8:	b510      	push	{r4, lr}
 80134da:	ed2d 8b02 	vpush	{d8}
 80134de:	eeb0 8a40 	vmov.f32	s16, s0
 80134e2:	4604      	mov	r4, r0
 80134e4:	f7fc fc22 	bl	800fd2c <__errno>
 80134e8:	eeb0 0a48 	vmov.f32	s0, s16
 80134ec:	ecbd 8b02 	vpop	{d8}
 80134f0:	6004      	str	r4, [r0, #0]
 80134f2:	bd10      	pop	{r4, pc}

080134f4 <xflowf>:
 80134f4:	b130      	cbz	r0, 8013504 <xflowf+0x10>
 80134f6:	eef1 7a40 	vneg.f32	s15, s0
 80134fa:	2022      	movs	r0, #34	; 0x22
 80134fc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013500:	f7ff bfea 	b.w	80134d8 <with_errnof>
 8013504:	eef0 7a40 	vmov.f32	s15, s0
 8013508:	e7f7      	b.n	80134fa <xflowf+0x6>
	...

0801350c <__math_uflowf>:
 801350c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013514 <__math_uflowf+0x8>
 8013510:	f7ff bff0 	b.w	80134f4 <xflowf>
 8013514:	10000000 	.word	0x10000000

08013518 <__math_may_uflowf>:
 8013518:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013520 <__math_may_uflowf+0x8>
 801351c:	f7ff bfea 	b.w	80134f4 <xflowf>
 8013520:	1a200000 	.word	0x1a200000

08013524 <__math_oflowf>:
 8013524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801352c <__math_oflowf+0x8>
 8013528:	f7ff bfe4 	b.w	80134f4 <xflowf>
 801352c:	70000000 	.word	0x70000000

08013530 <__math_divzerof>:
 8013530:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013534:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013538:	2800      	cmp	r0, #0
 801353a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801353e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801354c <__math_divzerof+0x1c>
 8013542:	2022      	movs	r0, #34	; 0x22
 8013544:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013548:	f7ff bfc6 	b.w	80134d8 <with_errnof>
 801354c:	00000000 	.word	0x00000000

08013550 <__math_invalidf>:
 8013550:	eef0 7a40 	vmov.f32	s15, s0
 8013554:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013558:	eef4 7a67 	vcmp.f32	s15, s15
 801355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013560:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8013564:	d602      	bvs.n	801356c <__math_invalidf+0x1c>
 8013566:	2021      	movs	r0, #33	; 0x21
 8013568:	f7ff bfb6 	b.w	80134d8 <with_errnof>
 801356c:	4770      	bx	lr

0801356e <matherr>:
 801356e:	2000      	movs	r0, #0
 8013570:	4770      	bx	lr
 8013572:	0000      	movs	r0, r0
 8013574:	0000      	movs	r0, r0
	...

08013578 <nan>:
 8013578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013580 <nan+0x8>
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	00000000 	.word	0x00000000
 8013584:	7ff80000 	.word	0x7ff80000

08013588 <expm1f>:
 8013588:	ee10 2a10 	vmov	r2, s0
 801358c:	4984      	ldr	r1, [pc, #528]	; (80137a0 <expm1f+0x218>)
 801358e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013592:	428b      	cmp	r3, r1
 8013594:	d923      	bls.n	80135de <expm1f+0x56>
 8013596:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801359a:	d902      	bls.n	80135a2 <expm1f+0x1a>
 801359c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80135a0:	4770      	bx	lr
 80135a2:	d105      	bne.n	80135b0 <expm1f+0x28>
 80135a4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80135a8:	2a00      	cmp	r2, #0
 80135aa:	fe20 0a27 	vselge.f32	s0, s0, s15
 80135ae:	4770      	bx	lr
 80135b0:	2a00      	cmp	r2, #0
 80135b2:	db08      	blt.n	80135c6 <expm1f+0x3e>
 80135b4:	4a7b      	ldr	r2, [pc, #492]	; (80137a4 <expm1f+0x21c>)
 80135b6:	4293      	cmp	r3, r2
 80135b8:	f240 80ea 	bls.w	8013790 <expm1f+0x208>
 80135bc:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80137a8 <expm1f+0x220>
 80135c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80135c4:	4770      	bx	lr
 80135c6:	eddf 7a79 	vldr	s15, [pc, #484]	; 80137ac <expm1f+0x224>
 80135ca:	ee70 7a27 	vadd.f32	s15, s0, s15
 80135ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80135d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d6:	d554      	bpl.n	8013682 <expm1f+0xfa>
 80135d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80135dc:	4770      	bx	lr
 80135de:	4974      	ldr	r1, [pc, #464]	; (80137b0 <expm1f+0x228>)
 80135e0:	428b      	cmp	r3, r1
 80135e2:	d96c      	bls.n	80136be <expm1f+0x136>
 80135e4:	4973      	ldr	r1, [pc, #460]	; (80137b4 <expm1f+0x22c>)
 80135e6:	428b      	cmp	r3, r1
 80135e8:	d84b      	bhi.n	8013682 <expm1f+0xfa>
 80135ea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80137b8 <expm1f+0x230>
 80135ee:	2a00      	cmp	r2, #0
 80135f0:	bfa7      	ittee	ge
 80135f2:	ee30 7a47 	vsubge.f32	s14, s0, s14
 80135f6:	eddf 7a71 	vldrge	s15, [pc, #452]	; 80137bc <expm1f+0x234>
 80135fa:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 80137c0 <expm1f+0x238>
 80135fe:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8013602:	bfac      	ite	ge
 8013604:	2301      	movge	r3, #1
 8013606:	f04f 33ff 	movlt.w	r3, #4294967295
 801360a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801360e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013616:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801361a:	ee20 5a25 	vmul.f32	s10, s0, s11
 801361e:	eddf 6a69 	vldr	s13, [pc, #420]	; 80137c4 <expm1f+0x23c>
 8013622:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80137c8 <expm1f+0x240>
 8013626:	ee20 7a05 	vmul.f32	s14, s0, s10
 801362a:	eea7 6a26 	vfma.f32	s12, s14, s13
 801362e:	eddf 6a67 	vldr	s13, [pc, #412]	; 80137cc <expm1f+0x244>
 8013632:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013636:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80137d0 <expm1f+0x248>
 801363a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801363e:	eddf 6a65 	vldr	s13, [pc, #404]	; 80137d4 <expm1f+0x24c>
 8013642:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013646:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801364a:	eef0 4a46 	vmov.f32	s9, s12
 801364e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013652:	eef0 6a64 	vmov.f32	s13, s9
 8013656:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801365a:	eee5 4a66 	vfms.f32	s9, s10, s13
 801365e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8013662:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8013666:	eee0 6a64 	vfms.f32	s13, s0, s9
 801366a:	eef0 4a66 	vmov.f32	s9, s13
 801366e:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8013672:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013676:	bb83      	cbnz	r3, 80136da <expm1f+0x152>
 8013678:	eef0 7a47 	vmov.f32	s15, s14
 801367c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8013680:	e026      	b.n	80136d0 <expm1f+0x148>
 8013682:	eddf 7a55 	vldr	s15, [pc, #340]	; 80137d8 <expm1f+0x250>
 8013686:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801368a:	ee20 7a27 	vmul.f32	s14, s0, s15
 801368e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013692:	2a00      	cmp	r2, #0
 8013694:	fe66 7aa7 	vselge.f32	s15, s13, s15
 8013698:	ee77 7a87 	vadd.f32	s15, s15, s14
 801369c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80137b8 <expm1f+0x230>
 80136a0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80137bc <expm1f+0x234>
 80136a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136a8:	ee17 3a90 	vmov	r3, s15
 80136ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80136b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80136b8:	eeb0 7a40 	vmov.f32	s14, s0
 80136bc:	e7a5      	b.n	801360a <expm1f+0x82>
 80136be:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80136c2:	d208      	bcs.n	80136d6 <expm1f+0x14e>
 80136c4:	eddf 7a38 	vldr	s15, [pc, #224]	; 80137a8 <expm1f+0x220>
 80136c8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80136cc:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80136d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136d4:	4770      	bx	lr
 80136d6:	2300      	movs	r3, #0
 80136d8:	e79d      	b.n	8013616 <expm1f+0x8e>
 80136da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80136de:	1c5a      	adds	r2, r3, #1
 80136e0:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80136e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136e8:	d106      	bne.n	80136f8 <expm1f+0x170>
 80136ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 80136ee:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80136f2:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80136f6:	4770      	bx	lr
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d118      	bne.n	801372e <expm1f+0x1a6>
 80136fc:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8013700:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013708:	bf41      	itttt	mi
 801370a:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801370e:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8013712:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8013716:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 801371a:	bf5f      	itttt	pl
 801371c:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8013720:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8013724:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8013728:	eeb0 0a46 	vmovpl.f32	s0, s12
 801372c:	4770      	bx	lr
 801372e:	1c5a      	adds	r2, r3, #1
 8013730:	2a39      	cmp	r2, #57	; 0x39
 8013732:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8013736:	d90b      	bls.n	8013750 <expm1f+0x1c8>
 8013738:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801373c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013740:	ee10 3a10 	vmov	r3, s0
 8013744:	440b      	add	r3, r1
 8013746:	ee00 3a10 	vmov	s0, r3
 801374a:	ee30 0a46 	vsub.f32	s0, s0, s12
 801374e:	4770      	bx	lr
 8013750:	2b16      	cmp	r3, #22
 8013752:	dc11      	bgt.n	8013778 <expm1f+0x1f0>
 8013754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013758:	fa42 f303 	asr.w	r3, r2, r3
 801375c:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8013760:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013764:	ee07 3a90 	vmov	s15, r3
 8013768:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801376c:	ee10 3a10 	vmov	r3, s0
 8013770:	440b      	add	r3, r1
 8013772:	ee00 3a10 	vmov	s0, r3
 8013776:	4770      	bx	lr
 8013778:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801377c:	05db      	lsls	r3, r3, #23
 801377e:	ee07 3a10 	vmov	s14, r3
 8013782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013786:	ee30 0a67 	vsub.f32	s0, s0, s15
 801378a:	ee30 0a06 	vadd.f32	s0, s0, s12
 801378e:	e7ed      	b.n	801376c <expm1f+0x1e4>
 8013790:	eddf 7a11 	vldr	s15, [pc, #68]	; 80137d8 <expm1f+0x250>
 8013794:	ee20 7a27 	vmul.f32	s14, s0, s15
 8013798:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801379c:	e77c      	b.n	8013698 <expm1f+0x110>
 801379e:	bf00      	nop
 80137a0:	4195b843 	.word	0x4195b843
 80137a4:	42b17217 	.word	0x42b17217
 80137a8:	7149f2ca 	.word	0x7149f2ca
 80137ac:	0da24260 	.word	0x0da24260
 80137b0:	3eb17218 	.word	0x3eb17218
 80137b4:	3f851591 	.word	0x3f851591
 80137b8:	3f317180 	.word	0x3f317180
 80137bc:	3717f7d1 	.word	0x3717f7d1
 80137c0:	b717f7d1 	.word	0xb717f7d1
 80137c4:	b457edbb 	.word	0xb457edbb
 80137c8:	36867e54 	.word	0x36867e54
 80137cc:	b8a670cd 	.word	0xb8a670cd
 80137d0:	3ad00d01 	.word	0x3ad00d01
 80137d4:	bd088889 	.word	0xbd088889
 80137d8:	3fb8aa3b 	.word	0x3fb8aa3b

080137dc <finitef>:
 80137dc:	ee10 3a10 	vmov	r3, s0
 80137e0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80137e4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80137e8:	bfac      	ite	ge
 80137ea:	2000      	movge	r0, #0
 80137ec:	2001      	movlt	r0, #1
 80137ee:	4770      	bx	lr

080137f0 <scalbnf>:
 80137f0:	b508      	push	{r3, lr}
 80137f2:	ee10 2a10 	vmov	r2, s0
 80137f6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80137fa:	ed2d 8b02 	vpush	{d8}
 80137fe:	eef0 0a40 	vmov.f32	s1, s0
 8013802:	d004      	beq.n	801380e <scalbnf+0x1e>
 8013804:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013808:	d306      	bcc.n	8013818 <scalbnf+0x28>
 801380a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801380e:	ecbd 8b02 	vpop	{d8}
 8013812:	eeb0 0a60 	vmov.f32	s0, s1
 8013816:	bd08      	pop	{r3, pc}
 8013818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801381c:	d21c      	bcs.n	8013858 <scalbnf+0x68>
 801381e:	4b1f      	ldr	r3, [pc, #124]	; (801389c <scalbnf+0xac>)
 8013820:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80138a0 <scalbnf+0xb0>
 8013824:	4298      	cmp	r0, r3
 8013826:	ee60 0a27 	vmul.f32	s1, s0, s15
 801382a:	db10      	blt.n	801384e <scalbnf+0x5e>
 801382c:	ee10 2a90 	vmov	r2, s1
 8013830:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8013834:	3b19      	subs	r3, #25
 8013836:	4403      	add	r3, r0
 8013838:	2bfe      	cmp	r3, #254	; 0xfe
 801383a:	dd0f      	ble.n	801385c <scalbnf+0x6c>
 801383c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80138a4 <scalbnf+0xb4>
 8013840:	eeb0 0a48 	vmov.f32	s0, s16
 8013844:	f000 f834 	bl	80138b0 <copysignf>
 8013848:	ee60 0a08 	vmul.f32	s1, s0, s16
 801384c:	e7df      	b.n	801380e <scalbnf+0x1e>
 801384e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80138a8 <scalbnf+0xb8>
 8013852:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013856:	e7da      	b.n	801380e <scalbnf+0x1e>
 8013858:	0ddb      	lsrs	r3, r3, #23
 801385a:	e7ec      	b.n	8013836 <scalbnf+0x46>
 801385c:	2b00      	cmp	r3, #0
 801385e:	dd06      	ble.n	801386e <scalbnf+0x7e>
 8013860:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8013864:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013868:	ee00 3a90 	vmov	s1, r3
 801386c:	e7cf      	b.n	801380e <scalbnf+0x1e>
 801386e:	f113 0f16 	cmn.w	r3, #22
 8013872:	da06      	bge.n	8013882 <scalbnf+0x92>
 8013874:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013878:	4298      	cmp	r0, r3
 801387a:	dcdf      	bgt.n	801383c <scalbnf+0x4c>
 801387c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80138a8 <scalbnf+0xb8>
 8013880:	e7de      	b.n	8013840 <scalbnf+0x50>
 8013882:	3319      	adds	r3, #25
 8013884:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8013888:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801388c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80138ac <scalbnf+0xbc>
 8013890:	ee07 3a10 	vmov	s14, r3
 8013894:	ee67 0a27 	vmul.f32	s1, s14, s15
 8013898:	e7b9      	b.n	801380e <scalbnf+0x1e>
 801389a:	bf00      	nop
 801389c:	ffff3cb0 	.word	0xffff3cb0
 80138a0:	4c000000 	.word	0x4c000000
 80138a4:	7149f2ca 	.word	0x7149f2ca
 80138a8:	0da24260 	.word	0x0da24260
 80138ac:	33000000 	.word	0x33000000

080138b0 <copysignf>:
 80138b0:	ee10 3a10 	vmov	r3, s0
 80138b4:	ee10 2a90 	vmov	r2, s1
 80138b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80138bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80138c0:	4313      	orrs	r3, r2
 80138c2:	ee00 3a10 	vmov	s0, r3
 80138c6:	4770      	bx	lr

080138c8 <_init>:
 80138c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ca:	bf00      	nop
 80138cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138ce:	bc08      	pop	{r3}
 80138d0:	469e      	mov	lr, r3
 80138d2:	4770      	bx	lr

080138d4 <_fini>:
 80138d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138d6:	bf00      	nop
 80138d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138da:	bc08      	pop	{r3}
 80138dc:	469e      	mov	lr, r3
 80138de:	4770      	bx	lr
